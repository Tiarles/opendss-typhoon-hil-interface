library "OpenDSS" {
    configuration {
        hil_device = "HIL604"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = auto
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        excluded_resource_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
    }

    component Subsystem Root {

        component Category Auxiliary {
            layout = dynamic
            visible = "dev"
            component Subsystem CIL {
                layout = static
                component "core/Resistor" Ra {
                    resistance = "Ra"
                }
                [
                    position = 8112, 8120
                    rotation = right
                ]

                component "core/Resistor" Rb {
                    resistance = "Rb"
                }
                [
                    position = 8192, 8128
                    rotation = right
                ]

                component "core/Resistor" Rc {
                    resistance = "Rc"
                }
                [
                    position = 8272, 8128
                    rotation = right
                ]

                component "core/Capacitor" Ca {
                    capacitance = "Ca"
                }
                [
                    position = 8112, 8232
                    rotation = right
                ]

                component "core/Capacitor" Cb {
                    capacitance = "Cb"
                }
                [
                    position = 8192, 8232
                    rotation = right
                ]

                component "core/Capacitor" Cc {
                    capacitance = "Cc"
                }
                [
                    position = 8272, 8232
                    rotation = right
                ]

                port A1 {
                    position = -30, -30
                    kind = pe
                    direction =  in
                }
                [
                    position = 8112, 8024
                    rotation = right
                ]

                port B1 {
                    position = 0.0, -30.0
                    kind = pe
                    direction =  in
                }
                [
                    position = 8192, 8024
                    rotation = right
                ]

                port C1 {
                    position = 30.0, -30.0
                    kind = pe
                    direction =  in
                }
                [
                    position = 8272, 8024
                    rotation = right
                ]

                port N {
                    position = 0.0, 30.0
                    kind = pe
                    direction =  in
                }
                [
                    position = 8192, 8376
                    rotation = left
                ]

                junction JA0 pe
                [
                    position = 8112, 8072
                ]

                junction JA1 pe
                [
                    position = 8112, 8280
                ]

                junction JB0 pe
                [
                    position = 8192, 8072
                ]

                junction JB1 pe
                [
                    position = 8192, 8280
                ]

                junction JC0 pe
                [
                    position = 8272, 8072
                ]

                junction JC1 pe
                [
                    position = 8272, 8280
                ]

                junction JN pe
                [
                    position = 8192, 8328
                ]

                connect Ra.p_node JA0 as Connection17
                connect JA0 A1 as ConnAA0
                connect JB0 B1 as ConnBB0
                connect Rb.p_node JB0 as Conn19
                connect JC0 C1 as ConnCC0
                connect Rc.p_node JC0 as Conn21
                connect JA1 JN as Conn_AN
                connect JB1 JN as Conn_BN
                connect JC1 JN as Conn_CN
                connect JN N as Conn_N
                connect Ra.n_node Ca.p_node as Conn_A0
                connect Rb.n_node Cb.p_node as Conn_B0
                connect Rc.n_node Cc.p_node as Conn_C0
                connect Ca.n_node JA1 as Conn_A
                connect Cb.n_node JB1 as Conn_B
                connect Cc.n_node JC1 as Conn_C

                SAB = "Sn_3ph*1000/3"
                SAn = "Sn_3ph*1000/3"
                SBC = "Sn_3ph*1000/3"
                SBn = "Sn_3ph*1000/3"
                SCA = "Sn_3ph*1000/3"
                SCn = "Sn_3ph*1000/3"
                VAB = "Vn_3ph_CPL*1000"
                VAn = "Vn_3ph_CPL*1000/(3**0.5)"
                VBC = "Vn_3ph_CPL*1000"
                VBn = "Vn_3ph_CPL*1000/(3**0.5)"
                VCA = "Vn_3ph_CPL*1000"
                VCn = "Vn_3ph_CPL*1000/(3**0.5)"
                pfA = "pf_3ph_set"
                pfB = "pf_3ph_set"
                pfC = "pf_3ph_set"
                pf_modeA = "Lead"
                pf_modeB = "Lead"
                pf_modeC = "Lead"
                pf_mode_3ph = "Lead"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A three-phase balanced or unbalanced constant impedance load. The impedance is set in series. The combinations possible for each phase individually are R, RL and RC.</p></body></html>"
                    help_file = "constant_impedance_load.html"

                    fn {
                        label = "Nominal frequency"
                        widget = edit
                        type = generic
                        default_value = "fn"
                        unit = "Hz"
                        group = "General:1"
                    }

                    conn_type {
                        label = "Connection type"
                        widget = combo
                        combo_values = "Y", "Δ"
                        type = string
                        default_value = "Y"
                        group = "General"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT

                            comp_script = return_comp_script(mdl, container_handle)

                            comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            mdl.refresh_icon(container_handle)

                            if new_value == "Δ":
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)

                                connAB = mdl.get_item("Conn_AB", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connAB:
                                    mdl.create_connection(junA1, junB0, name="Conn_AB")
                                connBC = mdl.get_item("Conn_BC", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connBC:
                                    mdl.create_connection(junB1, junC0, name="Conn_BC")
                                connCA = mdl.get_item("Conn_CA", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connCA:
                                    mdl.create_connection(junC1, junA0, name="Conn_CA")

                                if junN:
                                    mdl.delete_item(junN)

                                portN = mdl.get_item("N", parent=comp_handle, item_type=ITEM_PORT)
                                if portN:
                                    mdl.delete_item(portN)

                            else:
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)

                                if not junN:
                                    junN = mdl.create_junction(name='JN', parent=comp_handle, kind='pe',
                                                               position=(8192, 8328))

                                connAN = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connAN:
                                    mdl.create_connection(junA1, junN, name="Conn_AN")
                                connBN = mdl.get_item("Conn_BN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connBN:
                                    mdl.create_connection(junB1, junN, name="Conn_BN")
                                connCN = mdl.get_item("Conn_CN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connCN:
                                    mdl.create_connection(junC1, junN, name="Conn_CN")

                                connAB = mdl.get_item("Conn_AB", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if connAB:
                                    mdl.delete_item(connAB)
                                connBC = mdl.get_item("Conn_BC", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if connBC:
                                    mdl.delete_item(connBC)
                                connCA = mdl.get_item("Conn_CA", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if connCA:
                                    mdl.delete_item(connCA)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)
                        ENDCODE
                    }

                    ground_connected {
                        label = "Ground-connected"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "General"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            mdl.refresh_icon(container_handle)

                            if not new_value:
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                gnd1 = mdl.get_item("gndc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                if gnd1:
                                    mdl.delete_item(gnd1)
                                if junN:
                                    portN = mdl.get_item("N", parent=comp_handle, item_type = ITEM_PORT)
                                    if not portN:
                                        portN = mdl.create_port(parent=comp_handle, name="N", direction="out", kind = "pe",
                                                        terminal_position=(0, 30),
                                                        position=(8192, 8378), rotation="left")
                                    connN = mdl.get_item("Conn_N", parent=comp_handle, item_type=ITEM_CONNECTION)
                                    if not connN:
                                        mdl.create_connection(junN, portN, name="Conn_N")
                            else:
                                portN = mdl.get_item("N", parent=comp_handle, item_type=ITEM_PORT)
                                gnd1 = mdl.get_item("gndc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                if portN:
                                    mdl.delete_item(portN)
                                if junN:
                                    if not gnd1:
                                        gnd1 = mdl.create_component("src_ground", parent=comp_handle, name="gndc", position=(8192, 8378))
                                    connG = mdl.get_item("Conn_G", parent=comp_handle, item_type=ITEM_CONNECTION)
                                    if not connG:
                                        mdl.create_connection(mdl.term(gnd1, "node"), junN, name="ConnG")
                        ENDCODE
                    }

                    set_balanced {
                        label = "Set balanced 3ph power"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "General"
                        nonvisible
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.set_balanced_fcn(mdl, container_handle, new_value)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.set_balanced_fcn(mdl, container_handle, new_value)
                        ENDCODE
                    }

                    Vn_3ph {
                        label = "Nominal line voltage"
                        widget = edit
                        type = generic
                        default_value = "Vn_3ph_CPL"
                        unit = "kV"
                        group = "Load Parameters:2"

                        CODE property_value_changed
                            mdl.set_property_value(mdl.prop(container_handle, 'VAn'), str(new_value) + '*1000/(3**0.5)')
                            mdl.set_property_value(mdl.prop(container_handle, 'VBn'), str(new_value) + '*1000/(3**0.5)')
                            mdl.set_property_value(mdl.prop(container_handle, 'VCn'), str(new_value) + '*1000/(3**0.5)')
                            mdl.set_property_value(mdl.prop(container_handle, 'VAB'), str(new_value) + '*1000')
                            mdl.set_property_value(mdl.prop(container_handle, 'VBC'), str(new_value) + '*1000')
                            mdl.set_property_value(mdl.prop(container_handle, 'VCA'), str(new_value) + '*1000')
                        ENDCODE

                        CODE property_value_edited
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VAn'), new_value + '*1000/(3**0.5)')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VBn'), new_value + '*1000/(3**0.5)')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VCn'), new_value + '*1000/(3**0.5)')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VAB'), new_value + '*1000')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VBC'), new_value + '*1000')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VCA'), new_value + '*1000')
                        ENDCODE
                    }

                    Sn_3ph {
                        label = "Total Nominal power"
                        widget = edit
                        type = generic
                        default_value = "Sn_3ph"
                        unit = "kVA"
                        group = "Load Parameters"

                        CODE property_value_changed
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            mdl.set_property_value(mdl.prop(container_handle, 'SAn'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SBn'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SCn'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SAB'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SBC'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SCA'), str(new_value) + '*1000/' + str(phases))
                        ENDCODE

                        CODE property_value_edited
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SAn'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SBn'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SCn'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SAB'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SBC'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SCA'), new_value + '*1000/' + str(phases))
                        ENDCODE
                    }

                    pf_mode_3ph {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is True:
                                comp_script.lock_prop(mdl, container_handle, "pf_3ph", new_value, "Unit")

                            mdl.set_property_value(mdl.prop(container_handle, 'pf_modeA'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pf_modeB'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pf_modeC'), new_value)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is True:
                                comp_script.lock_prop(mdl, container_handle, "pf_3ph", new_value, "Unit")

                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeA'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeB'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeC'), new_value)
                        ENDCODE
                    }

                    pf_3ph {
                        label = "Power factor"
                        widget = edit
                        type = generic
                        default_value = "pf_3ph_set"
                        group = "Load Parameters"

                        CODE property_value_changed
                            mdl.set_property_value(mdl.prop(container_handle, 'pfA'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pfB'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pfC'), new_value)
                        ENDCODE

                        CODE property_value_edited
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pfA'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pfB'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pfC'), new_value)
                        ENDCODE
                    }

                    VAn {
                        label = "Nominal phase voltage (VAn)"
                        widget = edit
                        type = generic
                        default_value = "0*1000/(3**0.5)"
                        unit = "V"
                        group = "Phase A:3"
                        nonvisible
                        disabled
                    }

                    VAB {
                        label = "Nominal line voltage (VAB)"
                        widget = edit
                        type = generic
                        default_value = "0*1000"
                        unit = "V"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    SAn {
                        label = "Nominal phase power (SAn)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    SAB {
                        label = "Nominal line power (SAB)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    pf_modeA {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Phase A"
                        nonvisible
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfA", new_value, "Unit")


                            comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'A', (8112, 8232), (8112, 8288))
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfA", new_value, "Unit")
                        ENDCODE
                    }

                    pfA {
                        label = "Power factor (A)"
                        widget = edit
                        type = generic
                        default_value = "0"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    VBn {
                        label = "Nominal phase voltage (VBn)"
                        widget = edit
                        type = generic
                        default_value = "0*1000/(3**0.5)"
                        unit = "V"
                        group = "Phase B:4"
                        nonvisible
                        disabled
                    }

                    VBC {
                        label = "Nominal line voltage (VBC)"
                        widget = edit
                        type = generic
                        default_value = "0*1000"
                        unit = "V"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    SBn {
                        label = "Nominal phase power (SBn)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    SBC {
                        label = "Nominal line power (SBC)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    pf_modeB {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Phase B"
                        nonvisible
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfB", new_value, "Unit")

                            if phases=="3" or phases=="2":
                                comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'B', (8192, 8232), (8192, 8288))
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfB", new_value, "Unit")
                        ENDCODE
                    }

                    pfB {
                        label = "Power factor (B)"
                        widget = edit
                        type = generic
                        default_value = "0"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    VCn {
                        label = "Nominal phase voltage (VCn)"
                        widget = edit
                        type = generic
                        default_value = "0*1000/(3**0.5)"
                        unit = "V"
                        group = "Phase C:5"
                        nonvisible
                        disabled
                    }

                    VCA {
                        label = "Nominal line voltage (VCA)"
                        widget = edit
                        type = generic
                        default_value = "0*1000"
                        unit = "V"
                        group = "Phase C"
                        nonvisible
                        disabled
                    }

                    SCn {
                        label = "Nominal phase power (SCn)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase C:5"
                        nonvisible
                        disabled
                    }

                    SCA {
                        label = "Nominal line power (SCA)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase C"
                        nonvisible
                        disabled
                    }

                    pf_modeC {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Phase C"
                        nonvisible
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfC", new_value, "Unit")

                            if phases=="3":
                                comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'C', (8272, 8232), (8272, 8288))
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfC", new_value, "Unit")
                        ENDCODE
                    }

                    pfC {
                        label = "Power factor (C)"
                        widget = edit
                        type = generic
                        default_value = "0"
                        group = "Phase C"
                        nonvisible
                        disabled
                    }

                    kV {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    model {
                        widget = edit
                        type = generic
                        default_value = "2"
                        nonvisible
                    }

                    phases {
                        label = "Number of Phases"
                        widget = combo
                        combo_values = "1", "3"
                        type = string
                        default_value = "3"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

                            comp_script = return_comp_script(mdl, container_handle)

                            comp_script.phase_value_changed_fnc(mdl, container_handle, new_value)

                            pf_mode_3ph = mdl.get_property_disp_value(mdl.prop(container_handle, "pf_mode_3ph"))
                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            mdl.refresh_icon(container_handle)

                            if new_value == "3":
                                mdl.enable_property(mdl.prop(container_handle, "ground_connected"))
                                mdl.enable_property(mdl.prop(container_handle, "conn_type"))
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if not pA:
                                    pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                                                        terminal_position=(-30, -30),
                                                        position=(8112, 8024), rotation="right")
                                    mdl.create_connection(junA0, pA, name="ConnAA0")
                                else:
                                    mdl.set_port_properties(pA, terminal_position=(-30, -30))
                                if not Ra:
                                    Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
                                    mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn17")
                                    mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))

                                if not pB:
                                    pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                                                        terminal_position=(0, -30),
                                                        position=(8192, 8024), rotation="right")
                                    mdl.create_connection(junB0, pB, name="ConnBB0")
                                if not Rb:
                                    Rb = mdl.create_component("pas_resistor", parent=comp_handle, name="Rb", position=(8192,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Rb, "resistance"), "Rb")
                                    mdl.create_connection(mdl.term(Rb, "p_node"), junB0, name="Conn19")
                                    mdl.create_connection(mdl.term(Rb, "n_node"), junB1, name="Conn_B")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'B', (8192, 8232), (8192, 8288))
                                if not pC:
                                    pC = mdl.create_port(parent=comp_handle, name="C1", direction="out", kind = "pe",
                                                        terminal_position=(30, -30),
                                                        position=(8272, 8024), rotation="right")
                                    mdl.create_connection(junC0, pC, name="ConnCC0")
                                if not Rc:
                                    Rc = mdl.create_component("pas_resistor", parent=comp_handle, name="Rc", position=(8272,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Rc, "resistance"), "Rc")
                                    mdl.create_connection(mdl.term(Rc, "p_node"), junC0, name="Conn21")
                                    mdl.create_connection(mdl.term(Rc, "n_node"), junC1, name="Conn_C")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'C', (8272, 8232), (8272, 8288))





                            elif new_value == "2":
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                if not pA:
                                    pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                                                        terminal_position=("top", 1),
                                                        position=(8112, 8024), rotation="right")
                                    mdl.create_connection(junA0, pA, name="ConnAA0")
                                if not Ra:
                                    Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
                                    mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn21")
                                    mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))
                                if not pB:
                                    pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                                                        terminal_position=("top", 2),
                                                        position=(8192, 8024), rotation="right")
                                    mdl.create_connection(junB0, pB, name="ConnBB0")
                                if not Rb:
                                    Rb = mdl.create_component("pas_resistor", parent=comp_handle, name="Rb", position=(8192,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Rb, "resistance"), "Rb")
                                    mdl.create_connection(mdl.term(Rb, "p_node"), junB0, name="Conn19")
                                    mdl.create_connection(mdl.term(Rb, "n_node"), junB1, name="Conn_B")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'B', (8192, 8232), (8192, 8288))
                                if pC:
                                    comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'C', (8272, 8232), (8272, 8288))
                                    mdl.delete_item(pC)
                                    mdl.delete_item(Rc)



                            elif new_value == "1":
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if not junN:
                                    junN = mdl.create_junction(name='JN', parent=comp_handle, kind='pe',
                                                               position=(8192, 8328))

                                connAN = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connAN:
                                    mdl.create_connection(junA1, junN, name="Conn_AN")
                                connBN = mdl.get_item("Conn_BN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connBN:
                                    mdl.create_connection(junB1, junN, name="Conn_BN")
                                connCN = mdl.get_item("Conn_CN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connCN:
                                    mdl.create_connection(junC1, junN, name="Conn_CN")

                                if not pA:
                                    pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                                                        terminal_position=(0, -30),
                                                        position=(8112, 8024), rotation="right")
                                    mdl.create_connection(junA0, pA, name="ConnAA0")
                                else:
                                    mdl.set_port_properties(pA, terminal_position=(0, -30))

                                if not Ra:
                                    Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
                                    mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn21")
                                    mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))
                                if pB:
                                    comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'B', (8192, 8232), (8192, 8288))
                                    mdl.delete_item(pB)
                                    mdl.delete_item(Rb)

                                if pC:
                                    comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'C', (8272, 8232), (8272, 8288))
                                    mdl.delete_item(pC)
                                    mdl.delete_item(Rc)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.phase_value_changed_fnc(mdl, container_handle, new_value)
                        ENDCODE
                    }

                    phs {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    ph_num {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    pf {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    conn {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kVA {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    basefreq {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    dss_mod {
                        label = "OpenDSS load type"
                        widget = combo
                        combo_values = "Constant P, Q", "Constant Impedance", "Constant Current Mag.", "Constant P, Fixed Q", "Constant P, Fixed Impedance Q"
                        type = string
                        default_value = "Constant Impedance"
                        group = "OpenDSS:6"
                        no_evaluate
                    }

                    CODE init
                        import os
                        import sys
                        import importlib

                        lib_path = mdl.get_library_resource_dir_path(item_handle)
                        comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                        gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                        if not comp_scripts_path in sys.path:
                            sys.path.append(comp_scripts_path)
                        if not gui_scripts_path in sys.path:
                            sys.path.append(gui_scripts_path)

                        import comp_load as comp_script
                        importlib.reload(comp_script)
                        def return_comp_script(mdl, item_handle):
                            return comp_script

                        comp_script.define_icon(mdl, item_handle)

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        fn = mdl.get_property_value(mdl.prop(item_handle, "fn"))
                        conn_type = mdl.get_property_value(mdl.prop(item_handle, "conn_type"))
                        ground_connected = mdl.get_property_value(mdl.prop(item_handle, "ground_connected"))
                        set_balanced = mdl.get_property_value(mdl.prop(item_handle, "set_balanced"))
                        Vn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Vn_3ph"))
                        Sn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Sn_3ph"))
                        pf_mode_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_mode_3ph"))
                        pf_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_3ph"))
                        VAn = mdl.get_property_value(mdl.prop(item_handle, "VAn"))
                        VAB = mdl.get_property_value(mdl.prop(item_handle, "VAB"))
                        SAn = mdl.get_property_value(mdl.prop(item_handle, "SAn"))
                        SAB = mdl.get_property_value(mdl.prop(item_handle, "SAB"))
                        pf_modeA = mdl.get_property_value(mdl.prop(item_handle, "pf_modeA"))
                        pfA = mdl.get_property_value(mdl.prop(item_handle, "pfA"))
                        VBn = mdl.get_property_value(mdl.prop(item_handle, "VBn"))
                        VBC = mdl.get_property_value(mdl.prop(item_handle, "VBC"))
                        SBn = mdl.get_property_value(mdl.prop(item_handle, "SBn"))
                        SBC = mdl.get_property_value(mdl.prop(item_handle, "SBC"))
                        pf_modeB = mdl.get_property_value(mdl.prop(item_handle, "pf_modeB"))
                        pfB = mdl.get_property_value(mdl.prop(item_handle, "pfB"))
                        VCn = mdl.get_property_value(mdl.prop(item_handle, "VCn"))
                        VCA = mdl.get_property_value(mdl.prop(item_handle, "VCA"))
                        SCn = mdl.get_property_value(mdl.prop(item_handle, "SCn"))
                        SCA = mdl.get_property_value(mdl.prop(item_handle, "SCA"))
                        pf_modeC = mdl.get_property_value(mdl.prop(item_handle, "pf_modeC"))
                        pfC = mdl.get_property_value(mdl.prop(item_handle, "pfC"))
                        kV = mdl.get_property_value(mdl.prop(item_handle, "kV"))
                        model = mdl.get_property_value(mdl.prop(item_handle, "model"))
                        phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
                        phs = mdl.get_property_value(mdl.prop(item_handle, "phs"))
                        ph_num = mdl.get_property_value(mdl.prop(item_handle, "ph_num"))
                        pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                        conn = mdl.get_property_value(mdl.prop(item_handle, "conn"))
                        kVA = mdl.get_property_value(mdl.prop(item_handle, "kVA"))
                        basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
                        dss_mod = mdl.get_property_value(mdl.prop(item_handle, "dss_mod"))
                        # HEADER STOP
                        def calc_impedance(mdl, power_1ph, voltage, pf_mode, power_factor,
                                               frequency, phase_id):

                            if power_1ph <= 0:
                                mdl.error("Power set is negative or zero.", kind="General error",
                                            context=mdl.prop(item_handle, "S" + phase_id))
                                return float('nan'), float('nan'), float('nan')
                            if voltage <= 0:
                                mdl.error("Voltage set is negative or zero.", kind="General error",
                                            context=mdl.prop(item_handle, "V" + phase_id))
                                return float('nan'), float('nan'), float('nan')
                            if pf_mode != "Unit":
                                if power_factor < 0.01:
                                    mdl.warning("Power factor set is less than 0.01. Clipping it to 0.01",
                                                kind="General error",
                                                context=mdl.prop(item_handle, "pf" + phase_id[0]))
                                    power_factor = 0.01
                                elif power_factor > 0.99:
                                    mdl.warning("Power factor set is greater than 0.99. Clipping it to 0.99",
                                                kind="General error",
                                                context=mdl.prop(item_handle, "pf" + phase_id[0]))
                                    power_factor = 0.99


                            if pf_mode == "Unit":
                                R = (voltage**2)/power_1ph
                                L = float('nan')
                                C = float('nan')
                            elif pf_mode == "Lag":
                                Z = (voltage**2)/power_1ph
                                R = power_factor*Z
                                L = Z*((1-power_factor**2)**0.5)/(2*np.pi*frequency)
                                C = float('nan')
                            else:
                                Z = (voltage**2)/power_1ph
                                R = power_factor*Z
                                L = float('nan')
                                C = 1/(Z*2*np.pi*frequency*((1-power_factor**2)**0.5))
                            return R, L, C

                        if fn <= 0:
                            mdl.error("Frequency set is negative or zero.", kind="General error",
                                        context=mdl.prop(item_handle, "fn"))
                            fn = float('nan')

                        VAn = Vn_3ph*1000/(3**0.5)
                        VBn = Vn_3ph*1000/(3**0.5)
                        VCn = Vn_3ph*1000/(3**0.5)
                        VAB = Vn_3ph*1000
                        VBC = Vn_3ph*1000
                        VCA = Vn_3ph*1000

                        if phases == "3":
                            phs = 3
                        else:
                            phs = 1

                        SAn = Sn_3ph*1000/phs
                        SBn = Sn_3ph*1000/phs
                        SCn = Sn_3ph*1000/phs
                        SAB = Sn_3ph*1000/phs
                        SBC = Sn_3ph*1000/phs
                        SCA = Sn_3ph*1000/phs

                        if pf_mode_3ph == "Unit":
                            pfA = 1.0
                            pfB = 1.0
                            pfC = 1.0
                        else:
                            pfA = pf_3ph
                            pfB = pf_3ph
                            pfC = pf_3ph



                        if (conn_type == 'Δ'):
                            Ra, La, Ca = calc_impedance(mdl, SAB, VAB, pf_mode_3ph, pfA, fn, "AB")
                            Rb, Lb, Cb = calc_impedance(mdl, SBC, VBC, pf_mode_3ph, pfB, fn, "BC")
                            Rc, Lc, Cc = calc_impedance(mdl, SCA, VCA, pf_mode_3ph, pfC, fn, "CA")
                        else:
                            if phases == "1":
                                if ground_connected:
                                    Ra, La, Ca = calc_impedance(mdl, SAn, VAn, pf_mode_3ph, pfA, fn, "An")
                                    Rb, Lb, Cb = calc_impedance(mdl, SBn, VBn, pf_mode_3ph, pfB, fn, "Bn")
                                    Rc, Lc, Cc = calc_impedance(mdl, SCn, VCn, pf_mode_3ph, pfC, fn, "Cn")
                                else:
                                    Ra, La, Ca = calc_impedance(mdl, SAB, VAB, pf_mode_3ph, pfA, fn, "AB")
                                    Rb, Lb, Cb = calc_impedance(mdl, SBC, VBC, pf_mode_3ph, pfB, fn, "BC")
                                    Rc, Lc, Cc = calc_impedance(mdl, SCA, VCA, pf_mode_3ph, pfC, fn, "CA")
                            else:
                                Ra, La, Ca = calc_impedance(mdl, SAn, VAn, pf_mode_3ph, pfA, fn, "An")
                                Rb, Lb, Cb = calc_impedance(mdl, SBn, VBn, pf_mode_3ph, pfB, fn, "Bn")
                                Rc, Lc, Cc = calc_impedance(mdl, SCn, VCn, pf_mode_3ph, pfC, fn, "Cn")

                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy
                        import math

                        basefreq = fn
                        kVA = Sn_3ph
                        if (conn_type == 'Δ'):
                            conn = "delta"
                        else:
                            conn = "wye"

                        if pf_mode_3ph == "Unit":
                            pf = 1.0
                        elif pf_mode_3ph == "Lag":
                            pf = pf_3ph
                        else:
                            pf = -1 * pf_3ph

                        if phases == "1":
                            if ground_connected:
                                kV = (Vn_3ph/(1))/1
                            else:
                                kV = Vn_3ph
                        else:
                            kV = Vn_3ph

                        if dss_mod == "Constant P, Q":
                            model = 1
                        elif dss_mod == "Constant Impedance":
                            model = 2
                        elif dss_mod == "Constant Current Mag.":
                            model = 5
                        elif dss_mod == "Constant P, Fixed Q":
                            model = 6
                        elif dss_mod == "Constant P, Fixed Impedance Q":
                            model = 7
                        else:
                            model = 2

                        mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)
                        mdl.set_property_value(mdl.prop(item_handle, "kVA"), kVA)
                        mdl.set_property_value(mdl.prop(item_handle, "conn"), conn)
                        mdl.set_property_value(mdl.prop(item_handle, "pf"), pf)
                        mdl.set_property_value(mdl.prop(item_handle, "phases"), phases)
                        mdl.set_property_value(mdl.prop(item_handle, "kV"), kV)
                        mdl.set_property_value(mdl.prop(item_handle, "dss_mod"), dss_mod)
                        mdl.set_property_value(mdl.prop(item_handle, "model"), model)
                    ENDCODE

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        comp_script = return_comp_script(mdl, item_handle)
                        comp_script.define_icon(mdl, item_handle)
                    ENDCODE
                }
            }
            [
                position = 8048, 8112
                size = 96, 64
            ]

            component Subsystem CPL {
                layout = dynamic
                component "core/Constant" Constant1 {
                    execution_rate = "execution_rate"
                    value = "kP_tot"
                }
                [
                    position = 7120, 7496
                    hide_name = True
                ]

                component "core/Constant" Constant11 {
                    execution_rate = "execution_rate"
                    value = "kQ_tot"
                }
                [
                    position = 7120, 7584
                    hide_name = True
                ]

                component "core/Gain" Gain1 {
                    gain = "inv_ph"
                }
                [
                    position = 7704, 7456
                    hide_name = True
                ]

                component "core/Gain" Gain2 {
                    gain = "inv_ph"
                }
                [
                    position = 7576, 7584
                    hide_name = True
                ]

                component "OpenDSS/Rate Transition with Bypass" "Rate Transition with Bypass1" {
                    execution_rate = "execution_rate"
                }
                [
                    position = 7792, 7456
                    hide_name = True
                    size = 32, 32
                ]

                component "OpenDSS/Rate Transition with Bypass" "Rate Transition with Bypass2" {
                    execution_rate = "execution_rate"
                }
                [
                    position = 7680, 7584
                    hide_name = True
                    size = 32, 32
                ]

                component "core/Rate Limiter" "Rate Limiter1" {
                    falling_limit = "-SS/Freq"
                    rising_limit = "SS/Freq"
                }
                [
                    position = 7880, 7456
                    hide_name = True
                ]

                component "core/Rate Limiter" "Rate Limiter2" {
                    falling_limit = "-SS/Freq"
                    rising_limit = "SS/Freq"
                }
                [
                    position = 7760, 7584
                    hide_name = True
                ]

                component "OpenDSS/single-phase CPL" CPLA {
                }
                [
                    position = 8032, 8008
                    size = 48, 48
                ]

                component "OpenDSS/single-phase CPL" CPLB {
                }
                [
                    position = 7928, 8088
                    size = 48, 48
                ]

                component "OpenDSS/single-phase CPL" CPLC {
                }
                [
                    position = 7824, 8168
                    size = 48, 48
                ]

                port A1 {
                    label = "A1"
                    position = left:1
                    kind = pe
                }
                [
                    position = 7656, 8008
                ]

                port N {
                    label = "N"
                    position = right:1
                    kind = pe
                }
                [
                    position = 8320, 8088
                    rotation = down
                ]

                port B1 {
                    position = left:2
                    kind = pe
                    direction =  in
                }
                [
                    position = 7656, 8088
                ]

                port C1 {
                    position = left:3
                    kind = pe
                    direction =  in
                }
                [
                    position = 7656, 8168
                ]

                tag Goto1 {
                    value = "kP_ref"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8200, 7464
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto2 {
                    value = "kQ_ref"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8208, 7592
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto3 {
                    value = "kP_int"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7216, 7496
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto4 {
                    value = "kQ_int"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7216, 7584
                    hide_name = True
                    size = 60, 20
                ]

                tag From1 {
                    value = "kP_int"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7424, 7456
                    hide_name = True
                    size = 60, 20
                ]

                tag From2 {
                    value = "kQ_int"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7336, 7584
                    hide_name = True
                    size = 60, 20
                ]

                tag From3 {
                    value = "kP_ref"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7640, 7904
                    hide_name = True
                    size = 60, 20
                ]

                tag From4 {
                    value = "kQ_ref"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7640, 7944
                    hide_name = True
                    size = 60, 20
                ]

                junction Junction11 pe
                [
                    position = 8248, 8088
                ]

                junction Junction13 sp
                [
                    position = 7920, 7904
                ]

                junction Junction14 sp
                [
                    position = 7936, 7944
                ]

                junction Junction15 sp
                [
                    position = 7816, 7904
                ]

                junction Junction16 sp
                [
                    position = 7832, 7944
                ]

                junction Junction32 sp
                [
                    position = 7824, 8250
                ]

                junction Junction33 sp
                [
                    position = 7928, 8250
                ]

                connect Constant1.out Goto3 as Connection341
                connect Constant11.out Goto4 as Connection342
                connect Gain1.out "Rate Transition with Bypass1.In" as Connection370
                connect Gain2.out "Rate Transition with Bypass2.In" as Connection746
                connect "Rate Transition with Bypass1.Out" "Rate Limiter1.in" as Connection945
                connect "Rate Limiter1.out" Goto1 as Connection1091
                connect "Rate Transition with Bypass2.Out" "Rate Limiter2.in" as Connection1092
                connect "Rate Limiter2.out" Goto2 as Connection1118
                connect Junction11 N as Connection1152
                [
                    position = 0, 0
                ]
                connect Junction32 Junction33 as Connection3165
                connect Junction13 Junction15 as Connection1165
                connect Junction15 From3 as Connection1166
                connect Junction14 Junction16 as Connection1168
                connect Junction16 From4 as Connection1169
                connect A1 CPLA.P3 as Connection1170
                connect CPLA.P2 Junction11 as Connection1171
                connect CPLA.P Junction13 as Connection1172
                connect CPLA.Q Junction14 as Connection1173
                connect B1 CPLB.P3 as Connection1174
                connect CPLB.P2 Junction11 as Connection1175
                connect CPLB.P Junction13 as Connection1176
                connect CPLB.Q Junction14 as Connection1177
                connect C1 CPLC.P3 as Connection1178
                connect CPLC.P2 Junction11 as Connection1179
                connect CPLC.P Junction15 as Connection1180
                connect CPLC.Q Junction16 as Connection1181
                connect Gain1.in From1 as connP
                connect Gain2.in From2 as connQ

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    kVLine {
                        label = "Nominal line voltage"
                        widget = edit
                        type = generic
                        default_value = "Vn_3ph_CPL"
                        unit = "kV"
                        group = "Load Parameters:1"
                    }

                    VLL {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kVLL {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kP_inp {
                        label = "Active power input"
                        widget = combo
                        combo_values = "Fixed", "Variable input"
                        type = string
                        default_value = "Fixed"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            fast_con_prop = mdl.get_property_value(mdl.prop(container_handle, "Fast_con"))
                            rate_trans1 = mdl.get_item("Rate Transition with Bypass1", parent=comp_handle, item_type="component")
                            rate_trans2 = mdl.get_item("Rate Transition with Bypass2", parent=comp_handle, item_type="component")

                            if new_value == "Variable input":
                                if fast_con_prop:
                                    mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "False")
                                    mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "False")
                                else:
                                    mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "True")
                                    mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "True")

                                P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                                P_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                P_int = mdl.get_item("From1", parent=comp_handle, item_type=ITEM_TAG)
                                conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_P_int:
                                    mdl.delete_item(conn_P_int)

                                if not term_P:
                                    term_P = mdl.create_component("Termination", parent=comp_handle, name="Termination1", position=(7509,7452), hide_name=True)
                                    mdl.create_connection(mdl.term(term_P, "in"), P_int)

                                if not P_ext:
                                    P_ext = mdl.create_port(parent=comp_handle, name="P_set", direction="in", kind = "sp",
                                                        terminal_position=("top", 1),
                                                        position=(7613, 7452))
                                    mdl.create_connection(mdl.term(P_inp, "in"), P_ext)
                            elif new_value == "Fixed":
                                mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "True")
                                mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "True")
                                P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                                term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                P_int = mdl.get_item("From1", parent=comp_handle, item_type=ITEM_TAG)
                                P_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if P_ext:
                                    mdl.delete_item(P_ext)
                                if term_P:
                                    mdl.delete_item(term_P)
                                if conn_P_int:
                                    mdl.delete_item(conn_P_int)
                                mdl.create_connection(mdl.term(P_inp, "in"), P_int, name="connP")
                        ENDCODE
                    }

                    kP_tot {
                        label = "Active power"
                        widget = edit
                        type = generic
                        default_value = "P_CPL"
                        unit = "kW"
                        group = "Load Parameters"
                    }

                    kP {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    SS {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Rsnb {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kQ_inp {
                        label = "Reactive power input"
                        widget = combo
                        combo_values = "Fixed", "Variable input"
                        type = string
                        default_value = "Fixed"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            fast_con_prop = mdl.get_property_value(mdl.prop(container_handle, "Fast_con"))
                            rate_trans1 = mdl.get_item("Rate Transition with Bypass1", parent=comp_handle, item_type="component")
                            rate_trans2 = mdl.get_item("Rate Transition with Bypass2", parent=comp_handle, item_type="component")

                            if new_value == "Variable input":
                                if fast_con_prop:
                                    mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "False")
                                    mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "False")
                                else:
                                    mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "True")
                                    mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "True")

                                Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                                Q_inp = mdl.get_item("Gain2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Q_int = mdl.get_item("From2", parent=comp_handle, item_type=ITEM_TAG)
                                conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_Q_int:
                                    mdl.delete_item(conn_Q_int)

                                if not term_Q:
                                    term_Q = mdl.create_component("Termination", parent=comp_handle, name="Termination2", position=(7423,7582), hide_name=True)
                                    mdl.create_connection(mdl.term(term_Q, "in"), Q_int)

                                if not Q_ext:
                                    Q_ext = mdl.create_port(parent=comp_handle, name="Q_set", direction="in", kind = "sp",
                                                        terminal_position=("top", 2),
                                                        position=(7502, 7582))
                                    mdl.create_connection(mdl.term(Q_inp, "in"), Q_ext)
                            elif new_value == "Fixed":
                                mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "True")
                                mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "True")
                                Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                                term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Q_int = mdl.get_item("From2", parent=comp_handle, item_type=ITEM_TAG)
                                Q_inp = mdl.get_item("Gain2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if Q_ext:
                                    mdl.delete_item(Q_ext)
                                if term_Q:
                                    mdl.delete_item(term_Q)
                                if conn_Q_int:
                                    mdl.delete_item(conn_Q_int)
                                mdl.create_connection(mdl.term(Q_inp, "in"), Q_int, name="connQ")
                        ENDCODE
                    }

                    kQ_tot {
                        label = "Reactive power"
                        widget = edit
                        type = generic
                        default_value = "Q_CPL"
                        unit = "kVAR"
                        group = "Load Parameters"
                    }

                    kQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Q {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    execution_rate {
                        previous_names = "Ts"
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "execution_rate"
                        unit = "s"
                        group = "Execution rate:2"
                    }

                    Fast_con {
                        label = "Fast execution rate output conditioning"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Execution rate"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            rate_trans1 = mdl.get_item("Rate Transition with Bypass1", parent=comp_handle, item_type="component")
                            rate_trans2 = mdl.get_item("Rate Transition with Bypass2", parent=comp_handle, item_type="component")
                            Tfst_mask = mdl.get_property_disp_value(mdl.prop(container_handle, "Tfst"))
                            Ts_mask = mdl.get_property_disp_value(mdl.prop(container_handle, "execution_rate"))
                            P_inp_mask = mdl.get_property_value(mdl.prop(container_handle, "kP_inp"))
                            Q_inp_mask = mdl.get_property_value(mdl.prop(container_handle, "kQ_inp"))

                            if new_value and not Tfst_mask == Ts_mask:
                                if P_inp_mask == "Variable input":
                                    mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "False")
                                else:
                                    mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "True")
                                if Q_inp_mask == "Variable input":
                                    mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "False")
                                else:
                                    mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "True")
                            else:
                                mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "True")
                                mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "True")

                            for phase in ["A", "B", "C"]:
                                CPL_phase = mdl.get_item(f"CPL{phase}", parent=comp_handle, item_type="component")
                                if CPL_phase:
                                    mdl.set_property_value(mdl.prop(CPL_phase, "Fast_con"), new_value)
                        ENDCODE
                    }

                    Tfst {
                        label = "Fast execution rate"
                        widget = edit
                        type = generic
                        default_value = "Tfast"
                        unit = "s"
                        group = "Execution rate"
                    }

                    zero_seq_remove {
                        label = "Remove zero sequence"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Execution rate"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            j33 =  mdl.get_item("Junction33", parent=comp_handle, item_type="junction")
                            j32 =  mdl.get_item("Junction32", parent=comp_handle, item_type="junction")
                            j33CPLA =  mdl.get_item("j33CPLA_conn", parent=comp_handle, item_type="connection")
                            j33CPLB =  mdl.get_item("j33CPLB_conn", parent=comp_handle, item_type="connection")
                            j32CPLC =  mdl.get_item("j32CPLC_conn", parent=comp_handle, item_type="connection")
                            for phase in ["A", "B", "C"]:
                                CPL_phase = mdl.get_item(f"CPL{phase}", parent=comp_handle, item_type="component")
                                if CPL_phase:
                                    mdl.set_property_value(mdl.prop(CPL_phase, "zero_seq_remove"), new_value)
                                    if phase == "C":
                                        if not j32CPLC:
                                            mdl.create_connection(j32, mdl.term(CPL_phase, "v0"), "j32CPLC_conn")
                                    elif phase == "B":
                                        if not j33CPLB:
                                            mdl.create_connection(j33, mdl.term(CPL_phase, "v0"), "j33CPLB_conn")
                                    elif phase == "A":
                                        if not j33CPLA:
                                            mdl.create_connection(j33, mdl.term(CPL_phase, "v0"), "j33CPLA_conn")

                            if new_value:
                                sum_0 =  mdl.get_item("sum_abc", parent=comp_handle, item_type="component")
                                K_filter =  mdl.get_item("Kalman_filter", parent=comp_handle, item_type="component")
                                gain_third =  mdl.get_item("gain_zero", parent=comp_handle, item_type="component")
                                zero_const = mdl.get_item("constant_zero", parent=comp_handle, item_type="component")
                                K_cos_term = mdl.get_item("cos_term", parent=comp_handle, item_type="component")
                                K_f_term = mdl.get_item("f_term", parent=comp_handle, item_type="component")

                                if zero_const:
                                    mdl.delete_item(zero_const)

                                if not sum_0:
                                    sum_0 = mdl.create_component("Sum", name="sum_abc", parent=comp_handle, position=(7685, 7740), rotation="down")
                                mdl.set_property_value(mdl.prop(sum_0, "signs"), "3")

                                if not K_filter:
                                    K_filter = mdl.create_component("Kalman Filter Sync", name="Kalman_filter", parent=comp_handle, position=(7400, 7740), rotation="down")
                                mdl.set_property_value(mdl.prop(K_filter, "normalize"), "False")
                                mdl.set_property_value(mdl.prop(K_filter, "q_gain"), "q_gain_k")
                                mdl.set_property_value(mdl.prop(K_filter, "r_gain"), "r_gain_k")

                                if not K_cos_term:
                                    K_cos_term = mdl.create_component("Termination", name="cos_term", parent=comp_handle, position=(7260, 7740), rotation="down")

                                if not K_f_term:
                                    K_f_term = mdl.create_component("Termination", name="f_term", parent=comp_handle, position=(7260, 7680), rotation="down")

                                if not gain_third:
                                    gain_third = mdl.create_component("Gain", name="gain_zero", parent=comp_handle, position=(7560, 7740), rotation="down")
                                mdl.set_property_value(mdl.prop(gain_third, "gain"), "-1/3")

                                mdl.create_connection(mdl.term(K_filter, "Vgrid"), mdl.term(gain_third, "out"))
                                mdl.create_connection(mdl.term(sum_0, "out"), mdl.term(gain_third, "in"))
                                mdl.create_connection(mdl.term(K_filter, "sin(wt)"), j32)
                                mdl.create_connection(mdl.term(K_filter, "cos(wt)"), mdl.term(K_cos_term, "in"))
                                mdl.create_connection(mdl.term(K_filter, "f (Hz)"), mdl.term(K_f_term, "in"))

                                for phase in ["A", "B", "C"]:
                                    if phase == "B":
                                        port_offset = (0, 80)
                                        cpl_offset = (-104, 80)
                                        meter_offset = (0, 64)
                                    elif phase == "C":
                                        port_offset = (0, 160)
                                        cpl_offset = (-208, 160)
                                        meter_offset = (0, 128)
                                    else:
                                        port_offset = (0, 0)
                                        cpl_offset = (0, 0)
                                        meter_offset = (0, 0)

                                    meas_phase =  mdl.get_item(f"v{phase}_m", parent=comp_handle, item_type="component")
                                    port_n = mdl.get_item("N", parent=comp_handle, item_type="port")
                                    CPL_phase = mdl.get_item(f"CPL{phase}", parent=comp_handle, item_type="component")

                                    if not meas_phase:
                                        meas_phase = mdl.create_component("Voltage Measurement", name=f"v{phase}_m", parent=comp_handle, position=(8100 + meter_offset[0], 7676 + meter_offset[1]))

                                    if meas_phase:
                                        mdl.set_property_value(mdl.prop(meas_phase, "sig_output"), new_value)
                                        mdl.set_property_value(mdl.prop(meas_phase, "execution_rate"), "Tfst")
                                        mdl.create_connection(mdl.term(meas_phase, "n_node"), port_n)

                                    if CPL_phase:
                                        mdl.create_connection(mdl.term(meas_phase, "p_node"), mdl.term(CPL_phase, "P3"))

                                    if phase == "A":
                                        mdl.create_connection(mdl.term(meas_phase, "out"), mdl.term(sum_0, "in2"))
                                    elif phase == "B":
                                        mdl.create_connection(mdl.term(meas_phase, "out"), mdl.term(sum_0, "in1"))
                                    elif phase == "C":
                                        mdl.create_connection(mdl.term(meas_phase, "out"), mdl.term(sum_0, "in"))
                            else:
                                sum_0 =  mdl.get_item("sum_abc", parent=comp_handle, item_type="component")
                                K_filter =  mdl.get_item("Kalman_filter", parent=comp_handle, item_type="component")
                                gain_third =  mdl.get_item("gain_zero", parent=comp_handle, item_type="component")
                                zero_const = mdl.get_item("Constant_zero", parent=comp_handle, item_type="component")
                                K_cos_term = mdl.get_item("cos_term", parent=comp_handle, item_type="component")
                                K_f_term = mdl.get_item("f_term", parent=comp_handle, item_type="component")

                                if sum_0:
                                    mdl.delete_item(sum_0)
                                if K_filter:
                                    mdl.delete_item(K_filter)
                                if K_cos_term:
                                    mdl.delete_item(K_cos_term)
                                if K_f_term:
                                    mdl.delete_item(K_f_term)
                                if gain_third:
                                    mdl.delete_item(gain_third)
                                if not zero_const:
                                    zero_const = mdl.create_component("Constant", name="constant_zero", parent=comp_handle, position=(7650, 8250))
                                mdl.set_property_value(mdl.prop(zero_const, "value"), "0")
                                mdl.set_property_value(mdl.prop(zero_const, "execution_rate"), "Tfst")
                                mdl.create_connection(mdl.term(zero_const, "out"), j32)

                                for phase in ["A", "B", "C"]:
                                    meas_phase =  mdl.get_item(f"v{phase}_m", parent=comp_handle, item_type="component")
                                    if meas_phase:
                                        mdl.delete_item(meas_phase)
                        ENDCODE
                    }

                    Tfast_en {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    phases {
                        label = "Number pf phases"
                        widget = combo
                        combo_values = "3", "1"
                        type = string
                        default_value = "3"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            fast_con_prop = mdl.get_property_value(mdl.prop(container_handle, "Fast_con"))
                            j33 =  mdl.get_item("Junction33", parent=comp_handle, item_type="junction")
                            j32 =  mdl.get_item("Junction32", parent=comp_handle, item_type="junction")
                            j33CPLA =  mdl.get_item("j33CPLA_conn", parent=comp_handle, item_type="connection")
                            j33CPLB =  mdl.get_item("j33CPLB_conn", parent=comp_handle, item_type="connection")
                            j32CPLC =  mdl.get_item("j32CPLC_conn", parent=comp_handle, item_type="connection")

                            if new_value == "3":
                                for phase in ["A", "B", "C"]:
                                    if phase == "B":
                                        port_offset = (0, 80)
                                        cpl_offset = (-104, 80)
                                    elif phase == "C":
                                        port_offset = (0, 160)
                                        cpl_offset = (-208, 160)
                                    else:
                                        port_offset = (0, 0)
                                        cpl_offset = (0, 0)

                                    port_phase = mdl.get_item(f"{phase}1", parent=comp_handle, item_type=ITEM_PORT)
                                    if not port_phase:
                                        port_phase = mdl.create_port(parent=comp_handle,
                                                                     name=f"{phase}1", direction="out",
                                                                     kind = "pe",
                                                                     terminal_position=("left", 2),
                                                                     position=(7656 + port_offset[0], 8008 + port_offset[1]),
                                                                     rotation="up")

                                    CPL_phase = mdl.get_item(f"CPL{phase}", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    if not CPL_phase:
                                        CPL_phase = mdl.create_component("OpenDSS/single-phase CPL",
                                                                         name=f"CPL{phase}",
                                                                         parent=comp_handle,
                                                                         position=(8032 + cpl_offset[0], 8008 + cpl_offset[1]))

                                    if len(mdl.find_connections(port_phase)) == 0:
                                        mdl.create_connection(port_phase, mdl.term(CPL_phase, "P3"))

                                    jun11 = mdl.get_item("Junction11", parent=comp_handle, item_type="junction")

                                    if len(mdl.find_connections(mdl.term(CPL_phase, "P2"))) == 0:
                                        mdl.create_connection(mdl.term(CPL_phase, "P2"), jun11)

                                    if phase in ["A", "B"]:
                                        jun_p = mdl.get_item("Junction13", parent=comp_handle, item_type="junction")
                                        jun_q = mdl.get_item("Junction14", parent=comp_handle, item_type="junction")
                                    else:
                                        jun_p = mdl.get_item("Junction15", parent=comp_handle, item_type="junction")
                                        jun_q = mdl.get_item("Junction16", parent=comp_handle, item_type="junction")

                                    if len(mdl.find_connections(mdl.term(CPL_phase, "P"))) == 0:
                                        mdl.create_connection(mdl.term(CPL_phase, "P"), jun_p)

                                    if len(mdl.find_connections(mdl.term(CPL_phase, "Q"))) == 0:
                                        mdl.create_connection(mdl.term(CPL_phase, "Q"), jun_q)

                                    if CPL_phase:
                                        if fast_con_prop:
                                            mdl.set_property_value(mdl.prop(CPL_phase, "Fast_con"), "True")
                                        else:
                                            mdl.set_property_value(mdl.prop(CPL_phase, "Fast_con"), "False")
                                        if phase == "C":
                                            if not j32CPLC:
                                                mdl.create_connection(j32, mdl.term(CPL_phase, "v0"), "j32CPLC_conn")
                                        elif phase == "B":
                                            if not j33CPLB:
                                                mdl.create_connection(j33, mdl.term(CPL_phase, "v0"), "j33CPLB_conn")
                                        elif phase == "A":
                                            if not j33CPLA:
                                                mdl.create_connection(j33, mdl.term(CPL_phase, "v0"), "j33CPLA_conn")




                            if new_value == "1":
                                for phase in ["B", "C"]:
                                    port_phase = mdl.get_item(f"{phase}1", parent=comp_handle, item_type=ITEM_PORT)
                                    if port_phase:
                                        mdl.delete_item(port_phase)

                                    CPL_phase = mdl.get_item(f"CPL{phase}", parent=comp_handle, item_type=ITEM_COMPONENT)
                                    if CPL_phase:
                                        mdl.delete_item(CPL_phase)
                        ENDCODE
                    }

                    Freq {
                        label = "Nominal frequency"
                        widget = edit
                        type = generic
                        default_value = "fn"
                        unit = "Hz"
                        group = "Load Parameters"
                    }

                    inv_ph {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    CPL_curr {
                        label = "Current limit "
                        widget = edit
                        type = generic
                        default_value = "CPL_LMT"
                        unit = "pu"
                        group = "Load Parameters"
                    }

                    q_gain_k {
                        label = "Kalman filter Q gain"
                        widget = edit
                        type = generic
                        default_value = "q_gain_k"
                        group = "Load Parameters"
                    }

                    r_gain_k {
                        label = "Kalman filter R gain"
                        widget = edit
                        type = generic
                        default_value = "r_gain_k"
                        group = "Load Parameters"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        kVLine = mdl.get_property_value(mdl.prop(item_handle, "kVLine"))
                        VLL = mdl.get_property_value(mdl.prop(item_handle, "VLL"))
                        kVLL = mdl.get_property_value(mdl.prop(item_handle, "kVLL"))
                        kP_inp = mdl.get_property_value(mdl.prop(item_handle, "kP_inp"))
                        kP_tot = mdl.get_property_value(mdl.prop(item_handle, "kP_tot"))
                        kP = mdl.get_property_value(mdl.prop(item_handle, "kP"))
                        P = mdl.get_property_value(mdl.prop(item_handle, "P"))
                        SS = mdl.get_property_value(mdl.prop(item_handle, "SS"))
                        Rsnb = mdl.get_property_value(mdl.prop(item_handle, "Rsnb"))
                        kQ_inp = mdl.get_property_value(mdl.prop(item_handle, "kQ_inp"))
                        kQ_tot = mdl.get_property_value(mdl.prop(item_handle, "kQ_tot"))
                        kQ = mdl.get_property_value(mdl.prop(item_handle, "kQ"))
                        Q = mdl.get_property_value(mdl.prop(item_handle, "Q"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        Fast_con = mdl.get_property_value(mdl.prop(item_handle, "Fast_con"))
                        Tfst = mdl.get_property_value(mdl.prop(item_handle, "Tfst"))
                        Tfast_en = mdl.get_property_value(mdl.prop(item_handle, "Tfast_en"))
                        phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
                        Freq = mdl.get_property_value(mdl.prop(item_handle, "Freq"))
                        inv_ph = mdl.get_property_value(mdl.prop(item_handle, "inv_ph"))
                        CPL_curr = mdl.get_property_value(mdl.prop(item_handle, "CPL_curr"))
                        q_gain_k = mdl.get_property_value(mdl.prop(item_handle, "q_gain_k"))
                        r_gain_k = mdl.get_property_value(mdl.prop(item_handle, "r_gain_k"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy
                        import math

                        kVLL = kVLine/(3**0.5)
                        VLL = kVLL * 1000
                        kP = kP_tot / 3
                        kQ = kQ_tot / 3
                        P = kP * 1000
                        Q = kQ * 1000
                        SS = (P*P + Q*Q)**0.5

                        if SS==0:
                            Rsnb = 100000
                        else:
                            Rsnb = 30 * (VLL*VLL/(1.66*SS))

                        if Fast_con:
                            Tfast_en = 1
                        else:
                            Tfast_en = 0


                        if phases == "3":
                            inv_ph = 1/3
                        else:
                            inv_ph = 1


                        mdl.set_property_value(mdl.prop(item_handle, "kVLine"), kVLine)
                        mdl.set_property_value(mdl.prop(item_handle, "kVLL"), kVLL)
                        mdl.set_property_value(mdl.prop(item_handle, "kP"), kP)
                        mdl.set_property_value(mdl.prop(item_handle, "VLL"), VLL)
                        mdl.set_property_value(mdl.prop(item_handle, "P"), P)
                        mdl.set_property_value(mdl.prop(item_handle, "Rsnb"), Rsnb)
                        mdl.set_property_value(mdl.prop(item_handle, "kQ"), kQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Q"), Q)
                        mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)
                        mdl.set_property_value(mdl.prop(item_handle, "kP_tot"), kP_tot)
                        mdl.set_property_value(mdl.prop(item_handle, "kQ_tot"), kQ_tot)
                        mdl.set_property_value(mdl.prop(item_handle, "Tfast_en"), Tfast_en)

                        mdl.set_property_value(mdl.prop(item_handle, "inv_ph"), inv_ph)

                        mdl.set_property_value(mdl.prop(item_handle, "Freq"), Freq)
                        mdl.set_property_value(mdl.prop(item_handle, "SS"), SS)
                        mdl.set_property_value(mdl.prop(item_handle, "Tfst"), Tfst)

                        mdl.set_property_value(mdl.prop(item_handle, "CPL_curr"), CPL_curr)
                        mdl.set_property_value(mdl.prop(item_handle, "q_gain_k"), q_gain_k)
                        mdl.set_property_value(mdl.prop(item_handle, "r_gain_k"), r_gain_k)
                    ENDCODE
                }
            }
            [
                position = 8216, 8112
                rotation = left
                scale = 1, -1
                size = 104, 112
            ]

            component Subsystem TS_module {
                layout = dynamic
                component "core/Clock" Clock1 {
                    execution_rate = "Texec"
                }
                [
                    position = 6824, 8000
                ]

                component "core/Probe" d_rel {
                    signal_name = "Delay release"
                }
                [
                    position = 6928, 7936
                ]

                component "core/Comparator" Comparator1 {
                }
                [
                    position = 6928, 8000
                ]

                component "core/Constant" Constant1 {
                    execution_rate = "Texec"
                    value = "Tdel"
                }
                [
                    position = 6824, 8064
                ]

                component "core/Signal switch" "Signal switch1" {
                    criterion = "ctrl >= threshold"
                    threshold = "0.5"
                }
                [
                    position = 7008, 8144
                ]

                component "core/Constant" Constant3 {
                    execution_rate = "Texec"
                }
                [
                    position = 6840, 8128
                ]

                component "core/Integrator" Integrator1 {
                    show_reset = "rising"
                    show_state = "True"
                }
                [
                    position = 7352, 8152
                ]

                component "core/Constant" Constant4 {
                    execution_rate = "Texec"
                    value = "Tmax"
                }
                [
                    position = 7152, 8304
                ]

                component "core/Comparator" Comparator2 {
                }
                [
                    position = 7240, 8296
                ]

                component "core/1D look-up table" "1D look-up table1" {
                    in_vec_x = "T_vecP"
                    out_vec_f_x = "P_vec1"
                }
                [
                    position = 7608, 8008
                ]

                component "core/1D look-up table" "1D look-up table2" {
                    in_vec_x = "T_vecQ"
                    out_vec_f_x = "Q_vec1"
                }
                [
                    position = 7608, 8192
                ]

                component "core/Constant" Constant5 {
                    execution_rate = "Texec"
                    value = "0"
                }
                [
                    position = 6840, 8176
                ]

                component "core/Signal switch" "Signal switch2" {
                    criterion = "ctrl >= threshold"
                    threshold = "0.5"
                }
                [
                    position = 7176, 8144
                ]

                component "core/Constant" Constant6 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7112, 8048
                ]

                component "core/Signal switch" "Signal switch3" {
                    criterion = "ctrl >= threshold"
                    threshold = "0.5"
                }
                [
                    position = 7456, 8160
                ]

                component "core/Constant" Constant7 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7400, 8064
                ]

                component "core/Gain" Gain1 {
                }
                [
                    position = 7384, 8352
                ]

                port P {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8008
                ]

                port Q {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8192
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7240, 8440
                ]

                junction Junction3 sp
                [
                    position = 6952, 8176
                ]

                junction Junction4 sp
                [
                    position = 7496, 8160
                ]

                connect Clock1.out Comparator1.in1 as Connection1
                connect Constant1.out Comparator1.in2 as Connection2
                connect d_rel.in Comparator1.out as Connection530
                connect "Signal switch1.in2" Comparator1.out as Connection3
                connect Constant3.out "Signal switch1.in" as Connection5
                connect Constant4.out Comparator2.in2 as Connection7
                connect Comparator2.out Integrator1.reset as Connection8
                connect Comparator2.in1 Integrator1.state_port as Connection9
                [
                    position = 0, 0
                    breakpoints = 7208, 8232; 7392, 8232
                ]
                connect "1D look-up table1.value" P as Connection10
                connect "1D look-up table2.value" Q as Connection12
                connect Constant6.out "Signal switch2.in2" as Connection21
                connect "Signal switch1.out" "Signal switch2.in" as Connection26
                connect Constant5.out Junction3 as Connection31
                connect Junction3 "Signal switch1.in1" as Connection32
                [
                    position = 0, 0
                ]
                connect "Signal switch2.in1" Junction3 as Connection33
                [
                    position = 0, 0
                ]
                connect Constant7.out "Signal switch3.in2" as Connection38
                connect Integrator1.out "Signal switch3.in" as Connection40
                connect "1D look-up table2.addr" Junction4 as Connection41
                [
                    position = 0, 0
                ]
                connect "Signal switch3.out" Junction4 as Connection43
                connect Gain1.out "Signal switch3.in1" as Connection44
                connect Integrator1.in "Signal switch2.out" as Connection45
                [
                    position = 0, 0
                ]
                connect "1D look-up table1.addr" Junction4 as Connection49
                [
                    position = 0, 0
                ]
                connect Gain1.in T as connT

                P_mode = "Manual input"
                T_vec = "T_Ts_internal"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    P_nom {
                        label = "Nominal active power"
                        widget = edit
                        type = generic
                        default_value = "P_CPL"
                        unit = "kW"
                    }

                    Q_nom {
                        label = "Nominal reactive power"
                        widget = edit
                        type = generic
                        default_value = "Q_CPL"
                        unit = "kVAR"
                    }

                    S_vec {
                        label = "Load profile"
                        widget = edit
                        type = generic
                        default_value = "S_Ts"
                        unit = "pu"
                    }

                    S_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    S_vec2 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Plen {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Q_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecP {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_mode {
                        label = "Power profile mode"
                        widget = combo
                        combo_values = "Manual input", "Loop cycle"
                        type = string
                        default_value = "Loop cycle"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT
                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            if new_value == "Loop cycle":
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                T_def = mdl.get_item("Constant5", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if T_ext:
                                    mdl.delete_item(T_ext)

                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not conn_T_int:
                                    mdl.create_connection(mdl.term(T_inp, "in"), mdl.term(T_def, "out"), "connT")

                            else:
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_T_int:
                                    mdl.delete_item(conn_T_int)

                                if not T_ext:
                                    T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                                                        terminal_position=("left", 1),
                                                        position=(7237, 8437))

                                mdl.create_connection(mdl.term(T_inp, "in"), T_ext, "connT")
                        ENDCODE

                        CODE property_value_edited
                            if new_value == "Manual input":
                                mdl.disable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.disable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.enable_property(mdl.prop(container_handle, "T_vec"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.enable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.disable_property(mdl.prop(container_handle, "T_vec"))
                        ENDCODE
                    }

                    loop_en {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vec {
                        label = "Time profile"
                        widget = edit
                        type = generic
                        default_value = "T_Ts"
                        unit = "h"
                    }

                    Tmax {
                        label = "Power profile loop cycle"
                        widget = edit
                        type = generic
                        default_value = "T_Ts_max"
                        unit = "s"
                        disabled
                    }

                    Tdel {
                        label = "Profile start delay"
                        widget = edit
                        type = generic
                        default_value = "del_Ts"
                        unit = "s"
                        disabled
                    }

                    Texec {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Tfast"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        P_nom = mdl.get_property_value(mdl.prop(item_handle, "P_nom"))
                        Q_nom = mdl.get_property_value(mdl.prop(item_handle, "Q_nom"))
                        S_vec = mdl.get_property_value(mdl.prop(item_handle, "S_vec"))
                        S_vec1 = mdl.get_property_value(mdl.prop(item_handle, "S_vec1"))
                        S_vec2 = mdl.get_property_value(mdl.prop(item_handle, "S_vec2"))
                        P_vec1 = mdl.get_property_value(mdl.prop(item_handle, "P_vec1"))
                        Plen = mdl.get_property_value(mdl.prop(item_handle, "Plen"))
                        Q_vec1 = mdl.get_property_value(mdl.prop(item_handle, "Q_vec1"))
                        T_vecP = mdl.get_property_value(mdl.prop(item_handle, "T_vecP"))
                        T_vecQ = mdl.get_property_value(mdl.prop(item_handle, "T_vecQ"))
                        P_mode = mdl.get_property_value(mdl.prop(item_handle, "P_mode"))
                        loop_en = mdl.get_property_value(mdl.prop(item_handle, "loop_en"))
                        T_vec = mdl.get_property_value(mdl.prop(item_handle, "T_vec"))
                        Tmax = mdl.get_property_value(mdl.prop(item_handle, "Tmax"))
                        Tdel = mdl.get_property_value(mdl.prop(item_handle, "Tdel"))
                        Texec = mdl.get_property_value(mdl.prop(item_handle, "Texec"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy as np
                        import math

                        if P_mode == "Manual input":
                            loop_en = 0
                        else:
                            loop_en = 1


                        Plen = len(S_vec)
                        S_vec2 = S_vec

                        S_vec1 = [0] * Plen

                        idxS = 0
                        for S_val in S_vec:
                            S_vec1[idxS] = S_vec[idxS]
                            idxS += 1


                        T_vecP = [0] * Plen
                        T_vecQ = [0] * Plen

                        P_vec1 = [P_nom*i for i in S_vec2]
                        Q_vec1 = [Q_nom*i for i in S_vec2]

                        TstepP = Tmax/(Plen - 1)
                        TstepQ = Tmax/(Plen - 1)

                        idxP = 0
                        for P_val in S_vec1:

                            if loop_en == 1:
                                T_vecP[idxP] = idxP * TstepP
                            else:
                                T_vecP[idxP] = T_vec[idxP]
                            idxP += 1

                        idxQ = 0
                        for Q_val in S_vec1:

                            if loop_en == 1:
                                T_vecQ[idxQ] = idxQ * TstepQ
                            else:
                                T_vecQ[idxQ] = T_vec[idxQ]
                            idxQ += 1






                        mdl.set_property_value(mdl.prop(item_handle, "P_vec1"), P_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_vec1"), Q_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecP"), T_vecP)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecQ"), T_vecQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Tdel"), Tdel)
                        mdl.set_property_value(mdl.prop(item_handle, "Tmax"), Tmax)
                        mdl.set_property_value(mdl.prop(item_handle, "loop_en"), loop_en)
                        mdl.set_property_value(mdl.prop(item_handle, "P_nom"), P_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_nom"), Q_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Plen"), Plen)

                        mdl.set_property_value(mdl.prop(item_handle, "S_vec"), S_vec)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec1"), S_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec2"), S_vec2)

                        mdl.set_property_value(mdl.prop(item_handle, "Texec"), Texec)
                    ENDCODE
                }
            }
            [
                position = 8424, 8112
                size = 112, 72
            ]

            component Subsystem "three-phase voltage regulator" {
                layout = dynamic
                component Subsystem Auto1 {
                    layout = static
                    component "core/el_current_msr" Isec_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9256, 8656
                    ]

                    component "core/Inductor" Lr_A {
                        inductance = "Lright"
                    }
                    [
                        position = 8896, 8656
                    ]

                    component "core/Resistor" Rr_A {
                        resistance = "Rright"
                    }
                    [
                        position = 8800, 8656
                    ]

                    component "core/Inductor" Lm_A {
                        inductance = "Lm"
                    }
                    [
                        position = 8288, 8720
                        rotation = right
                    ]

                    component "core/Resistor" Rm_A {
                        resistance = "Rm"
                    }
                    [
                        position = 8224, 8720
                        rotation = right
                    ]

                    component "core/Inductor" Ll_A {
                        inductance = "Lleft"
                    }
                    [
                        position = 8160, 8656
                    ]

                    component "core/Resistor" Rl_A {
                        resistance = "Rleft"
                    }
                    [
                        position = 8064, 8656
                    ]

                    component Subsystem "Elapsed Time" {
                        layout = dynamic
                        component "core/Clock" Clock1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8112, 8168
                            hide_name = True
                        ]

                        component "core/Signal switch" "Signal switch1" {
                            criterion = "ctrl >= threshold"
                            threshold = "0.5"
                        }
                        [
                            position = 8200, 8184
                            hide_name = True
                        ]

                        component "core/Unit Delay" "Unit Delay1" {
                        }
                        [
                            position = 8200, 8240
                            hide_name = True
                            scale = -1, 1
                        ]

                        component "core/Edge Detection" "Edge Detection1" {
                            edge = "rising"
                        }
                        [
                            position = 8200, 8120
                            rotation = right
                            hide_name = True
                            size = 32, 32
                        ]

                        component "core/Sum" Sum2 {
                            signs = "-+"
                        }
                        [
                            position = 8272, 8264
                            hide_name = True
                        ]

                        port In1 {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8112, 8080
                            hide_name = True
                        ]

                        port Out2 {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8344, 8264
                            hide_name = True
                        ]

                        junction Junction30 sp
                        [
                            position = 8232, 8240
                        ]

                        junction JL2 sp
                        [
                            position = 8152, 8168
                        ]

                        connect "Edge Detection1.In1" In1 as Connection271
                        connect Sum2.out Out2 as Connection272
                        connect "Unit Delay1.out" "Signal switch1.in1" as Connection260
                        [
                            position = 0, 0
                            hide_name = True
                        ]
                        connect "Edge Detection1.Out1" "Signal switch1.in2" as Connection264
                        connect "Signal switch1.out" Junction30 as Connection265
                        connect Junction30 "Unit Delay1.in" as Connection266
                        connect Sum2.in Junction30 as Connection267
                        connect Clock1.out JL2 as Connection268
                        connect JL2 "Signal switch1.in" as Connection269
                        connect Sum2.in1 JL2 as Connection270
                    }
                    [
                        position = 8512, 8320
                        rotation = left
                        scale = -1, -1
                        size = 48, 48
                    ]

                    component "core/Constant" var_per_tap {
                        execution_rate = "execution_rate"
                        value = "var_per_tap"
                    }
                    [
                        position = 8936, 8328
                    ]

                    component "core/Product" Product1 {
                    }
                    [
                        position = 9040, 8264
                        hide_name = True
                    ]

                    component "core/Probe" tap {
                    }
                    [
                        position = 9112, 8184
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Constant" regulator_voltage {
                        execution_rate = "execution_rate"
                        value = "Vreg"
                    }
                    [
                        position = 7848, 8264
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage1 {
                        execution_rate = "execution_rate"
                        value = "band"
                    }
                    [
                        position = 8152, 8304
                        hide_name = True
                    ]

                    component "core/Gain" Gain1 {
                        gain = "0.5"
                    }
                    [
                        position = 8216, 8304
                        hide_name = True
                    ]

                    component "core/Sum" VSum {
                        signs = "-+"
                    }
                    [
                        position = 7960, 8248
                        hide_name = True
                    ]

                    component "core/Abs" Abs1 {
                    }
                    [
                        position = 8032, 8248
                        hide_name = True
                    ]

                    component "core/Sign" Sign1 {
                    }
                    [
                        position = 8032, 8208
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage2 {
                        execution_rate = "execution_rate"
                        value = "Td"
                    }
                    [
                        position = 8480, 8376
                        hide_name = True
                    ]

                    component "core/Relational operator" "Relational operator2" {
                        relational_op = ">"
                    }
                    [
                        position = 8560, 8368
                        hide_name = True
                    ]

                    component "core/Logical operator" "Logical operator1" {
                    }
                    [
                        position = 8672, 8288
                        hide_name = True
                    ]

                    component "core/Edge Detection" "Edge Detection3" {
                    }
                    [
                        position = 8816, 8408
                        hide_name = True
                        scale = -1, 1
                        size = 32, 32
                    ]

                    component "core/Logical operator" "Logical operator2" {
                    }
                    [
                        position = 8448, 8280
                        hide_name = True
                    ]

                    component "core/Logical operator" "Logical operator3" {
                        operator = "NOT"
                    }
                    [
                        position = 8728, 8408
                        hide_name = True
                        scale = -1, 1
                    ]

                    component "core/Product" Product2 {
                    }
                    [
                        position = 8752, 8256
                        hide_name = True
                    ]

                    component "core/Voltage RMS" VLoad_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9456, 8696
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_A {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9160, 8656
                        size = 64, 32
                    ]

                    component "core/Gain" ABcomp {
                        gain = "ABcomp"
                    }
                    [
                        position = 8448, 8216
                        rotation = down
                        scale = -1, 1
                    ]

                    component "core/Accumulator" "Tap Position" {
                        limit_lower = "-min_n_tap"
                        limit_output = "True"
                        limit_upper = "max_n_tap"
                    }
                    [
                        position = 8832, 8256
                    ]

                    component "core/el_voltage_msr" Vprim_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8368, 8720
                        rotation = right
                    ]

                    component "core/Gain" Gain4 {
                        gain = "1/ptratio_auto"
                    }
                    [
                        position = 7880, 8232
                        hide_name = True
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_A {
                    }
                    [
                        position = 8704, 8656
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_A {
                    }
                    [
                        position = 8632, 8720
                        rotation = left
                        size = 64, 32
                    ]

                    component "core/Product" Product11 {
                    }
                    [
                        position = 8312, 8872
                    ]

                    component "core/Product" Product10 {
                    }
                    [
                        position = 8312, 8968
                    ]

                    component "core/Probe" per_tap {
                    }
                    [
                        position = 9040, 8328
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Probe" pu_applied {
                    }
                    [
                        position = 9344, 8192
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Sum" VSum1 {
                        signs = "++"
                    }
                    [
                        position = 9256, 8192
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage3 {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9168, 8184
                        hide_name = True
                    ]

                    component "core/Sum" VSum2 {
                        signs = "-+"
                    }
                    [
                        position = 9040, 8184
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage4 {
                        execution_rate = "execution_rate"
                        value = "tap_difference"
                    }
                    [
                        position = 8936, 8176
                        hide_name = True
                    ]

                    component "core/el_current_msr" Isec_B {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9264, 9136
                    ]

                    component "core/Inductor" Lr_B {
                        inductance = "Lright"
                    }
                    [
                        position = 8904, 9136
                    ]

                    component "core/Resistor" Rr_B {
                        resistance = "Rright"
                    }
                    [
                        position = 8808, 9136
                    ]

                    component "core/Inductor" Lm_B {
                        inductance = "Lm"
                    }
                    [
                        position = 8304, 9200
                        rotation = right
                    ]

                    component "core/Resistor" Rm_B {
                        resistance = "Rm"
                    }
                    [
                        position = 8240, 9200
                        rotation = right
                    ]

                    component "core/Inductor" Ll_B {
                        inductance = "Lleft"
                    }
                    [
                        position = 8176, 9136
                    ]

                    component "core/Resistor" Rl_B {
                        resistance = "Rleft"
                    }
                    [
                        position = 8080, 9136
                    ]

                    component "core/Voltage RMS" VLoad_B {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9464, 9176
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_B {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9168, 9136
                        size = 64, 32
                    ]

                    component "core/el_voltage_msr" Vprim_B {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8384, 9200
                        rotation = right
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_B {
                    }
                    [
                        position = 8712, 9136
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_B {
                    }
                    [
                        position = 8640, 9200
                        rotation = left
                        size = 64, 32
                    ]

                    component "core/el_current_msr" Isec_C {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9272, 9560
                    ]

                    component "core/Inductor" Lr_C {
                        inductance = "Lright"
                    }
                    [
                        position = 8912, 9560
                    ]

                    component "core/Resistor" Rr_C {
                        resistance = "Rright"
                    }
                    [
                        position = 8816, 9560
                    ]

                    component "core/Inductor" Lm_C {
                        inductance = "Lm"
                    }
                    [
                        position = 8312, 9624
                        rotation = right
                    ]

                    component "core/Resistor" Rm_C {
                        resistance = "Rm"
                    }
                    [
                        position = 8248, 9624
                        rotation = right
                    ]

                    component "core/Inductor" Ll_C {
                        inductance = "Lleft"
                    }
                    [
                        position = 8184, 9560
                    ]

                    component "core/Resistor" Rl_C {
                        resistance = "Rleft"
                    }
                    [
                        position = 8088, 9560
                    ]

                    component "core/Voltage RMS" VLoad_C {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9472, 9600
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_C {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9176, 9560
                        size = 64, 32
                    ]

                    component "core/el_voltage_msr" Vprim_C {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8392, 9624
                        rotation = right
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_C {
                    }
                    [
                        position = 8720, 9560
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_C {
                    }
                    [
                        position = 8648, 9624
                        rotation = left
                        size = 64, 32
                    ]

                    component "core/Product" Product12 {
                    }
                    [
                        position = 8312, 9344
                    ]

                    component "core/Product" Product13 {
                    }
                    [
                        position = 8312, 9440
                    ]

                    component "core/Product" Product14 {
                    }
                    [
                        position = 8312, 9784
                    ]

                    component "core/Product" Product15 {
                    }
                    [
                        position = 8312, 9880
                    ]

                    component "core/Relational operator" "Relational operator1" {
                        relational_op = ">"
                    }
                    [
                        position = 8280, 8256
                        hide_name = True
                    ]

                    component "core/Probe" diff {
                    }
                    [
                        position = 8208, 8168
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Voltage RMS" VLoad_AB {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9528, 8936
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Resistor" Rinb {
                        resistance = "1e10"
                    }
                    [
                        position = 8032, 9200
                        rotation = right
                    ]

                    component "core/Resistor" Rina {
                        resistance = "1e10"
                    }
                    [
                        position = 8016, 8720
                        rotation = right
                    ]

                    component "core/Resistor" Rinc {
                        resistance = "1e10"
                    }
                    [
                        position = 8040, 9624
                        rotation = right
                    ]

                    component "core/Resistor" Rmida {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 8720
                        rotation = right
                        hide_name = True
                    ]

                    component "core/Resistor" Rmidb {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 9200
                        rotation = right
                        hide_name = True
                    ]

                    component "core/Resistor" Rmidc {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 9624
                        rotation = right
                        hide_name = True
                    ]

                    component "core/Termination" Termination1 {
                    }
                    [
                        position = 7880, 8328
                        hide_name = True
                    ]

                    port P1 {
                        position = -128.0, -120.0
                        kind = pe
                    }
                    [
                        position = 7776, 8656
                        hide_name = True
                    ]

                    port P2 {
                        position = -128.0, -72.0
                        kind = pe
                    }
                    [
                        position = 7776, 8784
                        hide_name = True
                    ]

                    port S1 {
                        position = 128.0, -120.0
                        kind = pe
                    }
                    [
                        position = 9616, 8656
                        rotation = down
                        hide_name = True
                    ]

                    port S2 {
                        position = 128.0, -72.0
                        kind = pe
                    }
                    [
                        position = 9616, 8784
                        rotation = down
                        hide_name = True
                    ]

                    port P3 {
                        position = -128.0, -24.0
                        kind = pe
                    }
                    [
                        position = 7776, 9136
                    ]

                    port S3 {
                        position = 128.0, -24.0
                        kind = pe
                    }
                    [
                        position = 9584, 9136
                        rotation = down
                        hide_name = True
                    ]

                    port P5 {
                        position = -128.0, 72.0
                        kind = pe
                    }
                    [
                        position = 7752, 9560
                    ]

                    port S5 {
                        position = 128.0, 72.0
                        kind = pe
                    }
                    [
                        position = 9584, 9560
                        rotation = down
                        hide_name = True
                    ]

                    port P6 {
                        position = -128.0, 24.0
                        kind = pe
                    }
                    [
                        position = 7776, 9264
                        hide_name = True
                    ]

                    port P7 {
                        position = -128.0, 120.0
                        kind = pe
                    }
                    [
                        position = 7752, 9688
                        hide_name = True
                    ]

                    port S6 {
                        position = 128.0, 24.0
                        kind = pe
                    }
                    [
                        position = 9584, 9264
                        rotation = down
                        hide_name = True
                    ]

                    port S7 {
                        position = 128.0, 120.0
                        kind = pe
                    }
                    [
                        position = 9584, 9688
                        rotation = down
                        hide_name = True
                    ]

                    tag Goto2 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9272, 8264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto3 {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9488, 8744
                        rotation = right
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto6 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9304, 8624
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag1" {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8656
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag2" {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8784
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11a {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8656
                        size = 60, 20
                    ]

                    tag ET12a {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8784
                        size = 60, 20
                    ]

                    tag ET21a {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8656
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22a {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8784
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag7" {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8656
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag8" {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8784
                        hide_name = True
                        size = 60, 20
                    ]

                    tag FromVLDC {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7792, 8232
                        size = 60, 20
                    ]

                    tag From1 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8816
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto11 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8432, 8720
                        size = 60, 20
                    ]

                    tag From11 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8976
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From12 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8880
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8568, 8720
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto12 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8872
                        size = 60, 20
                    ]

                    tag Goto13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8968
                        size = 60, 20
                    ]

                    tag From14 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8640, 8600
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto16 {
                        value = "Iinst_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9312, 9104
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag9" {
                        value = "S1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7912, 9136
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag10" {
                        value = "S2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7912, 9264
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11b {
                        value = "S1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7984, 9136
                        size = 60, 20
                    ]

                    tag ET12b {
                        value = "S2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7984, 9264
                        size = 60, 20
                    ]

                    tag ET21b {
                        value = "L1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9000, 9136
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22b {
                        value = "L2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9000, 9264
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag11" {
                        value = "L1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9072, 9136
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag12" {
                        value = "L2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9072, 9264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto18 {
                        value = "Vprim_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8448, 9200
                        size = 60, 20
                    ]

                    tag From15 {
                        value = "Iprim_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8576, 9200
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From16 {
                        value = "Vsec_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8648, 9080
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto21 {
                        value = "Iinst_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9320, 9528
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag13" {
                        value = "S1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7920, 9560
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag14" {
                        value = "S2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7920, 9688
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11c {
                        value = "S1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7992, 9560
                        size = 60, 20
                    ]

                    tag ET12c {
                        value = "S2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7992, 9688
                        size = 60, 20
                    ]

                    tag ET21c {
                        value = "L1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9008, 9560
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22c {
                        value = "L2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9008, 9688
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag15" {
                        value = "L1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9080, 9560
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag16" {
                        value = "L2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9080, 9688
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto23 {
                        value = "Vprim_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8456, 9624
                        size = 60, 20
                    ]

                    tag From17 {
                        value = "Iprim_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8584, 9624
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From18 {
                        value = "Vsec_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8656, 9528
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From19 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9288
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From20 {
                        value = "Iinst_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9448
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From21 {
                        value = "Vprim_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9352
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto24 {
                        value = "Vsec_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9344
                        size = 60, 20
                    ]

                    tag Goto25 {
                        value = "Iprim_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9440
                        size = 60, 20
                    ]

                    tag From22 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9728
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From23 {
                        value = "Iinst_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9888
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From24 {
                        value = "Vprim_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9792
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto26 {
                        value = "Vsec_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9784
                        size = 60, 20
                    ]

                    tag Goto27 {
                        value = "Iprim_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9880
                        size = 60, 20
                    ]

                    tag Goto28 {
                        value = "VLoad_ab"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9608, 8936
                        size = 59, 20
                    ]

                    tag FromVLDC_unused {
                        value = "VLoad_ab"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7792, 8328
                        size = 60, 20
                    ]

                    junction Junction8 pe
                    [
                        position = 8256, 8680
                    ]

                    junction Junction10 pe
                    [
                        position = 8256, 8760
                    ]

                    junction Junction11 pe
                    [
                        position = 8256, 8656
                    ]

                    junction Junction42 sp
                    [
                        position = 8000, 8248
                    ]

                    junction Junction43 sp
                    [
                        position = 8512, 8280
                    ]

                    junction JL2 pe
                    [
                        position = 9456, 8784
                    ]

                    junction JL1 pe
                    [
                        position = 9456, 8656
                    ]

                    junction Junction53 pe
                    [
                        position = 8256, 8784
                    ]

                    junction Junction55 pe
                    [
                        position = 8632, 8784
                    ]

                    junction Junction60 pe
                    [
                        position = 8368, 8656
                    ]

                    junction Junction61 pe
                    [
                        position = 8368, 8784
                    ]

                    junction Junction63 pe
                    [
                        position = 8632, 8656
                    ]

                    junction Junction64 sp
                    [
                        position = 8248, 8864
                    ]

                    junction Junction65 sp
                    [
                        position = 9000, 8328
                    ]

                    junction Junction66 sp
                    [
                        position = 9200, 8264
                    ]

                    junction Junction67 sp
                    [
                        position = 8896, 8256
                    ]

                    junction Junction68 sp
                    [
                        position = 8984, 8256
                    ]

                    junction Junction69 pe
                    [
                        position = 8272, 9160
                    ]

                    junction Junction70 pe
                    [
                        position = 8272, 9240
                    ]

                    junction Junction71 pe
                    [
                        position = 8272, 9136
                    ]

                    junction JL4 pe
                    [
                        position = 9464, 9136
                    ]

                    junction Junction73 pe
                    [
                        position = 8272, 9264
                    ]

                    junction Junction75 pe
                    [
                        position = 8640, 9264
                    ]

                    junction Junction78 pe
                    [
                        position = 8384, 9136
                    ]

                    junction Junction79 pe
                    [
                        position = 8384, 9264
                    ]

                    junction Junction80 pe
                    [
                        position = 8640, 9136
                    ]

                    junction Junction81 pe
                    [
                        position = 8280, 9584
                    ]

                    junction Junction82 pe
                    [
                        position = 8280, 9664
                    ]

                    junction Junction83 pe
                    [
                        position = 8280, 9560
                    ]

                    junction JL6 pe
                    [
                        position = 9472, 9560
                    ]

                    junction Junction85 pe
                    [
                        position = 8280, 9688
                    ]

                    junction Junction87 pe
                    [
                        position = 8648, 9688
                    ]

                    junction Junction90 pe
                    [
                        position = 8392, 9560
                    ]

                    junction Junction91 pe
                    [
                        position = 8392, 9688
                    ]

                    junction Junction92 pe
                    [
                        position = 8648, 9560
                    ]

                    junction Junction93 sp
                    [
                        position = 8248, 9336
                    ]

                    junction Junction94 sp
                    [
                        position = 8248, 9776
                    ]

                    junction Junction101 sp
                    [
                        position = 8152, 8248
                    ]

                    junction Junction102 pe
                    [
                        position = 9464, 9264
                    ]

                    junction Junction103 pe
                    [
                        position = 9472, 9688
                    ]

                    junction Junction104 pe
                    [
                        position = 9528, 9136
                    ]

                    junction Junction105 pe
                    [
                        position = 9528, 8656
                    ]

                    junction Junction106 pe
                    [
                        position = 8032, 9136
                    ]

                    junction Junction107 pe
                    [
                        position = 8032, 9264
                    ]

                    junction Junction108 pe
                    [
                        position = 8016, 8656
                    ]

                    junction Junction109 pe
                    [
                        position = 8016, 8784
                    ]

                    junction Junction110 pe
                    [
                        position = 8040, 9560
                    ]

                    junction Junction111 pe
                    [
                        position = 8040, 9688
                    ]

                    junction Junction112 pe
                    [
                        position = 8512, 8656
                    ]

                    junction Junction113 pe
                    [
                        position = 8512, 8784
                    ]

                    junction Junction114 pe
                    [
                        position = 8512, 9136
                    ]

                    junction Junction115 pe
                    [
                        position = 8512, 9264
                    ]

                    junction Junction116 pe
                    [
                        position = 8512, 9560
                    ]

                    junction Junction117 pe
                    [
                        position = 8512, 9688
                    ]

                    comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Tap changer control</p></body></html> ENDCOMMENT
                    [
                        position = 8488, 8168
                    ]

                    connect Lr_A.p_node Rr_A.n_node as Connection144
                    connect Rm_A.p_node Junction8 as Connection148
                    connect Lm_A.p_node Junction8 as Connection150
                    connect Rm_A.n_node Junction10 as Connection154
                    connect Lm_A.n_node Junction10 as Connection156
                    connect Junction8 Junction11 as Connection157
                    connect Rl_A.n_node Ll_A.p_node as Connection172
                    connect Ll_A.n_node Junction11 as Connection173
                    connect Abs1.in Junction42 as Connection431
                    connect Junction42 VSum.out as Connection432
                    connect Sign1.in Junction42 as Connection433
                    connect "Logical operator2.out" Junction43 as Connection434
                    connect Junction43 "Logical operator1.in" as Connection427
                    [
                        position = 0, 0
                        breakpoints = 8512, 8280
                    ]
                    connect "Elapsed Time.In1" Junction43 as Connection435
                    connect "Elapsed Time.Out2" "Relational operator2.in" as Connection436
                    connect regulator_voltage1.out Gain1.in as Connection250
                    connect regulator_voltage.out VSum.in1 as Connection252
                    connect regulator_voltage2.out "Relational operator2.in1" as Connection272
                    connect "Edge Detection3.Out1" "Logical operator3.in" as Connection280
                    connect "Logical operator3.out" "Logical operator2.in1" as Connection281
                    connect "Logical operator1.out" Product2.in1 as Connection295
                    connect VLoad_A.out Goto3 as Connection301
                    connect VLoad_A.n_node JL2 as Connection304
                    connect VLoad_A.p_node JL1 as Connection307
                    connect ILrms_A.n_node Isec_A.p_node as Connection339
                    connect Isec_A.out Goto6 as Connection367
                    connect Sign1.out ABcomp.in as Connection443
                    connect ABcomp.out Product2.in as Connection444
                    connect P1 "Electric Tag1" as Connection453
                    connect Junction53 Junction10 as Connection457
                    [
                        position = 0, 0
                    ]
                    connect Lr_A.n_node ET21a as Connection459
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect "Electric Tag7" ILrms_A.p_node as Connection460
                    connect ET22a Junction55 as Connection466
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Product2.out "Tap Position.in" as Connection471
                    connect Junction11 Junction60 as Connection494
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.p_node Junction60 as Connection496
                    connect Junction61 Junction53 as Connection498
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.n_node Junction61 as Connection499
                    connect FromVLDC Gain4.in as Connection500
                    connect Gain4.out VSum.in as Connection501
                    connect Vsec_ins_A.p_node Rr_A.p_node as Connection512
                    connect Junction63 Vsec_ins_A.n_node as Connection524
                    [
                        position = 0, 0
                    ]
                    connect Isp_A.n_node Junction63 as Connection525
                    connect Goto11 Vprim_A.out as Connection529
                    connect From11 Product10.in1 as Connection526
                    connect From1 Junction64 as Connection531
                    connect Junction64 Product11.in as Connection532
                    connect Product10.in Junction64 as Connection533
                    connect From12 Product11.in1 as Connection534
                    connect Isp_A.p_node Junction55 as Connection535
                    [
                        position = 0, 0
                    ]
                    connect From13 Isp_A.in as Connection536
                    connect From14 Vsec_ins_A.in as Connection539
                    connect Product11.out Goto12 as Connection540
                    connect Goto13 Product10.out as Connection541
                    connect var_per_tap.out Junction65 as Connection544
                    connect Junction65 Product1.in1 as Connection545
                    connect per_tap.in Junction65 as Connection546
                    connect pu_applied.in VSum1.out as Connection551
                    connect regulator_voltage3.out VSum1.in as Connection552
                    connect Product1.out Junction66 as Connection553
                    [
                        position = 0, 0
                    ]
                    connect Junction66 Goto2 as Connection554
                    connect VSum1.in1 Junction66 as Connection555
                    connect regulator_voltage4.out VSum2.in as Connection561
                    connect "Tap Position.out" Junction67 as Connection564
                    connect Junction67 "Edge Detection3.In1" as Connection565
                    [
                        position = 0, 0
                    ]
                    connect Product1.in Junction68 as Connection566
                    connect Junction68 VSum2.in1 as Connection567
                    [
                        position = 0, 0
                        breakpoints = 8984, 8256
                    ]
                    connect Junction67 Junction68 as Connection568
                    connect tap.in VSum2.out as Connection569
                    connect Lr_B.p_node Rr_B.n_node as Connection570
                    connect Rm_B.p_node Junction69 as Connection571
                    connect Lm_B.p_node Junction69 as Connection572
                    connect Rm_B.n_node Junction70 as Connection573
                    connect Lm_B.n_node Junction70 as Connection574
                    connect Junction69 Junction71 as Connection575
                    connect Rl_B.n_node Ll_B.p_node as Connection576
                    connect Ll_B.n_node Junction71 as Connection577
                    connect VLoad_B.p_node JL4 as Connection582
                    connect ILrms_B.n_node Isec_B.p_node as Connection583
                    connect Isec_B.out Goto16 as Connection585
                    connect P3 "Electric Tag9" as Connection590
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Junction73 Junction70 as Connection592
                    [
                        position = 0, 0
                    ]
                    connect Lr_B.n_node ET21b as Connection593
                    connect "Electric Tag11" ILrms_B.p_node as Connection594
                    connect ET22b Junction75 as Connection598
                    connect Junction71 Junction78 as Connection605
                    [
                        position = 0, 0
                    ]
                    connect Vprim_B.p_node Junction78 as Connection606
                    connect Junction79 Junction73 as Connection608
                    [
                        position = 0, 0
                    ]
                    connect Vprim_B.n_node Junction79 as Connection609
                    connect Vsec_ins_B.p_node Rr_B.p_node as Connection610
                    connect Junction80 Vsec_ins_B.n_node as Connection612
                    [
                        position = 0, 0
                    ]
                    connect Isp_B.n_node Junction80 as Connection613
                    connect Goto18 Vprim_B.out as Connection614
                    connect Isp_B.p_node Junction75 as Connection615
                    [
                        position = 0, 0
                    ]
                    connect From15 Isp_B.in as Connection616
                    connect From16 Vsec_ins_B.in as Connection617
                    connect Lr_C.p_node Rr_C.n_node as Connection618
                    connect Rm_C.p_node Junction81 as Connection619
                    connect Lm_C.p_node Junction81 as Connection620
                    connect Rm_C.n_node Junction82 as Connection621
                    connect Lm_C.n_node Junction82 as Connection622
                    connect Junction81 Junction83 as Connection623
                    connect Rl_C.n_node Ll_C.p_node as Connection624
                    connect Ll_C.n_node Junction83 as Connection625
                    connect S5 JL6 as Connection629
                    connect VLoad_C.p_node JL6 as Connection630
                    connect ILrms_C.n_node Isec_C.p_node as Connection631
                    connect Isec_C.out Goto21 as Connection633
                    connect P5 "Electric Tag13" as Connection638
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Junction85 Junction82 as Connection640
                    [
                        position = 0, 0
                    ]
                    connect Lr_C.n_node ET21c as Connection641
                    connect "Electric Tag15" ILrms_C.p_node as Connection642
                    connect ET22c Junction87 as Connection646
                    connect Junction83 Junction90 as Connection653
                    [
                        position = 0, 0
                    ]
                    connect Vprim_C.p_node Junction90 as Connection654
                    connect Junction91 Junction85 as Connection656
                    [
                        position = 0, 0
                    ]
                    connect Vprim_C.n_node Junction91 as Connection657
                    connect Vsec_ins_C.p_node Rr_C.p_node as Connection658
                    connect Junction92 Vsec_ins_C.n_node as Connection660
                    [
                        position = 0, 0
                    ]
                    connect Isp_C.n_node Junction92 as Connection661
                    connect Goto23 Vprim_C.out as Connection662
                    connect Isp_C.p_node Junction87 as Connection663
                    [
                        position = 0, 0
                    ]
                    connect From17 Isp_C.in as Connection664
                    connect From18 Vsec_ins_C.in as Connection665
                    connect From20 Product13.in1 as Connection666
                    connect From19 Junction93 as Connection667
                    connect Junction93 Product12.in as Connection668
                    connect Product13.in Junction93 as Connection669
                    connect From21 Product12.in1 as Connection670
                    connect Product12.out Goto24 as Connection671
                    connect Goto25 Product13.out as Connection672
                    connect From23 Product15.in1 as Connection673
                    connect From22 Junction94 as Connection674
                    connect Junction94 Product14.in as Connection675
                    connect Product15.in Junction94 as Connection676
                    connect From24 Product14.in1 as Connection677
                    connect Product14.out Goto26 as Connection678
                    connect Goto27 Product15.out as Connection679
                    connect Gain1.out "Relational operator1.in1" as Connection725
                    connect "Logical operator1.in1" "Relational operator2.out" as Connection777
                    [
                        position = 0, 0
                        breakpoints = 8632, 8368; 8632, 8368; 8632, 8368; 8592, 8368
                    ]
                    connect diff.in Junction101 as Connection782
                    connect Junction101 "Relational operator1.in" as Connection783
                    [
                        position = 0, 0
                    ]
                    connect Abs1.out Junction101 as Connection784
                    connect "Logical operator2.in" "Relational operator1.out" as Connection785
                    connect JL2 "Electric Tag8" as Connection786
                    [
                        position = 0, 0
                    ]
                    connect JL1 Isec_A.n_node as Connection787
                    [
                        position = 0, 0
                    ]
                    connect JL4 Isec_B.n_node as Connection789
                    [
                        position = 0, 0
                    ]
                    connect Isec_C.n_node JL6 as Connection791
                    [
                        position = 0, 0
                    ]
                    connect "Electric Tag2" P2 as Connection793
                    connect S2 JL2 as Connection797
                    connect P6 "Electric Tag10" as Connection798
                    connect P7 "Electric Tag14" as Connection799
                    connect VLoad_B.n_node Junction102 as Connection800
                    connect Junction102 "Electric Tag12" as Connection801
                    [
                        position = 0, 0
                    ]
                    connect S6 Junction102 as Connection802
                    connect "Electric Tag16" Junction103 as Connection803
                    [
                        position = 0, 0
                    ]
                    connect Junction103 VLoad_C.n_node as Connection804
                    [
                        position = 0, 0
                    ]
                    connect S7 Junction103 as Connection805
                    connect S3 Junction104 as Connection806
                    connect Junction104 JL4 as Connection807
                    connect VLoad_AB.n_node Junction104 as Connection808
                    connect S1 Junction105 as Connection809
                    connect Junction105 JL1 as Connection810
                    connect VLoad_AB.p_node Junction105 as Connection811
                    connect VLoad_AB.out Goto28 as Connection812
                    connect ET11b Junction106 as Connection819
                    connect Junction106 Rl_B.p_node as Connection820
                    connect Rinb.p_node Junction106 as Connection821
                    connect Junction73 Junction107 as Connection822
                    connect Junction107 ET12b as Connection823
                    connect Rinb.n_node Junction107 as Connection824
                    connect ET11a Junction108 as Connection825
                    connect Junction108 Rl_A.p_node as Connection826
                    connect Rina.p_node Junction108 as Connection827
                    connect ET12a Junction109 as Connection828
                    connect Junction109 Junction53 as Connection829
                    connect Rina.n_node Junction109 as Connection830
                    connect Rl_C.p_node Junction110 as Connection831
                    connect Junction110 ET11c as Connection832
                    connect Rinc.p_node Junction110 as Connection833
                    connect Junction85 Junction111 as Connection834
                    connect Junction111 ET12c as Connection835
                    connect Rinc.n_node Junction111 as Connection836
                    connect Junction60 Junction112 as Connection837
                    [
                        position = 0, 0
                    ]
                    connect Junction112 Junction63 as Connection838
                    [
                        position = 0, 0
                    ]
                    connect Rmida.p_node Junction112 as Connection839
                    connect Junction55 Junction113 as Connection840
                    [
                        position = 0, 0
                    ]
                    connect Junction113 Junction61 as Connection841
                    connect Rmida.n_node Junction113 as Connection842
                    connect Junction78 Junction114 as Connection843
                    [
                        position = 0, 0
                    ]
                    connect Junction114 Junction80 as Connection844
                    [
                        position = 0, 0
                    ]
                    connect Rmidb.p_node Junction114 as Connection845
                    connect Junction75 Junction115 as Connection846
                    [
                        position = 0, 0
                    ]
                    connect Junction115 Junction79 as Connection847
                    connect Rmidb.n_node Junction115 as Connection848
                    connect Junction90 Junction116 as Connection849
                    [
                        position = 0, 0
                    ]
                    connect Junction116 Junction92 as Connection850
                    [
                        position = 0, 0
                    ]
                    connect Rmidc.p_node Junction116 as Connection851
                    connect Junction87 Junction117 as Connection852
                    [
                        position = 0, 0
                    ]
                    connect Junction117 Junction91 as Connection853
                    connect Rmidc.n_node Junction117 as Connection854
                    connect Termination1.in FromVLDC_unused as Connection855

                    mask {
                        icon = "image(\'trl_ideal_test.svg\')"
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Autotransformer with load tap changer (LTC) and optional line drop compensator (LDC).</p></body></html>"

                        R1 {
                            label = "R1"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General:1"
                        }

                        L1 {
                            label = "L1"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        R2 {
                            label = "R2"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General"
                        }

                        L2 {
                            label = "L2"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        Rm {
                            label = "Rm"
                            widget = edit
                            type = generic
                            default_value = "1e5"
                            unit = "Ω"
                            group = "General"
                        }

                        Lm {
                            label = "Lm"
                            widget = edit
                            type = generic
                            default_value = "17"
                            unit = "H"
                            group = "General"
                        }

                        n_taps {
                            label = "Number of taps ±"
                            widget = edit
                            type = generic
                            default_value = "16"
                            group = "General"
                        }

                        reg_range {
                            label = "Regualtor range ±"
                            widget = edit
                            type = generic
                            default_value = "10"
                            unit = "%"
                            group = "General"
                            nonvisible
                        }

                        atype {
                            label = "Type"
                            widget = combo
                            combo_values = "Type A", "Type B"
                            type = string
                            default_value = "Type A"
                            group = "Voltage Regulation:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                for phase in ['a', 'b', 'c']:
                                    ET11 = mdl.get_item(f'ET11{phase}', parent=comp_handle, item_type='tag')
                                    ET12 = mdl.get_item(f'ET12{phase}', parent=comp_handle, item_type='tag')
                                    ET21 = mdl.get_item(f'ET21{phase}', parent=comp_handle, item_type='tag')
                                    ET22 = mdl.get_item(f'ET22{phase}', parent=comp_handle, item_type='tag')

                                    if new_value == 'Type A':
                                        mdl.set_tag_properties(ET11, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'S2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'L2{phase}')
                                    else:
                                        mdl.set_tag_properties(ET11, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'L2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'S2{phase}')

                                    mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        reg_method {
                            label = "Regulation method"
                            widget = combo
                            combo_values = "Line voltage regulator", "Bus voltage regulator", "Line drop compensator"
                            type = string
                            default_value = "Line voltage regulator"
                            group = "Voltage Regulation"
                            no_evaluate

                            CODE property_value_changed
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                if new_value == 'Bus voltage regulator':
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if FromVLDC:
                                        mdl.delete_item(FromVLDC)

                                    Vin = mdl.create_port(
                                                            name='vref',
                                                            parent=comp_handle,
                                                            kind='sp',
                                                            direction='in',
                                                            terminal_position=(-32,-128),
                                                            hide_name=False,
                                                            position=(8672, 8856)
                                                         )
                                    VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                    mdl.create_connection(Vin, mdl.term(VSum,'in'))
                                else:
                                    Vin = mdl.get_item('vref', parent=comp_handle, item_type='port')
                                    if Vin:
                                        mdl.delete_item(Vin)
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if not FromVLDC:
                                        FromVLDC = mdl.create_tag(
                                                                    value='VLDC',
                                                                    name='FromVLDC',
                                                                    parent=comp_handle,
                                                                    kind='sp',
                                                                    position=(8656, 8880),
                                                                    direction='out',
                                                                    scope='local'
                                                                 )
                                        mdl.hide_name(FromVLDC)

                                        VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                        mdl.create_connection(FromVLDC, mdl.term(VSum,'in'))
                                    if new_value == 'Line drop compensator':
                                        ctrl_src = 'VLDC'
                                    else:
                                        ctrl_src = 'VLoad'
                                    #mdl.set_tag_properties(FromVLDC, value=ctrl_src)
                            ENDCODE

                            CODE property_value_edited
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))
                            ENDCODE
                        }

                        Vreg {
                            label = "Voltage level"
                            widget = edit
                            type = generic
                            default_value = "vreg"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        band {
                            label = "Bandwidth"
                            widget = edit
                            type = generic
                            default_value = "band"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        Td {
                            label = "Time delay"
                            widget = edit
                            type = generic
                            default_value = "delay"
                            unit = "s"
                            group = "Voltage Regulation"
                        }

                        ptratio_auto {
                            label = "PT ratio"
                            widget = edit
                            type = generic
                            default_value = "ptratio"
                            unit = "V/V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        CTprim {
                            label = "CT primary rating"
                            widget = edit
                            type = generic
                            default_value = "0.2"
                            unit = "A"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Rp {
                            label = "R"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Xp {
                            label = "X"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "execution_rate"
                            unit = "s"
                            group = "Signal Processing:3"
                        }

                        fc {
                            label = "LPF cutoff frequency"
                            widget = edit
                            type = generic
                            default_value = "10e3"
                            unit = "Hz"
                            group = "Stability:4"
                        }

                        maxtap {
                            label = "maxtap"
                            widget = edit
                            type = generic
                            default_value = "maxtap"
                            nonvisible
                        }

                        mintap {
                            label = "mintap"
                            widget = edit
                            type = generic
                            default_value = "mintap"
                            nonvisible
                        }

                        YorD {
                            label = "YorD"
                            widget = edit
                            type = generic
                            default_value = "Y"
                            nonvisible
                            no_evaluate
                        }

                        CODE pre_compile
                            # HEADER START
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            L1 = mdl.get_property_value(mdl.prop(item_handle, "L1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            L2 = mdl.get_property_value(mdl.prop(item_handle, "L2"))
                            Rm = mdl.get_property_value(mdl.prop(item_handle, "Rm"))
                            Lm = mdl.get_property_value(mdl.prop(item_handle, "Lm"))
                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))
                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))
                            reg_method = mdl.get_property_value(mdl.prop(item_handle, "reg_method"))
                            Vreg = mdl.get_property_value(mdl.prop(item_handle, "Vreg"))
                            band = mdl.get_property_value(mdl.prop(item_handle, "band"))
                            Td = mdl.get_property_value(mdl.prop(item_handle, "Td"))
                            ptratio_auto = mdl.get_property_value(mdl.prop(item_handle, "ptratio_auto"))
                            CTprim = mdl.get_property_value(mdl.prop(item_handle, "CTprim"))
                            Rp = mdl.get_property_value(mdl.prop(item_handle, "Rp"))
                            Xp = mdl.get_property_value(mdl.prop(item_handle, "Xp"))
                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                            fc = mdl.get_property_value(mdl.prop(item_handle, "fc"))
                            maxtap = mdl.get_property_value(mdl.prop(item_handle, "maxtap"))
                            mintap = mdl.get_property_value(mdl.prop(item_handle, "mintap"))
                            YorD = mdl.get_property_value(mdl.prop(item_handle, "YorD"))
                            # HEADER STOP
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            comp_handle = mdl.get_parent(item_handle)

                            Rmid = "1e9"

                            FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                            FromVLDC_unused = mdl.get_item('FromVLDC_unused', parent=comp_handle, item_type='tag')

                            if YorD == "Δ":
                                Vreg = float(Vreg)*np.sqrt(3)
                                mdl.set_property_value(mdl.prop(item_handle, "Vreg"), Vreg)
                                mdl.set_tag_properties(FromVLDC, value="VLoad_ab", scope='local')
                                mdl.set_tag_properties(FromVLDC_unused, value="VLoad_a", scope='local')
                            else:
                                mdl.set_tag_properties(FromVLDC, value="VLoad_a", scope='local')
                                mdl.set_tag_properties(FromVLDC_unused, value="VLoad_ab", scope='local')

                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))

                            maxtap = float(maxtap)
                            mintap = float(mintap)

                            var_per_tap = (maxtap-mintap)/n_taps

                            max_n_tap = int(round(((maxtap - 1) / (maxtap - mintap) * n_taps)))
                            min_n_tap = n_taps - max_n_tap

                            tap_difference = max_n_tap - (n_taps // 2 + n_taps % 2)

                            ptratio_auto = float(ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "ptratio_auto"), ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)

                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))

                            if atype == 'Type A':
                                ABcomp = 1
                                Rleft = R1
                                Lleft = L1
                                Rright = R2
                                Lright = L2
                            else:
                                ABcomp = -1
                                Rleft = R2
                                Lleft = L2
                                Rright = R1
                                Lright = L1

                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE init
                            def updateMask(mdl):
                                bw_limit = mdl.get_property_disp_value(mdl.prop(item_handle, "bw_limit"))
                                frequency = mdl.prop(item_handle, "frequency")
                                if bw_limit == 'True':
                                    mdl.enable_property(frequency)
                                else:
                                    mdl.disable_property(frequency)
                                return
                        ENDCODE
                    }
                }
                [
                    position = 8152, 8056
                    size = 256, 256
                ]

                port RegB1 {
                    position = left:2
                    kind = pe
                }
                [
                    position = 7496, 8008
                ]

                port RegC1 {
                    position = left:3
                    kind = pe
                }
                [
                    position = 7496, 8104
                ]

                port RegA2 {
                    position = right:1
                    kind = pe
                }
                [
                    position = 8800, 7888
                    rotation = down
                ]

                port RegC2 {
                    position = right:3
                    kind = pe
                }
                [
                    position = 8800, 8240
                    rotation = down
                ]

                port RegA1 {
                    position = left:1
                    kind = pe
                }
                [
                    position = 7496, 7912
                ]

                port RegB2 {
                    position = right:2
                    kind = pe
                }
                [
                    position = 8800, 8056
                    rotation = down
                ]

                port RegN {
                    position = left:4
                    kind = pe
                }
                [
                    position = 7496, 8208
                ]

                tag TagRegA1 {
                    value = "A1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 7912
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagRegB1 {
                    value = "B1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 8008
                    scale = -1, 1
                    size = 59, 20
                ]

                tag TagRegC1 {
                    value = "C1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 8104
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagRegN1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 8208
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto1A1 {
                    value = "A1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 7936
                    size = 60, 20
                ]

                tag TagAuto1B1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 7984
                    size = 60, 20
                ]

                tag TagAuto2A1 {
                    value = "B1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8032
                    size = 60, 20
                ]

                tag TagAuto3A1 {
                    value = "C1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8128
                    size = 60, 20
                ]

                tag TagAuto2A2 {
                    value = "B2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8032
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto1A2 {
                    value = "A2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 7936
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto1B2 {
                    value = "N2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 7984
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto3A2 {
                    value = "C2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8128
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagRegA2 {
                    value = "A2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8696, 7888
                    size = 60, 20
                ]

                tag TagRegB2 {
                    value = "B2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8696, 8056
                    size = 59, 20
                ]

                tag TagRegC2 {
                    value = "C2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8696, 8240
                    size = 60, 20
                ]

                tag TagAuto2B2 {
                    value = "N2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8080
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto3B2 {
                    value = "N2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8176
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto3B1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8176
                    size = 60, 20
                ]

                tag TagAuto2B1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8080
                    size = 60, 20
                ]

                connect TagAuto1A1 Auto1.P1 as Connection55
                connect RegA2 TagRegA2 as Connection69
                connect RegB2 TagRegB2 as Connection70
                connect RegC2 TagRegC2 as Connection71
                connect Auto1.S1 TagAuto1A2 as Connection122
                [
                    position = 0, 0
                ]
                connect RegN TagRegN1 as Connection151
                [
                    position = 0, 0
                ]
                connect RegA1 TagRegA1 as Connection154
                [
                    position = 0, 0
                ]
                connect TagRegB1 RegB1 as Connection153
                [
                    position = 0, 0
                ]
                connect TagRegC1 RegC1 as Connection152
                [
                    position = 0, 0
                ]
                connect TagAuto2A1 Auto1.P3 as Connection155
                connect Auto1.S3 TagAuto2A2 as Connection156
                connect TagAuto3A1 Auto1.P5 as Connection157
                connect TagAuto3A2 Auto1.S5 as Connection158
                connect Auto1.S2 TagAuto1B2 as Connection172
                [
                    position = 0, 0
                ]
                connect Auto1.P2 TagAuto1B1 as Connection171
                [
                    position = 0, 0
                ]
                connect TagAuto2B2 Auto1.S6 as Connection173
                connect TagAuto3B2 Auto1.S7 as Connection174
                connect TagAuto3B1 Auto1.P7 as Connection175
                connect TagAuto2B1 Auto1.P6 as Connection176
            }
            [
                position = 8680, 8144
                size = 144, 336
            ]

            component Subsystem "single-phase voltage regulator" {
                layout = dynamic
                component Subsystem Auto1 {
                    layout = static
                    component "core/el_current_msr" Isec_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9256, 8656
                    ]

                    component "core/Inductor" Lr_A {
                        inductance = "Lright"
                    }
                    [
                        position = 8896, 8656
                    ]

                    component "core/Resistor" Rr_A {
                        resistance = "Rright"
                    }
                    [
                        position = 8800, 8656
                    ]

                    component "core/Inductor" Lm_A {
                        inductance = "Lm"
                    }
                    [
                        position = 8288, 8720
                        rotation = right
                    ]

                    component "core/Resistor" Rm_A {
                        resistance = "Rm"
                    }
                    [
                        position = 8224, 8720
                        rotation = right
                    ]

                    component "core/Inductor" Ll_A {
                        inductance = "Lleft"
                    }
                    [
                        position = 8160, 8656
                    ]

                    component "core/Resistor" Rl_A {
                        resistance = "Rleft"
                    }
                    [
                        position = 8064, 8656
                    ]

                    component Subsystem "Elapsed Time" {
                        layout = dynamic
                        component "core/Clock" Clock1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8112, 8168
                            hide_name = True
                        ]

                        component "core/Signal switch" "Signal switch1" {
                            criterion = "ctrl >= threshold"
                            threshold = "0.5"
                        }
                        [
                            position = 8200, 8184
                            hide_name = True
                        ]

                        component "core/Unit Delay" "Unit Delay1" {
                        }
                        [
                            position = 8200, 8240
                            hide_name = True
                            scale = -1, 1
                        ]

                        component "core/Edge Detection" "Edge Detection1" {
                            edge = "rising"
                        }
                        [
                            position = 8200, 8120
                            rotation = right
                            hide_name = True
                            size = 32, 32
                        ]

                        component "core/Sum" Sum2 {
                            signs = "-+"
                        }
                        [
                            position = 8272, 8264
                            hide_name = True
                        ]

                        port In1 {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8112, 8080
                            hide_name = True
                        ]

                        port Out2 {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8344, 8264
                            hide_name = True
                        ]

                        junction Junction30 sp
                        [
                            position = 8232, 8240
                        ]

                        junction JL2 sp
                        [
                            position = 8152, 8168
                        ]

                        connect "Edge Detection1.In1" In1 as Connection271
                        connect Sum2.out Out2 as Connection272
                        connect "Unit Delay1.out" "Signal switch1.in1" as Connection260
                        [
                            position = 0, 0
                            hide_name = True
                        ]
                        connect "Edge Detection1.Out1" "Signal switch1.in2" as Connection264
                        connect "Signal switch1.out" Junction30 as Connection265
                        connect Junction30 "Unit Delay1.in" as Connection266
                        connect Sum2.in Junction30 as Connection267
                        connect Clock1.out JL2 as Connection268
                        connect JL2 "Signal switch1.in" as Connection269
                        connect Sum2.in1 JL2 as Connection270
                    }
                    [
                        position = 8512, 8320
                        rotation = left
                        scale = -1, -1
                        size = 48, 48
                    ]

                    component "core/Constant" var_per_tap {
                        execution_rate = "execution_rate"
                        value = "var_per_tap"
                    }
                    [
                        position = 8936, 8328
                    ]

                    component "core/Product" Product1 {
                    }
                    [
                        position = 9040, 8264
                        hide_name = True
                    ]

                    component "core/Probe" tap {
                    }
                    [
                        position = 9112, 8184
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Constant" regulator_voltage {
                        execution_rate = "execution_rate"
                        value = "Vreg"
                    }
                    [
                        position = 7848, 8264
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage1 {
                        execution_rate = "execution_rate"
                        value = "band"
                    }
                    [
                        position = 8152, 8304
                        hide_name = True
                    ]

                    component "core/Gain" Gain1 {
                        gain = "0.5"
                    }
                    [
                        position = 8216, 8304
                        hide_name = True
                    ]

                    component "core/Sum" VSum {
                        signs = "-+"
                    }
                    [
                        position = 7960, 8248
                        hide_name = True
                    ]

                    component "core/Abs" Abs1 {
                    }
                    [
                        position = 8032, 8248
                        hide_name = True
                    ]

                    component "core/Sign" Sign1 {
                    }
                    [
                        position = 8032, 8208
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage2 {
                        execution_rate = "execution_rate"
                        value = "Td"
                    }
                    [
                        position = 8480, 8376
                        hide_name = True
                    ]

                    component "core/Relational operator" "Relational operator2" {
                        relational_op = ">"
                    }
                    [
                        position = 8560, 8368
                        hide_name = True
                    ]

                    component "core/Logical operator" "Logical operator1" {
                    }
                    [
                        position = 8672, 8288
                        hide_name = True
                    ]

                    component "core/Edge Detection" "Edge Detection3" {
                    }
                    [
                        position = 8816, 8408
                        hide_name = True
                        scale = -1, 1
                        size = 32, 32
                    ]

                    component "core/Logical operator" "Logical operator2" {
                    }
                    [
                        position = 8448, 8280
                        hide_name = True
                    ]

                    component "core/Logical operator" "Logical operator3" {
                        operator = "NOT"
                    }
                    [
                        position = 8728, 8408
                        hide_name = True
                        scale = -1, 1
                    ]

                    component "core/Product" Product2 {
                    }
                    [
                        position = 8752, 8256
                        hide_name = True
                    ]

                    component "core/Voltage RMS" VLoad_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9456, 8696
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_A {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9160, 8656
                        size = 64, 32
                    ]

                    component "core/Gain" ABcomp {
                        gain = "ABcomp"
                    }
                    [
                        position = 8448, 8216
                        rotation = down
                        scale = -1, 1
                    ]

                    component "core/Accumulator" "Tap Position" {
                        limit_lower = "-min_n_tap"
                        limit_output = "True"
                        limit_upper = "max_n_tap"
                    }
                    [
                        position = 8832, 8256
                    ]

                    component "core/el_voltage_msr" Vprim_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8368, 8720
                        rotation = right
                    ]

                    component "core/Gain" Gain4 {
                        gain = "1/ptratio_auto"
                    }
                    [
                        position = 7880, 8232
                        hide_name = True
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_A {
                    }
                    [
                        position = 8704, 8656
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_A {
                    }
                    [
                        position = 8632, 8720
                        rotation = left
                        size = 64, 32
                    ]

                    component "core/Product" Product11 {
                    }
                    [
                        position = 8312, 8872
                    ]

                    component "core/Product" Product10 {
                    }
                    [
                        position = 8312, 8968
                    ]

                    component "core/Probe" per_tap {
                    }
                    [
                        position = 9040, 8328
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Probe" pu_applied {
                    }
                    [
                        position = 9344, 8192
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Sum" VSum1 {
                        signs = "++"
                    }
                    [
                        position = 9256, 8192
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage3 {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9168, 8184
                        hide_name = True
                    ]

                    component "core/Sum" VSum2 {
                        signs = "-+"
                    }
                    [
                        position = 9040, 8184
                        hide_name = True
                    ]

                    component "core/Constant" regulator_voltage4 {
                        execution_rate = "execution_rate"
                        value = "tap_difference"
                    }
                    [
                        position = 8936, 8176
                        hide_name = True
                    ]

                    component "core/Relational operator" "Relational operator1" {
                        relational_op = ">"
                    }
                    [
                        position = 8280, 8256
                        hide_name = True
                    ]

                    component "core/Probe" diff {
                    }
                    [
                        position = 8208, 8168
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Resistor" Rina {
                        resistance = "1e10"
                    }
                    [
                        position = 8016, 8720
                        rotation = right
                    ]

                    component "core/Resistor" Rmida {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 8720
                        rotation = right
                        hide_name = True
                    ]

                    port P1 {
                        position = left top
                        kind = pe
                    }
                    [
                        position = 7776, 8656
                        hide_name = True
                    ]

                    port P2 {
                        position = left bottom
                        kind = pe
                    }
                    [
                        position = 7776, 8784
                        hide_name = True
                    ]

                    port S1 {
                        position = right top
                        kind = pe
                    }
                    [
                        position = 9616, 8656
                        rotation = down
                        hide_name = True
                    ]

                    port S2 {
                        position = right bottom
                        kind = pe
                    }
                    [
                        position = 9616, 8784
                        rotation = down
                        hide_name = True
                    ]

                    tag Goto2 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9272, 8264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto3 {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9488, 8744
                        rotation = right
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto6 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9304, 8624
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag1" {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8656
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag2" {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8784
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11a {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8656
                        size = 60, 20
                    ]

                    tag ET12a {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8784
                        size = 60, 20
                    ]

                    tag ET21a {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8656
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22a {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8784
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag7" {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8656
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag8" {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8784
                        hide_name = True
                        size = 60, 20
                    ]

                    tag FromVLDC {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7792, 8232
                        size = 60, 20
                    ]

                    tag From1 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8816
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto11 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8432, 8720
                        size = 60, 20
                    ]

                    tag From11 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8976
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From12 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8880
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8568, 8720
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto12 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8872
                        size = 60, 20
                    ]

                    tag Goto13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8968
                        size = 60, 20
                    ]

                    tag From14 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8640, 8600
                        hide_name = True
                        size = 60, 20
                    ]

                    junction Junction8 pe
                    [
                        position = 8256, 8680
                    ]

                    junction Junction10 pe
                    [
                        position = 8256, 8760
                    ]

                    junction Junction11 pe
                    [
                        position = 8256, 8656
                    ]

                    junction Junction42 sp
                    [
                        position = 8000, 8248
                    ]

                    junction Junction43 sp
                    [
                        position = 8512, 8280
                    ]

                    junction JL2 pe
                    [
                        position = 9456, 8784
                    ]

                    junction JL1 pe
                    [
                        position = 9456, 8656
                    ]

                    junction Junction53 pe
                    [
                        position = 8256, 8784
                    ]

                    junction Junction55 pe
                    [
                        position = 8632, 8784
                    ]

                    junction Junction60 pe
                    [
                        position = 8368, 8656
                    ]

                    junction Junction61 pe
                    [
                        position = 8368, 8784
                    ]

                    junction Junction63 pe
                    [
                        position = 8632, 8656
                    ]

                    junction Junction64 sp
                    [
                        position = 8248, 8864
                    ]

                    junction Junction65 sp
                    [
                        position = 9000, 8328
                    ]

                    junction Junction66 sp
                    [
                        position = 9200, 8264
                    ]

                    junction Junction67 sp
                    [
                        position = 8896, 8256
                    ]

                    junction Junction68 sp
                    [
                        position = 8984, 8256
                    ]

                    junction Junction101 sp
                    [
                        position = 8152, 8248
                    ]

                    junction Junction108 pe
                    [
                        position = 8016, 8656
                    ]

                    junction Junction109 pe
                    [
                        position = 8016, 8784
                    ]

                    junction Junction112 pe
                    [
                        position = 8512, 8656
                    ]

                    junction Junction113 pe
                    [
                        position = 8512, 8784
                    ]

                    comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Tap changer control</p></body></html> ENDCOMMENT
                    [
                        position = 8488, 8168
                    ]

                    connect Lr_A.p_node Rr_A.n_node as Connection144
                    connect Rm_A.p_node Junction8 as Connection148
                    connect Lm_A.p_node Junction8 as Connection150
                    connect Rm_A.n_node Junction10 as Connection154
                    connect Lm_A.n_node Junction10 as Connection156
                    connect Junction8 Junction11 as Connection157
                    connect Rl_A.n_node Ll_A.p_node as Connection172
                    connect Ll_A.n_node Junction11 as Connection173
                    connect Abs1.in Junction42 as Connection431
                    connect Junction42 VSum.out as Connection432
                    connect Sign1.in Junction42 as Connection433
                    connect "Logical operator2.out" Junction43 as Connection434
                    connect Junction43 "Logical operator1.in" as Connection427
                    [
                        position = 0, 0
                        breakpoints = 8512, 8280
                    ]
                    connect "Elapsed Time.In1" Junction43 as Connection435
                    connect "Elapsed Time.Out2" "Relational operator2.in" as Connection436
                    connect regulator_voltage1.out Gain1.in as Connection250
                    connect regulator_voltage.out VSum.in1 as Connection252
                    connect regulator_voltage2.out "Relational operator2.in1" as Connection272
                    connect "Edge Detection3.Out1" "Logical operator3.in" as Connection280
                    connect "Logical operator3.out" "Logical operator2.in1" as Connection281
                    connect "Logical operator1.out" Product2.in1 as Connection295
                    connect VLoad_A.out Goto3 as Connection301
                    connect VLoad_A.n_node JL2 as Connection304
                    connect VLoad_A.p_node JL1 as Connection307
                    connect ILrms_A.n_node Isec_A.p_node as Connection339
                    connect Isec_A.out Goto6 as Connection367
                    connect Sign1.out ABcomp.in as Connection443
                    connect ABcomp.out Product2.in as Connection444
                    connect P1 "Electric Tag1" as Connection453
                    connect Junction53 Junction10 as Connection457
                    [
                        position = 0, 0
                    ]
                    connect Lr_A.n_node ET21a as Connection459
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect "Electric Tag7" ILrms_A.p_node as Connection460
                    connect ET22a Junction55 as Connection466
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Product2.out "Tap Position.in" as Connection471
                    connect Junction11 Junction60 as Connection494
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.p_node Junction60 as Connection496
                    connect Junction61 Junction53 as Connection498
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.n_node Junction61 as Connection499
                    connect FromVLDC Gain4.in as Connection500
                    connect Gain4.out VSum.in as Connection501
                    connect Vsec_ins_A.p_node Rr_A.p_node as Connection512
                    connect Junction63 Vsec_ins_A.n_node as Connection524
                    [
                        position = 0, 0
                    ]
                    connect Isp_A.n_node Junction63 as Connection525
                    connect Goto11 Vprim_A.out as Connection529
                    connect From11 Product10.in1 as Connection526
                    connect From1 Junction64 as Connection531
                    connect Junction64 Product11.in as Connection532
                    connect Product10.in Junction64 as Connection533
                    connect From12 Product11.in1 as Connection534
                    connect Isp_A.p_node Junction55 as Connection535
                    [
                        position = 0, 0
                    ]
                    connect From13 Isp_A.in as Connection536
                    connect From14 Vsec_ins_A.in as Connection539
                    connect Product11.out Goto12 as Connection540
                    connect Goto13 Product10.out as Connection541
                    connect var_per_tap.out Junction65 as Connection544
                    connect Junction65 Product1.in1 as Connection545
                    connect per_tap.in Junction65 as Connection546
                    connect pu_applied.in VSum1.out as Connection551
                    connect regulator_voltage3.out VSum1.in as Connection552
                    connect Product1.out Junction66 as Connection553
                    [
                        position = 0, 0
                    ]
                    connect Junction66 Goto2 as Connection554
                    connect VSum1.in1 Junction66 as Connection555
                    connect regulator_voltage4.out VSum2.in as Connection561
                    connect "Tap Position.out" Junction67 as Connection564
                    connect Junction67 "Edge Detection3.In1" as Connection565
                    [
                        position = 0, 0
                    ]
                    connect Product1.in Junction68 as Connection566
                    connect Junction68 VSum2.in1 as Connection567
                    [
                        position = 0, 0
                        breakpoints = 8984, 8256
                    ]
                    connect Junction67 Junction68 as Connection568
                    connect tap.in VSum2.out as Connection569
                    connect Gain1.out "Relational operator1.in1" as Connection725
                    connect "Logical operator1.in1" "Relational operator2.out" as Connection777
                    [
                        position = 0, 0
                        breakpoints = 8632, 8368; 8632, 8368; 8632, 8368; 8592, 8368
                    ]
                    connect diff.in Junction101 as Connection782
                    connect Junction101 "Relational operator1.in" as Connection783
                    [
                        position = 0, 0
                    ]
                    connect Abs1.out Junction101 as Connection784
                    connect "Logical operator2.in" "Relational operator1.out" as Connection785
                    connect JL2 "Electric Tag8" as Connection786
                    [
                        position = 0, 0
                    ]
                    connect JL1 Isec_A.n_node as Connection787
                    [
                        position = 0, 0
                    ]
                    connect "Electric Tag2" P2 as Connection793
                    connect S2 JL2 as Connection797
                    connect ET11a Junction108 as Connection825
                    connect Junction108 Rl_A.p_node as Connection826
                    connect Rina.p_node Junction108 as Connection827
                    connect ET12a Junction109 as Connection828
                    connect Junction109 Junction53 as Connection829
                    connect Rina.n_node Junction109 as Connection830
                    connect Junction60 Junction112 as Connection837
                    [
                        position = 0, 0
                    ]
                    connect Junction112 Junction63 as Connection838
                    [
                        position = 0, 0
                    ]
                    connect Rmida.p_node Junction112 as Connection839
                    connect Junction55 Junction113 as Connection840
                    [
                        position = 0, 0
                    ]
                    connect Junction113 Junction61 as Connection841
                    connect Rmida.n_node Junction113 as Connection842
                    connect JL1 S1 as Connection856
                    [
                        position = 0, 0
                    ]

                    mask {
                        icon = "image(\'trl_ideal_test.svg\')"
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Autotransformer with load tap changer (LTC) and optional line drop compensator (LDC).</p></body></html>"

                        R1 {
                            label = "R1"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General:1"
                        }

                        L1 {
                            label = "L1"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        R2 {
                            label = "R2"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General"
                        }

                        L2 {
                            label = "L2"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        Rm {
                            label = "Rm"
                            widget = edit
                            type = generic
                            default_value = "1e5"
                            unit = "Ω"
                            group = "General"
                        }

                        Lm {
                            label = "Lm"
                            widget = edit
                            type = generic
                            default_value = "17"
                            unit = "H"
                            group = "General"
                        }

                        n_taps {
                            label = "Number of taps ±"
                            widget = edit
                            type = generic
                            default_value = "16"
                            group = "General"
                        }

                        reg_range {
                            label = "Regualtor range ±"
                            widget = edit
                            type = generic
                            default_value = "10"
                            unit = "%"
                            group = "General"
                            nonvisible
                        }

                        atype {
                            label = "Type"
                            widget = combo
                            combo_values = "Type A", "Type B"
                            type = string
                            default_value = "Type A"
                            group = "Voltage Regulation:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                for phase in ['a']:
                                    ET11 = mdl.get_item(f'ET11{phase}', parent=comp_handle, item_type='tag')
                                    ET12 = mdl.get_item(f'ET12{phase}', parent=comp_handle, item_type='tag')
                                    ET21 = mdl.get_item(f'ET21{phase}', parent=comp_handle, item_type='tag')
                                    ET22 = mdl.get_item(f'ET22{phase}', parent=comp_handle, item_type='tag')

                                    if new_value == 'Type A':
                                        mdl.set_tag_properties(ET11, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'S2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'L2{phase}')
                                    else:
                                        mdl.set_tag_properties(ET11, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'L2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'S2{phase}')

                                    mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        reg_method {
                            label = "Regulation method"
                            widget = combo
                            combo_values = "Line voltage regulator", "Bus voltage regulator", "Line drop compensator"
                            type = string
                            default_value = "Line voltage regulator"
                            group = "Voltage Regulation"
                            no_evaluate

                            CODE property_value_changed
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                if new_value == 'Bus voltage regulator':
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if FromVLDC:
                                        mdl.delete_item(FromVLDC)

                                    Vin = mdl.create_port(
                                                            name='vref',
                                                            parent=comp_handle,
                                                            kind='sp',
                                                            direction='in',
                                                            terminal_position=(-32,-128),
                                                            hide_name=False,
                                                            position=(8672, 8856)
                                                         )
                                    VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                    mdl.create_connection(Vin, mdl.term(VSum,'in'))
                                else:
                                    Vin = mdl.get_item('vref', parent=comp_handle, item_type='port')
                                    if Vin:
                                        mdl.delete_item(Vin)
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if not FromVLDC:
                                        FromVLDC = mdl.create_tag(
                                                                    value='VLDC',
                                                                    name='FromVLDC',
                                                                    parent=comp_handle,
                                                                    kind='sp',
                                                                    position=(8656, 8880),
                                                                    direction='out',
                                                                    scope='local'
                                                                 )
                                        mdl.hide_name(FromVLDC)

                                        VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                        mdl.create_connection(FromVLDC, mdl.term(VSum,'in'))
                                    if new_value == 'Line drop compensator':
                                        ctrl_src = 'VLDC'
                                    else:
                                        ctrl_src = 'VLoad'
                                    #mdl.set_tag_properties(FromVLDC, value=ctrl_src)
                            ENDCODE

                            CODE property_value_edited
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))
                            ENDCODE
                        }

                        Vreg {
                            label = "Voltage level"
                            widget = edit
                            type = generic
                            default_value = "vreg"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        band {
                            label = "Bandwidth"
                            widget = edit
                            type = generic
                            default_value = "band"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        Td {
                            label = "Time delay"
                            widget = edit
                            type = generic
                            default_value = "delay"
                            unit = "s"
                            group = "Voltage Regulation"
                        }

                        ptratio_auto {
                            label = "PT ratio"
                            widget = edit
                            type = generic
                            default_value = "ptratio"
                            unit = "V/V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        CTprim {
                            label = "CT primary rating"
                            widget = edit
                            type = generic
                            default_value = "0.2"
                            unit = "A"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Rp {
                            label = "R"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Xp {
                            label = "X"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "execution_rate"
                            unit = "s"
                            group = "Signal Processing:3"
                        }

                        fc {
                            label = "LPF cutoff frequency"
                            widget = edit
                            type = generic
                            default_value = "10e3"
                            unit = "Hz"
                            group = "Stability:4"
                        }

                        maxtap {
                            label = "maxtap"
                            widget = edit
                            type = generic
                            default_value = "maxtap"
                            nonvisible
                        }

                        mintap {
                            label = "mintap"
                            widget = edit
                            type = generic
                            default_value = "mintap"
                            nonvisible
                        }

                        YorD {
                            label = "YorD"
                            widget = edit
                            type = generic
                            default_value = "Y"
                            nonvisible
                            no_evaluate
                        }

                        CODE pre_compile
                            # HEADER START
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            L1 = mdl.get_property_value(mdl.prop(item_handle, "L1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            L2 = mdl.get_property_value(mdl.prop(item_handle, "L2"))
                            Rm = mdl.get_property_value(mdl.prop(item_handle, "Rm"))
                            Lm = mdl.get_property_value(mdl.prop(item_handle, "Lm"))
                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))
                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))
                            reg_method = mdl.get_property_value(mdl.prop(item_handle, "reg_method"))
                            Vreg = mdl.get_property_value(mdl.prop(item_handle, "Vreg"))
                            band = mdl.get_property_value(mdl.prop(item_handle, "band"))
                            Td = mdl.get_property_value(mdl.prop(item_handle, "Td"))
                            ptratio_auto = mdl.get_property_value(mdl.prop(item_handle, "ptratio_auto"))
                            CTprim = mdl.get_property_value(mdl.prop(item_handle, "CTprim"))
                            Rp = mdl.get_property_value(mdl.prop(item_handle, "Rp"))
                            Xp = mdl.get_property_value(mdl.prop(item_handle, "Xp"))
                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                            fc = mdl.get_property_value(mdl.prop(item_handle, "fc"))
                            maxtap = mdl.get_property_value(mdl.prop(item_handle, "maxtap"))
                            mintap = mdl.get_property_value(mdl.prop(item_handle, "mintap"))
                            YorD = mdl.get_property_value(mdl.prop(item_handle, "YorD"))
                            # HEADER STOP
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            comp_handle = mdl.get_parent(item_handle)

                            Rmid = "1e7"

                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))

                            maxtap = float(maxtap)
                            mintap = float(mintap)

                            var_per_tap = (maxtap-mintap)/n_taps

                            max_n_tap = int(round(((maxtap - 1) / (maxtap - mintap) * n_taps)))
                            min_n_tap = n_taps - max_n_tap

                            tap_difference = max_n_tap - (n_taps // 2 + n_taps % 2)

                            ptratio_auto = float(ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "ptratio_auto"), ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)

                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))

                            if atype == 'Type A':
                                ABcomp = 1
                                Rleft = R1
                                Lleft = L1
                                Rright = R2
                                Lright = L2
                            else:
                                ABcomp = -1
                                Rleft = R2
                                Lleft = L2
                                Rright = R1
                                Lright = L1

                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE init
                            def updateMask(mdl):
                                bw_limit = mdl.get_property_disp_value(mdl.prop(item_handle, "bw_limit"))
                                frequency = mdl.prop(item_handle, "frequency")
                                if bw_limit == 'True':
                                    mdl.enable_property(frequency)
                                else:
                                    mdl.disable_property(frequency)
                                return
                        ENDCODE
                    }
                }
                [
                    position = 8152, 8056
                    size = 256, 256
                ]

                port RegB1 {
                    position = left:2
                    kind = pe
                }
                [
                    position = 7968, 8152
                ]

                port RegA2 {
                    position = right:1
                    kind = pe
                }
                [
                    position = 8344, 7960
                    rotation = down
                ]

                port RegA1 {
                    position = left:1
                    kind = pe
                }
                [
                    position = 7968, 7960
                ]

                port RegB2 {
                    position = right:2
                    kind = pe
                }
                [
                    position = 8344, 8152
                    rotation = down
                ]

                connect Auto1.S1 RegA2 as Connection172
                connect Auto1.S2 RegB2 as Connection173
                connect RegA1 Auto1.P1 as Connection174
                connect RegB1 Auto1.P2 as Connection175
            }
            [
                position = 9016, 8144
                size = 168, 232
            ]

            component Subsystem "Rate Transition with Bypass" {
                layout = dynamic
                port In {
					position = left:1
					kind = sp
					direction =  out
					sp_type {
						default = auto
						readonly = True
					}
				}
				[
					position = 7520, 8056
				]

				port Out {
					position = right:1
					kind = sp
					direction =  in
					sp_type {
						default = inherit
						readonly = True
					}
				}
				[
					position = 7856, 8056
				]

                T_vec = "T_Ts_internal"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Rate Transition block with the option to bypass signals through without alteration to their smapling rate</p></body></html>"

                    bypass_flag {
						label = "Rate Transition Bypass"
						widget = checkbox
						type = bool
						default_value = "False"
						no_evaluate

						CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            inport = mdl.get_item("In", parent=comp_handle, item_type="port")
                            outport = mdl.get_item("Out", parent=comp_handle, item_type="port")
                            init_value_mask = mdl.get_property_disp_value(mdl.prop(container_handle, "init_value"))
                            execution_rate_mask = mdl.get_property_disp_value(mdl.prop(container_handle, "execution_rate"))

                            if new_value:
                                rate_trans = mdl.get_item("rate transition", parent=comp_handle, item_type="component")
                                delay_one = mdl.get_item("unit delay", parent=comp_handle, item_type="component")
                                if rate_trans:
                                    mdl.delete_item(rate_trans)
                                if not delay_one:
                                    delay_one = mdl.create_component("core/Unit Delay", name="unit delay", parent=comp_handle, position=(7683, 8055))
                                mdl.create_connection(mdl.term(delay_one, "in"), inport)
                                mdl.create_connection(mdl.term(delay_one, "out"), outport)
                            else:
                                rate_trans = mdl.get_item("rate transition", parent=comp_handle, item_type="component")
                                delay_one = mdl.get_item("unit delay", parent=comp_handle, item_type="component")
                                if delay_one:
                                    mdl.delete_item(delay_one)
                                if not rate_trans:
                                    rate_trans = mdl.create_component("core/Rate Transition", name="rate transition", parent=comp_handle, position=(7683, 8055))
                                mdl.create_connection(mdl.term(rate_trans, "in"), inport)
                                mdl.create_connection(mdl.term(rate_trans, "out"), outport)
                                mdl.set_property_value(mdl.prop(rate_trans, "init_value"), init_value_mask)
                                mdl.set_property_value(mdl.prop(rate_trans, "execution_rate"), execution_rate_mask)

                        ENDCODE
					}

                    init_value {
						label = "Initial Value"
						widget = edit
						type = generic
						default_value = "0"

						CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            rate_trans = mdl.get_item("rate transition", parent=comp_handle, item_type="component")

                            if rate_trans:
                                mdl.set_property_value(mdl.prop(rate_trans, "init_value"), new_value)

                        ENDCODE
					}

					execution_rate {
						label = "Execution Rate"
						widget = edit
						type = generic
						default_value = "execution_rate"

						CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            rate_trans = mdl.get_item("rate transition", parent=comp_handle, item_type="component")

                            if rate_trans:
                                mdl.set_property_value(mdl.prop(rate_trans, "execution_rate"), new_value)

                        ENDCODE
					}

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                }
            }
            [
                position = 8424, 8112
                size = 48, 48
            ]

            component Subsystem "single-phase CPL" {
                layout = dynamic
				component "core/Resistor" R1 {
					resistance = "Rsnb/15"
				}
				[
					position = 7328, 8768
				]

				component "core/Signal Controlled Current Source" Isp1 {
				}
				[
					position = 7320, 8664
					scale = -1, 1
					size = 64, 32
				]

				component "core/Product" Product38 {
				}
				[
					position = 7311, 8598
					hide_name = True
				]

				component "core/Comparator" Comparator7 {
				}
				[
					position = 7124, 8590
					hide_name = True
				]

				component "core/Constant" Constant1 {
					execution_rate = "Tfst"
					value = "5/Freq"
				}
				[
					position = 7056, 8639
					hide_name = True
				]

				component "core/Clock" Clock1 {
					execution_rate = "Tfst"
				}
				[
					position = 7055, 8582
					hide_name = True
				]

				component "core/Voltage Measurement" Va {
					execution_rate = "inherit"
					sig_output = "True"
				}
				[
					position = 7320, 9080
					size = 64, 32
				]

				component "core/Sum" Sum5 {
					signs = "++"
				}
				[
					position = 7760, 8888
					rotation = right
					hide_name = True
				]

				component "core/Edge Detection" "Edge Detection1" {
				}
				[
					position = 7960, 8912
					hide_name = True
					size = 32, 32
				]

				component "OpenDSS/Rate Transition with Bypass" "Rate Transition with Bypass1" {
					bypass_flag = "True"
					execution_rate = "Tfst"
				}
				[
					position = 7840, 8952
					hide_name = True
					size = 32, 32
				]

				component "core/C function" "C function1" {
					global_variables = "real counter;real m0;real m1;real m2;real corr;"
					init_fnc = "/*Begin code section*/
	counter=0;
	/*End code section*/"
					input_terminals = "real sync;real z;real zi;real zii;real Ts;real Ts_fast;"
					input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
					input_terminals_feedthrough = "True;True;True;True;True;True"
					input_terminals_show_labels = "True;True;True;True;True;True"
					output_fnc = "/*Begin code section*/
	counter = counter + Ts_fast;
	if (sync > 0 ) {
		out = z;
		counter = 0;

	}
	else {
		corr = 1 - 0.11 * (Ts - Ts_fast)/Ts;
		m2 = (zi - zii)/Ts;
		m1 = (z - zi)/Ts;
		m0 = m1 + (m1-m2);

		out = z + counter * corr * m0;
	}

	if (counter >= Ts) {
		counter = 0;
	}
	/*End code section*/"
					output_terminals_dimensions = "inherit"
					output_terminals_feedthrough = "True"
					output_terminals_show_labels = "True"
				}
				[
					position = 8216, 8952
					hide_name = True
					size = 48, 128
				]

				component "core/Unit Delay" "Unit Delay9" {
				}
				[
					position = 7840, 9016
					hide_name = True
				]

				component "core/Unit Delay" "Unit Delay10" {
				}
				[
					position = 7952, 9080
					hide_name = True
				]

				component "core/Constant" Constant21 {
					execution_rate = "Tfst"
					value = "execution_rate"
				}
				[
					position = 8080, 9112
					hide_name = True
				]

				component "OpenDSS/Rate Transition with Bypass" "Rate Transition with Bypass2" {
					bypass_flag = "True"
					execution_rate = "Tfst"
				}
				[
					position = 7952, 9016
					hide_name = True
					size = 32, 32
				]

				component "OpenDSS/Rate Transition with Bypass" "Rate Transition with Bypass3" {
					bypass_flag = "True"
					execution_rate = "Tfst"
				}
				[
					position = 8032, 9080
					hide_name = True
					size = 32, 32
				]

				component "core/Signal switch" "Signal switch28" {
				}
				[
					position = 8416, 9040
					hide_name = True
					scale = 1, -1
				]

				component "core/Signal switch" "Signal switch29" {
				}
				[
					position = 8512, 9008
					hide_name = True
					scale = 1, -1
				]

				component "core/Constant" Constant23 {
					execution_rate = "Tfst"
					value = "Tfast_en"
				}
				[
					position = 8464, 9088
					hide_name = True
				]

				component "core/Capacitor" C1 {
					capacitance = "1/(1*Rsnb*2*np.pi*Freq)"
				}
				[
					position = 7328, 8864
				]

				component "core/Constant" Constant28 {
					execution_rate = "Tfst"
					value = "Tfst"
				}
				[
					position = 8032, 9144
					hide_name = True
				]

				component "core/Kalman Filter Sync" "Kalman Filter Sync1" {
					q_gain = "q_gain_k"
					r_gain = "r_gain_k"
					normalize = "False"
				}
				[
					position = 7440, 8392
					size = 96, 168
				]

				component "core/Product" Product28 {
				}
				[
					position = 7840, 8336
					hide_name = True
				]

				component "core/Product" Product29 {
				}
				[
					position = 7840, 8400
					hide_name = True
				]

				component "core/Sum" Sum18 {
					signs = "++"
				}
				[
					position = 7936, 8368
					hide_name = True
				]

				component "core/Product" Product30 {
					signs = "*/"
				}
				[
					position = 8192, 8624
					hide_name = True
				]

				component "core/Product" Product31 {
				}
				[
					position = 8856, 8592
					hide_name = True
				]

				component "core/Gain" Gain29 {
					gain = "1/(Rsnb/15)"
				}
				[
					position = 8888, 8640
					hide_name = True
				]

				component "core/Sum" Sum19 {
					signs = "+-"
				}
				[
					position = 8968, 8600
					hide_name = True
				]

				component "core/Signal switch" "Signal switch31" {
					criterion = "ctrl >= threshold"
				}
				[
					position = 8656, 8584
					hide_name = True
				]

				component "core/Comparator" Comparator5 {
				}
				[
					position = 8560, 8512
					hide_name = True
				]

				component "core/Abs" Abs4 {
				}
				[
					position = 8464, 8656
					hide_name = True
				]

				component "core/Abs" Abs5 {
				}
				[
					position = 8464, 8520
					hide_name = True
				]

				component "core/Gain" Gain30 {
					gain = "CPL_curr/(1000*kVLL*kVLL)"
				}
				[
					position = 8192, 8560
					hide_name = True
				]

				component "core/Gain" Gain31 {
					gain = "0.5"
				}
				[
					position = 8032, 8368
					hide_name = True
				]

				component "core/Limit" Limit2 {
					lower_limit = "1"
				}
				[
					position = 8182, 8366
					hide_name = True
				]

				component "core/Gain" Gain32 {
					gain = "0.001"
				}
				[
					position = 8072, 8632
					hide_name = True
				]

				component "core/Sum" Sum21 {
					signs = "++"
				}
				[
					position = 8784, 8944
					hide_name = True
				]

				component "core/Product" Product33 {
					signs = "*/"
				}
				[
					position = 8520, 8816
					hide_name = True
				]

				component "core/Product" Product34 {
				}
				[
					position = 9184, 8784
					hide_name = True
				]

				component "core/Signal switch" "Signal switch32" {
					criterion = "ctrl >= threshold"
				}
				[
					position = 8984, 8776
					hide_name = True
				]

				component "core/Comparator" Comparator6 {
				}
				[
					position = 8888, 8720
					hide_name = True
				]

				component "core/Abs" Abs6 {
				}
				[
					position = 8792, 8816
					hide_name = True
				]

				component "core/Abs" Abs7 {
				}
				[
					position = 8792, 8728
					hide_name = True
				]

				component "core/Gain" Gain35 {
					gain = "CPL_curr/(1000*kVLL*kVLL)"
				}
				[
					position = 8520, 8752
					hide_name = True
				]

				component "core/Gain" Gain36 {
					gain = "0.001"
				}
				[
					position = 8400, 8824
					hide_name = True
				]

				component "core/Gain" Gain37 {
					gain = "-1"
				}
				[
					position = 8336, 8784
					hide_name = True
				]

				component "core/Gain" Gain39 {
					gain = "2*np.pi"
				}
				[
					position = 7592, 8504
					hide_name = True
				]

				component "core/Sum" Sum24 {
					signs = "++"
				}
				[
					position = 8248, 8784
					hide_name = True
				]

				component "core/Gain" Gain40 {
					gain = "1/(1*Rsnb*2*np.pi*Freq)"
				}
				[
					position = 8000, 8816
					hide_name = True
				]

				component "core/Product" Product37 {
				}
				[
					position = 8080, 8792
					hide_name = True
				]

				component "core/Gain" Gain41 {
					gain = "0.001"
				}
				[
					position = 8160, 8792
					hide_name = True
				]

				component "core/Constant" Constant29 {
					execution_rate = "Tfst"
					value = "execution_rate"
				}
				[
					position = 8256, 9096
					hide_name = True
				]

				component "core/Relational operator" "Relational operator1" {
				}
				[
					position = 8376, 9104
					hide_name = True
				]

				component "core/Constant" Constant30 {
					execution_rate = "Tfst"
					value = "Tfst"
				}
				[
					position = 8256, 9128
					hide_name = True
				]

				component "core/Unit Delay" "Unit Delay11" {
				}
				[
					position = 8368, 8952
					hide_name = True
				]

				component "core/Sum" Sum26 {
					signs = "+-"
				}
				[
					position = 8592, 8936
					hide_name = True
				]

				component "core/Unit Delay" "Unit Delay12" {
				}
				[
					position = 8432, 8952
					hide_name = True
				]

				port P2 {
					position = right:2
					kind = pe
				}
				[
					position = 7664, 8664
					rotation = down
				]

				port P3 {
					position = left:1
					kind = pe
				}
				[
					position = 7112, 8664
				]

				port P {
					position = top:1
					kind = sp
					direction =  out
					sp_type {
						default = auto
						readonly = True
					}
				}
				[
					position = 7184, 8472
				]

				port Q {
					position = top:2
					kind = sp
					direction =  out
					sp_type {
						default = auto
						readonly = True
					}
				}
				[
					position = 7184, 8536
				]

				port v0 {
					position = bottom:1
					kind = sp
					direction =  out
					sp_type {
						default = auto
						readonly = True
					}
				}
				[
					position = 7450, 8700
				]

				tag Goto2 {
					value = "kP"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 7264, 8472
					size = 60, 20
				]

				tag Goto3 {
					value = "kQ"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 7264, 8536
					size = 60, 20
				]

				tag Goto4 {
					value = "Va"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 7264, 9032
					rotation = down
					hide_name = True
					size = 60, 20
				]

				tag Goto6 {
					value = "Va_rms_squared"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 8322, 8371
					hide_name = True
					size = 100, 20
				]

				tag Goto8 {
					value = "Ia_load"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 8880, 8944
					hide_name = True
					size = 60, 20
				]

				tag From20 {
					value = "Ia_load"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7179, 8626
					hide_name = True
					size = 60, 20
				]

				tag From21 {
					value = "Va"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7264, 8392
					hide_name = True
					size = 60, 20
				]

				tag From22 {
					value = "kP"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 8032, 8592
					hide_name = True
					size = 60, 20
				]

				tag From23 {
					value = "Va_rms_squared"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7944, 8632
					hide_name = True
					size = 97, 20
				]

				tag Goto9 {
					value = "sinwt"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 7592, 8328
					size = 60, 20
				]

				tag Goto10 {
					value = "coswt"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 7592, 8392
					size = 60, 20
				]

				tag From25 {
					value = "sinwt"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7688, 8328
					hide_name = True
					size = 60, 20
				]

				tag From26 {
					value = "coswt"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7688, 8392
					hide_name = True
					size = 60, 20
				]

				tag From27 {
					value = "sinwt"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 8720, 8600
					hide_name = True
					size = 60, 20
				]

				tag Goto11 {
					value = "iph_active"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 9072, 8600
					size = 60, 20
				]

				tag From28 {
					value = "iph_active"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7664, 8832
					hide_name = True
					size = 60, 20
				]

				tag From29 {
					value = "kQ"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 8152, 8744
					hide_name = True
					size = 60, 20
				]

				tag From30 {
					value = "Va_rms_squared"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 8272, 8824
					hide_name = True
					size = 97, 20
				]

				tag From31 {
					value = "coswt"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 9048, 8792
					hide_name = True
					size = 60, 20
				]

				tag Goto12 {
					value = "iph_reactive"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 9304, 8784
					size = 60, 20
				]

				tag From32 {
					value = "iph_reactive"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7664, 8784
					hide_name = True
					size = 60, 20
				]

				tag Goto13 {
					value = "freqHz"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 7592, 8456
					size = 60, 20
				]

				tag Goto14 {
					value = "omega"
					scope = local
					kind = sp
					direction = in
				}
				[
					position = 7672, 8504
					size = 60, 20
				]

				tag From34 {
					value = "Va_rms_squared"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7936, 8776
					hide_name = True
					size = 97, 20
				]

				tag From35 {
					value = "omega"
					scope = local
					kind = sp
					direction = out
				}
				[
					position = 7920, 8816
					hide_name = True
					size = 60, 20
				]

				junction Junction2 pe
				[
					position = 7432, 8664
				]

				junction Junction300 pe
				[
					position = 7630, 8664
				]

				junction Junction97 pe
				[
					position = 7208, 8664
				]

				junction Junction102 sp
				[
					position = 7760, 8952
				]

				junction Junction109 sp
				[
					position = 7904, 9016
				]

				junction Junction130 pe
				[
					position = 7208, 8768
				]

				junction Junction131 pe
				[
					position = 7432, 8768
				]

				junction Junction137 pe
				[
					position = 7432, 8864
				]

				junction Junction138 pe
				[
					position = 7208, 8864
				]

				junction Junction160 sp
				[
					position = 8128, 8632
				]

				junction Junction175 sp
				[
					position = 7784, 8392
				]

				junction Junction176 sp
				[
					position = 7792, 8328
				]

				junction Junction177 sp
				[
					position = 8800, 8600
				]

				junction Junction178 sp
				[
					position = 7904, 8952
				]

				junction Junction179 sp
				[
					position = 8168, 8928
				]

				junction Junction184 sp
				[
					position = 8456, 8824
				]

				junction Junction185 sp
				[
					position = 8648, 8816
				]

				junction Junction186 sp
				[
					position = 8728, 8760
				]

				junction Junction187 sp
				[
					position = 8320, 8624
				]

				junction Junction188 sp
				[
					position = 8400, 8568
				]

				junction Junction189 sp
				[
					position = 8128, 8592
				]

				junction Junction209 sp
				[
					position = 8278, 8559
				]

				junction Junction211 sp
				[
					position = 8590, 8753
				]

				junction Junction190 sp
				[
					position = 8432, 8784
				]

				junction Junction192 sp
				[
					position = 7528, 8456
				]

				junction Junction193 sp
				[
					position = 8216, 9024
				]

				junction Junction194 sp
				[
					position = 8288, 8952
				]

				junction Junction195 sp
				[
					position = 8288, 8952
				]

				connect P Goto2 as Connection532
				connect Q Goto3 as Connection533
				connect "Rate Transition with Bypass3.In" "Unit Delay10.out" as Connection615
				connect "Rate Transition with Bypass2.Out" "C function1.zi" as Connection616
				[
					breakpoints = 8104, 9016; 8104, 8944
				]
				connect "Rate Transition with Bypass3.Out" "C function1.zii" as Connection617
				[
					breakpoints = 8120, 9080; 8120, 8960
				]
				connect "C function1.sync" "Edge Detection1.Out1" as Connection618
				[
					position = 0, 0
				]
				connect "Rate Transition with Bypass1.In" Junction102 as Connection622
				[
					position = 0, 0
				]
				connect Sum5.out Junction102 as Connection649
				[
					position = 0, 0
				]
				connect Constant23.out "Signal switch29.in2" as Connection653
				connect "Signal switch28.out" "Signal switch29.in" as Connection660
				[
					position = 0, 0
				]
				connect Isp1.p_node Junction2 as Connection670
				[
					position = 0, 0
				]
				connect Isp1.n_node Junction97 as Connection669
				[
					position = 0, 0
				]
				connect "Rate Transition with Bypass2.In" Junction109 as Connection684
				connect "Unit Delay10.in" Junction109 as Connection686
				connect Constant28.out "C function1.Ts_fast" as Connection837
				[
					breakpoints = 8152, 9144; 8152, 8992
				]
				connect R1.p_node Junction130 as Connection838
				connect Junction130 Junction97 as Connection839
				[
					position = 0, 0
				]
				connect Junction131 Junction2 as Connection842
				[
					position = 0, 0
				]
				connect R1.n_node Junction131 as Connection843
				connect C1.n_node Junction137 as Connection896
				connect Junction137 Junction131 as Connection897
				connect C1.p_node Junction138 as Connection900
				connect Junction138 Junction130 as Connection901
				connect P2 Junction300 as Connection903
				connect P3 Junction97 as Connection907
				connect Goto4 Va.out as Connection914
				connect From20 Product38.in1 as Connection966
				connect Comparator7.out Product38.in
				connect Clock1.out Comparator7.in1
				connect Constant1.out Comparator7.in2
				connect Product38.out Isp1.in
				connect Sum18.in Product28.out as Connection976
				connect Product29.out Sum18.in1 as Connection977
				connect Junction138 Va.p_node as Connection992
				connect Va.n_node Junction300 as Connection993
				connect Product31.out Sum19.in as Connection994
				connect Gain29.out Sum19.in1 as Connection995
				connect Gain30.out Junction209 as Connection1008
				connect Product31.in "Signal switch31.out" as Connection1021
				connect Gain31.in Sum18.out as Connection1035
				connect From23 Gain32.in as Connection1043
				connect Gain32.out Junction160 as Connection1045
				connect Junction160 Product30.in1 as Connection1046
				connect From26 Junction175 as Connection1112
				connect Junction175 Product29.in as Connection1113
				connect Product29.in1 Junction175 as Connection1114
				connect Product28.in Junction176 as Connection1117
				connect Junction176 Product28.in1 as Connection1118
				[
					breakpoints = 7792, 8328
				]
				connect From25 Junction176 as Connection1119
				connect Goto9 "Kalman Filter Sync1.sin(wt)" as Connection1124
				connect "Kalman Filter Sync1.cos(wt)" Goto10 as Connection1125
				connect From27 Junction177 as Connection1127
				connect Junction177 Product31.in1 as Connection1128
				connect Goto11 Sum19.out as Connection1130
				connect "Rate Transition with Bypass1.Out" Junction178 as Connection1132
				[
					breakpoints = 7880, 8952
				]
				connect "Edge Detection1.In1" Junction178 as Connection1134
				connect "C function1.z" Junction179 as Connection1140
				connect Junction179 Junction178 as Connection1141
				[
					breakpoints = 8000, 8952
				]
				connect Constant21.out "C function1.Ts" as Connection1146
				[
					breakpoints = 8136, 9112; 8136, 8976
				]
				connect Gain35.out Junction211 as Connection1153
				connect Product34.in "Signal switch32.out" as Connection1159
				connect From30 Gain36.in as Connection1163
				connect Gain36.out Junction184 as Connection1164
				connect Junction184 Product33.in1 as Connection1165
				connect From32 Sum5.in1 as Connection1180
				connect "Kalman Filter Sync1.Vgrid" From21 as Connection1181
				[
					breakpoints = 7320, 8392
				]
				connect Gain31.out Limit2.in as Connection1182
				connect Limit2.out Goto6 as Connection2202
				connect Gain29.in Junction177 as Connection1183
				[
					breakpoints = 8800, 8640
				]
				connect Sum21.out Goto8 as Connection1186
				[
					breakpoints = 8832, 8944
				]
				connect Comparator6.out "Signal switch32.in2" as Connection1195
				connect Abs6.out Comparator6.in1 as Connection1196
				connect Abs7.out Comparator6.in2 as Connection1197
				connect Product33.out Junction185 as Connection1199
				[
					breakpoints = 8608, 8816
				]
				connect Junction185 Abs6.in as Connection1200
				[
					breakpoints = 8648, 8816
				]
				connect "Signal switch32.in1" Junction185 as Connection1201
				connect Abs7.in Junction211 as Connection1202
				connect "Signal switch32.in" Junction211 as Connection1204
				connect Comparator5.out "Signal switch31.in2" as Connection1209
				connect Comparator5.in1 Abs4.out as Connection1210
				[
					breakpoints = 8528, 8504; 8528, 8624
				]
				connect Product30.out Junction187 as Connection1211
				connect Junction187 Abs4.in as Connection1212
				[
					breakpoints = 8320, 8624
				]
				connect "Signal switch31.in1" Junction187 as Connection1213
				connect Abs5.in Junction209 as Connection1215
				connect "Signal switch31.in" Junction209 as Connection1217
				connect Abs5.out Comparator5.in2 as Connection1218
				connect From28 Sum5.in as Connection1219
				connect Product30.in Junction189 as Connection1221
				[
					breakpoints = 8152, 8592
				]
				connect Junction189 From22 as Connection1222
				connect Gain30.in Junction189 as Connection1223
				connect Product33.in Junction190 as Connection1224
				[
					breakpoints = 8480, 8784
				]
				connect Junction190 Gain37.out as Connection1225
				connect Gain35.in Junction190 as Connection1226
				connect "Kalman Filter Sync1.f (Hz)" Junction192 as Connection1234
				connect Junction192 Goto13 as Connection1235
				connect Gain39.in Junction192 as Connection1236
				connect Gain39.out Goto14 as Connection1237
				connect From29 Sum24.in as Connection1244
				connect Sum24.out Gain37.in as Connection1245
				connect From35 Gain40.in as Connection1246
				connect Gain40.out Product37.in1 as Connection1247
				connect Product37.in From34 as Connection1248
				connect Product34.in1 From31 as Connection1250
				[
					breakpoints = 9128, 8792; 9096, 8792
				]
				connect Product34.out Goto12 as Connection1251
				connect Product37.out Gain41.in as Connection1252
				connect Gain41.out Sum24.in1 as Connection1253
				connect "Relational operator1.in" Constant29.out as Connection1273
				connect Constant30.out "Relational operator1.in1" as Connection1274
				connect "Relational operator1.out" "Signal switch28.in2" as Connection1275
				connect Junction193 Junction179 as Connection1278
				[
					breakpoints = 8168, 9024
				]
				connect "Signal switch28.in" Junction193 as Connection1279
				connect "Signal switch29.in1" Junction193 as Connection1280
				[
					breakpoints = 8296, 8992; 8256, 9024
				]
				connect "Unit Delay9.in" Junction102 as Connection1284
				[
					breakpoints = 7760, 9008
				]
				connect "Unit Delay9.out" Junction109 as Connection1285
				[
					breakpoints = 7864, 9016
				]
				connect "Unit Delay12.in" "Unit Delay11.out" as Connection1301
				connect "Unit Delay12.out" Sum26.in1 as Connection1302
				connect Sum21.in1 "Signal switch29.out" as Connection1304
				[
					breakpoints = 8656, 8952; 8656, 9008
				]
				connect "C function1.out" Junction194 as Connection1305
				[
					breakpoints = 8264, 8952
				]
				connect Junction194 "Signal switch28.in1" as Connection1306
				[
					breakpoints = 8288, 8952
				]
				connect "Unit Delay11.in" Junction195 as Connection1308
				connect Junction195 Junction194 as Connection1309
				connect Sum26.in Junction195 as Connection1310
				connect Sum26.out Sum21.in as Connection1311

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    kVLine {
                        label = "Nominal line voltage"
                        widget = edit
                        type = generic
                        default_value = "Vn_3ph_CPL"
                        unit = "kV"
                        group = "Load Parameters:1"
                    }

                    VLL {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kVLL {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kP_tot {
                        label = "Active power"
                        widget = edit
                        type = generic
                        default_value = "P_CPL"
                        unit = "kW"
                        group = "Load Parameters"
                    }

                    kP {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    SS {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Rsnb {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kQ_tot {
                        label = "Reactive power"
                        widget = edit
                        type = generic
                        default_value = "Q_CPL"
                        unit = "kVAR"
                        group = "Load Parameters"
                    }

                    kQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Q {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    execution_rate {
                        previous_names = "Ts"
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "execution_rate"
                        unit = "s"
                        group = "Execution rate:2"

                    }

                    Fast_con {
                        label = "Fast execution rate output conditioning"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Execution rate"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            rate_trans1 = mdl.get_item("Rate Transition with Bypass1", parent=comp_handle, item_type="component")
                            rate_trans2 = mdl.get_item("Rate Transition with Bypass2", parent=comp_handle, item_type="component")
                            rate_trans3 = mdl.get_item("Rate Transition with Bypass3", parent=comp_handle, item_type="component")
                            Ts_mask = mdl.get_property_disp_value(mdl.prop(container_handle, "execution_rate"))
                            Tfst_mask = mdl.get_property_disp_value(mdl.prop(container_handle, "Tfst"))

                            if new_value and not Ts_mask == Tfst_mask:
                                mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "False")
                                mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "False")
                                mdl.set_property_value(mdl.prop(rate_trans3, "bypass_flag"), "False")
                            else:
                                mdl.set_property_value(mdl.prop(rate_trans1, "bypass_flag"), "True")
                                mdl.set_property_value(mdl.prop(rate_trans2, "bypass_flag"), "True")
                                mdl.set_property_value(mdl.prop(rate_trans3, "bypass_flag"), "True")

                        ENDCODE
                    }

                    Tfst {
                        label = "Fast execution rate"
                        widget = edit
                        type = generic
                        default_value = "Tfast"
                        unit = "s"
                        group = "Execution rate"

                    }

                    zero_seq_remove {
                        label = "Remove zero sequence"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Execution rate"
                        no_evaluate

                        CODE property_value_changed
                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            j2 = mdl.get_item("Junction2", parent=comp_handle, item_type="junction")
                            j300 = mdl.get_item("Junction300", parent=comp_handle, item_type="junction")
                            j2j300 = mdl.get_item("j2j300_conn", parent=comp_handle, item_type="connection")
                            termin = mdl.get_item("v0_termination", parent=comp_handle, item_type="component")
                            v0_comp = mdl.get_item("v0s", parent=comp_handle, item_type="component")
                            v0_port = mdl.get_item("v0", parent=comp_handle, item_type="port")

                            if new_value:
                                if j2j300:
                                    mdl.delete_item(j2j300)
                                if termin:
                                    mdl.delete_item(termin)
                                if not v0_comp:
                                    v0_comp = mdl.create_component("Signal Controlled Voltage Source", parent=comp_handle, name="v0s", position=(7530,8663))
                                mdl.create_connection(mdl.term(v0_comp, "in"), v0_port)
                                mdl.create_connection(mdl.term(v0_comp, "n_node"), j300)
                                mdl.create_connection(mdl.term(v0_comp, "p_node"), j2)
                            else:
                                if v0_comp:
                                    mdl.delete_item(v0_comp)
                                if not j2j300:
                                    mdl.create_connection(j2, j300, name="j2j300_conn")
                                if not termin:
                                    termin = mdl.create_component("Termination", parent=comp_handle, name="v0_termination", position=(7530,8700), hide_name=True)
                                mdl.create_connection(mdl.term(termin, "in"), v0_port)
                        ENDCODE
                    }

                    Tfast_en {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Freq {
                        label = "Nominal frequency"
                        widget = edit
                        type = generic
                        default_value = "fn"
                        unit = "Hz"
                        group = "Load Parameters"
                    }

                    inv_ph {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    CPL_curr {
                        label = "Current limit "
                        widget = edit
                        type = generic
                        default_value = "CPL_LMT"
                        unit = "pu"
                        group = "Load Parameters"
                    }

                    q_gain_k {
                        label = "Kalman filter Q gain"
                        widget = edit
                        type = generic
                        default_value = "q_gain_k"
                        group = "Load Parameters"
                    }

                    r_gain_k {
                        label = "Kalman filter R gain"
                        widget = edit
                        type = generic
                        default_value = "r_gain_k"
                        group = "Load Parameters"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        kVLine = mdl.get_property_value(mdl.prop(item_handle, "kVLine"))
                        VLL = mdl.get_property_value(mdl.prop(item_handle, "VLL"))
                        kVLL = mdl.get_property_value(mdl.prop(item_handle, "kVLL"))
                        kP_tot = mdl.get_property_value(mdl.prop(item_handle, "kP_tot"))
                        kP = mdl.get_property_value(mdl.prop(item_handle, "kP"))
                        P = mdl.get_property_value(mdl.prop(item_handle, "P"))
                        SS = mdl.get_property_value(mdl.prop(item_handle, "SS"))
                        Rsnb = mdl.get_property_value(mdl.prop(item_handle, "Rsnb"))
                        kQ_tot = mdl.get_property_value(mdl.prop(item_handle, "kQ_tot"))
                        kQ = mdl.get_property_value(mdl.prop(item_handle, "kQ"))
                        Q = mdl.get_property_value(mdl.prop(item_handle, "Q"))
                        execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                        Fast_con = mdl.get_property_value(mdl.prop(item_handle, "Fast_con"))
                        Tfst = mdl.get_property_value(mdl.prop(item_handle, "Tfst"))
                        Tfast_en = mdl.get_property_value(mdl.prop(item_handle, "Tfast_en"))
                        Freq = mdl.get_property_value(mdl.prop(item_handle, "Freq"))
                        inv_ph = mdl.get_property_value(mdl.prop(item_handle, "inv_ph"))
                        CPL_curr = mdl.get_property_value(mdl.prop(item_handle, "CPL_curr"))
                        q_gain_k = mdl.get_property_value(mdl.prop(item_handle, "q_gain_k"))
                        r_gain_k = mdl.get_property_value(mdl.prop(item_handle, "r_gain_k"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy
                        import math

                        kVLL = kVLine/(3**0.5)
                        VLL = kVLL * 1000
                        kP = kP_tot / 3
                        kQ = kQ_tot / 3
                        P = kP * 1000
                        Q = kQ * 1000
                        SS = (P*P + Q*Q)**0.5

                        if SS==0:
                            Rsnb = 100000
                        else:
                            Rsnb = 30 * (VLL*VLL/(1.66*SS))

                        if Fast_con:
                            Tfast_en = 1
                        else:
                            Tfast_en = 0


                        mdl.set_property_value(mdl.prop(item_handle, "kVLine"), kVLine)
                        mdl.set_property_value(mdl.prop(item_handle, "kVLL"), kVLL)
                        mdl.set_property_value(mdl.prop(item_handle, "kP"), kP)
                        mdl.set_property_value(mdl.prop(item_handle, "VLL"), VLL)
                        mdl.set_property_value(mdl.prop(item_handle, "P"), P)
                        mdl.set_property_value(mdl.prop(item_handle, "Rsnb"), Rsnb)
                        mdl.set_property_value(mdl.prop(item_handle, "kQ"), kQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Q"), Q)
                        mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)
                        mdl.set_property_value(mdl.prop(item_handle, "kP_tot"), kP_tot)
                        mdl.set_property_value(mdl.prop(item_handle, "kQ_tot"), kQ_tot)
                        mdl.set_property_value(mdl.prop(item_handle, "Tfast_en"), Tfast_en)


                        mdl.set_property_value(mdl.prop(item_handle, "inv_ph"), inv_ph)

                        mdl.set_property_value(mdl.prop(item_handle, "Freq"), Freq)
                        mdl.set_property_value(mdl.prop(item_handle, "SS"), SS)
                        mdl.set_property_value(mdl.prop(item_handle, "Tfst"), Tfst)

                        mdl.set_property_value(mdl.prop(item_handle, "CPL_curr"), CPL_curr)
                        mdl.set_property_value(mdl.prop(item_handle, "q_gain_k"), q_gain_k)
                        mdl.set_property_value(mdl.prop(item_handle, "r_gain_k"), r_gain_k)
                    ENDCODE
                }
            }
            [
                position = 8216, 8256
                size = 48, 48
            ]
        }
        [
            position = 4344, 3880
            size = 48, 48
        ]

        comment Comment1 START Consider using the Category component to better organize your library items in the tree. ENDCOMMENT
        [
            position = 4584, 3792
        ]
    }

    logically_deleted {
        "VSConverter.TS_module"
        "VSConverter.T_switch"
        "VSConverter.Constant102"
        "VSConverter.Connection3"
        "VSConverter.Connection5658"
        "Generator.TS_module"
        "Generator.T_switch"
        "Generator.Constant102"
        "Generator.Connection3"
        "Generator.Connection5116"
    }

    default {
        "core/1D look-up table" {
            in_vec_x = "np.arange(-5,6)"
            out_vec_f_x = "np.arange(-5,6)**2"
            table_impl = "Equidistant"
            ext_mode = "Clip"
            execution_rate = "inherit"
        }

        "core/Abs" {
            execution_rate = "inherit"
        }

        "core/Bus Join" {
            inputs = "2"
            execution_rate = "inherit"
        }

        "core/Bus Split" {
            outputs = "2"
            execution_rate = "inherit"
        }

        "core/C function" {
            input_terminals = "real in;"
            input_terminals_show_labels = "False;"
            input_terminals_feedthrough = "True;"
            input_terminals_dimensions = "inherit;"
            output_terminals = "real out;"
            output_terminals_show_labels = "False;"
            output_terminals_feedthrough = "True;"
            output_terminals_dimensions = "inherit;"
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            execution_rate = "inherit"
        }

        "core/Capacitor" {
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Clock" {
            enb_reset = "False"
            reset_at = "1.0"
            execution_rate = "100e-6"
        }

        "core/Comparator" {
            execution_rate = "inherit"
        }

        "core/Constant" {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Current Source" {
            sig_input = "False"
            type = "signal generator"
            param_set = "1phase"
            parent_label = ""
            addr = "0"
            spc_nb = "0"
            execution_rate = "100e-6"
            cpd_visible = "True"
            enable_snb = "False"
            snb_type = "R1"
            R1 = "inf"
            C1 = "1e-06"
            override_signal_name = "False"
            signal_name = ""
            init_source_nature = "Constant"
            init_const_value = "0.0"
            init_rms_value = "0.0"
            init_frequency = "50.0"
            init_phase = "0.0"
        }

        "core/Data Type Conversion" {
            output_type = "real"
            execution_rate = "inherit"
        }

        "core/Discrete Transfer Function" {
            domain = "Z-domain"
            method = "Zero-order hold"
            b_coeff = "[1,1]"
            a_coeff = "[1,1]"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Gain" {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Inductor" {
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Integrator" {
            show_reset = "none"
            reset_type = "asynchronous"
            show_init_condition = "internal"
            init_value = "0"
            limit_output = "False"
            limit_upper = "inf"
            limit_lower = "-inf"
            show_state = "False"
            state_port_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Limit" {
            upper_limit = "[\'inf\']"
            lower_limit = "[\'-inf\']"
            execution_rate = "inherit"
        }

        "core/Logical operator" {
            operator = "AND"
            inputs = "2"
            execution_rate = "inherit"
        }

        "core/Mathematical function" {
            mathematical_fn = "exponential"
            execution_rate = "inherit"
        }

        "core/Multiport signal switch" {
            number_of_input_terminals = "2"
            execution_rate = "inherit"
        }

        "core/Open Circuit" {
            circuit_connector = "false"
            pesb_flag = "false"
            type = "none"
        }

        "core/Probe" {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Product" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Rate Limiter" {
            rising_limit = "1"
            falling_limit = "-1"
            execution_rate = "inherit"
        }

        "core/Relational operator" {
            relational_op = "=="
            execution_rate = "inherit"
        }

        "core/Resistor" {
            resistance = "1"
            param_set = ""
        }

        "core/Round" {
            round_fn = "floor"
            execution_rate = "inherit"
        }

        "core/Short Circuit" {
            circuit_connector = "false"
            pesb_flag = "false"
            type = "none"
            r_calc_msr = ""
        }

        "core/Signal switch" {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        "core/Sinusoidal Source" {
            amplitude = "1"
            dc_offset = "0"
            frequency = "50"
            phase = "0"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Step" {
            step_time = "1"
            initial_value = "0"
            final_value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
        }

        "core/Sum" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Termination" {
            execution_rate = "inherit"
        }

        "core/Trigonometric function" {
            trigonometric_fn = "sin"
            angle = "Radians"
            execution_rate = "inherit"
        }

        "core/Unit Delay" {
            init_value = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Voltage Source" {
            sig_input = "False"
            type = "signal generator"
            param_set = "1phase"
            parent_label = ""
            addr = "0"
            spc_nb = "0"
            execution_rate = "100e-6"
            cpd_visible = "True"
            enable_snb = "False"
            snb_type = "R2"
            R2 = "0.0"
            L1 = "0.1"
            override_signal_name = "False"
            signal_name = ""
            init_source_nature = "Constant"
            init_const_value = "0.0"
            init_rms_value = "0.0"
            init_frequency = "50.0"
            init_phase = "0.0"
        }

        "OpenDSS/CIL" {
            fn = "fn"
            conn_type = "Y"
            ground_connected = "False"
            set_balanced = "True"
            Vn_3ph = "Vn_3ph_CPL"
            Sn_3ph = "Sn_3ph"
            pf_mode_3ph = "Lag"
            pf_3ph = "pf_3ph_set"
            VAn = "0*1000/(3**0.5)"
            VAB = "0*1000"
            SAn = "3500*1000/3"
            SAB = "3500*1000/3"
            pf_modeA = "Lag"
            pfA = "0"
            VBn = "0*1000/(3**0.5)"
            VBC = "0*1000"
            SBn = "3500*1000/3"
            SBC = "3500*1000/3"
            pf_modeB = "Lag"
            pfB = "0"
            VCn = "0*1000/(3**0.5)"
            VCA = "0*1000"
            SCn = "3500*1000/3"
            SCA = "3500*1000/3"
            pf_modeC = "Lag"
            pfC = "0"
            kV = "0"
            model = "2"
            phases = "3"
            phs = "0"
            ph_num = "0"
            pf = "0"
            conn = "0"
            kVA = "0"
            basefreq = "0"
            dss_mod = "Constant Impedance"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Grid Fault" {
            resistance = "0.0"
            fault_type = "A-GND"
        }

        "core/Meter Split" {
            van = "True"
            vbn = "True"
            vcn = "True"
            van_rms = "False"
            vbn_rms = "False"
            vcn_rms = "False"
            vln_rms = "False"
            vn = "False"
            vn_rms = "False"
            vab = "False"
            vbc = "False"
            vca = "False"
            vab_rms = "False"
            vbc_rms = "False"
            vca_rms = "False"
            vll_rms = "False"
            ia = "False"
            ib = "False"
            ic = "False"
            ia_rms = "False"
            ib_rms = "False"
            ic_rms = "False"
            i_rms = "False"
            ineutral = "False"
            in_rms = "False"
            freq = "False"
            power_p = "False"
            power_q = "False"
            power_s = "False"
            power_pf = "False"
            enable_extra_in = "No"
            power_pa = "False"
            power_pb = "False"
            power_pc = "False"
            power_qa = "False"
            power_qb = "False"
            power_qc = "False"
            power_sa = "False"
            power_sb = "False"
            power_sc = "False"
            power_pfa = "False"
            power_pfb = "False"
            power_pfc = "False"
        }

        "core/Rate Transition" {
            init_value = "0.0"
            execution_rate = "100e-6"
        }

        "core/Signal Controlled Current Source" {
            execution_rate = "inherit"
        }

        "core/Signal Controlled Voltage Source" {
            execution_rate = "inherit"
        }

        "core/Simple Battery inverter (Average)" {
            Sn = "1.6e6"
            powerRate = "1"
            Ts = "200e-6"
            R = "1e-5"
            L = "100e-6"
            Rf = "150e-3"
            Cf = "1.013e-3"
            Kp = "0.0001"
            Ki = "0.05"
        }

        "core/Single Phase Multi-Winding Transformer" {
            input = "SI"
            num_of_windings = "2"
            Sn = "10e3"
            f = "50.0"
            n_prim = "100.0"
            n_sec = "[100.0]"
            R_prim = "0.1"
            L_prim = "0.001"
            I_prim = "0.0"
            R_sec = "[0.1]"
            L_sec = "[0.001]"
            I_sec = "[0.0]"
            r_prim = ".1"
            l_prim = ".314159265359"
            i_prim = "0.0"
            r_sec = "[.1]"
            l_sec = "[.314159265359]"
            i_sec = "[0.0]"
            core_model = "Linear"
            Rm = "1e5"
            Lm = "5.0"
            flux_vals_SI = "[0.001, 0.005]"
            current_vals_SI = "[1.0, 2.0]"
            rm = "100000.0"
            lm = "1570.79632679"
            flux_vals_pu = "[0.001, 0.005]"
            current_vals_pu = "[1.0, 2.0]"
            import_from_pu = "Import from PU"
            import_from_si = "Import from SI"
            embedded_cpl_12 = "None"
            ratio_type_12 = "Automatic"
            ratio_12 = "0.1"
            embedded_cpl_13 = "None"
            ratio_type_13 = "Automatic"
            ratio_13 = "0.1"
            embedded_cpl_14 = "None"
            ratio_type_14 = "Automatic"
            ratio_14 = "0.1"
            embedded_cpl_15 = "None"
            ratio_type_15 = "Automatic"
            ratio_15 = "0.1"
            embedded_cpl_16 = "None"
            ratio_type_16 = "Automatic"
            ratio_16 = "0.1"
            embedded_cpl_17 = "None"
            ratio_type_17 = "Automatic"
            ratio_17 = "0.1"
            embedded_cpl_18 = "None"
            ratio_type_18 = "Automatic"
            ratio_18 = "0.1"
            embedded_cpl_19 = "None"
            ratio_type_19 = "Automatic"
            ratio_19 = "0.1"
            embedded_cpl_110 = "None"
            ratio_type_110 = "Automatic"
            ratio_110 = "0.1"
        }

        "core/Three Phase Two Winding Transformer" {
            input = "SC and OC tests"
            Sn = "160000.0"
            f = "50.0"
            V1 = "10000.0"
            V2 = "400.0"
            usc1 = "4.0"
            Psc1 = "2350.0"
            R1 = "4.58984375"
            L1 = ".0370093710364"
            R2 = ".00734375"
            L2 = "5.92149936583e-05"
            r1 = ".00734375"
            l1 = ".0186029389059"
            r2 = ".00734375"
            l2 = ".0186029389059"
            core_model = "Linear"
            ioc1 = "0.7"
            Poc1 = "460.0"
            Rm = "217391.304348"
            Lm = "311.709196788"
            flux_vals_SI = "[1910.3, 2419.7]"
            current_vals_SI = "[0.66653, 277.72]"
            rm = "347.826086957"
            lm = "156.68213163"
            flux_vals_pu = "[1.2, 1.52]"
            current_vals_pu = "[0.0024, 1]"
            flux_vals_SCOC = "[1.2, 1.52]"
            current_vals_SCOC = "[0.0024, 1]"
            import_from_SI2SCOC = "Import from SI"
            import_from_pu2SCOC = "Import from PU"
            import_from_SCOC2SI = "Import from SC OC"
            import_from_pu2SI = "Import from PU"
            import_from_SCOC2pu = "Import from SC OC"
            import_from_SI2pu = "Import from SI"
            winding_1_connection = "Y"
            winding_2_connection = "Y"
            clock_number = "0"
            embedded_cpl = "None"
            coupling_type = "core"
            ratio_type = "Automatic"
            ratio = "0.1"
            Rshunt = "inf"
        }

        "core/Three-phase Meter" {
            R = "1e5"
            n_cycles = "1"
            Ts = "100e-6"
            enable_probes = "True"
            enable_out = "True"
            remove_snubber = "False"
            enable_bandwidth = "False"
            bandwidth = "10e3"
            VAn = "True"
            VBn = "True"
            VCn = "True"
            VAB = "False"
            VBC = "False"
            VCA = "False"
            VN = "False"
            IA = "True"
            IB = "True"
            IC = "True"
            IN = "False"
            freq = "False"
            VLn_rms = "False"
            VLL_rms = "False"
            VLn_avg_rms = "False"
            VLL_avg_rms = "False"
            VN_rms = "False"
            I_rms = "False"
            I_avg_rms = "False"
            IN_rms = "False"
            P_method = "alpha-beta"
            enable_extra_out = "False"
            P_meas = "False"
        }

        "core/Transmission Line" {
            model = "RL coupled"
            num_of_phases = "3"
            model_def = "Geometry"
            unit_sys = "imperial"
            unit_sys_edited_flag = "0"
            Length_metric = "100.0"
            Length_miles = "62.1371"
            Frequency = "60.0"
            Earth_resistivity = "100"
            X_axis_1_metric = "-1.0668"
            Y_axis_1_metric = "8.5344"
            GMR_1_metric = "0.00743712"
            RD_1_metric = "0.009156192"
            Rs_1_metric = "0.19013958482462417"
            X_axis_1_imperial = "-3.5"
            Y_axis_1_imperial = "28.0"
            GMR_1_imperial = "0.0244"
            RD_1_imperial = "0.03004"
            Rs_1_imperial = "0.306"
            X_axis_2_metric = "-0.3048"
            Y_axis_2_metric = "8.5344"
            GMR_2_metric = "0.00743712"
            RD_2_metric = "0.009156192"
            Rs_2_metric = "0.19013958482462417"
            X_axis_2_imperial = "-1.0"
            Y_axis_2_imperial = "28.0"
            GMR_2_imperial = "0.0244"
            RD_2_imperial = "0.03004"
            Rs_2_imperial = "0.306"
            X_axis_3_metric = "1.0668"
            Y_axis_3_metric = "8.5344"
            GMR_3_metric = "0.00743712"
            RD_3_metric = "0.009156192"
            Rs_3_metric = "0.19013958482462417"
            X_axis_3_imperial = "3.5"
            Y_axis_3_imperial = "28.0"
            GMR_3_imperial = "0.0244"
            RD_3_imperial = "0.03004"
            Rs_3_imperial = "0.306"
            X_axis_4_metric = "0.1524"
            Y_axis_4_metric = "7.3152"
            GMR_4_metric = "0.00248"
            RD_4_metric = "0.00714"
            Rs_4_metric = "0.3678"
            X_axis_4_imperial = "0.5"
            Y_axis_4_imperial = "24.0"
            GMR_4_imperial = "0.00814"
            RD_4_imperial = "0.02345"
            Rs_4_imperial = "0.592"
            R_metric = "[[0.2481, 0.0579, 0.0579], [0.0579, 0.2481, 0.0579], [0.0579, 0.0579, 0.2481]]"
            R_imperial = "[[0.4, 0.093, 0.093], [0.093, 0.4, 0.093], [0.093, 0.093, 0.4]]"
            L_metric = "[[0.00233, 0.00140, 0.00140], [0.00140, 0.00233, 0.00140], [0.00140, 0.00140, 0.00233]]"
            L_imperial = "[[0.00374, 0.0022, 0.0022], [0.0022, 0.00374, 0.0022], [0.0022, 0.0022, 0.00374]]"
            C_metric = "[[8.546e-9, 0, 0], [0, 8.546e-9, 0], [0, 0, 8.546e-9]]"
            C_imperial = "[[1.471e-8, 0, 0], [0, 1.530e-8, 0], [0, 0, 1.375e-8]]"
            R_sequence_metric = "[[0.3864, 0, 0],[0, 0.01273, 0], [0, 0, 0.01273]]"
            L_sequence_metric = "[[4.1264e-3, 0, 0],[0, 0.9337e-3, 0], [0, 0, 0.9337e-3]]"
            C_sequence_metric = "[[7.751e-9, 0, 0],[0, 12.74e-9, 0], [0, 0, 12.74e-9]]"
            R_sequence_imperial = "[[0.6218, 0, 0],[0, 0.0204, 0], [0, 0, 0.0204]]"
            L_sequence_imperial = "[[0.00664, 0, 0],[0, 0.00150, 0], [0, 0, 0.00150]]"
            C_sequence_imperial = "[[1.247e-8, 0, 0],[0, 2.0503e-8, 0], [0, 0, 2.0503e-8]]"
            import_from_geometry = "Import from Geometry"
            import_from_RLC = "Import from RLC"
        }

        "core/Triple Pole Single Throw Contactor" {
            signal_access = "inherit"
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/abc to dq" {
            power_form = "variant - Clarke\'s original"
            alignment = "-pi/2"
            disable_filter = "True"
            initial_filter_output = "0"
            wn_LPFdq = "1000"
            execution_rate = "inherit"
            _tunable = "False"
        }

        "core/dq to abc" {
            power_form = "variant - Clarke\'s original"
            alignment = "-pi/2"
            execution_rate = "0"
        }
    }
}