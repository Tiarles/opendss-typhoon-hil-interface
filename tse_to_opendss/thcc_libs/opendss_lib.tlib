//
// Saved by sw version: 2021.3
// Save timestamp: 16-Sep-2021 @ 02:59:11 PM
//

library "OpenDSS" {
    configuration {
        hil_device = "HIL604"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = auto
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_digital_outputs_on_sim_stop = True
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
    }

    component Subsystem Root {
        component Subsystem Bus {
            layout = static

            port A1 {
                label = "A1"
                position = -8.0, -32.0
                kind = pe
                direction =  in
            }
            [
                position = 7400, 7856
            ]

            port B1 {
                label = "B1"
                position = -8.0, 0
                kind = pe
                direction =  in
            }
            [
                position = 7400, 7952
            ]

            port C1 {
                label = "C1"
                position = -8.0, 32.0
                kind = pe
                direction =  in
            }
            [
                position = 7400, 8048
            ]

            port A2 {
                label = "A2"
                position = 8.0, -32.0
                kind = pe
                direction =  in
            }
            [
                position = 7900, 7856
                scale = -1, 1
            ]

            port B2 {
                label = "B2"
                position = 8.0, 0
                kind = pe
                direction =  in
            }
            [
                position = 7900, 7952
                scale = -1, 1
            ]

            port C2 {
                label = "C2"
                position = 8.0, 32.0
                kind = pe
                direction =  in
            }
            [
                position = 7900, 8048
                scale = -1, 1
            ]

            junction Aj pe
            [
                position = 7504, 7856
            ]

            junction Bj pe
            [
                position = 7624, 7952
            ]

            junction Cj pe
            [
                position = 7744, 8048
            ]

            junction A_imeas_j pe
            [
                position = 7850, 7856
            ]

            junction B_imeas_j pe
            [
                position = 7850, 7952
            ]

            junction C_imeas_j pe
            [
                position = 7850, 8048
            ]

            junction jA_vmeas pe
            [
                position = 7504, 8200
            ]

            junction jAB_vmeas pe
            [
                position = 7624, 8200
            ]

            junction jB_vmeas pe
            [
                position = 7744, 8200
            ]

            connect A1 Aj as conn_A1Aj
            connect B1 Bj as conn_B1Bj
            connect C1 Cj as conn_C1Cj
            connect A2 A_imeas_j as conn_A2Aj
            connect B2 B_imeas_j as conn_B2Bj
            connect C2 C_imeas_j as conn_C2Cj
            connect Aj A_imeas_j as sc_imeas_A
            connect Bj B_imeas_j as sc_imeas_B
            connect Cj C_imeas_j as sc_imeas_C

            conf = "on both sides"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">While buses are discrete components in the Schematic Editor, they are not objects in OpenDSS. They however define the connections in OpenDSS syntax and thus must be added between between circuit elements.<br><br>Terminals from different buses cannot be directly connected.<br><br>Only up to three phases are supported at the moment.</p></body></html>"

                type {
                    label = "Type"
                    widget = combo
                    combo_values = "ABC", "AB", "AC", "BC", "A", "B", "C"
                    type = string
                    default_value = "ABC"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        conf = mdl.get_property_value(mdl.prop(container_handle, "conf"))
                        created_ports , _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
                        comp_script.type_value_changed(mdl, container_handle, new_value, created_ports)
                        comp_script.ground_open_circuit(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                ground {
                    label = "Show DSS ground terminal (0)"
                    widget = checkbox
                    type = string
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports , _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
                        comp_script.ground_open_circuit(mdl, container_handle, created_ports)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                i_meas {
                    label = "RMS Current Measurements"
                    widget = checkbox
                    type = string
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.i_meas_changed(mdl, container_handle, new_value)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                v_meas {
                    label = "RMS Voltage Measurements"
                    widget = checkbox
                    type = string
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.v_meas_changed(mdl, container_handle, new_value)
                    ENDCODE
                }

                conf {
                    label = "Configuration"
                    widget = combo
                    combo_values = "on one side", "on both sides"
                    type = string
                    default_value = "on one side"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        type = mdl.get_property_value(mdl.prop(container_handle, "type"))
                        created_ports , _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
                        comp_script.type_value_changed(mdl, container_handle, type, created_ports)
                        comp_script.ground_open_circuit(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_bus as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4480, 4064
            size = 16, 96
        ]

        component Subsystem Line {
            layout = static
            component "core/Transmission Line" TL {
                C_metric = "d_C"
                C_sequence_metric = "d_C"
                Frequency = "Fr"
                L_metric = "d_L"
                L_sequence_metric = "d_L"
                Length_metric = "Len"
                R_metric = "d_R"
                R_sequence_metric = "d_R"
                model = "PI"
                model_def = "Sequence"
                unit_sys = "metric"
            }
            [
                position = 7744, 8032
                size = 256, 72
            ]

            port A1 {
                position = -32.0, -32.0
                kind = pe
            }
            [
                position = 7512, 7976
            ]

            port B1 {
                position = -32.0, 0.0
                kind = pe
            }
            [
                position = 7512, 8032
            ]

            port C1 {
                position = -32.0, 32.0
                kind = pe
            }
            [
                position = 7512, 8088
            ]

            port A2 {
                position = 32.0, -32.0
                kind = pe
            }
            [
                position = 8008, 7936
                rotation = down
            ]

            port B2 {
                position = 32.0, 0.0
                kind = pe
            }
            [
                position = 8008, 8032
                rotation = down
            ]

            port C2 {
                position = 32.0, 32.0
                kind = pe
            }
            [
                position = 8008, 8128
                rotation = down
            ]

            port N {
                position = bottom left
                kind = pe
            }
            [
                position = 7728, 8144
            ]

            connect N TL.gnd as ConnTLN1
            connect A1 TL.a_in as Connection1
            connect B1 TL.b_in as Connection2
            connect C1 TL.c_in as Connection3
            connect A2 TL.a_out as Connection4
            connect B2 TL.b_out as Connection5
            connect C2 TL.c_out as Connection6

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Line component.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=173"

                input_type {
                    label = "Parameter input"
                    widget = combo
                    combo_values = "Symmetrical", "Matrix", "LineCode"
                    type = string
                    default_value = "Symmetrical"
                    group = "Line Parameters:1"
                    no_evaluate

                    CODE property_value_changed
                        if new_value == "Symmetrical":
                            mdl.set_property_value(mdl.prop(container_handle, 'phases'), "3")
                            mdl.disable_property(mdl.prop(container_handle, "phases"))

                        if new_value == "Symmetrical":
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'phases'), "3")
                            mdl.disable_property(mdl.prop(container_handle, "phases"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "phases"))

                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)

                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                Load {
                    label = "Load parameters"
                    widget = button
                    type = generic
                    default_value = "Choose"
                    group = "Line Parameters"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_line_parameters(mdl, container_handle)
                    ENDCODE
                }

                selected_object {
                    label = "Selected"
                    widget = edit
                    type = generic
                    default_value = ""
                    group = "Line Parameters"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_disp_value(prop_handle, old_value)
                    ENDCODE
                }

                Length {
                    label = "Line Length"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "km"
                    group = "Line Parameters:1"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate
                    group = "Line Parameters"

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                BaseFreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    group = "Line Parameters"
                    nonvisible
                }

                phases {
                    label = "Phases"
                    widget = combo
                    combo_values = "3", "2", "1"
                    type = string
                    default_value = "3"
                    group = "Line Parameters"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)
                        comp_script.show_hide_param_phases(mdl, container_handle, new_value)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                R1 {
                    label = "R1"
                    widget = edit
                    type = generic
                    default_value = "0.1903"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                R0 {
                    label = "R0"
                    widget = edit
                    type = generic
                    default_value = "0.5853"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                X1 {
                    label = "X1"
                    widget = edit
                    type = generic
                    default_value = "0.3957"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                X0 {
                    label = "X0"
                    widget = edit
                    type = generic
                    default_value = "1.3278"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                dC1 {
                    label = "C1"
                    widget = edit
                    type = generic
                    default_value = "11.155"
                    unit = "nF/km"
                    group = "Line Parameters"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)

                    ENDCODE
                }

                dC0 {
                    label = "C0"
                    widget = edit
                    type = generic
                    default_value = "5.2493"
                    unit = "nF/km"
                    group = "Line Parameters"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)

                    ENDCODE
                }

                rmatrix {
                    label = "Rmatrix"
                    widget = edit
                    type = string
                    default_value = "[[0.0981, 0.0401, 0.0401], [0.0401, 0.0981, 0.0401], [0.0401, 0.0401, 0.0981]]"
                    unit = "Ω/km"
                    group = "Line Parameters"
                    no_evaluate
                }

                xmatrix {
                    label = "Xmatrix"
                    widget = edit
                    type = string
                    default_value = "[[0.2153, 0.0947, 0.0947], [0.0947, 0.2153, 0.0947], [0.0947, 0.0947, 0.2153]]"
                    unit = "Ω/km"
                    group = "Line Parameters"
                    no_evaluate
                }

                cmatrix {
                    label = "Cmatrix"
                    widget = edit
                    type = string
                    default_value = "[[2.8, -0.6, -0.6], [-0.6, 2.8, -0.6], [-0.6, -0.6, 2.8]]"
                    unit = "nF/km"
                    group = "Line Parameters"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle,created_ports)

                    ENDCODE
                }

                obj_mode {
                    widget = edit
                    type = generic
                    default_value = ""
                    nonvisible
                    no_evaluate
                }

                Len {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Fr {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_R {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_L {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_C {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_X {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                C1 {
                    widget = edit
                    type = generic
                    default_value = "12.74e-9"
                    nonvisible
                }

                C0 {
                    widget = edit
                    type = generic
                    default_value = "7.751e-9"
                    nonvisible
                }

                L1 {
                    widget = edit
                    type = generic
                    default_value = "99999"
                    nonvisible
                }

                L0 {
                    widget = edit
                    type = generic
                    default_value = "99999"
                    nonvisible
                }

                R1_one {
                    widget = edit
                    type = generic
                    default_value = "0.01"
                    nonvisible
                }

                L1_one {
                    widget = edit
                    type = generic
                    default_value = "0.01e-3"
                    nonvisible
                }

                C1_one {
                    widget = edit
                    type = generic
                    default_value = "0.1e-6"
                    nonvisible
                }

                coupling {
                    label = "Enable coupling"
                    widget = combo
                    combo_values = "None", "Core coupling", "Device coupling"
                    type = string
                    default_value = "None"
                    group = "Coupling:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)

                    ENDCODE
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.show_hide_param_inputs(mdl, item_handle, mdl.get_property_value(mdl.prop(item_handle, "input_type")))

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    mdl.set_ns_var("line_dialog_handler", dialog)
                    dialog.exec_()

                ENDCODE

                CODE pre_compile

                    # HEADER START
                    Length = mdl.get_property_value(mdl.prop(item_handle, "Length"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    dC1 = mdl.get_property_value(mdl.prop(item_handle, "dC1"))
                    dC0 = mdl.get_property_value(mdl.prop(item_handle, "dC0"))
                    Len = mdl.get_property_value(mdl.prop(item_handle, "Len"))
                    Fr = mdl.get_property_value(mdl.prop(item_handle, "Fr"))
                    d_R = mdl.get_property_value(mdl.prop(item_handle, "d_R"))
                    d_L = mdl.get_property_value(mdl.prop(item_handle, "d_L"))
                    d_C = mdl.get_property_value(mdl.prop(item_handle, "d_C"))
                    X1 = mdl.get_property_value(mdl.prop(item_handle, "X1"))
                    X0 = mdl.get_property_value(mdl.prop(item_handle, "X0"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    C0 = mdl.get_property_value(mdl.prop(item_handle, "C0"))
                    R1_one = mdl.get_property_value(mdl.prop(item_handle, "R1_one"))
                    L1_one = mdl.get_property_value(mdl.prop(item_handle, "L1_one"))
                    C1_one = mdl.get_property_value(mdl.prop(item_handle, "C1_one"))
                    coupling = mdl.get_property_value(mdl.prop(item_handle, "coupling"))
                    # HEADER STOP

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    comp_script.configure_cable(mdl, item_handle)

                    L0_prop = mdl.prop(item_handle, "L0")
                    L1_prop = mdl.prop(item_handle, "L1")
                    L0 = mdl.get_property_value(L0_prop)
                    L1 = mdl.get_property_value(L1_prop)

                    if L0 == 99999:
                        # For old definition support workaround
                        mdl.set_property_value(L0_prop, 0)
                        mdl.set_property_value(L1_prop, 0)

                ENDCODE

                CODE model_loaded
                    L0_prop = mdl.prop(item_handle, "L0")
                    L1_prop = mdl.prop(item_handle, "L1")
                    X0_prop = mdl.prop(item_handle, "X0")
                    X1_prop = mdl.prop(item_handle, "X1")
                    BaseFreq_prop = mdl.prop(item_handle, "BaseFreq")

                    f = mdl.get_property_value(BaseFreq_prop)
                    X0 = mdl.get_property_value(X0_prop)
                    X1 = mdl.get_property_value(X1_prop)
                    L0 = mdl.get_property_value(L0_prop)
                    L1 = mdl.get_property_value(L1_prop)

                    if X0 == 0 and X1 == 0:
                        if not L0 == 99999 and not L0 == 99999:
                            comp_name = mdl.get_name(mdl.get_parent(item_handle))
                            mdl.info(f"Old definition (inductance) detected on Line.{comp_name}. Converting to reactance.")
                            mdl.set_property_value(X0_prop, str(L0)+"*(2*np.pi*" + str(f) + ")")
                            mdl.set_property_value(X1_prop, str(L1)+"*(2*np.pi*" + str(f) + ")")

                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                    gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)
                    if not gui_scripts_path in sys.path:
                        sys.path.append(gui_scripts_path)

                    import comp_line as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4952, 4264
            size = 64, 112
        ]

        component Subsystem VSConverter {
            layout = static
            label = "VSC"
            component "core/abc to dq" "abc to dq1" {
            }
            [
                position = 7440, 8248
                hide_name = True
                size = 48, 80
            ]

            component src_constant Constant3 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 7096, 8360
                rotation = left
                hide_name = True
            ]

            component "core/abc to dq" "abc to dq2" {
            }
            [
                position = 9232, 8936
                hide_name = True
                size = 48, 80
            ]

            component gen_product Product1 {
            }
            [
                position = 10296, 8792
                hide_name = True
            ]

            component gen_gain Gain9 {
                gain = "1.5"
            }
            [
                position = 10376, 8792
                hide_name = True
            ]

            component gen_probe P_gen {
                signal_name = "P"
                signal_type = "power"
                streaming_en = "False"
            }
            [
                position = 10496, 8752
                rotation = left
            ]

            component gen_product Product4 {
            }
            [
                position = 10296, 8896
                hide_name = True
            ]

            component gen_gain Gain10 {
                gain = "-1.5"
            }
            [
                position = 10376, 8896
                hide_name = True
            ]

            component gen_probe Q_gen {
                signal_name = "Q"
                signal_type = "power"
                streaming_en = "False"
            }
            [
                position = 10496, 8856
                rotation = left
            ]

            component gen_sum Sum7 {
                signs = "+-"
            }
            [
                position = 6712, 8792
                hide_name = True
            ]

            component gen_integrator Integrator3 {
                limit_lower = "-1000*vdc_set*0.05"
                limit_output = "True"
                limit_upper = "1000*vdc_set*0.05"
            }
            [
                position = 7448, 9008
                hide_name = True
            ]

            component gen_sum Sum8 {
                signs = "++"
            }
            [
                position = 7536, 8944
                hide_name = True
            ]

            component sys_signal_switch "Signal switch3" {
                threshold = "0.5"
            }
            [
                position = 7016, 8928
                hide_name = True
            ]

            component src_constant Constant4 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 6984, 9056
                rotation = left
                hide_name = True
            ]

            component sys_signal_switch "Signal switch4" {
                threshold = "0.5"
            }
            [
                position = 7152, 8944
                hide_name = True
            ]

            component gen_sum Sum9 {
                signs = "+-"
            }
            [
                position = 6808, 8400
                hide_name = True
            ]

            component gen_integrator Integrator4 {
                limit_lower = "-1000*vdc_set*0.05"
                limit_output = "True"
                limit_upper = "1000*vdc_set*0.05"
            }
            [
                position = 7472, 8632
                hide_name = True
            ]

            component gen_gain Gain13 {
                gain = "P_ki"
            }
            [
                position = 7320, 8616
                hide_name = True
            ]

            component gen_gain Gain14 {
                gain = "P_kp"
            }
            [
                position = 7320, 8496
                hide_name = True
            ]

            component gen_sum Sum10 {
                signs = "++"
            }
            [
                position = 7560, 8624
                hide_name = True
            ]

            component sys_signal_switch "Signal switch5" {
                threshold = "0.5"
            }
            [
                position = 7112, 8560
                hide_name = True
            ]

            component src_constant Constant5 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 7080, 8648
                rotation = left
                hide_name = True
            ]

            component sys_signal_switch "Signal switch6" {
                threshold = "0.5"
            }
            [
                position = 7200, 8576
                hide_name = True
            ]

            component gen_sum Sum11 {
                signs = "+-"
            }
            [
                position = 6720, 8960
                hide_name = True
            ]

            component gen_probe V_gen {
                signal_name = "V"
                signal_type = "voltage"
                streaming_en = "False"
            }
            [
                position = 7872, 8064
            ]

            component gen_gain Gain21 {
                gain = "0.001"
            }
            [
                position = 10464, 8792
                hide_name = True
            ]

            component gen_gain Gain22 {
                gain = "0.001"
            }
            [
                position = 10464, 8896
                hide_name = True
            ]

            component gen_gain Gain23 {
                gain = "1.224745"
            }
            [
                position = 7768, 8120
                hide_name = True
            ]

            component src_constant Constant9 {
                execution_rate = "Ts"
                value = "ext_mode"
            }
            [
                position = 7248, 9176
                hide_name = True
            ]

            component sys_signal_switch "Signal switch12" {
                threshold = "0.5"
            }
            [
                position = 6920, 8912
                hide_name = True
            ]

            component gen_gain Gain24 {
                gain = "Q_kp"
            }
            [
                position = 7296, 8872
                hide_name = True
            ]

            component sys_signal_switch "Signal switch13" {
                threshold = "0.5"
            }
            [
                position = 7392, 8888
                hide_name = True
            ]

            component gen_gain Gain25 {
                gain = "V_kp"
            }
            [
                position = 7296, 8904
                hide_name = True
            ]

            component sys_signal_switch "Signal switch14" {
                threshold = "0.5"
            }
            [
                position = 7368, 9008
                hide_name = True
            ]

            component gen_gain Gain26 {
                gain = "Q_ki"
            }
            [
                position = 7280, 8992
                hide_name = True
            ]

            component gen_gain Gain27 {
                gain = "V_ki"
            }
            [
                position = 7280, 9024
                hide_name = True
            ]

            component gen_c_function "C function1" {
                input_terminals = "real mode_external;inherit Mode_select_ext;inherit Mode_select_int;"
                input_terminals_dimensions = "inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True"
                input_terminals_show_labels = "True;True;True"
                output_fnc = "/*Begin code section*/
if (mode_external) {
    if (Mode_select_ext==0) {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_ext==1) {
        dED_sel = 1;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_ext==2) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_ext==3) {
        dED_sel = 1;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_ext==4) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 1;
    }
    else {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
}
else {
    if (Mode_select_int==0) {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_int==1) {
        dED_sel = 1;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_int==2) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_int==3) {
        dED_sel = 1;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_int==4) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 1;
    }
    else {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
}
/*End code section*/"
                output_terminals = "real dED_sel;real dEQ_sel;real GF_en;"
                output_terminals_dimensions = "inherit;inherit;inherit"
                output_terminals_feedthrough = "True;True;True"
                output_terminals_show_labels = "True;True;True"
            }
            [
                position = 7432, 9200
                hide_name = True
                size = 192, 96
            ]

            component src_constant Constant13 {
                execution_rate = "Ts"
                value = "ctrl_mode_int"
            }
            [
                position = 7248, 9224
                hide_name = True
            ]

            component gen_gain Gain28 {
                gain = "vdc_kp"
            }
            [
                position = 7320, 8528
                hide_name = True
            ]

            component gen_gain Gain29 {
                gain = "vdc_ki"
            }
            [
                position = 7320, 8648
                hide_name = True
            ]

            component gen_sum Sum14 {
                signs = "+-"
            }
            [
                position = 6928, 8672
                hide_name = True
            ]

            component gen_gain Gain30 {
                gain = "1000"
            }
            [
                position = 6768, 8664
                hide_name = True
            ]

            component sys_signal_switch "Signal switch15" {
                threshold = "0.5"
            }
            [
                position = 7392, 8512
                hide_name = True
            ]

            component sys_signal_switch "Signal switch16" {
                threshold = "0.5"
            }
            [
                position = 7400, 8632
                hide_name = True
            ]

            component sys_signal_switch "Signal switch17" {
                threshold = "0.5"
            }
            [
                position = 7024, 8544
                hide_name = True
            ]

            component src_constant Constant14 {
                execution_rate = "Ts"
            }
            [
                position = 6688, 9200
                hide_name = True
            ]

            component gen_gain Gain32 {
            }
            [
                position = 7184, 9200
                hide_name = True
            ]

            component "core/Signal Controlled Voltage Source" Vinv_a {
            }
            [
                position = 8304, 9568
                rotation = left
                scale = 1, -1
                size = 64, 32
            ]

            component "core/Signal Controlled Voltage Source" Vinv_b {
            }
            [
                position = 8376, 9632
                rotation = left
                scale = 1, -1
                size = 64, 32
            ]

            component "core/Signal Controlled Voltage Source" Vinv_c {
            }
            [
                position = 8448, 9704
                rotation = left
                scale = 1, -1
                size = 64, 32
            ]

            component pas_resistor Ra {
                resistance = "Rac"
            }
            [
                position = 8560, 9424
            ]

            component pas_resistor Rb {
                resistance = "Rac"
            }
            [
                position = 8560, 9504
            ]

            component pas_resistor Rc {
                resistance = "Rac"
            }
            [
                position = 8560, 9584
            ]

            component pas_inductor La {
                inductance = "Lac"
            }
            [
                position = 8688, 9424
            ]

            component pas_inductor Lb {
                inductance = "Lac"
            }
            [
                position = 8688, 9504
            ]

            component pas_inductor Lc {
                inductance = "Lac"
            }
            [
                position = 8696, 9584
            ]

            component "core/Current Measurement" Ia {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8808, 9424
                size = 64, 32
            ]

            component "core/Current Measurement" Ib {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8808, 9504
                size = 64, 32
            ]

            component "core/Current Measurement" Ic {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8808, 9584
                size = 64, 32
            ]

            component "core/Voltage Measurement" Va {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 8960, 9688
                rotation = right
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vb {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 9040, 9688
                rotation = right
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vc {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 9120, 9688
                rotation = right
                size = 64, 32
            ]

            component gen_sum Sum15 {
                signs = "+-"
            }
            [
                position = 10296, 8488
                hide_name = True
            ]

            component gen_sum Sum16 {
                signs = "+-"
            }
            [
                position = 10296, 8592
                hide_name = True
            ]

            component gen_sum Sum17 {
                signs = "+-"
            }
            [
                position = 10296, 8696
                hide_name = True
            ]

            component gen_probe Vab {
                signal_name = "V"
                signal_type = "voltage"
                streaming_en = "False"
            }
            [
                position = 10384, 8488
            ]

            component gen_probe Vbc {
                signal_name = "V"
                signal_type = "voltage"
                streaming_en = "False"
            }
            [
                position = 10384, 8592
            ]

            component gen_probe Vca {
                signal_name = "V"
                signal_type = "voltage"
                streaming_en = "False"
            }
            [
                position = 10384, 8696
            ]

            component Subsystem Subsystem8 {
                layout = dynamic
                component gen_product Product5 {
                }
                [
                    position = 8080, 7888
                    hide_name = True
                ]

                component gen_sum Sum16 {
                }
                [
                    position = 8160, 7920
                    hide_name = True
                ]

                component gen_math_fnc "Mathematical function2" {
                    mathematical_fn = "sqrt"
                }
                [
                    position = 8264, 7920
                    hide_name = True
                ]

                component gen_product Product4 {
                }
                [
                    position = 8080, 7968
                    hide_name = True
                ]

                component gen_trigonometric "Trigonometric function4" {
                    trigonometric_fn = "asin"
                }
                [
                    position = 8688, 8032
                    hide_name = True
                ]

                component gen_product Product7 {
                    signs = "*/"
                }
                [
                    position = 8512, 7872
                    hide_name = True
                ]

                component gen_rel_op "Relational operator2" {
                }
                [
                    position = 8344, 7992
                    hide_name = True
                ]

                component src_constant Constant5 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8264, 8000
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch4" {
                    threshold = "0.5"
                }
                [
                    position = 8768, 8016
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch12" {
                    threshold = "0.5"
                }
                [
                    position = 8392, 8080
                    hide_name = True
                ]

                component gen_sum Sum19 {
                }
                [
                    position = 8232, 8072
                    hide_name = True
                ]

                component src_constant Constant6 {
                    execution_rate = "Ts"
                    value = "0.001"
                }
                [
                    position = 8152, 8080
                    hide_name = True
                ]

                component src_constant Constant7 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8608, 8000
                    hide_name = True
                ]

                component gen_comparator Comparator4 {
                }
                [
                    position = 8264, 8160
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch13" {
                    threshold = "0.5"
                }
                [
                    position = 9000, 8208
                    hide_name = True
                ]

                component gen_sum Sum20 {
                    signs = "+-"
                }
                [
                    position = 8880, 8360
                    hide_name = True
                ]

                component src_constant Constant8 {
                    execution_rate = "Ts"
                    value = "np.pi"
                }
                [
                    position = 8744, 8352
                    hide_name = True
                ]

                component gen_comparator Comparator5 {
                }
                [
                    position = 9008, 8312
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch14" {
                    threshold = "0.5"
                }
                [
                    position = 9072, 8360
                    hide_name = True
                ]

                component gen_sum Sum21 {
                    signs = "+-"
                }
                [
                    position = 8888, 8432
                    hide_name = True
                ]

                component src_constant Constant9 {
                    execution_rate = "Ts"
                    value = "-np.pi"
                }
                [
                    position = 8744, 8424
                    hide_name = True
                ]

                component src_constant Constant10 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8944, 8328
                    hide_name = True
                ]

                port mag {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8336, 7920
                ]

                port d {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7776, 8304
                ]

                port q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7696, 7872
                ]

                port Angle {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 9072, 8208
                ]

                junction Junction24 sp
                [
                    position = 8032, 7896
                ]

                junction Junction29 sp
                [
                    position = 8024, 7976
                ]

                junction Junction33 sp
                [
                    position = 7824, 8304
                ]

                junction Junction35 sp
                [
                    position = 8304, 7920
                ]

                junction Junction37 sp
                [
                    position = 8392, 7992
                ]

                junction Junction38 sp
                [
                    position = 8304, 7984
                ]

                junction Junction39 sp
                [
                    position = 8304, 8024
                ]

                junction Junction40 sp
                [
                    position = 8184, 8080
                ]

                junction Junction43 sp
                [
                    position = 8816, 8192
                ]

                junction Junction44 sp
                [
                    position = 8816, 8304
                ]

                junction Junction45 sp
                [
                    position = 8816, 8368
                ]

                junction Junction46 sp
                [
                    position = 7792, 7872
                ]

                connect Product4.in1 Junction29 as Connection222
                connect Product4.in Junction29 as Connection224
                connect Product4.out Sum16.in1 as Connection236
                connect Product5.in1 Junction24 as Connection228
                connect Product5.in Junction24 as Connection235
                connect Junction33 d as Connection238
                connect "Mathematical function2.in" Sum16.out as Connection234
                connect Sum16.in Product5.out as Connection231
                connect mag Junction35 as Connection252
                connect Junction35 "Mathematical function2.out" as Connection253
                [
                    position = 0, 0
                ]
                connect Constant5.out "Relational operator2.in1" as Connection255
                connect Junction33 Junction29 as Connection257
                [
                    position = 0, 0
                ]
                connect "Trigonometric function4.out" "Signal switch4.in1" as Connection262
                connect "Relational operator2.out" Junction37 as Connection263
                connect Junction37 "Signal switch4.in2" as Connection264
                [
                    position = 0, 0
                ]
                connect "Signal switch12.in2" Junction37 as Connection265
                connect Product7.out "Trigonometric function4.in" as Connection266
                connect "Relational operator2.in" Junction38 as Connection267
                connect Junction38 Junction35 as Connection268
                connect "Signal switch12.out" Product7.in1 as Connection270
                connect "Signal switch12.in1" Junction39 as Connection271
                connect Junction39 Junction38 as Connection272
                connect Sum19.in Junction39 as Connection273
                connect Sum19.out "Signal switch12.in" as Connection275
                connect Constant7.out "Signal switch4.in" as Connection276
                connect Constant6.out Junction40 as Connection277
                connect Junction40 Sum19.in1 as Connection278
                connect Comparator4.in2 Junction40 as Connection279
                connect Comparator4.out "Signal switch13.in2" as Connection283
                connect Junction43 "Signal switch13.in" as Connection290
                [
                    position = 0, 0
                ]
                connect Comparator5.out "Signal switch14.in2" as Connection292
                connect "Signal switch4.out" Junction43 as Connection294
                [
                    position = 0, 0
                ]
                connect Constant8.out Sum20.in as Connection295
                connect Comparator5.in1 Junction44 as Connection296
                connect Junction44 Junction43 as Connection297
                connect Constant9.out Sum21.in as Connection299
                connect Sum20.in1 Junction45 as Connection300
                connect Junction45 Junction44 as Connection301
                connect Sum21.in1 Junction45 as Connection302
                connect Sum20.out "Signal switch14.in" as Connection303
                connect Sum21.out "Signal switch14.in1" as Connection304
                connect Constant10.out Comparator5.in2 as Connection305
                connect "Signal switch14.out" "Signal switch13.in1" as Connection306
                connect Angle "Signal switch13.out" as Connection307
                connect Comparator4.in1 Junction33 as Connection312
                [
                    position = 0, 0
                ]
                connect Product7.in Junction46 as Connection314
                connect Junction46 Junction24 as Connection315
                [
                    position = 0, 0
                ]
                connect q Junction46 as Connection316
            }
            [
                position = 7584, 8176
                rotation = right
                hide_name = True
                scale = 1, -1
                size = 48, 64
            ]

            component gen_comparator Comparator1 {
            }
            [
                position = 8224, 8264
                hide_name = True
            ]

            component src_clock Clock1 {
                execution_rate = "Ts"
            }
            [
                position = 8080, 8256
                hide_name = True
            ]

            component src_constant Constant21 {
                execution_rate = "Ts"
                value = "cont_t"
            }
            [
                position = 8128, 8296
                hide_name = True
            ]

            component src_constant Constant22 {
                execution_rate = "Ts"
                value = "Sinv"
            }
            [
                position = 6224, 8384
                hide_name = True
            ]

            component src_constant Constant23 {
                execution_rate = "Ts"
                value = "Qinv"
            }
            [
                position = 6224, 8424
                hide_name = True
            ]

            component src_constant Constant24 {
                execution_rate = "Ts"
                value = "Fs"
            }
            [
                position = 6224, 8344
                hide_name = True
            ]

            component src_constant Constant25 {
                execution_rate = "Ts"
                value = "vac_set"
            }
            [
                position = 6224, 8472
                hide_name = True
            ]

            component "core/dq to abc" "dq to abc1" {
                execution_rate = "inherit"
            }
            [
                position = 8832, 8816
                size = 48, 80
            ]

            component src_constant Constant27 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 8744, 8872
                rotation = left
                hide_name = True
            ]

            component gen_gain Gain33 {
                gain = "2*np.pi"
            }
            [
                position = 6976, 8248
                hide_name = True
            ]

            component src_constant Constant28 {
                execution_rate = "Ts"
                value = "2*np.pi"
            }
            [
                position = 7016, 8360
                rotation = left
                hide_name = True
            ]

            component gen_c_function "C function2" {
                global_variables = "real out_mem;"
                init_fnc = "/*Begin code section*/
out_mem = ang_init;
/*End code section*/"
                input_terminals = "real in;real reset_level;real dt;real ang_init;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True;True"
                input_terminals_show_labels = "True;True;True;True"
                output_fnc = "/*Begin code section*/
out = dt * in + out_mem;
if (out>reset_level) {
    out = out - reset_level;
}

out_mem = out;
/*End code section*/"
                output_terminals_dimensions = "inherit"
                output_terminals_feedthrough = "True"
                output_terminals_show_labels = "True"
            }
            [
                position = 7208, 8272
                hide_name = True
                size = 112, 80
            ]

            component src_constant Constant30 {
                execution_rate = "Ts"
                value = "Ts"
            }
            [
                position = 7056, 8360
                rotation = left
                hide_name = True
            ]

            component gen_sum Sum19 {
                signs = "++"
            }
            [
                position = 8736, 8952
                hide_name = True
            ]

            component src_constant Constant31 {
                execution_rate = "Ts"
                value = "Ts*Fs*2*np.pi"
            }
            [
                position = 8664, 8960
                hide_name = True
            ]

            component gen_sum Sum23 {
                signs = "++"
            }
            [
                position = 7944, 8584
                hide_name = True
            ]

            component gen_limiter Limit1 {
                lower_limit = "-1000*vdc_set*0.05"
                upper_limit = "1000*vdc_set*0.05"
            }
            [
                position = 7632, 8624
                hide_name = True
            ]

            component gen_limiter Limit2 {
                lower_limit = "-1000*vdc_set*0.05"
                upper_limit = "1000*vdc_set*0.05"
            }
            [
                position = 7616, 8944
                hide_name = True
            ]

            component gen_sum Sum24 {
                signs = "+"
            }
            [
                position = 7936, 8736
                hide_name = True
            ]

            component gen_sum Sum25 {
                signs = "++"
            }
            [
                position = 9304, 8704
                hide_name = True
            ]

            component gen_sum Sum26 {
                signs = "+-"
            }
            [
                position = 6912, 8528
                hide_name = True
            ]

            component src_constant Constant38 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 6640, 8408
                hide_name = True
            ]

            component gen_rate_limiter "Rate Limiter1" {
                falling_limit = "-1*Sinv*Fs*1000"
                rising_limit = "1*Sinv*Fs*1000"
            }
            [
                position = 6848, 8472
                rotation = right
                hide_name = True
            ]

            component gen_sum Sum27 {
                signs = "+-"
            }
            [
                position = 6832, 8896
                hide_name = True
            ]

            component src_constant Constant39 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 6560, 8800
                hide_name = True
            ]

            component gen_rate_limiter "Rate Limiter4" {
                falling_limit = "-1*Sinv*Fs*1000"
                rising_limit = "1*Sinv*Fs*1000"
            }
            [
                position = 6776, 8840
                rotation = right
                hide_name = True
            ]

            component "core/Signal Controlled Current Source" Isp1 {
            }
            [
                position = 7880, 9520
                rotation = right
                size = 64, 32
            ]

            component gen_c_function "C function3" {
                global_variables = "real ia_add;real ib_add;real ic_add;real ia_addn;real ib_addn;real ic_addn;real idcp;real idcn;real Emax;real Z;real VLL;real con_mode;"
                init_fnc = "/*Begin code section*/
Z = sqrt(Rac*Rac+Fs*Fs*4*Lac*Lac*9.8696);
/*End code section*/"
                input_terminals = "real Vdc;real Ea;inherit Eb;inherit Ec;inherit ia;inherit ib;inherit ic;inherit va;inherit vb;inherit vc;inherit mc;inherit con_en;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True;True;True;True;True;True;True;True;True;True"
                input_terminals_show_labels = "True;True;True;True;True;True;True;True;True;True;True;True"
                output_fnc = "/*Begin code section*/
Ea1 = Ea;
Eb1 = Eb;
Ec1 = Ec;
Emax = Ea-Eb;
VLL = va-vb;
con_mode = 1;
if ((vb-va)>VLL) {
    Emax = Eb-Ea;
    VLL = vb-va;
    con_mode = 2;
}
else if ((vb-vc)>VLL) {
    Emax = Eb-Ec;
    VLL = vb-vc;
    con_mode = 3;
}
else if ((vc-vb)>VLL) {
    Emax = Ec-Eb;
    VLL = vc-vb;
    con_mode = 4;
}
else if ((vc-va)>VLL) {
    Emax = Ec-Ea;
    VLL = vc-va;
    con_mode = 5;
}
else if ((va-vc)>VLL) {
    Emax = Ea-Ec;
    VLL = va-vc;
    con_mode = 6;
}



if (con_en==1) {
if (Vdc<VLL) {
    if (con_mode==1) {
        Ea1 = Vdc/2;
        Eb1 = -Vdc/2;
    }
    else if (con_mode==2) {
        Eb1 = Vdc/2;
        Ea1 = -Vdc/2;
    }
    else if (con_mode==3) {
        Eb1 = Vdc/2;
        Ec1 = -Vdc/2;
    }
    else if (con_mode==4) {
        Ec1 = Vdc/2;
        Eb1 = -Vdc/2;
    }
    else if (con_mode==5) {
        Ec1 = Vdc/2;
        Ea1 = -Vdc/2;
    }
    else if (con_mode==6) {
        Ea1 = Vdc/2;
        Ec1 = -Vdc/2;
    }

}
}







if (ia>=0) {
    if (Ea1>=0) {
        ia_add = -ia;
        ia_addn = 0;
    }
    else {
        ia_add = 0;
        ia_addn = ia;
    }
}
else {
    if (Ea1>=0) {
        ia_add = -ia;
        ia_addn = 0;
    }
    else {
        ia_add = 0;
        ia_addn = ia;
    }
}


if (ib>=0) {
    if (Eb1>=0) {
        ib_add = -ib;
        ib_addn = 0;
    }
    else {
        ib_add = 0;
        ib_addn = ib;
    }
}
else {
    if (Eb1>=0) {
        ib_add = -ib;
        ib_addn = 0;
    }
    else {
        ib_add = 0;
        ib_addn = ib;
    }
}


if (ic>=0) {
    if (Ec1>=0) {
        ic_add = -ic;
        ic_addn = 0;
    }
    else {
        ic_add = 0;
        ic_addn = ic;
    }
}
else {
    if (Ec1>=0) {
        ic_add = -ic;
        ic_addn = 0;
    }
    else {
        ic_add = 0;
        ic_addn = ic;
    }
}

idcp = mc*(ia_add + ib_add + ic_add);
idcn = mc*(ia_addn + ib_addn + ic_addn);

if (idcp>=0 && idcp>=idcn) {
    idc = idcp;
}
else if (idcp<0 && idcp>=idcn) {
    idc = idcn;
}
else if (idcp>=0 && idcp<idcn) {
    idc = idcn;
}
else if (idcp<0 && idcp<idcn) {
    idc = idcp;
}
else {
    idc = idcp;
}


if (Vdc<-2) {
    idc = -Vdc;
}
/*End code section*/"
                output_terminals = "real idc;real Ea1;real Eb1;real Ec1;"
                output_terminals_dimensions = "inherit;inherit;inherit;inherit"
                output_terminals_feedthrough = "True;True;True;True"
                output_terminals_show_labels = "True;True;True;True"
                parameters = "real Rac;real Lac;real Fs;"
            }
            [
                position = 9824, 8776
                hide_name = True
                size = 120, 392
            ]

            component "core/Voltage Measurement" Va1 {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 7976, 9512
                rotation = right
                size = 64, 32
            ]

            component gen_probe DC_C {
                signal_name = "V"
                signal_type = "current"
                streaming_en = "False"
            }
            [
                position = 9920, 8560
                rotation = left
            ]

            component gen_probe DC_VDC {
                signal_name = "V"
                signal_type = "voltage"
                streaming_en = "False"
            }
            [
                position = 8056, 9568
            ]

            component Subsystem Subsystem9 {
                layout = dynamic
                component gen_product Product5 {
                }
                [
                    position = 8080, 7888
                    hide_name = True
                ]

                component gen_sum Sum16 {
                }
                [
                    position = 8160, 7920
                    hide_name = True
                ]

                component gen_math_fnc "Mathematical function2" {
                    mathematical_fn = "sqrt"
                }
                [
                    position = 8264, 7920
                    hide_name = True
                ]

                component gen_product Product4 {
                }
                [
                    position = 8080, 7968
                    hide_name = True
                ]

                component gen_trigonometric "Trigonometric function4" {
                    trigonometric_fn = "asin"
                }
                [
                    position = 8688, 8032
                    hide_name = True
                ]

                component gen_product Product7 {
                    signs = "*/"
                }
                [
                    position = 8512, 7872
                    hide_name = True
                ]

                component gen_rel_op "Relational operator2" {
                }
                [
                    position = 8344, 7992
                    hide_name = True
                ]

                component src_constant Constant5 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8264, 8000
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch4" {
                    threshold = "0.5"
                }
                [
                    position = 8768, 8016
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch12" {
                    threshold = "0.5"
                }
                [
                    position = 8392, 8080
                    hide_name = True
                ]

                component gen_sum Sum19 {
                }
                [
                    position = 8232, 8072
                    hide_name = True
                ]

                component src_constant Constant6 {
                    execution_rate = "Ts"
                    value = "0.001"
                }
                [
                    position = 8152, 8080
                    hide_name = True
                ]

                component src_constant Constant7 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8608, 8000
                    hide_name = True
                ]

                component gen_comparator Comparator4 {
                }
                [
                    position = 8264, 8160
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch13" {
                    threshold = "0.5"
                }
                [
                    position = 9000, 8208
                    hide_name = True
                ]

                component gen_sum Sum20 {
                    signs = "+-"
                }
                [
                    position = 8880, 8360
                    hide_name = True
                ]

                component src_constant Constant8 {
                    execution_rate = "Ts"
                    value = "np.pi"
                }
                [
                    position = 8744, 8352
                    hide_name = True
                ]

                component gen_comparator Comparator5 {
                }
                [
                    position = 9008, 8312
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch14" {
                    threshold = "0.5"
                }
                [
                    position = 9072, 8360
                    hide_name = True
                ]

                component gen_sum Sum21 {
                    signs = "+-"
                }
                [
                    position = 8888, 8432
                    hide_name = True
                ]

                component src_constant Constant9 {
                    execution_rate = "Ts"
                    value = "-np.pi"
                }
                [
                    position = 8744, 8424
                    hide_name = True
                ]

                component src_constant Constant10 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8944, 8328
                    hide_name = True
                ]

                port mag {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8336, 7920
                ]

                port d {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7776, 8304
                ]

                port q {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7696, 7872
                ]

                port Angle {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 9072, 8208
                ]

                junction Junction24 sp
                [
                    position = 8032, 7896
                ]

                junction Junction29 sp
                [
                    position = 8024, 7976
                ]

                junction Junction33 sp
                [
                    position = 7824, 8304
                ]

                junction Junction35 sp
                [
                    position = 8304, 7920
                ]

                junction Junction37 sp
                [
                    position = 8392, 7992
                ]

                junction Junction38 sp
                [
                    position = 8304, 7984
                ]

                junction Junction39 sp
                [
                    position = 8304, 8024
                ]

                junction Junction40 sp
                [
                    position = 8184, 8080
                ]

                junction Junction43 sp
                [
                    position = 8816, 8192
                ]

                junction Junction44 sp
                [
                    position = 8816, 8304
                ]

                junction Junction45 sp
                [
                    position = 8816, 8368
                ]

                junction Junction46 sp
                [
                    position = 7792, 7872
                ]

                connect Product4.in1 Junction29 as Connection222
                connect Product4.in Junction29 as Connection224
                connect Product4.out Sum16.in1 as Connection236
                connect Product5.in1 Junction24 as Connection228
                connect Product5.in Junction24 as Connection235
                connect Junction33 d as Connection238
                connect "Mathematical function2.in" Sum16.out as Connection234
                connect Sum16.in Product5.out as Connection231
                connect mag Junction35 as Connection252
                connect Junction35 "Mathematical function2.out" as Connection253
                [
                    position = 0, 0
                ]
                connect Constant5.out "Relational operator2.in1" as Connection255
                connect Junction33 Junction29 as Connection257
                [
                    position = 0, 0
                ]
                connect "Trigonometric function4.out" "Signal switch4.in1" as Connection262
                connect "Relational operator2.out" Junction37 as Connection263
                connect Junction37 "Signal switch4.in2" as Connection264
                [
                    position = 0, 0
                ]
                connect "Signal switch12.in2" Junction37 as Connection265
                connect Product7.out "Trigonometric function4.in" as Connection266
                connect "Relational operator2.in" Junction38 as Connection267
                connect Junction38 Junction35 as Connection268
                connect "Signal switch12.out" Product7.in1 as Connection270
                connect "Signal switch12.in1" Junction39 as Connection271
                connect Junction39 Junction38 as Connection272
                connect Sum19.in Junction39 as Connection273
                connect Sum19.out "Signal switch12.in" as Connection275
                connect Constant7.out "Signal switch4.in" as Connection276
                connect Constant6.out Junction40 as Connection277
                connect Junction40 Sum19.in1 as Connection278
                connect Comparator4.in2 Junction40 as Connection279
                connect Comparator4.out "Signal switch13.in2" as Connection283
                connect Junction43 "Signal switch13.in" as Connection290
                [
                    position = 0, 0
                ]
                connect Comparator5.out "Signal switch14.in2" as Connection292
                connect "Signal switch4.out" Junction43 as Connection294
                [
                    position = 0, 0
                ]
                connect Constant8.out Sum20.in as Connection295
                connect Comparator5.in1 Junction44 as Connection296
                connect Junction44 Junction43 as Connection297
                connect Constant9.out Sum21.in as Connection299
                connect Sum20.in1 Junction45 as Connection300
                connect Junction45 Junction44 as Connection301
                connect Sum21.in1 Junction45 as Connection302
                connect Sum20.out "Signal switch14.in" as Connection303
                connect Sum21.out "Signal switch14.in1" as Connection304
                connect Constant10.out Comparator5.in2 as Connection305
                connect "Signal switch14.out" "Signal switch13.in1" as Connection306
                connect Angle "Signal switch13.out" as Connection307
                connect Comparator4.in1 Junction33 as Connection312
                [
                    position = 0, 0
                ]
                connect Product7.in Junction46 as Connection314
                connect Junction46 Junction24 as Connection315
                [
                    position = 0, 0
                ]
                connect q Junction46 as Connection316
            }
            [
                position = 8064, 8672
                hide_name = True
                scale = 1, -1
                size = 48, 64
            ]

            component gen_limiter Limit3 {
                lower_limit = "0.1"
                upper_limit = "1e9"
            }
            [
                position = 8168, 8776
                hide_name = True
            ]

            component gen_product Product12 {
                signs = "*/"
            }
            [
                position = 8296, 8720
                hide_name = True
            ]

            component gen_limiter Limit4 {
                lower_limit = "0.1"
                upper_limit = "1e9"
            }
            [
                position = 8136, 8688
                hide_name = True
            ]

            component gen_limiter Limit5 {
                lower_limit = "0"
                upper_limit = "1"
            }
            [
                position = 8376, 8720
                hide_name = True
            ]

            component gen_product Product13 {
            }
            [
                position = 8584, 8592
                hide_name = True
            ]

            component gen_product Product14 {
            }
            [
                position = 8600, 8792
                hide_name = True
            ]

            component sys_signal_switch "Signal switch18" {
                threshold = "0.5"
            }
            [
                position = 8672, 8576
                hide_name = True
                scale = 1, -1
            ]

            component sys_signal_switch "Signal switch19" {
                threshold = "0.5"
            }
            [
                position = 8704, 8808
                hide_name = True
            ]

            component gen_gain Gain35 {
                gain = "0.6366"
            }
            [
                position = 8104, 8776
                hide_name = True
            ]

            component gen_product Product15 {
                signs = "*/"
            }
            [
                position = 8296, 8632
                hide_name = True
            ]

            component gen_limiter Limit6 {
                lower_limit = "0"
                upper_limit = "1"
            }
            [
                position = 8376, 8632
                hide_name = True
            ]

            component src_constant Constant43 {
                execution_rate = "Ts"
            }
            [
                position = 9688, 8952
                hide_name = True
            ]

            component gen_probe DC_m0 {
                signal_name = "V"
                streaming_en = "False"
            }
            [
                position = 9736, 9056
                rotation = right
            ]

            component gen_product Product16 {
            }
            [
                position = 10296, 9008
                hide_name = True
            ]

            component gen_probe DC_Pow {
                signal_name = "V"
                signal_type = "power"
                streaming_en = "False"
            }
            [
                position = 10472, 9008
            ]

            component gen_gain Gain36 {
                gain = "0.001"
            }
            [
                position = 10376, 9008
                hide_name = True
            ]

            component src_constant Constant44 {
                execution_rate = "Ts"
                value = "vdc_set"
            }
            [
                position = 6224, 8304
                hide_name = True
            ]

            component gen_gain Gain37 {
            }
            [
                position = 6288, 8472
                hide_name = True
            ]

            component gen_gain Gain38 {
                gain = "-1"
            }
            [
                position = 6968, 8600
                rotation = left
                hide_name = True
            ]

            component pas_resistor R_SN {
                resistance = "dc_snub"
            }
            [
                position = 7808, 9520
                rotation = right
            ]

            component gen_gain Gain39 {
                gain = "1000"
            }
            [
                position = 6824, 8960
                hide_name = True
            ]

            component gen_gain Gain40 {
                gain = "0.001"
            }
            [
                position = 6616, 8968
                hide_name = True
            ]

            component sys_signal_switch "Signal switch20" {
                threshold = "0.5"
            }
            [
                position = 8472, 8248
                hide_name = True
            ]

            component src_constant Constant45 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 8392, 8232
                hide_name = True
            ]

            component sys_signal_switch "Signal switch21" {
                threshold = "0.5"
            }
            [
                position = 9152, 8696
                hide_name = True
            ]

            component tm_delay "Unit Delay1" {
            }
            [
                position = 9064, 8608
                rotation = down
                hide_name = True
            ]

            component gen_terminator Termination100 {
            }
            [
                position = 9288, 9016
                rotation = right
                hide_name = True
            ]

            component gen_terminator Termination101 {
            }
            [
                position = 7480, 8312
                rotation = right
                hide_name = True
            ]

            component gen_terminator Termination102 {
            }
            [
                position = 8112, 8608
                rotation = left
                hide_name = True
            ]

            component pas_capacitor dccap {
                capacitance = "dc_cap"
                initial_voltage = "1000*vdc_set"
            }
            [
                position = 7712, 9520
                rotation = right
            ]

            component gen_z_domain_transfer "Discrete Transfer Function1" {
                a_coeff = "[.001,1]"
                b_coeff = "[1]"
                domain = "S-domain"
                method = "Euler"
            }
            [
                position = 7832, 8408
                hide_name = True
            ]

            component gen_sum Sum28 {
                signs = "+-"
            }
            [
                position = 7744, 8408
                hide_name = True
            ]

            component src_constant Constant47 {
                execution_rate = "Ts"
                value = "vac_set"
            }
            [
                position = 7592, 8440
                hide_name = True
            ]

            component gen_sum Sum29 {
                signs = "++"
            }
            [
                position = 7920, 8432
                hide_name = True
            ]

            component gen_gain Gain42 {
                gain = "1000/1.224745"
            }
            [
                position = 7664, 8440
                hide_name = True
            ]

            component sys_signal_switch "Signal switch24" {
                threshold = "0.5"
            }
            [
                position = 7848, 8536
                hide_name = True
            ]

            component Subsystem TS_module {
                layout = dynamic
                component src_clock Clock1 {
                    execution_rate = "Texec"
                }
                [
                    position = 6824, 8000
                ]

                component gen_probe d_rel {
                    signal_name = "Delay release"
                }
                [
                    position = 6928, 7936
                ]

                component gen_comparator Comparator1 {
                }
                [
                    position = 6928, 8000
                ]

                component src_constant Constant1 {
                    execution_rate = "Texec"
                    value = "Tdel"
                }
                [
                    position = 6824, 8064
                ]

                component sys_signal_switch "Signal switch1" {
                    threshold = "0.5"
                }
                [
                    position = 7008, 8144
                ]

                component src_constant Constant3 {
                    execution_rate = "Texec"
                }
                [
                    position = 6840, 8128
                ]

                component gen_integrator Integrator1 {
                    show_reset = "rising"
                    show_state = "True"
                }
                [
                    position = 7352, 8152
                ]

                component src_constant Constant4 {
                    execution_rate = "Texec"
                    value = "Tmax"
                }
                [
                    position = 7152, 8304
                ]

                component gen_comparator Comparator2 {
                }
                [
                    position = 7240, 8296
                ]

                component lut_1d "1D look-up table1" {
                    in_vec_x = "T_vecP"
                    out_vec_f_x = "P_vec1"
                }
                [
                    position = 7608, 8008
                ]

                component lut_1d "1D look-up table2" {
                    in_vec_x = "T_vecQ"
                    out_vec_f_x = "Q_vec1"
                }
                [
                    position = 7608, 8192
                ]

                component src_constant Constant5 {
                    execution_rate = "Texec"
                    value = "0"
                }
                [
                    position = 6840, 8176
                ]

                component sys_signal_switch "Signal switch2" {
                    threshold = "0.5"
                }
                [
                    position = 7176, 8144
                ]

                component src_constant Constant6 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7112, 8048
                ]

                component sys_signal_switch "Signal switch3" {
                    threshold = "0.5"
                }
                [
                    position = 7456, 8160
                ]

                component src_constant Constant7 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7400, 8064
                ]

                component gen_gain Gain1 {
                }
                [
                    position = 7384, 8352
                ]

                port P {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8008
                ]

                port Q {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8192
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7240, 8440
                ]

                junction Junction3 sp
                [
                    position = 6952, 8176
                ]

                junction Junction4 sp
                [
                    position = 7496, 8160
                ]

                connect Clock1.out Comparator1.in1 as Connection1
                connect Constant1.out Comparator1.in2 as Connection2
                connect d_rel.in Comparator1.out as Connection530
                connect "Signal switch1.in2" Comparator1.out as Connection3
                connect Constant3.out "Signal switch1.in" as Connection5
                connect Constant4.out Comparator2.in2 as Connection7
                connect Comparator2.out Integrator1.reset as Connection8
                connect Comparator2.in1 Integrator1.state_port as Connection9
                [
                    position = 0, 0
                    breakpoints = 7208, 8232; 7392, 8232
                ]
                connect "1D look-up table1.value" P as Connection10
                connect "1D look-up table2.value" Q as Connection12
                connect Constant6.out "Signal switch2.in2" as Connection21
                connect "Signal switch1.out" "Signal switch2.in" as Connection26
                connect Constant5.out Junction3 as Connection31
                connect Junction3 "Signal switch1.in1" as Connection32
                [
                    position = 0, 0
                ]
                connect "Signal switch2.in1" Junction3 as Connection33
                [
                    position = 0, 0
                ]
                connect Constant7.out "Signal switch3.in2" as Connection38
                connect Integrator1.out "Signal switch3.in" as Connection40
                connect "1D look-up table2.addr" Junction4 as Connection41
                [
                    position = 0, 0
                ]
                connect "Signal switch3.out" Junction4 as Connection43
                connect Gain1.out "Signal switch3.in1" as Connection44
                connect Integrator1.in "Signal switch2.out" as Connection45
                [
                    position = 0, 0
                ]
                connect "1D look-up table1.addr" Junction4 as Connection49
                [
                    position = 0, 0
                ]
                connect Gain1.in T as connT

                P_mode = "Manual input"
                P_nom = "Sinv"
                Q_nom = "Qinv"
                T_vec = "T_Ts_internal"
                Tdel = "10"
                Texec = "Ts"
                Tmax = "10"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    P_nom {
                        label = "Nominal active power"
                        widget = edit
                        type = generic
                        default_value = "P_CPL"
                        unit = "kW"
                    }

                    Q_nom {
                        label = "Nominal reactive power"
                        widget = edit
                        type = generic
                        default_value = "Q_CPL"
                        unit = "kVAR"
                    }

                    S_vec {
                        label = "Load profile"
                        widget = edit
                        type = generic
                        default_value = "S_Ts"
                        unit = "pu"
                    }

                    S_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    S_vec2 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Plen {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Q_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecP {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_mode {
                        label = "Power profile mode"
                        widget = combo
                        combo_values = "Manual input", "Loop cycle"
                        type = string
                        default_value = "Loop cycle"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT
                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            if new_value == "Loop cycle":
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                T_def = mdl.get_item("Constant5", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if T_ext:
                                    mdl.delete_item(T_ext)

                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not conn_T_int:
                                    mdl.create_connection(mdl.term(T_inp, "in"), mdl.term(T_def, "out"), "connT")

                            else:
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_T_int:
                                    mdl.delete_item(conn_T_int)

                                if not T_ext:
                                    T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                                                        terminal_position=("left", 1),
                                                        position=(7237, 8437))

                                mdl.create_connection(mdl.term(T_inp, "in"), T_ext, "connT")
                        ENDCODE

                        CODE property_value_edited
                            if new_value == "Manual input":
                                mdl.disable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.disable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.enable_property(mdl.prop(container_handle, "T_vec"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.enable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.disable_property(mdl.prop(container_handle, "T_vec"))
                        ENDCODE
                    }

                    loop_en {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vec {
                        label = "Time profile"
                        widget = edit
                        type = generic
                        default_value = "T_Ts"
                        unit = "h"
                    }

                    Tmax {
                        label = "Power profile loop cycle"
                        widget = edit
                        type = generic
                        default_value = "T_Ts_max"
                        unit = "s"
                        disabled
                    }

                    Tdel {
                        label = "Profile start delay"
                        widget = edit
                        type = generic
                        default_value = "del_Ts"
                        unit = "s"
                        disabled
                    }

                    Texec {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Tfast"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        P_nom = mdl.get_property_value(mdl.prop(item_handle, "P_nom"))
                        Q_nom = mdl.get_property_value(mdl.prop(item_handle, "Q_nom"))
                        S_vec = mdl.get_property_value(mdl.prop(item_handle, "S_vec"))
                        S_vec1 = mdl.get_property_value(mdl.prop(item_handle, "S_vec1"))
                        S_vec2 = mdl.get_property_value(mdl.prop(item_handle, "S_vec2"))
                        P_vec1 = mdl.get_property_value(mdl.prop(item_handle, "P_vec1"))
                        Plen = mdl.get_property_value(mdl.prop(item_handle, "Plen"))
                        Q_vec1 = mdl.get_property_value(mdl.prop(item_handle, "Q_vec1"))
                        T_vecP = mdl.get_property_value(mdl.prop(item_handle, "T_vecP"))
                        T_vecQ = mdl.get_property_value(mdl.prop(item_handle, "T_vecQ"))
                        P_mode = mdl.get_property_value(mdl.prop(item_handle, "P_mode"))
                        loop_en = mdl.get_property_value(mdl.prop(item_handle, "loop_en"))
                        T_vec = mdl.get_property_value(mdl.prop(item_handle, "T_vec"))
                        Tmax = mdl.get_property_value(mdl.prop(item_handle, "Tmax"))
                        Tdel = mdl.get_property_value(mdl.prop(item_handle, "Tdel"))
                        Texec = mdl.get_property_value(mdl.prop(item_handle, "Texec"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy as np
                        import math

                        if P_mode == "Manual input":
                            loop_en = 0
                        else:
                            loop_en = 1


                        Plen = len(S_vec)
                        S_vec2 = S_vec

                        S_vec1 = [0] * Plen

                        idxS = 0
                        for S_val in S_vec:
                            S_vec1[idxS] = S_vec[idxS]
                            idxS += 1


                        T_vecP = [0] * Plen
                        T_vecQ = [0] * Plen

                        P_vec1 = [P_nom*i for i in S_vec2]
                        Q_vec1 = [Q_nom*i for i in S_vec2]

                        TstepP = Tmax/(Plen - 1)
                        TstepQ = Tmax/(Plen - 1)

                        idxP = 0
                        for P_val in S_vec1:

                            if loop_en == 1:
                                T_vecP[idxP] = idxP * TstepP
                            else:
                                T_vecP[idxP] = T_vec[idxP]
                            idxP += 1

                        idxQ = 0
                        for Q_val in S_vec1:

                            if loop_en == 1:
                                T_vecQ[idxQ] = idxQ * TstepQ
                            else:
                                T_vecQ[idxQ] = T_vec[idxQ]
                            idxQ += 1






                        mdl.set_property_value(mdl.prop(item_handle, "P_vec1"), P_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_vec1"), Q_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecP"), T_vecP)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecQ"), T_vecQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Tdel"), Tdel)
                        mdl.set_property_value(mdl.prop(item_handle, "Tmax"), Tmax)
                        mdl.set_property_value(mdl.prop(item_handle, "loop_en"), loop_en)
                        mdl.set_property_value(mdl.prop(item_handle, "P_nom"), P_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_nom"), Q_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Plen"), Plen)

                        mdl.set_property_value(mdl.prop(item_handle, "S_vec"), S_vec)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec1"), S_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec2"), S_vec2)

                        mdl.set_property_value(mdl.prop(item_handle, "Texec"), Texec)
                    ENDCODE
                }
            }
            [
                position = 6112, 8416
                size = 112, 72
            ]

            component Subsystem T_switch {
                layout = dynamic
                component sys_signal_switch "Signal switch1" {
                    threshold = "0.5"
                }
                [
                    position = 7632, 8056
                ]

                component gen_round Round1 {
                }
                [
                    position = 7392, 8072
                ]

                component gen_limiter Limit1 {
                    lower_limit = "T_lim_low"
                    upper_limit = "T_lim_high"
                }
                [
                    position = 7808, 8056
                ]

                port T {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7176, 8040
                ]

                port T_out {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8096, 8056
                ]

                port mode {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7472, 7920
                ]

                junction Junction1 sp
                [
                    position = 7280, 8040
                ]

                junction Junction2 sp
                [
                    position = 7712, 8056
                ]

                junction Junction3 sp
                [
                    position = 7880, 8056
                ]

                connect mode "Signal switch1.in2" as Connection1
                connect T Junction1 as Connection5
                connect Junction1 "Signal switch1.in" as Connection6
                connect Round1.in Junction1 as Connection7
                connect Round1.out "Signal switch1.in1" as Connection8
                connect "Signal switch1.out" Junction2 as Connection11
                connect Junction2 Limit1.in as Connection12
                connect Limit1.out Junction3 as Connection14
                connect Junction3 T_out as Connection15
            }
            [
                position = 5984, 8416
                size = 72, 64
            ]

            component src_constant Constant102 {
                execution_rate = "Ts"
                value = "Ts_switch"
            }
            [
                position = 5880, 8456
            ]

            port A1 {
                position = 110.0, -32.0
                kind = pe
            }
            [
                position = 9224, 9424
                rotation = down
            ]

            port B1 {
                position = 110.0, 0.0
                kind = pe
            }
            [
                position = 9224, 9504
                rotation = down
            ]

            port C1 {
                position = 110.0, 32.0
                kind = pe
            }
            [
                position = 9224, 9584
                rotation = down
            ]

            port DC+ {
                label = "DC+"
                position = -110.0, -35.0
                kind = pe
            }
            [
                position = 7640, 9424
            ]

            port DC- {
                label = "DC-"
                position = -110.0, 35.0
                kind = pe
            }
            [
                position = 7640, 9608
            ]

            tag Goto5 {
                value = "P_out"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 10568, 8792
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "Q_out"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 10568, 8896
                hide_name = True
                size = 60, 20
            ]

            tag Goto7 {
                value = "V_en"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8312, 8296
                hide_name = True
                size = 60, 20
            ]

            tag Goto8 {
                value = "M_en"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8552, 8248
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8312, 8232
                hide_name = True
                size = 60, 20
            ]

            tag From4 {
                value = "Q_out"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6728, 8904
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6976, 8864
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "V_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7096, 8896
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "P_out"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6824, 8536
                hide_name = True
                size = 60, 20
            ]

            tag From8 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7112, 8480
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From9 {
                value = "M_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7200, 8488
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "Watt"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6328, 8384
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "VAR"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6328, 8424
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "VAR"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6336, 8752
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "Watt"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6480, 8352
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "VLL"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6392, 8472
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "Gen_V_mag"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7872, 8120
                hide_name = True
                size = 60, 20
            ]

            tag From14 {
                value = "Gen_V_mag"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6512, 8968
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "VLL"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6280, 8928
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "dED_sel"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7624, 9176
                hide_name = True
                size = 60, 20
            ]

            tag Goto15 {
                value = "dEQ_sel"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7624, 9200
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "dED_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6872, 8848
                hide_name = True
                size = 60, 20
            ]

            tag From17 {
                value = "dEQ_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7336, 8456
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "dED_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7320, 8832
                hide_name = True
                size = 60, 20
            ]

            tag From19 {
                value = "dED_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7320, 8952
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "fs"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6328, 8344
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "Vdc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6832, 8680
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "vdc_ref"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6528, 8664
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "dEQ_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7328, 8576
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "dEQ_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6984, 8488
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "mod_internal"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6784, 9200
                hide_name = True
                size = 83, 20
            ]

            tag From25 {
                value = "mod_internal"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6936, 9200
                hide_name = True
                size = 95, 20
            ]

            tag Goto20 {
                value = "I_a"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8872, 9392
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "I_b"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8872, 9472
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "I_c"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8872, 9552
                hide_name = True
                size = 60, 20
            ]

            tag Goto23 {
                value = "V_a"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8992, 9624
                rotation = left
                hide_name = True
                size = 60, 20
            ]

            tag Goto24 {
                value = "V_b"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9072, 9624
                rotation = left
                hide_name = True
                size = 60, 20
            ]

            tag Goto25 {
                value = "V_c"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9152, 9624
                rotation = left
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "E_a"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8464
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "E_b"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8496
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "V_b"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8576
                hide_name = True
                size = 60, 20
            ]

            tag From29 {
                value = "V_c"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8600
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "V_c"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8680
                hide_name = True
                size = 60, 20
            ]

            tag From31 {
                value = "V_a"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8704
                hide_name = True
                size = 60, 20
            ]

            tag From32 {
                value = "V_a"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7344, 8176
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From33 {
                value = "V_b"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7320, 8176
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From34 {
                value = "V_c"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7296, 8176
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From35 {
                value = "I_a"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9176, 8848
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From36 {
                value = "I_b"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9152, 8848
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From37 {
                value = "I_c"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9128, 8848
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag Goto26 {
                value = "V_mag"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7696, 8136
                hide_name = True
                size = 60, 20
            ]

            tag Goto27 {
                value = "V_ang"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7696, 8104
                hide_name = True
                size = 60, 20
            ]

            tag From38 {
                value = "wst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9104, 8848
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag Goto28 {
                value = "I_d"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9328, 8912
                hide_name = True
                size = 60, 20
            ]

            tag Goto29 {
                value = "I_q"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9328, 8936
                hide_name = True
                size = 60, 20
            ]

            tag Goto30 {
                value = "E_a"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8920, 8792
                hide_name = True
                size = 60, 20
            ]

            tag Goto31 {
                value = "E_b"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8920, 8816
                hide_name = True
                size = 60, 20
            ]

            tag Goto32 {
                value = "E_c"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8920, 8840
                hide_name = True
                size = 60, 20
            ]

            tag From41 {
                value = "E_a1"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8224, 9568
                hide_name = True
                size = 60, 20
            ]

            tag From42 {
                value = "E_b1"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8224, 9632
                hide_name = True
                size = 60, 20
            ]

            tag From43 {
                value = "E_c1"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8224, 9704
                hide_name = True
                size = 60, 20
            ]

            tag From44 {
                value = "fs"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6672, 8248
                hide_name = True
                size = 60, 20
            ]

            tag From45 {
                value = "I_d"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8800
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "V_mag"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8776
                hide_name = True
                size = 60, 20
            ]

            tag From47 {
                value = "V_mag"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8880
                hide_name = True
                size = 60, 20
            ]

            tag From48 {
                value = "I_q"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8904
                hide_name = True
                size = 60, 20
            ]

            tag Goto33 {
                value = "dEq"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7712, 8624
                hide_name = True
                size = 60, 20
            ]

            tag From49 {
                value = "dEq"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7840, 8736
                hide_name = True
                size = 60, 20
            ]

            tag Goto34 {
                value = "dEd"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7704, 8944
                hide_name = True
                size = 60, 20
            ]

            tag From50 {
                value = "dEd"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7848, 8592
                hide_name = True
                size = 60, 20
            ]

            tag Goto39 {
                value = "wt"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7368, 8312
                hide_name = True
                size = 60, 20
            ]

            tag From59 {
                value = "wst"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8624, 8912
                hide_name = True
                size = 60, 20
            ]

            tag From60 {
                value = "V_ang"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9072, 8712
                hide_name = True
                size = 60, 20
            ]

            tag From61 {
                value = "wt"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9216, 8728
                hide_name = True
                size = 60, 20
            ]

            tag Goto40 {
                value = "wst"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9392, 8704
                hide_name = True
                size = 60, 20
            ]

            tag Goto41 {
                value = "Vdc"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8072, 9488
                hide_name = True
                size = 60, 20
            ]

            tag From63 {
                value = "I_a"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8728
                hide_name = True
                size = 60, 20
            ]

            tag From64 {
                value = "I_b"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8760
                hide_name = True
                size = 60, 20
            ]

            tag From65 {
                value = "I_c"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8792
                hide_name = True
                size = 60, 20
            ]

            tag From66 {
                value = "E_a"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8632
                hide_name = True
                size = 60, 20
            ]

            tag From67 {
                value = "E_b"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8664
                hide_name = True
                size = 60, 20
            ]

            tag From68 {
                value = "E_c"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8696
                hide_name = True
                size = 60, 20
            ]

            tag Goto42 {
                value = "idc"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9976, 8608
                hide_name = True
                size = 60, 20
            ]

            tag From69 {
                value = "idc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7912, 9464
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From70 {
                value = "Vdc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8600
                hide_name = True
                size = 60, 20
            ]

            tag From71 {
                value = "V_a"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8824
                hide_name = True
                size = 60, 20
            ]

            tag From72 {
                value = "V_b"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8856
                hide_name = True
                size = 58, 20
            ]

            tag From73 {
                value = "V_c"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8888
                hide_name = True
                size = 60, 20
            ]

            tag From74 {
                value = "Vdc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8024, 8776
                hide_name = True
                size = 60, 20
            ]

            tag From75 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8624, 8640
                hide_name = True
                size = 60, 20
            ]

            tag From76 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8656, 8744
                hide_name = True
                size = 60, 20
            ]

            tag Goto43 {
                value = "mc"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8464, 8632
                hide_name = True
                size = 60, 20
            ]

            tag From77 {
                value = "mc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8920
                hide_name = True
                size = 60, 20
            ]

            tag Goto44 {
                value = "E_a1"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9976, 8720
                hide_name = True
                size = 60, 20
            ]

            tag Goto45 {
                value = "E_b1"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9976, 8832
                hide_name = True
                size = 60, 20
            ]

            tag Goto46 {
                value = "E_c1"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 9976, 8944
                hide_name = True
                size = 60, 20
            ]

            tag From78 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9608, 8952
                hide_name = True
                size = 60, 20
            ]

            tag From79 {
                value = "idc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 8992
                hide_name = True
                size = 60, 20
            ]

            tag From80 {
                value = "Vdc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 10200, 9016
                hide_name = True
                size = 60, 20
            ]

            tag Goto47 {
                value = "vdc_ref"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6328, 8304
                hide_name = True
                size = 60, 20
            ]

            tag Goto48 {
                value = "GF_en"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7624, 9224
                hide_name = True
                size = 58, 20
            ]

            tag From81 {
                value = "GF_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8408, 8200
                hide_name = True
                size = 60, 20
            ]

            tag From82 {
                value = "GF_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 9088, 8648
                hide_name = True
                size = 60, 20
            ]

            tag From39 {
                value = "V_mag"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7600, 8400
                hide_name = True
                size = 60, 20
            ]

            tag From85 {
                value = "GF_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7648, 8488
                hide_name = True
                size = 60, 20
            ]

            junction Junction13 sp
            [
                position = 6984, 9016
            ]

            junction Junction15 sp
            [
                position = 7080, 8608
            ]

            junction Junction23 sp
            [
                position = 7808, 8120
            ]

            junction Junction29 sp
            [
                position = 7216, 8904
            ]

            junction Junction33 sp
            [
                position = 7248, 8528
            ]

            junction Junction34 sp
            [
                position = 7248, 8616
            ]

            junction Junction35 pe
            [
                position = 8376, 9760
            ]

            junction Junction39 pe
            [
                position = 8960, 9424
            ]

            junction Junction40 pe
            [
                position = 9040, 9504
            ]

            junction Junction41 pe
            [
                position = 9120, 9584
            ]

            junction Junction47 sp
            [
                position = 8264, 8264
            ]

            junction Junction50 sp
            [
                position = 7640, 8120
            ]

            junction Junction68 sp
            [
                position = 7320, 8272
            ]

            junction Junction72 sp
            [
                position = 7248, 8576
            ]

            junction Junction88 sp
            [
                position = 7216, 8944
            ]

            junction Junction89 sp
            [
                position = 7216, 8992
            ]

            junction Junction94 pe
            [
                position = 7880, 9608
            ]

            junction Junction95 pe
            [
                position = 7880, 9424
            ]

            junction Junction97 sp
            [
                position = 9920, 8608
            ]

            junction Junction98 sp
            [
                position = 8016, 9512
            ]

            junction Junction99 sp
            [
                position = 8512, 8720
            ]

            junction Junction100 sp
            [
                position = 8000, 8584
            ]

            junction Junction103 sp
            [
                position = 8528, 8584
            ]

            junction Junction104 sp
            [
                position = 7976, 8736
            ]

            junction Junction105 sp
            [
                position = 8536, 8800
            ]

            junction Junction106 sp
            [
                position = 8208, 8712
            ]

            junction Junction107 sp
            [
                position = 8184, 8688
            ]

            junction Junction108 sp
            [
                position = 9736, 8920
            ]

            junction Junction110 pe
            [
                position = 7808, 9424
            ]

            junction Junction111 pe
            [
                position = 7808, 9608
            ]

            junction Junction113 sp
            [
                position = 9200, 8696
            ]

            junction Junction114 sp
            [
                position = 10496, 8792
            ]

            junction Junction115 sp
            [
                position = 10496, 8896
            ]

            junction Junction116 pe
            [
                position = 9040, 9760
            ]

            junction Junction117 pe
            [
                position = 8960, 9760
            ]

            junction Junction118 pe
            [
                position = 8448, 9760
            ]

            junction Junction119 sp
            [
                position = 8264, 8264
            ]

            junction Junction120 pe
            [
                position = 7712, 9608
            ]

            junction Junction121 pe
            [
                position = 7712, 9424
            ]

            junction Junction126 sp
            [
                position = 7704, 8440
            ]

            junction Junction127 sp
            [
                position = 7696, 8400
            ]

            connect Integrator3.out Sum8.in1 as Connection136
            connect From5 "Signal switch3.in2" as Connection142
            connect Junction13 "Signal switch3.in1" as Connection146
            connect "Signal switch4.in1" Junction13 as Connection147
            connect From6 "Signal switch4.in2" as Connection148
            connect Integrator4.out Sum10.in1 as Connection158
            connect From8 "Signal switch5.in2" as Connection160
            connect "Signal switch5.out" "Signal switch6.in" as Connection161
            connect Constant5.out Junction15 as Connection162
            connect Junction15 "Signal switch5.in1" as Connection163
            connect "Signal switch6.in1" Junction15 as Connection164
            connect From9 "Signal switch6.in2" as Connection165
            connect V_gen.in Junction23 as Connection251
            connect Junction23 Gain23.out as Connection252
            connect Gain24.out "Signal switch13.in" as Connection282
            connect Gain25.out "Signal switch13.in1" as Connection283
            connect Gain24.in Junction29 as Connection287
            connect "Signal switch13.out" Sum8.in as Connection290
            connect Gain26.out "Signal switch14.in" as Connection292
            connect Gain27.out "Signal switch14.in1" as Connection293
            connect "Signal switch14.out" Integrator3.in as Connection300
            connect "C function1.dED_sel" Goto14 as Connection309
            connect Constant9.out "C function1.mode_external" as Connection315
            connect Constant13.out "C function1.Mode_select_int" as Connection316
            connect From18 "Signal switch13.in2" as Connection318
            connect From19 "Signal switch14.in2" as Connection319
            connect From20 Sum14.in1 as Connection323
            connect From17 "Signal switch15.in2" as Connection329
            connect Gain28.out "Signal switch15.in1" as Connection331
            connect Gain14.in Junction33 as Connection332
            connect Gain28.in Junction33 as Connection334
            connect Gain29.out "Signal switch16.in1" as Connection335
            connect From23 "Signal switch16.in2" as Connection336
            connect Junction34 Gain13.in as Connection341
            connect Gain29.in Junction34 as Connection342
            connect "Signal switch17.out" "Signal switch5.in" as Connection349
            connect Gain32.out "C function1.Mode_select_ext" as Connection368
            connect Constant14.out Goto19 as Connection374
            connect Junction13 Constant4.out as Connection382
            connect "Signal switch3.in" "Signal switch12.out" as Connection381
            connect Gain14.out "Signal switch15.in" as Connection393
            connect "Signal switch15.out" Sum10.in as Connection394
            connect "Signal switch16.in" Gain13.out as Connection395
            connect "Signal switch16.out" Integrator4.in as Connection396
            connect "C function1.dEQ_sel" Goto15 as Connection399
            connect Junction35 Vinv_b.n_node as Connection419
            connect Vinv_a.p_node Ra.p_node as Connection421
            connect Vinv_b.p_node Rb.p_node as Connection422
            connect Vinv_c.p_node Rc.p_node as Connection423
            connect Ra.n_node La.p_node as Connection424
            connect Rb.n_node Lb.p_node as Connection425
            connect Rc.n_node Lc.p_node as Connection426
            connect La.n_node Ia.p_node as Connection427
            connect Lb.n_node Ib.p_node as Connection428
            connect Lc.n_node Ic.p_node as Connection429
            connect Goto20 Ia.out as Connection439
            connect Ia.n_node Junction39 as Connection443
            connect Junction39 A1 as Connection444
            connect Va.p_node Junction39 as Connection445
            connect Ib.n_node Junction40 as Connection446
            connect Junction40 B1 as Connection447
            connect Vb.p_node Junction40 as Connection448
            connect Ic.n_node Junction41 as Connection449
            connect Junction41 C1 as Connection450
            connect Vc.p_node Junction41 as Connection451
            connect Goto21 Ib.out as Connection452
            connect Goto22 Ic.out as Connection453
            connect Goto23 Va.out as Connection454
            connect Goto24 Vb.out as Connection455
            connect Goto25 Vc.out as Connection456
            connect From26 Sum15.in as Connection457
            connect From27 Sum15.in1 as Connection458
            connect From28 Sum16.in as Connection459
            connect From29 Sum16.in1 as Connection460
            connect From30 Sum17.in as Connection461
            connect From31 Sum17.in1 as Connection462
            connect Sum15.out Vab.in as Connection463
            connect Sum16.out Vbc.in as Connection464
            connect Sum17.out Vca.in as Connection465
            connect From35 "abc to dq2.va" as Connection469
            connect From36 "abc to dq2.vb" as Connection470
            connect From37 "abc to dq2.vc" as Connection471
            connect Goto13 Junction23 as Connection475
            connect Subsystem8.Angle Goto27 as Connection485
            connect From38 "abc to dq2.wt" as Connection489
            connect Constant21.out Comparator1.in2 as Connection4875
            connect Goto9 Junction47 as Connection5040
            connect Junction47 Comparator1.out as Connection5041
            connect Constant24.out Goto16 as Connection5048
            connect "dq to abc1.phase_a" Goto30 as Connection5054
            connect "dq to abc1.phase_b" Goto31 as Connection5055
            connect "dq to abc1.phase_c" Goto32 as Connection5056
            connect Subsystem8.mag Junction50 as Connection5073
            connect Junction50 Goto26 as Connection5074
            connect Gain23.in Junction50 as Connection5075
            connect From46 Product1.in as Connection5080
            connect From45 Product1.in1 as Connection5081
            connect Product1.out Gain9.in as Connection5082
            connect Product4.out Gain10.in as Connection5085
            connect From47 Product4.in as Connection5090
            connect From48 Product4.in1 as Connection5091
            connect Gain33.out "C function2.in" as Connection5103
            connect Constant28.out "C function2.reset_level" as Connection5105
            connect Constant31.out Sum19.in1 as Connection5122
            connect Subsystem8.d "abc to dq1.d_axis" as Connection5189
            connect Subsystem8.q "abc to dq1.q_axis" as Connection5190
            connect From50 Sum23.in1 as Connection5199
            connect Limit2.out Goto34 as Connection5206
            connect From49 Sum24.in as Connection5216
            connect Constant30.out "C function2.dt" as Connection5238
            connect Goto39 Junction68 as Connection5241
            connect Junction68 "C function2.out" as Connection5242
            connect "abc to dq1.wt" Junction68 as Connection5243
            connect From61 Sum25.in1 as Connection5245
            connect Sum10.out Limit1.in as Connection5263
            connect From7 Sum26.in1 as Connection5272
            connect Constant38.out Sum9.in1 as Connection5273
            connect Sum26.out "Signal switch17.in" as Connection5274
            connect Junction33 Junction72 as Connection5277
            connect Junction72 Junction34 as Connection5278
            connect "Signal switch6.out" Junction72 as Connection5279
            connect "Rate Limiter1.out" Sum26.in as Connection5281
            connect Sum27.out "Signal switch12.in" as Connection5286
            connect From4 Sum27.in1 as Connection5287
            connect Constant39.out Sum7.in1 as Connection5288
            connect Sum27.in "Rate Limiter4.out" as Connection5289
            connect "Rate Limiter4.in" Sum7.out as Connection5290
            connect "Signal switch3.out" "Signal switch4.in" as Connection5291
            connect Goto29 "abc to dq2.q_axis" as Connection5334
            connect "abc to dq2.d_axis" Goto28 as Connection5335
            connect Sum19.out "dq to abc1.wt" as Connection5347
            connect "Signal switch4.out" Junction88 as Connection5361
            connect Junction88 Junction29 as Connection5362
            connect Gain26.in Junction89 as Connection5364
            connect Junction89 Junction88 as Connection5365
            connect Gain27.in Junction89 as Connection5366
            connect Isp1.n_node Junction94 as Connection5381
            connect Va1.n_node Junction94 as Connection5383
            connect Isp1.p_node Junction95 as Connection5384
            connect Va1.p_node Junction95 as Connection5386
            connect From67 "C function3.Eb" as Connection5390
            connect From68 "C function3.Ec" as Connection5391
            connect From63 "C function3.ia" as Connection5392
            connect From64 "C function3.ib" as Connection5393
            connect From65 "C function3.ic" as Connection5394
            connect "C function3.idc" Junction97 as Connection5400
            connect Junction97 DC_C.in as Connection5401
            connect Goto42 Junction97 as Connection5402
            connect From69 Isp1.in as Connection5403
            connect "C function3.Ea" From66 as Connection5404
            connect Goto41 Junction98 as Connection5405
            connect Junction98 Va1.out as Connection5406
            connect DC_VDC.in Junction98 as Connection5407
            connect From70 "C function3.Vdc" as Connection5408
            connect From71 "C function3.va" as Connection5409
            connect From72 "C function3.vb" as Connection5410
            connect From73 "C function3.vc" as Connection5411
            connect Gain25.in Junction29 as Connection5416
            connect Constant27.out "dq to abc1.zero_input" as Connection5419
            connect Clock1.out Comparator1.in1 as Connection5421
            connect From59 Sum19.in as Connection5422
            connect Subsystem9.mag Limit4.in as Connection5432
            connect Product12.out Limit5.in as Connection5435
            connect Junction99 Limit5.out as Connection5446
            connect Product14.in Junction99 as Connection5447
            connect Sum23.out Junction100 as Connection5448
            connect Subsystem9.d Junction100 as Connection5450
            connect Junction100 Junction103 as Connection5459
            connect Junction103 Product13.in as Connection5460
            connect "Signal switch18.in1" Junction103 as Connection5461
            connect "Signal switch18.in" Product13.out as Connection5462
            connect "Signal switch18.out" "dq to abc1.d_input" as Connection5463
            connect Product14.out "Signal switch19.in" as Connection5466
            connect Subsystem9.q Junction104 as Connection5467
            connect Junction104 Sum24.out as Connection5468
            connect Product14.in1 Junction105 as Connection5470
            connect Junction105 Junction104 as Connection5471
            connect "Signal switch19.in1" Junction105 as Connection5472
            connect "Signal switch19.out" "dq to abc1.q_input" as Connection5473
            connect From74 Gain35.in as Connection5474
            connect Gain35.out Limit3.in as Connection5475
            connect Product13.in1 Junction99 as Connection5481
            connect Limit3.out Junction106 as Connection5482
            connect Junction106 Product12.in as Connection5483
            connect Product15.in1 Junction106 as Connection5484
            connect Product12.in1 Junction107 as Connection5485
            connect Junction107 Limit4.out as Connection5486
            connect Product15.in Junction107 as Connection5487
            connect Product15.out Limit6.in as Connection5488
            connect Limit6.out Goto43 as Connection5489
            connect From76 "Signal switch19.in2" as Connection5491
            connect From75 "Signal switch18.in2" as Connection5492
            connect "C function3.Ea1" Goto44 as Connection5493
            connect "C function3.Eb1" Goto45 as Connection5494
            connect "C function3.Ec1" Goto46 as Connection5495
            connect From77 Junction108 as Connection5500
            connect Junction108 "C function3.mc" as Connection5501
            connect DC_m0.in Junction108 as Connection5502
            connect Constant43.out "C function3.con_en" as Connection5503
            connect From79 Product16.in as Connection5504
            connect From80 Product16.in1 as Connection5505
            connect Product16.out Gain36.in as Connection5506
            connect Gain36.out DC_Pow.in as Connection5507
            connect Gain30.out Sum14.in as Connection5508
            connect Constant44.out Goto47 as Connection5509
            connect Constant25.out Gain37.in as Connection5510
            connect Gain37.out Goto12 as Connection5511
            connect "abc to dq1.va" From32 as Connection5513
            connect From33 "abc to dq1.vb" as Connection5515
            connect Sum25.out Goto40 as Connection5512
            connect "abc to dq1.vc" From34 as Connection5514
            connect Sum14.out Gain38.in as Connection5522
            connect From16 "Signal switch12.in2" as Connection5530
            connect From24 "Signal switch17.in2" as Connection5531
            connect Junction110 Junction95 as Connection5536
            connect R_SN.p_node Junction110 as Connection5537
            connect Junction111 Junction94 as Connection5539
            connect R_SN.n_node Junction111 as Connection5540
            connect Gain38.out "Signal switch17.in1" as Connection5541
            connect Constant3.out "C function2.ang_init" as Connection5542
            connect Sum11.out Gain39.in as Connection5543
            connect Gain39.out "Signal switch12.in1" as Connection5544
            connect From14 Gain40.in as Connection5545
            connect Gain40.out Sum11.in1 as Connection5546
            connect "C function1.GF_en" Goto48 as Connection5547
            connect From81 "Signal switch20.in2" as Connection5548
            connect "Signal switch20.out" Goto8 as Connection5550
            connect Constant45.out "Signal switch20.in" as Connection5554
            connect From82 "Signal switch21.in2" as Connection5563
            connect From60 "Signal switch21.in1" as Connection5565
            connect "Unit Delay1.out" "Signal switch21.in" as Connection5566
            connect "Signal switch21.out" Junction113 as Connection5567
            connect Junction113 Sum25.in as Connection5568
            connect "Unit Delay1.in" Junction113 as Connection5569
            connect Limit2.in Sum8.out as Connection5570
            connect Limit1.out Goto33 as Connection5571
            connect Vinv_b.in From42 as Connection5574
            connect Vinv_a.in From41 as Connection5573
            connect Vinv_c.in From43 as Connection5572
            connect "abc to dq2.zero_axis" Termination100.in as Connection5577
            connect Termination101.in "abc to dq1.zero_axis" as Connection5578
            connect Termination102.in Subsystem9.Angle as Connection5579
            connect Gain21.in Gain9.out as Connection5582
            [
                position = 0, 0
            ]
            connect P_gen.in Junction114 as Connection5583
            connect Junction114 Gain21.out as Connection5584
            connect Goto5 Junction114 as Connection5585
            connect Gain10.out Gain22.in as Connection5586
            [
                position = 0, 0
            ]
            connect Gain22.out Junction115 as Connection5587
            connect Junction115 Q_gen.in as Connection5588
            connect Goto6 Junction115 as Connection5589
            connect Junction35 Vinv_a.n_node as Connection5591
            connect Vc.n_node Junction116 as Connection5597
            connect Junction116 Vb.n_node as Connection5598
            connect Va.n_node Junction117 as Connection5600
            connect Junction117 Junction116 as Connection5601
            connect Vinv_c.n_node Junction118 as Connection5602
            connect Junction118 Junction35 as Connection5603
            connect Junction117 Junction118 as Connection5604
            connect Sum9.out "Rate Limiter1.in" as Connection5605
            connect Junction47 Junction119 as Connection5607
            connect Junction119 Goto7 as Connection5608
            [
                position = 0, 0
            ]
            connect "Signal switch20.in1" Junction119 as Connection5609
            connect DC- Junction120 as Connection5610
            connect Junction120 Junction111 as Connection5611
            connect DC+ Junction121 as Connection5612
            [
                position = 0, 0
            ]
            connect Junction121 Junction110 as Connection5613
            [
                position = 0, 0
            ]
            connect dccap.p_node Junction121 as dcConnp
            connect dccap.n_node Junction120 as dcConnn
            connect "Discrete Transfer Function1.out" Sum29.in as Connection5644
            connect "Discrete Transfer Function1.in" Sum28.out as Connection5645
            connect Junction126 Sum28.in1 as Connection5647
            connect Sum29.in1 Junction126 as Connection5648
            connect Constant47.out Gain42.in as Connection5650
            connect Gain42.out Junction126 as Connection5651
            connect From85 "Signal switch24.in2" as Connection5652
            connect "Signal switch24.in" Sum29.out as Connection5653
            connect From39 Junction127 as Connection5654
            connect Junction127 Sum28.in as Connection5655
            connect "Signal switch24.in1" Junction127 as Connection5656
            connect "Signal switch24.out" Sum23.in as Connection5657
            connect Constant102.out T_switch.mode as Connection3
            connect T_switch.T_out TS_module.T as Connection5658
            connect Gain32.in From25 as connmode
            connect Sum9.in From11 as connP
            connect Sum7.in From10 as connQ
            connect Constant22.out Goto10 as connPint
            connect Sum11.in From15 as connV
            connect Constant23.out Goto11 as connQint
            connect Gain30.in From22 as connw
            connect Gain33.in From44 as connfs

            loadshape = "[0.5, 0.8, 1, 0.4, 0.5]"
            loadshape_int = "1"
            loadshape_name = "vsc1"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Voltage Source Converter</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component provides an average model of a three-phase full bridge DC to AC converter.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Internal PI controllers (with adjustable gains) are used to implement multiple modes of steady state operations. Note that this component will be converted to a conventional generator mode with only PQ and PV modes when simulated in OpenDSS.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">When external control mode is selected, the operation mode can be selected and changed in real time using the following inputs to \"Inverter control mode\" input:</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0 = PV operation mode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1 = PQ operation mode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2 = Vdc-Vac operation mode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3 = Vdc-Q operation mode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4 = Grid forming operation mode</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Active power P (in kilo Watts), Reactive power Q (In kilo VARs), Line RMS voltage (in Kilo-Volts), DC-Link voltage (in Kilo-Volts) and Line frequency (in Hz) can be controlled individually depending on mode of operation. Controller coefficients for above variables can be set in \"Controller settings\" tab.</p></body></html>"

                ctrl_mode_str {
                    label = "Inverter control mode"
                    widget = combo
                    combo_values = "PQ", "PV", "Vdc-Vac", "Vdc-Q", "Grid Forming", "External Control"
                    type = string
                    default_value = "PQ"
                    group = "Control mode:2"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External Control":
                            mode_ext = mdl.get_item("mode", parent=comp_handle, item_type=ITEM_PORT)
                            mode_inp = mdl.get_item("Gain32", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_mode = mdl.get_item("Termination5", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mode_int = mdl.get_item("From25", parent=comp_handle, item_type=ITEM_TAG)
                            conn_mode_int = mdl.get_item("connmode", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_mode_int:
                                mdl.delete_item(conn_mode_int)

                            if not term_mode:
                                term_mode = mdl.create_component("Termination", parent=comp_handle,
                                                                 name="Termination5", position=(7047, 9200),
                                                                 hide_name=True)
                            mdl.create_connection(mdl.term(term_mode, "in"), mode_int)
                            if not mode_ext:
                                mode_ext = mdl.create_port(parent=comp_handle, name="mode", direction="in", kind = "sp",
                                                    terminal_position=(-10, 87),
                                                    position=(7120, 9201))
                                mdl.create_connection(mdl.term(mode_inp, "in"), mode_ext)
                        else:
                            mode_ext = mdl.get_item("mode", parent=comp_handle, item_type=ITEM_PORT)
                            term_mode = mdl.get_item("Termination5", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mode_int = mdl.get_item("From25", parent=comp_handle, item_type=ITEM_TAG)
                            mode_inp = mdl.get_item("Gain32", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_mode_int = mdl.get_item("connmode", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if mode_ext:
                                mdl.delete_item(mode_ext)
                            if term_mode:
                                mdl.delete_item(term_mode)
                            if conn_mode_int:
                                mdl.delete_item(conn_mode_int)
                            mdl.create_connection(mdl.term(mode_inp, "in"), mode_int, name="connmode")

                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.inv_control_mode_value_edited(mdl, container_handle, new_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.inv_control_mode_value_edited(mdl, container_handle, new_value)
                    ENDCODE
                }

                ctrl_mode_int {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                ext_mode {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                P_ref_str {
                    label = "Active power reference (kW)"
                    widget = combo
                    combo_values = "External input", "Converter nominal"
                    type = string
                    default_value = "Converter nominal"
                    group = "Control mode"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                            P_inp = mdl.get_item("Sum9", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                            P_int = mdl.get_item("From11", parent=comp_handle, item_type=ITEM_TAG)
                            conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_P_int:
                                mdl.delete_item(conn_P_int)

                            if not term_P:
                                term_P = mdl.create_component("Termination", parent=comp_handle,
                                                              name="Termination1", position=(6567, 8352),
                                                              hide_name=True)
                                mdl.create_connection(mdl.term(term_P, "in"), P_int)

                            if not P_ext:
                                P_ext = mdl.create_port(parent=comp_handle, name="P_set", direction="in", kind = "sp",
                                                    terminal_position=(-10, -87),
                                                    position=(6642, 8348))
                                mdl.create_connection(mdl.term(P_inp, "in"), P_ext)
                        elif new_value == "Converter nominal":
                            P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                            P_int = mdl.get_item("From11", parent=comp_handle, item_type=ITEM_TAG)
                            P_inp = mdl.get_item("Sum9", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if P_ext:
                                mdl.delete_item(P_ext)
                            if term_P:
                                mdl.delete_item(term_P)
                            if conn_P_int:
                                mdl.delete_item(conn_P_int)
                            mdl.create_connection(mdl.term(P_inp, "in"), P_int, name="connP")
                    ENDCODE
                }

                P_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Q_ref_str {
                    label = "Reactive power reference (kVAR)"
                    widget = combo
                    combo_values = "External input", "Converter nominal"
                    type = string
                    default_value = "Converter nominal"
                    group = "Control mode"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                            Q_inp = mdl.get_item("Sum7", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Q_int = mdl.get_item("From10", parent=comp_handle, item_type=ITEM_TAG)
                            conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_Q_int:
                                mdl.delete_item(conn_Q_int)

                            if not term_Q:
                                term_Q = mdl.create_component("Termination", parent=comp_handle,
                                                              name="Termination2", position=(6424, 8751),
                                                              hide_name=True)
                                mdl.create_connection(mdl.term(term_Q, "in"), Q_int)

                            if not Q_ext:
                                Q_ext = mdl.create_port(parent=comp_handle, name="Q_set", direction="in", kind = "sp",
                                                    terminal_position=(25, -87),
                                                    position=(6504, 8753))
                                mdl.create_connection(mdl.term(Q_inp, "in"), Q_ext)
                        elif new_value == "Converter nominal":
                            Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Q_int = mdl.get_item("From10", parent=comp_handle, item_type=ITEM_TAG)
                            Q_inp = mdl.get_item("Sum7", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if Q_ext:
                                mdl.delete_item(Q_ext)
                            if term_Q:
                                mdl.delete_item(term_Q)
                            if conn_Q_int:
                                mdl.delete_item(conn_Q_int)
                            mdl.create_connection(mdl.term(Q_inp, "in"), Q_int, name="connQ")
                    ENDCODE
                }

                Q_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                V_ref_str {
                    label = "Line voltage reference (kV)"
                    widget = combo
                    combo_values = "External input", "Converter nominal"
                    type = string
                    default_value = "Converter nominal"
                    group = "Control mode"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            V_ext = mdl.get_item("V_set", parent=comp_handle, item_type=ITEM_PORT)
                            V_inp = mdl.get_item("Sum11", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_V = mdl.get_item("Termination3", parent=comp_handle, item_type=ITEM_COMPONENT)
                            V_int = mdl.get_item("From15", parent=comp_handle, item_type=ITEM_TAG)
                            conn_V_int = mdl.get_item("connV", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_V_int:
                                mdl.delete_item(conn_V_int)

                            if not term_V:
                                term_V = mdl.create_component("Termination", parent=comp_handle,
                                                              name="Termination3", position=(6376, 8930),
                                                              hide_name=True)
                                mdl.create_connection(mdl.term(term_V, "in"), V_int)

                            if not V_ext:
                                V_ext = mdl.create_port(parent=comp_handle, name="V_set", direction="in", kind = "sp",
                                                    terminal_position=(55, -87),
                                                    position=(6450, 8926))
                                mdl.create_connection(mdl.term(V_inp, "in"), V_ext)
                        elif new_value == "Converter nominal":
                            V_ext = mdl.get_item("V_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_V = mdl.get_item("Termination3", parent=comp_handle, item_type=ITEM_COMPONENT)
                            V_int = mdl.get_item("From15", parent=comp_handle, item_type=ITEM_TAG)
                            V_inp = mdl.get_item("Sum11", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_V_int = mdl.get_item("connV", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if V_ext:
                                mdl.delete_item(V_ext)
                            if term_V:
                                mdl.delete_item(term_V)
                            if conn_V_int:
                                mdl.delete_item(conn_V_int)
                            mdl.create_connection(mdl.term(V_inp, "in"), V_int, name="connV")
                    ENDCODE
                }

                V_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                vdc_ref_str {
                    label = "DC Link voltage (kV)"
                    widget = combo
                    combo_values = "External input", "Converter nominal"
                    type = string
                    default_value = "Converter nominal"
                    group = "Control mode"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            vdc_ext = mdl.get_item("vdc_set", parent=comp_handle, item_type=ITEM_PORT)
                            vdc_inp = mdl.get_item("Gain30", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_vdc = mdl.get_item("Termination4", parent=comp_handle, item_type=ITEM_COMPONENT)
                            vdc_int = mdl.get_item("From22", parent=comp_handle, item_type=ITEM_TAG)
                            conn_vdc_int = mdl.get_item("connw", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_vdc_int:
                                mdl.delete_item(conn_vdc_int)

                            if not term_vdc:
                                term_vdc = mdl.create_component("Termination", parent=comp_handle,
                                                                name="Termination4", position=(6621, 8663),
                                                                hide_name=True)
                                mdl.create_connection(mdl.term(term_vdc, "in"), vdc_int)

                            if not vdc_ext:
                                vdc_ext = mdl.create_port(parent=comp_handle, name="vdc_set", direction="in", kind = "sp",
                                                    terminal_position=(25, 87),
                                                    position=(6695, 8660))
                                mdl.create_connection(mdl.term(vdc_inp, "in"), vdc_ext)
                        elif new_value == "Converter nominal":
                            vdc_ext = mdl.get_item("vdc_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_vdc = mdl.get_item("Termination4", parent=comp_handle, item_type=ITEM_COMPONENT)
                            vdc_int = mdl.get_item("From22", parent=comp_handle, item_type=ITEM_TAG)
                            vdc_inp = mdl.get_item("Gain30", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_vdc_int = mdl.get_item("connw", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if vdc_ext:
                                mdl.delete_item(vdc_ext)
                            if term_vdc:
                                mdl.delete_item(term_vdc)
                            if conn_vdc_int:
                                mdl.delete_item(conn_vdc_int)
                            mdl.create_connection(mdl.term(vdc_inp, "in"), vdc_int, name="connw")
                    ENDCODE
                }

                fs_ref_str {
                    label = "Frequency (Hz)"
                    widget = combo
                    combo_values = "External input", "Converter nominal"
                    type = string
                    default_value = "Converter nominal"
                    group = "Control mode"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            fs_ext = mdl.get_item("fs_set", parent=comp_handle, item_type=ITEM_PORT)
                            fs_inp = mdl.get_item("Gain33", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_fs = mdl.get_item("Termination8", parent=comp_handle, item_type=ITEM_COMPONENT)
                            fs_int = mdl.get_item("From44", parent=comp_handle, item_type=ITEM_TAG)
                            conn_fs_int = mdl.get_item("connfs", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_fs_int:
                                mdl.delete_item(conn_fs_int)

                            if not term_fs:
                                term_fs = mdl.create_component("Termination", parent=comp_handle,
                                                               name="Termination8", position=(6767, 8247),
                                                               hide_name=True)
                                mdl.create_connection(mdl.term(term_fs, "in"), fs_int)

                            if not fs_ext:
                                fs_ext = mdl.create_port(parent=comp_handle, name="fs_set", direction="in", kind = "sp",
                                                    terminal_position=(55, 87),
                                                    position=(6893, 8248))
                                mdl.create_connection(mdl.term(fs_inp, "in"), fs_ext)
                        elif new_value == "Converter nominal":
                            fs_ext = mdl.get_item("fs_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_fs = mdl.get_item("Termination8", parent=comp_handle, item_type=ITEM_COMPONENT)
                            fs_int = mdl.get_item("From44", parent=comp_handle, item_type=ITEM_TAG)
                            fs_inp = mdl.get_item("Gain33", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_fs_int = mdl.get_item("connfs", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if fs_ext:
                                mdl.delete_item(fs_ext)
                            if term_fs:
                                mdl.delete_item(term_fs)
                            if conn_fs_int:
                                mdl.delete_item(conn_fs_int)
                            mdl.create_connection(mdl.term(fs_inp, "in"), fs_int, name="connfs")
                    ENDCODE
                }

                w_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                P_kp {
                    label = "P Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "2e-3"
                    group = "Controller settings:3"
                }

                P_ki {
                    label = "P Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "0.2"
                    group = "Controller settings"
                }

                Q_kp {
                    label = "Q Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "2e-3"
                    group = "Controller settings"
                }

                Q_ki {
                    label = "Q Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "0.05"
                    group = "Controller settings"
                }

                V_kp {
                    label = "V Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "1e-6"
                    group = "Controller settings"
                    disabled
                }

                V_ki {
                    label = "V Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "50"
                    group = "Controller settings"
                    disabled
                }

                vdc_kp {
                    label = "DC-Link Voltage Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "1000e-6"
                    group = "Controller settings"
                    disabled
                }

                vdc_ki {
                    label = "DC-Link Voltage Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "0.01"
                    group = "Controller settings"
                    disabled
                }

                vdc_set {
                    label = "Inverter DC-Link Voltage"
                    widget = edit
                    type = generic
                    default_value = "2.5"
                    unit = "kV"
                    group = "Inverter Parameters:1"
                }

                dc_cap_en {
                    label = "Use Internal DC-Link Capacitor"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Inverter Parameters"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        mdl.refresh_icon(container_handle)

                        if new_value == False:
                            CDC = mdl.get_item("dccap", parent=comp_handle, item_type=ITEM_COMPONENT)
                            if CDC:
                                mdl.delete_item(CDC)
                        elif new_value == True:
                            CDC = mdl.get_item("dccap", parent=comp_handle, item_type=ITEM_COMPONENT)
                            DCpport = mdl.get_item("Junction121", parent=comp_handle, item_type="junction")
                            DCnport = mdl.get_item("Junction120", parent=comp_handle, item_type="junction")
                            if not CDC:
                                CDC = mdl.create_component("Capacitor", parent=comp_handle, name="dccap", position=(7709,9516), rotation="right")
                                mdl.set_property_value(mdl.prop(CDC, "capacitance"), "dc_cap")
                                mdl.set_property_value(mdl.prop(CDC, "initial_voltage"), "1000*vdc_set")
                                dcp = mdl.create_connection(mdl.term(CDC, "p_node"), DCpport, name="dcConnp")
                                dcn = mdl.create_connection(mdl.term(CDC, "n_node"), DCnport, name="dcConnn")

                        if new_value == False:
                            mdl.disable_property(mdl.prop(container_handle, "dc_cap"))
                        elif new_value == True:
                            mdl.enable_property(mdl.prop(container_handle, "dc_cap"))
                    ENDCODE

                    CODE property_value_edited
                        if new_value == False:
                            mdl.disable_property(mdl.prop(container_handle, "dc_cap"))
                        elif new_value == True:
                            mdl.enable_property(mdl.prop(container_handle, "dc_cap"))
                    ENDCODE
                }

                dc_cap {
                    label = "Internal DC-Link Capacitor"
                    widget = edit
                    type = generic
                    default_value = "1e-2"
                    unit = "F"
                    group = "Inverter Parameters"
                }

                dc_snub {
                    label = "DC-Link Snubber Resistance"
                    widget = edit
                    type = generic
                    default_value = "500"
                    unit = "Ω"
                    group = "Inverter Parameters"
                }

                vac_set {
                    label = "Nominal AC Line voltage"
                    widget = edit
                    type = generic
                    default_value = "1.73"
                    unit = "kV"
                    group = "Inverter Parameters"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Inverter Parameters"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_frequency_prop(mdl, container_handle)
                    ENDCODE
                }

                Fs {
                    label = "Nominal Frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    group = "Inverter Parameters"
                    nonvisible
                }

                Sinv {
                    label = "Nominal Active Power"
                    widget = edit
                    type = generic
                    default_value = "500"
                    unit = "kW"
                    group = "Inverter Parameters"
                }

                Qinv {
                    label = "Nominal Reactive Power"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kVAR"
                    group = "Inverter Parameters"
                }

                Rac {
                    label = "Series ac resistance"
                    widget = edit
                    type = generic
                    default_value = "0.01"
                    unit = "Ω"
                    group = "Inverter Parameters"
                }

                Lac {
                    label = "Series ac inductance"
                    widget = edit
                    type = generic
                    default_value = "3e-5"
                    unit = "H"
                    group = "Inverter Parameters"
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Execution Rate:5"
                }

                cont_t {
                    label = "Controller start time "
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "s"
                    group = "Initialization:4"
                }

                dss_ctrl {
                    label = "OpenDSS control mode"
                    widget = combo
                    combo_values = "Fixed", "PacVac", "PacQac", "VdcVac", "VdcQac"
                    type = string
                    default_value = "Fixed"
                    group = "OpenDSS Setting:6"
                    nonvisible
                    no_evaluate
                }

                Phases {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kv {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kw {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                pf {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                model {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                basefreq {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                r0 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                r1 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                x0 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                x1 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                pu {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Angle {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Frequency {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                basekv {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                gen_ts_en {
                    label = "Enable time series"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Time Series:6"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG
                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value:
                            TSmdl = mdl.get_item("TS_module", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Ts_select = mdl.get_item("T_switch", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Ts_select1 = mdl.get_item("Constant102", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_Ts_in = mdl.get_item("ConnTs", parent=comp_handle, item_type=ITEM_CONNECTION)
                            conn_P_int = mdl.get_item("connPint", parent=comp_handle, item_type=ITEM_CONNECTION)
                            conn_Q_int = mdl.get_item("connQint", parent=comp_handle, item_type=ITEM_CONNECTION)
                            T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                            P_inp = mdl.get_item("Goto10", parent=comp_handle, item_type=ITEM_TAG)
                            Q_inp = mdl.get_item("Goto11", parent=comp_handle, item_type=ITEM_TAG)

                            if conn_P_int:
                                mdl.delete_item(conn_P_int)
                            if conn_Q_int:
                                mdl.delete_item(conn_Q_int)

                            mdl.enable_items(TSmdl)
                            mdl.enable_items(Ts_select)
                            mdl.enable_items(Ts_select1)

                            mdl.set_property_value(mdl.prop(TSmdl, "P_mode"), "Manual input")
                            if not T_ext:
                                T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                                                    terminal_position=(-35, 60),
                                                    position=(5879, 8399))
                            if not conn_Ts_in:
                                mdl.create_connection(mdl.term(Ts_select, "T"), T_ext, "ConnTs")


                            conn_TsP_int = mdl.get_item("ConnTsP", parent=comp_handle, item_type=ITEM_CONNECTION)
                            conn_TsQ_int = mdl.get_item("ConnTsQ", parent=comp_handle, item_type=ITEM_CONNECTION)

                            if not conn_TsP_int:
                                mdl.create_connection(P_inp, mdl.term(TSmdl, "P"), "ConnTsP")
                            if not conn_TsQ_int:
                                mdl.create_connection(Q_inp, mdl.term(TSmdl, "Q"), "ConnTsQ")
                        else:
                            TSmdl = mdl.get_item("TS_module", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Ts_select = mdl.get_item("T_switch", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Ts_select1 = mdl.get_item("Constant102", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Pnom = mdl.get_item("Constant22", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Qnom = mdl.get_item("Constant23", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_Ts_in = mdl.get_item("ConnTs", parent=comp_handle, item_type=ITEM_CONNECTION)
                            conn_P_int = mdl.get_item("connPint", parent=comp_handle, item_type=ITEM_CONNECTION)
                            conn_Q_int = mdl.get_item("connQint", parent=comp_handle, item_type=ITEM_CONNECTION)
                            conn_TsP_int = mdl.get_item("ConnTsP", parent=comp_handle, item_type=ITEM_CONNECTION)
                            conn_TsQ_int = mdl.get_item("ConnTsQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                            P_inp = mdl.get_item("Goto10", parent=comp_handle, item_type=ITEM_TAG)
                            Q_inp = mdl.get_item("Goto11", parent=comp_handle, item_type=ITEM_TAG)

                            T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                            mdl.set_property_value(mdl.prop(TSmdl, "P_mode"), "Manual input")

                            if conn_TsP_int:
                                mdl.delete_item(conn_TsP_int)
                            if conn_TsQ_int:
                                mdl.delete_item(conn_TsQ_int)

                            if conn_P_int:
                                mdl.delete_item(conn_P_int)
                            if conn_Q_int:
                                mdl.delete_item(conn_Q_int)

                            mdl.disable_items(TSmdl)
                            mdl.disable_items(Ts_select)
                            mdl.disable_items(Ts_select1)

                            mdl.create_connection(mdl.term(Pnom, "out"), P_inp, "connPint")
                            mdl.create_connection(mdl.term(Qnom, "out"), Q_inp, "connQint")

                            if T_ext:
                                mdl.delete_item(T_ext)
                    ENDCODE

                    CODE property_value_edited
                        if new_value:
                            mdl.set_property_value(mdl.prop(container_handle, 'ctrl_mode_str'), "PQ")
                            mdl.set_property_value(mdl.prop(container_handle, 'P_ref_str'), "Converter nominal")
                            mdl.set_property_value(mdl.prop(container_handle, 'Q_ref_str'), "Converter nominal")
                    ENDCODE
                }

                load_loadshape {
                    label = "LoadShape object"
                    widget = button
                    type = string
                    default_value = "Choose"
                    group = "Time Series"
                    no_evaluate

                    CODE button_clicked
                        comp_script_load = return_comp_script_load()
                        comp_script_load.load_loadshape(mdl, container_handle)
                    ENDCODE
                }

                loadshape_name {
                    label = "LoadShape name"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape {
                    label = "LoadShape points"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "pu"
                    group = "Time Series"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                useactual {
                    label = "Actual load value"
                    widget = checkbox
                    type = generic
                    default_value = "False"
                    group = "Time Series"
                    no_evaluate
                }

                loadshape_int {
                    label = "LoadShape interval"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "h"
                    group = "Time Series"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                gen_ts_en_bit {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                T_mode {
                    label = "Loadshape input mode"
                    widget = combo
                    combo_values = "Loadshape index", "Time"
                    type = string
                    default_value = "Loadshape index"
                    group = "Time Series"
                    no_evaluate

                    CODE property_value_edited
                        if new_value == "Time":
                            mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "T_Ts"))
                    ENDCODE
                }

                S_Ts {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                Q_Ts {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                T_Ts {
                    label = "Loadshape time range"
                    widget = edit
                    type = generic
                    default_value = "[0, 6, 12, 18, 24]"
                    unit = "h"
                    group = "Time Series"
                    disabled
                }

                timespan {
                    label = "Loadshape time span"
                    widget = combo
                    combo_values =  "Daily", "Yearly"
                    type = string
                    default_value = "Daily"
                    group = "Time Series"
                    nonvisible
                }

                T_Ts_internal {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                dssT {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                dssnpts {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                T_Ts_max {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                    disabled
                }

                del_Ts {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                    disabled
                }

                Slen {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                T_lim_low {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                T_lim_high {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                Ts_switch {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE pre_compile
                    # HEADER START
                    ctrl_mode_str = mdl.get_property_value(mdl.prop(item_handle, "ctrl_mode_str"))
                    ctrl_mode_int = mdl.get_property_value(mdl.prop(item_handle, "ctrl_mode_int"))
                    ext_mode = mdl.get_property_value(mdl.prop(item_handle, "ext_mode"))
                    P_ref_str = mdl.get_property_value(mdl.prop(item_handle, "P_ref_str"))
                    P_sel = mdl.get_property_value(mdl.prop(item_handle, "P_sel"))
                    Q_ref_str = mdl.get_property_value(mdl.prop(item_handle, "Q_ref_str"))
                    Q_sel = mdl.get_property_value(mdl.prop(item_handle, "Q_sel"))
                    V_ref_str = mdl.get_property_value(mdl.prop(item_handle, "V_ref_str"))
                    V_sel = mdl.get_property_value(mdl.prop(item_handle, "V_sel"))
                    vdc_ref_str = mdl.get_property_value(mdl.prop(item_handle, "vdc_ref_str"))
                    fs_ref_str = mdl.get_property_value(mdl.prop(item_handle, "fs_ref_str"))
                    w_sel = mdl.get_property_value(mdl.prop(item_handle, "w_sel"))
                    P_kp = mdl.get_property_value(mdl.prop(item_handle, "P_kp"))
                    P_ki = mdl.get_property_value(mdl.prop(item_handle, "P_ki"))
                    Q_kp = mdl.get_property_value(mdl.prop(item_handle, "Q_kp"))
                    Q_ki = mdl.get_property_value(mdl.prop(item_handle, "Q_ki"))
                    V_kp = mdl.get_property_value(mdl.prop(item_handle, "V_kp"))
                    V_ki = mdl.get_property_value(mdl.prop(item_handle, "V_ki"))
                    vdc_kp = mdl.get_property_value(mdl.prop(item_handle, "vdc_kp"))
                    vdc_ki = mdl.get_property_value(mdl.prop(item_handle, "vdc_ki"))
                    vdc_set = mdl.get_property_value(mdl.prop(item_handle, "vdc_set"))
                    dc_cap_en = mdl.get_property_value(mdl.prop(item_handle, "dc_cap_en"))
                    dc_cap = mdl.get_property_value(mdl.prop(item_handle, "dc_cap"))
                    dc_snub = mdl.get_property_value(mdl.prop(item_handle, "dc_snub"))
                    vac_set = mdl.get_property_value(mdl.prop(item_handle, "vac_set"))
                    global_basefreq = mdl.get_property_value(mdl.prop(item_handle, "global_basefreq"))
                    Fs = mdl.get_property_value(mdl.prop(item_handle, "Fs"))
                    Sinv = mdl.get_property_value(mdl.prop(item_handle, "Sinv"))
                    Qinv = mdl.get_property_value(mdl.prop(item_handle, "Qinv"))
                    Rac = mdl.get_property_value(mdl.prop(item_handle, "Rac"))
                    Lac = mdl.get_property_value(mdl.prop(item_handle, "Lac"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    cont_t = mdl.get_property_value(mdl.prop(item_handle, "cont_t"))
                    dss_ctrl = mdl.get_property_value(mdl.prop(item_handle, "dss_ctrl"))
                    Phases = mdl.get_property_value(mdl.prop(item_handle, "Phases"))
                    kv = mdl.get_property_value(mdl.prop(item_handle, "kv"))
                    kw = mdl.get_property_value(mdl.prop(item_handle, "kw"))
                    pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                    model = mdl.get_property_value(mdl.prop(item_handle, "model"))
                    basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
                    r0 = mdl.get_property_value(mdl.prop(item_handle, "r0"))
                    r1 = mdl.get_property_value(mdl.prop(item_handle, "r1"))
                    x0 = mdl.get_property_value(mdl.prop(item_handle, "x0"))
                    x1 = mdl.get_property_value(mdl.prop(item_handle, "x1"))
                    pu = mdl.get_property_value(mdl.prop(item_handle, "pu"))
                    Angle = mdl.get_property_value(mdl.prop(item_handle, "Angle"))
                    Frequency = mdl.get_property_value(mdl.prop(item_handle, "Frequency"))
                    basekv = mdl.get_property_value(mdl.prop(item_handle, "basekv"))
                    gen_ts_en = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en"))
                    load_loadshape = mdl.get_property_value(mdl.prop(item_handle, "load_loadshape"))
                    loadshape_name = mdl.get_property_value(mdl.prop(item_handle, "loadshape_name"))
                    loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
                    loadshape_int = mdl.get_property_value(mdl.prop(item_handle, "loadshape_int"))
                    gen_ts_en_bit = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en_bit"))
                    T_mode = mdl.get_property_value(mdl.prop(item_handle, "T_mode"))
                    S_Ts = mdl.get_property_value(mdl.prop(item_handle, "S_Ts"))
                    Q_Ts = mdl.get_property_value(mdl.prop(item_handle, "Q_Ts"))
                    T_Ts = mdl.get_property_value(mdl.prop(item_handle, "T_Ts"))
                    T_Ts_internal = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_internal"))
                    dssT = mdl.get_property_value(mdl.prop(item_handle, "dssT"))
                    dssnpts = mdl.get_property_value(mdl.prop(item_handle, "dssnpts"))
                    T_Ts_max = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_max"))
                    del_Ts = mdl.get_property_value(mdl.prop(item_handle, "del_Ts"))
                    Slen = mdl.get_property_value(mdl.prop(item_handle, "Slen"))
                    T_lim_low = mdl.get_property_value(mdl.prop(item_handle, "T_lim_low"))
                    T_lim_high = mdl.get_property_value(mdl.prop(item_handle, "T_lim_high"))
                    Ts_switch = mdl.get_property_value(mdl.prop(item_handle, "Ts_switch"))
                    # HEADER STOP
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                    import numpy
                    import math

                    pu = 1
                    Angle = 0
                    r0 = 0.001
                    r1 = 0.001
                    x0 = 0.001
                    x1 = 0.001

                    Phases = 3
                    kv = vac_set
                    kw = Sinv
                    basefreq = Fs
                    Frequency = Fs
                    basekv = kv

                    if Qinv >= 0:
                        pf = Sinv/((Sinv*Sinv+Qinv*Qinv)**0.5)
                    else:
                        pf = -Sinv/((Sinv*Sinv+Qinv*Qinv)**0.5)

                    if ctrl_mode_str == "PQ":
                        ctrl_mode_int = 1
                        ext_mode = 0
                        model = 1
                    elif ctrl_mode_str == "PV":
                        ctrl_mode_int = 0
                        ext_mode = 0
                        model = 3
                    elif ctrl_mode_str == "Vdc-Vac":
                        ctrl_mode_int = 2
                        ext_mode = 0
                        model = 3
                    elif ctrl_mode_str == "Vdc-Q":
                        ctrl_mode_int = 3
                        ext_mode = 0
                        model = 1
                    elif ctrl_mode_str == "Grid Forming":
                        ctrl_mode_int = 4
                        ext_mode = 0
                        model = 2
                    elif ctrl_mode_str == "External Control":
                        ctrl_mode_int = -1
                        ext_mode = 1
                        model = 1
                    else:
                        ctrl_mode_int = 0
                        ext_mode = 0
                        model = 1


                    S_Ts = loadshape
                    dssT = loadshape_int
                    Slen = len(S_Ts)

                    dssnpts = len(S_Ts)

                    if T_mode == "Loadshape index":
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for S_val in S_vec1:
                            T_Ts_internal[idxS] = idxS
                            idxS += 1
                        T_lim_low = T_Ts_internal[0]
                        T_lim_high = T_Ts_internal[Slen-1]
                    elif T_mode == "Time":
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for T_val in T_Ts:
                            T_Ts_internal[idxS] = T_val
                            idxS += 1
                        T_lim_low = T_Ts[0]
                        T_lim_high = T_Ts[len(T_Ts)-1]
                    else:
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for S_val in S_vec1:
                            T_Ts_internal[idxS] = idxS
                            idxS += 1
                        T_lim_low = T_Ts_internal[0]
                        T_lim_high = T_Ts_internal[Slen-1]


                    if T_mode == "Loadshape index":
                        Ts_switch = 0
                    elif T_mode == "Time":
                        Ts_switch = 1
                    else:
                        Ts_switch = 0


                    mdl.set_property_value(mdl.prop(item_handle, "P_kp"), P_kp)
                    mdl.set_property_value(mdl.prop(item_handle, "P_ki"), P_ki)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_kp"), Q_kp)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_ki"), Q_ki)
                    mdl.set_property_value(mdl.prop(item_handle, "V_kp"), V_kp)
                    mdl.set_property_value(mdl.prop(item_handle, "V_ki"), V_ki)
                    mdl.set_property_value(mdl.prop(item_handle, "P_sel"), P_sel)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_sel"), Q_sel)
                    mdl.set_property_value(mdl.prop(item_handle, "V_sel"), V_sel)
                    mdl.set_property_value(mdl.prop(item_handle, "ctrl_mode_int"), ctrl_mode_int)
                    mdl.set_property_value(mdl.prop(item_handle, "ext_mode"), ext_mode)
                    mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "cont_t"), cont_t)
                    mdl.set_property_value(mdl.prop(item_handle, "Sinv"), Sinv)
                    mdl.set_property_value(mdl.prop(item_handle, "Qinv"), Qinv)
                    mdl.set_property_value(mdl.prop(item_handle, "Fs"), Fs)
                    mdl.set_property_value(mdl.prop(item_handle, "vdc_set"), vdc_set)

                    mdl.set_property_value(mdl.prop(item_handle, "Rac"), Rac)
                    mdl.set_property_value(mdl.prop(item_handle, "Lac"), Lac)

                    mdl.set_property_value(mdl.prop(item_handle, "Phases"), Phases)
                    mdl.set_property_value(mdl.prop(item_handle, "kv"), kv)
                    mdl.set_property_value(mdl.prop(item_handle, "kw"), kw)
                    mdl.set_property_value(mdl.prop(item_handle, "pf"), pf)
                    mdl.set_property_value(mdl.prop(item_handle, "model"), model)
                    mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)

                    mdl.set_property_value(mdl.prop(item_handle, "r0"), r0)
                    mdl.set_property_value(mdl.prop(item_handle, "r1"), r1)
                    mdl.set_property_value(mdl.prop(item_handle, "x0"), x0)
                    mdl.set_property_value(mdl.prop(item_handle, "x1"), x1)
                    mdl.set_property_value(mdl.prop(item_handle, "Frequency"), Frequency)
                    mdl.set_property_value(mdl.prop(item_handle, "basekv"), basekv)
                    mdl.set_property_value(mdl.prop(item_handle, "Angle"), Angle)
                    mdl.set_property_value(mdl.prop(item_handle, "pu"), pu)

                    mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en"), gen_ts_en)
                    mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en_bit"), gen_ts_en_bit)
                    mdl.set_property_value(mdl.prop(item_handle, "S_Ts"), S_Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_Ts"), Q_Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "T_Ts"), T_Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "dssT"), dssT)
                    mdl.set_property_value(mdl.prop(item_handle, "dssnpts"), dssnpts)
                    mdl.set_property_value(mdl.prop(item_handle, "T_Ts_max"), T_Ts_max)
                    mdl.set_property_value(mdl.prop(item_handle, "del_Ts"), del_Ts)

                    mdl.set_property_value(mdl.prop(item_handle, "loadshape"), loadshape)
                    mdl.set_property_value(mdl.prop(item_handle, "loadshape_int"), loadshape_int)

                    mdl.set_property_value(mdl.prop(item_handle, "T_lim_low"), T_lim_low)
                    mdl.set_property_value(mdl.prop(item_handle, "T_lim_high"), T_lim_high)
                    mdl.set_property_value(mdl.prop(item_handle, "Ts_switch"), Ts_switch)
                    mdl.set_property_value(mdl.prop(item_handle, "Slen"), Slen)
                    mdl.set_property_value(mdl.prop(item_handle, "T_Ts_internal"), T_Ts_internal)
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_vsc as comp_script
                    importlib.reload(comp_script)
                    import comp_load as comp_script2
                    importlib.reload(comp_script2)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    def return_comp_script_load():
                        return comp_script2
                ENDCODE
            }
        }
        [
            position = 5408, 4064
            size = 220, 175
        ]

        component Subsystem Load {
            layout = static

            port A1 {
                position = -30, -32
                kind = pe
                direction =  in
            }
            [
                position = 7800, 7864
                rotation = right
            ]

            port B1 {
                position = 0.0, -32.0
                kind = pe
                direction =  in
            }
            [
                position = 7920, 7864
                rotation = right
            ]

            port C1 {
                position = 30.0, -32.0
                kind = pe
                direction =  in
            }
            [
                position = 8056, 7864
                rotation = right
            ]

            port N1 {
                position = 0, 30
                kind = pe
                direction =  in
            }
            [
                position = 7920, 8384
                rotation = left
            ]

            tag TagA1 {
                value = "A1"
                scope = local
                kind = pe
            }
            [
                position = 7800, 7944
                rotation = left
                size = 60, 20
            ]

            tag TagB1 {
                value = "B1"
                scope = local
                kind = pe
            }
            [
                position = 7920, 7944
                rotation = left
                size = 60, 20
            ]

            tag TagC1 {
                value = "C1"
                scope = local
                kind = pe
            }
            [
                position = 8056, 7944
                rotation = left
                size = 60, 20
            ]

            tag TagA2 {
                value = "A1"
                scope = local
                kind = pe
            }
            [
                position = 7696, 8088
                rotation = right
                size = 60, 20
            ]

            tag TagB2 {
                value = "B1"
                scope = local
                kind = pe
            }
            [
                position = 7760, 8088
                rotation = right
                size = 60, 20
            ]

            tag TagC2 {
                value = "C1"
                scope = local
                kind = pe
            }
            [
                position = 7824, 8088
                rotation = right
                size = 60, 20
            ]

            junction JN pe
            [
                position = 7920, 8328
            ]

            connect A1 TagA1 as ConnA1P
            connect B1 TagB1 as ConnB1P
            connect C1 TagC1 as ConnC1P
            connect JN N1 as Conn_N0

            Pow_ref_s = "Fixed"
            Sn_3ph = "3500"
            T_mode = "Loadshape index"
            Vn_3ph = "4.16"
            global_basefreq = "True"
            ground_connected = "False"
            load_model = "Constant Impedance"
            pf_mode_3ph = "Lag"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Three-phase/Single-phase constant-impedance/constant-power Load component.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=192"

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "General:1"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_frequency_prop(mdl, container_handle)
                    ENDCODE
                }

                fn {
                    label = "Nominal frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    group = "General:1"
                }

                conn_type {
                    label = "Connection type"
                    widget = combo
                    combo_values = "Y", "Δ"
                    type = string
                    default_value = "Y"
                    group = "General"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

                        ports = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.connections_dynamics(mdl, container_handle, ports)

                        mdl.refresh_icon(container_handle)

                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)
                    ENDCODE
                }

                ground_connected {
                    label = "Ground-connected"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "General"
                    no_evaluate

                    CODE property_value_changed

                        mdl.refresh_icon(container_handle)

                        comp_script = return_comp_script(mdl, container_handle)
                        ports = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.connections_gnd_dynamics(mdl, container_handle, ports)
                    ENDCODE
                }

                phases {
                    label = "Number of Phases"
                    widget = combo
                    combo_values = "3", "1"
                    type = string
                    default_value = "3"
                    group = "General"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        comp_script.phase_value_edited_fnc(mdl, container_handle, new_value)

                        ports = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.connections_phases_dynamics(mdl, container_handle, ports)


                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.phase_value_edited_fnc(mdl, container_handle, new_value)
                    ENDCODE
                }

                Vn_3ph {
                    label = "Nominal line voltage"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "kV"
                    group = "Load Parameters:2"
                }

                Sn_3ph {
                    label = "Total Nominal power"
                    widget = edit
                    type = generic
                    default_value = "600"
                    unit = "kVA"
                    group = "Load Parameters"
                }

                pf_mode_3ph {
                    label = "Power factor mode"
                    widget = combo
                    combo_values = "Lag", "Lead", "Unit"
                    type = string
                    default_value = "Unit"
                    group = "Load Parameters"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

                        if new_value == "Unit":
                            mdl.disable_property(mdl.prop(container_handle, "pf_3ph"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "pf_3ph"))

                        comp_script.set_pf_mode(mdl, container_handle, new_value)
                    ENDCODE

                    CODE property_value_edited
                        if new_value == "Unit":
                            mdl.disable_property(mdl.prop(container_handle, "pf_3ph"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "pf_3ph"))
                    ENDCODE
                }

                pf_3ph {
                    label = "Power factor"
                    widget = edit
                    type = generic
                    default_value = "0.9"
                    group = "Load Parameters"
                }

                pf_3ph_set {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                load_model {
                    label = "Load Model"
                    widget = combo
                    combo_values = "Constant Impedance", "Constant Power"
                    type = string
                    default_value = "Constant Impedance"
                    group = "Load Parameters"
                    no_evaluate

                    CODE property_value_changed

                        if new_value == "Constant Power":
                            mdl.info("Warning: Load Constant Power mode demands grounding for correct HIL simulation.")

                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_model_value_edited_fnc(mdl, container_handle, new_value)
                        comp_script.set_load_model(mdl, container_handle, new_value)

                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_model_value_edited_fnc(mdl, container_handle, new_value)
                    ENDCODE
                }

                model {
                    widget = edit
                    type = generic
                    default_value = "2"
                    nonvisible
                }

                Pow_ref_s {
                    label = "CPL Power reference source"
                    widget = combo
                    combo_values = "Fixed", "External input", "Time Series"
                    type = string
                    default_value = "Fixed"
                    group = "CPL Parameters:3"
                    disabled
                    no_evaluate

                    CODE property_value_changed

                        comp_script = return_comp_script(mdl, container_handle)
                        ports = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.connections_pow_ref_dynamics(mdl, container_handle, ports)
                    ENDCODE
                }

                Ts {
                    label = "CPL Execution rate"
                    widget = edit
                    type = generic
                    default_value = "300e-6"
                    unit = "s"
                    group = "CPL Parameters"
                    disabled
                }

                Tfast {
                    label = "CPL Fast Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "CPL Parameters"
                    disabled
                }

                CPL_LMT {
                    label = "CPL Current limit"
                    widget = edit
                    type = generic
                    default_value = "2"
                    unit = "pu"
                    group = "CPL Parameters"
                    disabled
                }

                Vn_3ph_CPL {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                P_CPL {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Q_CPL {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kV {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                pf {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                conn {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kVA {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                basefreq {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                load_loadshape {
                    label = "LoadShape object"
                    widget = button
                    type = string
                    default_value = "Choose"
                    group = "Time Series Settings:4"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_loadshape(mdl, container_handle)
                    ENDCODE
                }

                loadshape_name {
                    label = "LoadShape name"
                    widget = edit
                    type = generic
                    default_value = "Default"
                    group = "Time Series Settings:4"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE

                }

                loadshape_from_file {
                    label = "From CSV file"
                    widget = checkbox
                    type = generic
                    default_value = "False"
                    group = "Time Series Settings:4"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                useactual {
                    label = "Actual load value"
                    widget = checkbox
                    type = generic
                    default_value = "False"
                    group = "Time Series Settings:4"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }


                loadshape_from_file_path {
                    label = "LoadShape from file - path"
                    widget = edit
                    type = generic
                    default_value = ""
                    group = "Time Series Settings:4"
                    no_evaluate
                    nonvisible
                }

                loadshape_from_file_column {
                    label = "LoadShape from file - column"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Time Series Settings:4"
                    no_evaluate
                    nonvisible
                }

                loadshape_from_file_header {
                    label = "LoadShape from file - header"
                    widget = checkbox
                    type = generic
                    default_value = "True"
                    group = "Time Series Settings:4"
                    no_evaluate
                    nonvisible
                }

                loadshape {
                    label = "LoadShape points"
                    widget = edit
                    type = generic
                    default_value = "[0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 0.3, 0.5, 0.6, 0.7, 0.7, 0.8, 0.7, 0.7, 0.8, 0.8, 0.8, 1.0, 1.0, 1.0, 1.0, 0.9, 0.7, 0.5]"
                    group = "Time Series Settings:4"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_int {
                    label = "LoadShape interval"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Time Series Settings:4"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                S_Ts {
                    label = "Power profile"
                    widget = edit
                    type = generic
                    default_value = "[0.2,0.28,0.5,0.32,0.2]"
                    unit = "pu"
                    group = "Time Series Settings:4"
                    nonvisible
                }

                Q_Ts {
                    label = "Reactive power profile"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kVAR"
                    group = "Time Series Settings"
                    nonvisible
                }

                T_mode {
                    label = "Loadshape input mode"
                    widget = combo
                    combo_values = "Loadshape index", "Time"
                    type = string
                    default_value = "Time"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        if new_value == "Time":
                            mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "T_Ts"))
                    ENDCODE
                }

                S_Ts_mode {
                    label = "Power Profile mode"
                    widget = combo
                    combo_values = "Manual input"
                    type = string
                    default_value = "Manual input"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        ports = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.connections_ts_mode_dynamics(mdl, container_handle, ports)
                    ENDCODE

                    CODE property_value_edited
                        if new_value == "Manual input":
                            mdl.disable_property(mdl.prop(container_handle, "T_Ts_max"))
                            mdl.disable_property(mdl.prop(container_handle, "del_Ts"))
                            mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "T_Ts_max"))
                            mdl.enable_property(mdl.prop(container_handle, "del_Ts"))
                            mdl.disable_property(mdl.prop(container_handle, "T_Ts"))
                    ENDCODE
                }

                T_Ts {
                    label = "Loadshape time range"
                    widget = edit
                    type = generic
                    default_value = "[0, 6, 12, 18, 24]"
                    unit = "h"
                    group = "Time Series Settings"
                    disabled
                }

                timespan {
                    label = "Loadshape time span"
                    widget = combo
                    combo_values =  "Daily", "Yearly"
                    type = string
                    default_value = "Daily"
                    group = "Time Series Settings"
                    nonvisible
                }

                T_Ts_internal {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    nonvisible
                }

                dssT {
                    label = "OpenDSS time interval"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "h"
                    group = "Time Series Settings"
                    nonvisible
                }

                dssnpts {
                    widget = edit
                    type = generic
                    default_value = "5"
                    group = "Time Series Settings"
                    nonvisible
                }

                T_Ts_max {
                    label = "Power profile loop cycle"
                    widget = edit
                    type = generic
                    default_value = "10"
                    unit = "s"
                    group = "Time Series Settings"
                    nonvisible
                    disabled
                }

                del_Ts {
                    label = "Profile start delay"
                    widget = edit
                    type = generic
                    default_value = "20"
                    unit = "s"
                    group = "Time Series Settings"
                    nonvisible
                    disabled
                }

                Slen {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    nonvisible
                }

                T_lim_low {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    nonvisible
                }

                T_lim_high {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    nonvisible
                }

                Ts_switch {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.read_loadshape_from_json(mdl, item_handle)

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()


                ENDCODE

                CODE pre_compile

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.restore_all_loads_points(mdl, item_handle)

                    # HEADER START
                    global_basefreq = mdl.get_property_value(mdl.prop(item_handle, "global_basefreq"))
                    fn = mdl.get_property_value(mdl.prop(item_handle, "fn"))
                    conn_type = mdl.get_property_value(mdl.prop(item_handle, "conn_type"))
                    ground_connected = mdl.get_property_value(mdl.prop(item_handle, "ground_connected"))
                    phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
                    Vn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Vn_3ph"))
                    Sn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Sn_3ph"))
                    pf_mode_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_mode_3ph"))
                    pf_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_3ph"))
                    pf_3ph_set = mdl.get_property_value(mdl.prop(item_handle, "pf_3ph_set"))
                    load_model = mdl.get_property_value(mdl.prop(item_handle, "load_model"))
                    model = mdl.get_property_value(mdl.prop(item_handle, "model"))
                    Pow_ref_s = mdl.get_property_value(mdl.prop(item_handle, "Pow_ref_s"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    Tfast = mdl.get_property_value(mdl.prop(item_handle, "Tfast"))
                    CPL_LMT = mdl.get_property_value(mdl.prop(item_handle, "CPL_LMT"))
                    Vn_3ph_CPL = mdl.get_property_value(mdl.prop(item_handle, "Vn_3ph_CPL"))
                    P_CPL = mdl.get_property_value(mdl.prop(item_handle, "P_CPL"))
                    Q_CPL = mdl.get_property_value(mdl.prop(item_handle, "Q_CPL"))
                    kV = mdl.get_property_value(mdl.prop(item_handle, "kV"))
                    pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                    conn = mdl.get_property_value(mdl.prop(item_handle, "conn"))
                    kVA = mdl.get_property_value(mdl.prop(item_handle, "kVA"))
                    basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
                    load_loadshape = mdl.get_property_value(mdl.prop(item_handle, "load_loadshape"))
                    loadshape_name = mdl.get_property_value(mdl.prop(item_handle, "loadshape_name"))
                    loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
                    loadshape_int = mdl.get_property_value(mdl.prop(item_handle, "loadshape_int"))
                    S_Ts = mdl.get_property_value(mdl.prop(item_handle, "S_Ts"))
                    Q_Ts = mdl.get_property_value(mdl.prop(item_handle, "Q_Ts"))
                    T_mode = mdl.get_property_value(mdl.prop(item_handle, "T_mode"))
                    S_Ts_mode = mdl.get_property_value(mdl.prop(item_handle, "S_Ts_mode"))
                    T_Ts = mdl.get_property_value(mdl.prop(item_handle, "T_Ts"))
                    T_Ts_internal = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_internal"))
                    dssT = mdl.get_property_value(mdl.prop(item_handle, "dssT"))
                    dssnpts = mdl.get_property_value(mdl.prop(item_handle, "dssnpts"))
                    T_Ts_max = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_max"))
                    del_Ts = mdl.get_property_value(mdl.prop(item_handle, "del_Ts"))
                    Slen = mdl.get_property_value(mdl.prop(item_handle, "Slen"))
                    T_lim_low = mdl.get_property_value(mdl.prop(item_handle, "T_lim_low"))
                    T_lim_high = mdl.get_property_value(mdl.prop(item_handle, "T_lim_high"))
                    Ts_switch = mdl.get_property_value(mdl.prop(item_handle, "Ts_switch"))
                    enable_monitoring = mdl.get_property_value(mdl.prop(item_handle, "enable_monitoring"))
                    # HEADER STOP
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                    import numpy
                    import math

                    basefreq = fn
                    kVA = Sn_3ph

                    if (conn_type == 'Δ'):
                        conn = "delta"
                    else:
                        conn = "wye"


                    if pf_mode_3ph == "Unit":
                        pf = 1.0
                        P_CPL = Sn_3ph
                        Q_CPL = 0
                        pf_3ph_set = 0.99
                    elif pf_mode_3ph == "Lag":
                        pf = pf_3ph
                        P_CPL = Sn_3ph * pf
                        Q_CPL = Sn_3ph * ((1 - pf*pf)**0.5)
                        pf_3ph_set = pf_3ph
                    else:
                        pf = -1 * pf_3ph
                        P_CPL = Sn_3ph * pf
                        Q_CPL = -Sn_3ph * ((1 - pf*pf)**0.5)
                        pf_3ph_set = pf_3ph



                    if phases == "1":
                        if ground_connected:
                            kV = (Vn_3ph/(1))/1
                            Vn_3ph_CPL = kV/(3**0.5)
                        else:
                            kV = Vn_3ph
                            Vn_3ph_CPL = kV
                    else:
                        kV = Vn_3ph
                        Vn_3ph_CPL = kV

                    dssnpts = len(S_Ts)





                    if load_model == "Constant Impedance":
                        model = 2
                    elif load_model == "Constant Power":
                        model = 1
                    else:
                        model = 2


                    S_Ts = loadshape
                    dssT = loadshape_int
                    Slen = len(S_Ts)

                    if T_mode == "Loadshape index":
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for S_val in S_vec1:
                            T_Ts_internal[idxS] = idxS
                            idxS += 1
                        T_lim_low = T_Ts_internal[0]
                        T_lim_high = T_Ts_internal[Slen-1]
                    elif T_mode == "Time":
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for T_val in T_Ts:
                            T_Ts_internal[idxS] = T_val
                            idxS += 1
                        T_lim_low = T_Ts[0]
                        T_lim_high = T_Ts[len(T_Ts)-1]
                    else:
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for S_val in S_vec1:
                            T_Ts_internal[idxS] = idxS
                            idxS += 1
                        T_lim_low = T_Ts_internal[0]
                        T_lim_high = T_Ts_internal[Slen-1]



                    if T_mode == "Loadshape index":
                        Ts_switch = 0
                    elif T_mode == "Time":
                        Ts_switch = 1
                    else:
                        Ts_switch = 0


                    mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)
                    mdl.set_property_value(mdl.prop(item_handle, "fn"), fn)
                    mdl.set_property_value(mdl.prop(item_handle, "ground_connected"), ground_connected)
                    mdl.set_property_value(mdl.prop(item_handle, "kVA"), kVA)
                    mdl.set_property_value(mdl.prop(item_handle, "Vn_3ph"), Vn_3ph)
                    mdl.set_property_value(mdl.prop(item_handle, "Vn_3ph_CPL"), Vn_3ph_CPL)
                    mdl.set_property_value(mdl.prop(item_handle, "P_CPL"), P_CPL)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_CPL"), Q_CPL)
                    mdl.set_property_value(mdl.prop(item_handle, "conn"), conn)
                    mdl.set_property_value(mdl.prop(item_handle, "pf"), pf)
                    mdl.set_property_value(mdl.prop(item_handle, "pf_mode_3ph"), pf_mode_3ph)
                    mdl.set_property_value(mdl.prop(item_handle, "pf_3ph"), pf_3ph)
                    mdl.set_property_value(mdl.prop(item_handle, "pf_3ph_set"), pf_3ph_set)
                    mdl.set_property_value(mdl.prop(item_handle, "phases"), phases)
                    mdl.set_property_value(mdl.prop(item_handle, "kV"), kV)
                    mdl.set_property_value(mdl.prop(item_handle, "load_model"), load_model)
                    mdl.set_property_value(mdl.prop(item_handle, "model"), model)
                    mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "Sn_3ph"), Sn_3ph)

                    mdl.set_property_value(mdl.prop(item_handle, "Tfast"), Tfast)
                    mdl.set_property_value(mdl.prop(item_handle, "CPL_LMT"), CPL_LMT)
                    mdl.set_property_value(mdl.prop(item_handle, "S_Ts"), S_Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "T_Ts_internal"), T_Ts_internal)
                    mdl.set_property_value(mdl.prop(item_handle, "Slen"), Slen)
                    mdl.set_property_value(mdl.prop(item_handle, "dssnpts"), dssnpts)
                    mdl.set_property_value(mdl.prop(item_handle, "T_lim_low"), T_lim_low)
                    mdl.set_property_value(mdl.prop(item_handle, "T_lim_high"), T_lim_high)
                    mdl.set_property_value(mdl.prop(item_handle, "Ts_switch"), Ts_switch)

                    mdl.set_property_value(mdl.prop(item_handle, "loadshape"), loadshape)
                    mdl.set_property_value(mdl.prop(item_handle, "loadshape_int"), loadshape_int)
                    mdl.set_property_value(mdl.prop(item_handle, "Sn_3ph"), Sn_3ph)
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init

                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_load as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script
                ENDCODE
            }
        }
        [
            position = 5328, 4256
            scale = -1, 1
            size = 96, 64
        ]

        component Subsystem "Generator Control" {
            layout = dynamic
            label = "GenCtrl"
            component gen_bus_split "Bus Split1" {
                outputs = "8"
            }
            [
                position = 6144, 7344
                rotation = right
                hide_name = True
            ]

            component "core/abc to dq" "abc to dq1" {
            }
            [
                position = 6632, 7416
                hide_name = True
                size = 48, 80
            ]

            component src_constant Constant3 {
                execution_rate = "execution_rate"
                value = "0"
            }
            [
                position = 6528, 7504
                hide_name = True
            ]

            component "core/abc to dq" "abc to dq2" {
            }
            [
                position = 6632, 7592
                scale = 1, -1
                size = 48, 80
            ]

            component gen_product Product1 {
            }
            [
                position = 7016, 7448
                hide_name = True
            ]

            component gen_product Product2 {
            }
            [
                position = 7016, 7504
                hide_name = True
            ]

            component gen_sum Sum5 {
                signs = "++"
            }
            [
                position = 7120, 7480
                hide_name = True
            ]

            component gen_gain Gain9 {
                gain = "-1.5"
            }
            [
                position = 7192, 7480
                hide_name = True
            ]

            component gen_probe P_gen {
                signal_name = "P"
                signal_type = "power"
                streaming_en = "False"
            }
            [
                position = 7296, 7432
                rotation = left
            ]

            component gen_product Product3 {
            }
            [
                position = 7016, 7672
                hide_name = True
            ]

            component gen_product Product4 {
            }
            [
                position = 7016, 7616
                hide_name = True
            ]

            component gen_sum Sum6 {
                signs = "+-"
            }
            [
                position = 7120, 7648
                hide_name = True
            ]

            component gen_gain Gain10 {
                gain = "-1.5"
            }
            [
                position = 7192, 7648
                hide_name = True
            ]

            component gen_probe Q_gen {
                signal_name = "Q"
                signal_type = "power"
                streaming_en = "False"
            }
            [
                position = 7296, 7600
                rotation = left
            ]

            component gen_sum Sum7 {
                signs = "+-"
            }
            [
                position = 7904, 7424
                hide_name = True
            ]

            component gen_integrator Integrator3 {
                limit_lower = "-1.3"
                limit_upper = "1.3"
            }
            [
                position = 8760, 7488
                hide_name = True
            ]

            component gen_sum Sum8 {
                signs = "++"
            }
            [
                position = 8872, 7480
                hide_name = True
            ]

            component sys_signal_switch "Signal switch3" {
                threshold = "0.5"
            }
            [
                position = 8152, 7456
                hide_name = True
            ]

            component src_constant Constant4 {
                execution_rate = "execution_rate"
                value = "0"
            }
            [
                position = 8072, 7512
                hide_name = True
            ]

            component sys_signal_switch "Signal switch4" {
                threshold = "0.5"
            }
            [
                position = 8288, 7472
                hide_name = True
            ]

            component gen_sum Sum9 {
                signs = "+-"
            }
            [
                position = 8000, 7688
                hide_name = True
            ]

            component gen_integrator Integrator4 {
                limit_lower = "-1.3"
                limit_upper = "1.3"
            }
            [
                position = 8736, 7800
                hide_name = True
            ]

            component gen_gain Gain13 {
                gain = "P_ki"
            }
            [
                position = 8424, 7784
                hide_name = True
            ]

            component gen_gain Gain14 {
                gain = "P_kp"
            }
            [
                position = 8416, 7672
                hide_name = True
            ]

            component gen_sum Sum10 {
                signs = "++"
            }
            [
                position = 8824, 7792
                hide_name = True
            ]

            component gen_limiter Limit4 {
                lower_limit = "1"
                upper_limit = "10000"
            }
            [
                position = 6176, 7920
                hide_name = True
            ]

            component sys_signal_switch "Signal switch5" {
                threshold = "0.5"
            }
            [
                position = 8240, 7720
                hide_name = True
            ]

            component src_constant Constant5 {
                execution_rate = "execution_rate"
                value = "0"
            }
            [
                position = 8128, 7776
                hide_name = True
            ]

            component sys_signal_switch "Signal switch6" {
                threshold = "0.5"
            }
            [
                position = 8328, 7736
                hide_name = True
            ]

            component gen_gain Gain15 {
                gain = "-1"
            }
            [
                position = 8896, 7792
                hide_name = True
            ]

            component gen_bus_split "Bus Split2" {
                outputs = "11"
            }
            [
                position = 6128, 7680
                rotation = right
                hide_name = True
            ]

            component gen_sum Sum11 {
                signs = "+-"
            }
            [
                position = 7904, 7528
                hide_name = True
            ]

            component gen_product Product5 {
            }
            [
                position = 7016, 7312
                hide_name = True
            ]

            component gen_math_fnc "Mathematical function1" {
                mathematical_fn = "sqrt"
            }
            [
                position = 7200, 7344
                hide_name = True
            ]

            component gen_product Product6 {
            }
            [
                position = 7016, 7368
                hide_name = True
            ]

            component gen_sum Sum13 {
                signs = "++"
            }
            [
                position = 7120, 7344
                hide_name = True
            ]

            component gen_probe V_gen {
                signal_name = "V"
                signal_type = "power"
                streaming_en = "False"
            }
            [
                position = 7320, 7296
                rotation = left
            ]

            component gen_gain Gain21 {
                gain = "0.001"
            }
            [
                position = 7256, 7480
                hide_name = True
            ]

            component gen_gain Gain22 {
                gain = "0.001"
            }
            [
                position = 7256, 7648
                hide_name = True
            ]

            component gen_gain Gain23 {
                gain = "1.224745"
            }
            [
                position = 7272, 7344
                hide_name = True
            ]

            component src_constant Constant9 {
                execution_rate = "execution_rate"
                value = "ext_mode"
            }
            [
                position = 7016, 7792
                hide_name = True
            ]

            component sys_signal_switch "Signal switch12" {
                threshold = "0.5"
            }
            [
                position = 8024, 7440
                hide_name = True
            ]

            component gen_gain Gain24 {
                gain = "Q_kp"
            }
            [
                position = 8432, 7336
                hide_name = True
            ]

            component sys_signal_switch "Signal switch13" {
                threshold = "0.5"
            }
            [
                position = 8512, 7352
                hide_name = True
            ]

            component gen_gain Gain25 {
                gain = "V_kp"
            }
            [
                position = 8432, 7368
                hide_name = True
            ]

            component sys_signal_switch "Signal switch14" {
                threshold = "0.5"
            }
            [
                position = 8512, 7488
                hide_name = True
            ]

            component gen_gain Gain26 {
                gain = "Q_ki"
            }
            [
                position = 8432, 7472
                hide_name = True
            ]

            component gen_gain Gain27 {
                gain = "V_ki"
            }
            [
                position = 8432, 7504
                hide_name = True
            ]

            component gen_c_function "C function1" {
                input_terminals = "real mode_external;inherit Mode_select_ext;inherit Mode_select_int;"
                input_terminals_dimensions = "inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True"
                input_terminals_show_labels = "True;True;True"
                output_fnc = "/*Begin code section*/
if (mode_external) {
    if (Mode_select_ext==0) {
        Vfd_sel = 0;
        Tm_sel = 1;
    }
    else if (Mode_select_ext==1) {
        Vfd_sel = 1;
        Tm_sel = 1;
    }
    else if (Mode_select_ext==2) {
        Vfd_sel = 0;
        Tm_sel = 0;
    }
    else {
        Vfd_sel = 0;
        Tm_sel = 1;
    }
}
else {
    if (Mode_select_int==0) {
        Vfd_sel = 0;
        Tm_sel = 1;
    }
    else if (Mode_select_int==1) {
        Vfd_sel = 1;
        Tm_sel = 1;
    }
    else if (Mode_select_int==2) {
        Vfd_sel = 0;
        Tm_sel = 0;
    }
    else {
        Vfd_sel = 0;
        Tm_sel = 1;
    }
}
/*End code section*/"
                output_terminals = "real Vfd_sel;inherit Tm_sel;"
                output_terminals_dimensions = "inherit;inherit"
                output_terminals_feedthrough = "True;True"
                output_terminals_show_labels = "True;True"
            }
            [
                position = 7224, 7848
                size = 192, 96
            ]

            component src_constant Constant13 {
                execution_rate = "execution_rate"
                value = "ctrl_mode_int"
            }
            [
                position = 7016, 7904
                hide_name = True
            ]

            component gen_gain Gain28 {
                gain = "w_kp"
            }
            [
                position = 8416, 7704
                hide_name = True
            ]

            component gen_gain Gain29 {
                gain = "w_ki"
            }
            [
                position = 8424, 7816
                hide_name = True
            ]

            component gen_sum Sum14 {
                signs = "+-"
            }
            [
                position = 8000, 7784
                hide_name = True
            ]

            component gen_gain Gain30 {
                gain = "2*np.pi"
            }
            [
                position = 7832, 7768
                hide_name = True
            ]

            component gen_product Product7 {
                signs = "*/"
            }
            [
                position = 7912, 7776
                hide_name = True
            ]

            component gen_gain Gain31 {
                gain = "0.5/np.pi"
            }
            [
                position = 6176, 7880
                hide_name = True
            ]

            component sys_signal_switch "Signal switch15" {
                threshold = "0.5"
            }
            [
                position = 8488, 7688
                hide_name = True
            ]

            component sys_signal_switch "Signal switch16" {
                threshold = "0.5"
            }
            [
                position = 8488, 7800
                hide_name = True
            ]

            component sys_signal_switch "Signal switch17" {
                threshold = "0.5"
            }
            [
                position = 8120, 7704
                hide_name = True
            ]

            component src_constant Constant14 {
                execution_rate = "execution_rate"
            }
            [
                position = 6592, 7848
                hide_name = True
            ]

            component gen_gain Gain32 {
            }
            [
                position = 7080, 7848
                hide_name = True
            ]

            component gen_gain Gain33 {
                gain = "0.001"
            }
            [
                position = 7368, 7344
                hide_name = True
            ]

            component gen_terminator Termination66 {
            }
            [
                position = 6688, 7536
                rotation = left
                hide_name = True
            ]

            component gen_terminator Termination67 {
            }
            [
                position = 6688, 7480
                rotation = right
                hide_name = True
            ]

            component gen_terminator Termination68 {
            }
            [
                position = 6208, 7552
                hide_name = True
            ]

            component sys_signal_switch "Signal switch18" {
                threshold = "0.5"
            }
            [
                position = 8024, 7320
                hide_name = True
            ]

            component sys_signal_switch "Signal switch19" {
                threshold = "0.5"
            }
            [
                position = 8120, 7896
                hide_name = True
            ]

            component gen_sum Sum15 {
                signs = "+-"
            }
            [
                position = 7872, 7304
                hide_name = True
            ]

            component gen_sum Sum16 {
                signs = "+-"
            }
            [
                position = 8000, 7896
                hide_name = True
            ]

            component sys_signal_switch "Signal switch20" {
                threshold = "0.5"
            }
            [
                position = 8624, 7336
                hide_name = True
            ]

            component sys_signal_switch "Signal switch21" {
                threshold = "0.5"
            }
            [
                position = 8624, 7472
                hide_name = True
            ]

            component sys_signal_switch "Signal switch22" {
                threshold = "0.5"
            }
            [
                position = 8640, 7672
                hide_name = True
            ]

            component sys_signal_switch "Signal switch23" {
                threshold = "0.5"
            }
            [
                position = 8640, 7784
                hide_name = True
            ]

            component gen_probe gents {
                signal_name = "Q"
                signal_type = "power"
                streaming_en = "False"
            }
            [
                position = 8032, 7184
                rotation = left
            ]

            port Gen_meas {
                position = right:1
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6080, 7280
            ]

            port del_vfd {
                position = right:4
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8952, 7480
            ]

            port del_Tm {
                position = right:3
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 8960, 7792
            ]

            port Gen_ctrl {
                position = right:2
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 6072, 7616
            ]

            tag Goto5 {
                value = "P_out"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7360, 7480
                hide_name = True
                size = 60, 20
            ]

            tag Goto6 {
                value = "Q_out"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7360, 7648
                hide_name = True
                size = 60, 20
            ]

            tag Goto7 {
                value = "V_en"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7736
                hide_name = True
                size = 60, 20
            ]

            tag Goto8 {
                value = "M_en"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7760
                hide_name = True
                size = 60, 20
            ]

            tag Goto9 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7784
                hide_name = True
                size = 60, 20
            ]

            tag From4 {
                value = "Q_out"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7816, 7440
                hide_name = True
                size = 60, 20
            ]

            tag From5 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8104, 7376
                hide_name = True
                size = 60, 20
            ]

            tag From6 {
                value = "V_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8224, 7400
                hide_name = True
                size = 60, 20
            ]

            tag From7 {
                value = "P_out"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7912, 7696
                hide_name = True
                size = 60, 20
            ]

            tag From8 {
                value = "ctrl_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8184, 7664
                hide_name = True
                size = 60, 20
            ]

            tag From9 {
                value = "M_en"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8288, 7664
                hide_name = True
                size = 60, 20
            ]

            tag Goto10 {
                value = "Watt"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7808
                hide_name = True
                size = 60, 20
            ]

            tag Goto11 {
                value = "VAR"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7832
                hide_name = True
                size = 60, 20
            ]

            tag From10 {
                value = "VAR"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7656, 7416
                hide_name = True
                size = 60, 20
            ]

            tag From11 {
                value = "Watt"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7656, 7680
                hide_name = True
                size = 60, 20
            ]

            tag Goto12 {
                value = "VLL"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7856
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "Gen_V_mag"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7448, 7344
                hide_name = True
                size = 60, 20
            ]

            tag From14 {
                value = "Gen_V_mag"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7816, 7544
                hide_name = True
                size = 60, 20
            ]

            tag From15 {
                value = "VLL"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7656, 7520
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "Vf_sel"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7400, 7816
                hide_name = True
                size = 60, 20
            ]

            tag Goto15 {
                value = "Tm_sel"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7400, 7880
                hide_name = True
                size = 60, 20
            ]

            tag From16 {
                value = "Vf_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7976, 7384
                hide_name = True
                size = 60, 20
            ]

            tag From17 {
                value = "Tm_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8432, 7600
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "Vf_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8448, 7256
                hide_name = True
                size = 60, 20
            ]

            tag From19 {
                value = "Vf_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8448, 7424
                hide_name = True
                size = 60, 20
            ]

            tag Goto16 {
                value = "fs"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7880
                hide_name = True
                size = 60, 20
            ]

            tag Goto17 {
                value = "pp"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7920
                hide_name = True
                size = 60, 20
            ]

            tag Goto18 {
                value = "wm"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6264, 7576
                hide_name = True
                size = 60, 20
            ]

            tag From20 {
                value = "wm"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7904, 7832
                hide_name = True
                size = 60, 20
            ]

            tag From21 {
                value = "pp"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7824, 7808
                hide_name = True
                size = 60, 20
            ]

            tag From22 {
                value = "fs"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7656, 7768
                hide_name = True
                size = 60, 20
            ]

            tag From23 {
                value = "Tm_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8432, 7744
                hide_name = True
                size = 60, 20
            ]

            tag From24 {
                value = "Tm_sel"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8080, 7648
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "mod_internal"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6696, 7848
                hide_name = True
                size = 93, 20
            ]

            tag From25 {
                value = "mod_internal"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6848, 7848
                hide_name = True
                size = 103, 20
            ]

            tag From70 {
                value = "ia"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6584, 7672
                rotation = right
                hide_name = True
                scale = 1, -1
                size = 60, 20
            ]

            tag From71 {
                value = "ib"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6560, 7672
                rotation = right
                hide_name = True
                scale = 1, -1
                size = 60, 20
            ]

            tag From72 {
                value = "ic"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6536, 7672
                rotation = right
                hide_name = True
                scale = 1, -1
                size = 58, 20
            ]

            tag From73 {
                value = "va"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6584, 7320
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From74 {
                value = "vb"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6560, 7320
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag From75 {
                value = "vc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6536, 7320
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "va"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6264, 7408
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "vb"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6264, 7432
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "vc"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6264, 7456
                hide_name = True
                size = 60, 20
            ]

            tag Goto23 {
                value = "ia"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6264, 7480
                hide_name = True
                size = 60, 20
            ]

            tag Goto24 {
                value = "ib"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6264, 7504
                hide_name = True
                size = 60, 20
            ]

            tag Goto25 {
                value = "ic"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6264, 7528
                hide_name = True
                size = 60, 20
            ]

            tag From76 {
                value = "vd"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6904, 7304
                hide_name = True
                size = 60, 20
            ]

            tag From77 {
                value = "vq"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6904, 7360
                hide_name = True
                size = 60, 20
            ]

            tag From78 {
                value = "vd"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7440
                hide_name = True
                size = 60, 20
            ]

            tag From79 {
                value = "vd"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7664
                hide_name = True
                size = 60, 20
            ]

            tag From80 {
                value = "vq"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7496
                hide_name = True
                size = 60, 20
            ]

            tag From81 {
                value = "vq"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7608
                hide_name = True
                size = 60, 20
            ]

            tag From82 {
                value = "id"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7464
                hide_name = True
                size = 60, 20
            ]

            tag From83 {
                value = "iq"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7520
                hide_name = True
                size = 60, 20
            ]

            tag From84 {
                value = "id"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7632
                hide_name = True
                size = 60, 20
            ]

            tag From85 {
                value = "iq"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 6928, 7688
                hide_name = True
                size = 60, 20
            ]

            tag Goto26 {
                value = "vd"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6752, 7392
                hide_name = True
                size = 60, 20
            ]

            tag Goto27 {
                value = "vq"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6752, 7416
                hide_name = True
                size = 60, 20
            ]

            tag Goto28 {
                value = "iq"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6752, 7592
                hide_name = True
                size = 60, 20
            ]

            tag Goto29 {
                value = "id"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6752, 7616
                hide_name = True
                size = 60, 20
            ]

            tag Goto30 {
                value = "gen_ts_bit"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7960
                hide_name = True
                size = 60, 20
            ]

            tag Goto31 {
                value = "P_ts"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 7992
                hide_name = True
                size = 60, 20
            ]

            tag Goto32 {
                value = "Q_ts"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 6256, 8024
                hide_name = True
                size = 60, 20
            ]

            tag From86 {
                value = "gen_ts_bit"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7976, 7264
                hide_name = True
                size = 60, 20
            ]

            tag From87 {
                value = "gen_ts_bit"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8072, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From88 {
                value = "Q_out"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7784, 7320
                hide_name = True
                size = 60, 20
            ]

            tag From89 {
                value = "Q_ts"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7656, 7296
                hide_name = True
                size = 60, 20
            ]

            tag From90 {
                value = "P_out"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7912, 7904
                hide_name = True
                size = 60, 20
            ]

            tag From91 {
                value = "P_ts"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7656, 7888
                hide_name = True
                size = 60, 20
            ]

            tag From92 {
                value = "gen_ts_bit"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8576, 7264
                hide_name = True
                size = 60, 20
            ]

            tag From93 {
                value = "gen_ts_bit"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8568, 7424
                hide_name = True
                size = 60, 20
            ]

            tag From94 {
                value = "gen_ts_bit"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8592, 7600
                hide_name = True
                size = 60, 20
            ]

            tag From95 {
                value = "gen_ts_bit"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8592, 7728
                hide_name = True
                size = 60, 20
            ]

            junction Junction6 sp
            [
                position = 6592, 7504
            ]

            junction Junction13 sp
            [
                position = 8120, 7512
            ]

            junction Junction15 sp
            [
                position = 8208, 7776
            ]

            junction Junction16 sp
            [
                position = 8376, 7736
            ]

            junction Junction23 sp
            [
                position = 7320, 7344
            ]

            junction Junction28 sp
            [
                position = 8368, 7472
            ]

            junction Junction29 sp
            [
                position = 8368, 7368
            ]

            junction Junction31 sp
            [
                position = 8368, 7472
            ]

            junction Junction33 sp
            [
                position = 8376, 7704
            ]

            junction Junction34 sp
            [
                position = 8376, 7784
            ]

            junction Junction36 sp
            [
                position = 7296, 7480
            ]

            junction Junction37 sp
            [
                position = 7296, 7648
            ]

            junction Junction38 sp
            [
                position = 6960, 7304
            ]

            junction Junction39 sp
            [
                position = 6960, 7360
            ]

            junction Junction40 sp
            [
                position = 8464, 7336
            ]

            junction Junction41 sp
            [
                position = 8472, 7472
            ]

            junction Junction42 sp
            [
                position = 8448, 7672
            ]

            junction Junction43 sp
            [
                position = 8456, 7784
            ]

            junction Junction44 sp
            [
                position = 8024, 7264
            ]

            connect Gen_meas "Bus Split1.in" as Connection76
            connect Constant3.out Junction6 as Connection84
            connect Junction6 "abc to dq1.wt" as Connection85
            connect "abc to dq2.wt" Junction6 as Connection86
            connect Product1.out Sum5.in as Connection91
            connect Product2.out Sum5.in1 as Connection92
            connect Sum5.out Gain9.in as Connection93
            connect Sum6.out Gain10.in as Connection109
            connect Product4.out Sum6.in as Connection111
            connect Product3.out Sum6.in1 as Connection112
            connect From4 Sum7.in1 as Connection127
            connect Integrator3.out Sum8.in1 as Connection136
            connect From5 "Signal switch3.in2" as Connection142
            connect "Signal switch3.out" "Signal switch4.in" as Connection144
            connect Junction13 "Signal switch3.in1" as Connection146
            connect "Signal switch4.in1" Junction13 as Connection147
            connect From6 "Signal switch4.in2" as Connection148
            connect From7 Sum9.in1 as Connection154
            connect Integrator4.out Sum10.in1 as Connection158
            connect From8 "Signal switch5.in2" as Connection160
            connect "Signal switch5.out" "Signal switch6.in" as Connection161
            connect Constant5.out Junction15 as Connection162
            connect Junction15 "Signal switch5.in1" as Connection163
            connect "Signal switch6.in1" Junction15 as Connection164
            connect From9 "Signal switch6.in2" as Connection165
            connect "Signal switch6.out" Junction16 as Connection168
            connect Gain15.out del_Tm as Connection170
            connect Gen_ctrl "Bus Split2.in" as Connection171
            connect "Bus Split2.out" Goto7 as Connection172
            connect "Bus Split2.out1" Goto8 as Connection173
            connect "Bus Split2.out2" Goto9 as Connection174
            connect Product6.out Sum13.in1 as Connection212
            connect Sum13.out "Mathematical function1.in" as Connection213
            connect From14 Sum11.in1 as Connection215
            connect Sum10.out Gain15.in as Connection231
            connect V_gen.in Junction23 as Connection251
            connect Junction23 Gain23.out as Connection252
            connect Gain23.in "Mathematical function1.out" as Connection253
            connect Gain25.out "Signal switch13.in1" as Connection283
            connect "Signal switch4.out" Junction28 as Connection284
            connect Gain24.in Junction29 as Connection287
            connect Junction29 Junction28 as Connection288
            connect Gain25.in Junction29 as Connection289
            connect Gain27.out "Signal switch14.in1" as Connection293
            connect Gain26.in Junction31 as Connection297
            connect Gain27.in Junction31 as Connection299
            connect Sum8.out del_vfd as Connection301
            connect Sum7.out "Signal switch12.in" as Connection302
            connect "C function1.Vfd_sel" Goto14 as Connection309
            connect Constant9.out "C function1.mode_external" as Connection315
            connect Constant13.out "C function1.Mode_select_int" as Connection316
            connect From16 "Signal switch12.in2" as Connection317
            connect From18 "Signal switch13.in2" as Connection318
            connect From19 "Signal switch14.in2" as Connection319
            connect "Bus Split1.out7" Goto18 as Connection322
            connect From20 Sum14.in1 as Connection323
            connect Gain30.out Product7.in as Connection324
            connect From21 Product7.in1 as Connection325
            connect Product7.out Sum14.in as Connection326
            connect "Bus Split2.out6" Gain31.in as Connection327
            connect Gain31.out Goto16 as Connection328
            connect Gain28.out "Signal switch15.in1" as Connection331
            connect Gain14.in Junction33 as Connection332
            connect Junction33 Junction16 as Connection333
            connect Gain28.in Junction33 as Connection334
            connect Gain29.out "Signal switch16.in1" as Connection335
            connect From23 "Signal switch16.in2" as Connection336
            connect Junction16 Junction34 as Connection340
            connect Junction34 Gain13.in as Connection341
            connect Gain29.in Junction34 as Connection342
            connect From24 "Signal switch17.in2" as Connection343
            connect "Bus Split2.out7" Limit4.in as Connection351
            connect Limit4.out Goto17 as Connection352
            connect Gain32.out "C function1.Mode_select_ext" as Connection368
            connect Constant14.out Goto19 as Connection374
            connect Junction13 Constant4.out as Connection382
            connect "Signal switch17.in" Sum9.out as Connection397
            connect "C function1.Tm_sel" Goto15 as Connection399
            connect Sum14.out "Signal switch17.in1" as Connection409
            connect Sum11.out "Signal switch12.in1" as Connection414
            connect Goto12 "Bus Split2.out5" as Connection426
            connect Goto13 Gain33.out as Connection427
            connect Gain33.in Junction23 as Connection428
            connect Gain21.in Gain9.out as Connection429
            connect P_gen.in Junction36 as Connection430
            connect Junction36 Gain21.out as Connection431
            connect Goto5 Junction36 as Connection432
            connect Gain22.in Gain10.out as Connection433
            connect Gain22.out Junction37 as Connection434
            connect Junction37 Q_gen.in as Connection435
            connect Goto6 Junction37 as Connection436
            connect Goto10 "Bus Split2.out3" as Connection437
            connect Goto11 "Bus Split2.out4" as Connection438
            connect Junction28 Junction31 as Connection439
            connect Termination66.in "abc to dq2.zero_axis" as Connection440
            connect Termination67.in "abc to dq1.zero_axis" as Connection441
            connect "Signal switch15.in2" From17 as Connection442
            connect Termination68.in "Bus Split1.out6" as Connection443
            connect Product5.out Sum13.in as Connection444
            connect From73 "abc to dq1.va" as Connection445
            connect From74 "abc to dq1.vb" as Connection446
            connect From75 "abc to dq1.vc" as Connection447
            connect From70 "abc to dq2.va" as Connection448
            connect From71 "abc to dq2.vb" as Connection449
            connect From72 "abc to dq2.vc" as Connection450
            connect Goto20 "Bus Split1.out" as Connection451
            connect Goto21 "Bus Split1.out1" as Connection452
            connect Goto22 "Bus Split1.out2" as Connection453
            connect Goto23 "Bus Split1.out3" as Connection454
            connect Goto24 "Bus Split1.out4" as Connection455
            connect Goto25 "Bus Split1.out5" as Connection456
            connect From76 Junction38 as Connection459
            connect Junction38 Product5.in as Connection460
            connect Product5.in1 Junction38 as Connection461
            connect From77 Junction39 as Connection464
            connect Junction39 Product6.in as Connection465
            connect Product6.in1 Junction39 as Connection466
            connect From78 Product1.in as Connection468
            connect From79 Product3.in as Connection469
            connect From80 Product2.in as Connection471
            connect From81 Product4.in as Connection472
            connect From82 Product1.in1 as Connection474
            connect From83 Product2.in1 as Connection476
            connect From84 Product4.in1 as Connection477
            connect From85 Product3.in1 as Connection478
            connect Goto26 "abc to dq1.d_axis" as Connection479
            connect Goto27 "abc to dq1.q_axis" as Connection480
            connect Goto28 "abc to dq2.q_axis" as Connection481
            connect Goto29 "abc to dq2.d_axis" as Connection482
            connect Goto30 "Bus Split2.out8" as Connection483
            connect From87 "Signal switch19.in2" as Connection491
            connect From88 Sum15.in1 as Connection492
            connect Sum15.in From89 as connQ1
            connect Sum15.out "Signal switch18.in" as Connection493
            connect From90 Sum16.in1 as Connection498
            connect Sum16.in From91 as connP1
            connect Sum16.out "Signal switch19.in" as Connection499
            connect From92 "Signal switch20.in2" as Connection500
            connect Gain24.out Junction40 as Connection502
            connect Junction40 "Signal switch13.in" as Connection503
            connect "Signal switch20.in" Junction40 as Connection504
            [
                breakpoints = 8544, 7296; 8464, 7296
            ]
            connect From93 "Signal switch21.in2" as Connection506
            connect Gain26.out Junction41 as Connection508
            connect Junction41 "Signal switch14.in" as Connection509
            connect "Signal switch21.in" Junction41 as Connection510
            connect From94 "Signal switch22.in2" as Connection512
            connect From95 "Signal switch23.in2" as Connection513
            connect Gain14.out Junction42 as Connection515
            connect Junction42 "Signal switch15.in" as Connection516
            connect "Signal switch22.in" Junction42 as Connection517
            connect "Signal switch16.in" Junction43 as Connection521
            connect Junction43 Gain13.out as Connection522
            connect "Signal switch23.in" Junction43 as Connection523
            connect Goto31 "Bus Split2.out9" as Connection524
            connect Goto32 "Bus Split2.out10" as Connection525
            connect From86 Junction44 as Connection526
            connect Junction44 "Signal switch18.in2" as Connection527
            connect gents.in Junction44 as Connection528
            connect "Signal switch17.out" "Signal switch19.in1" as Connection547
            [
                breakpoints = 8168, 7704; 8168, 7704; 8168, 7960; 8152, 7960; 8088, 7960
            ]
            connect "Signal switch5.in" "Signal switch19.out" as Connection548
            connect "Signal switch18.in1" "Signal switch12.out" as Connection549
            [
                breakpoints = 8056, 7440
            ]
            connect "Signal switch3.in" "Signal switch18.out" as Connection550
            connect "Signal switch13.out" "Signal switch20.in1" as Connection551
            [
                breakpoints = 8568, 7352
            ]
            connect "Signal switch20.out" Sum8.in as Connection552
            connect "Signal switch21.in1" "Signal switch14.out" as Connection553
            [
                breakpoints = 8576, 7488
            ]
            connect "Signal switch21.out" Integrator3.in as Connection554
            connect "Signal switch15.out" "Signal switch22.in1" as Connection555
            [
                breakpoints = 8536, 7688
            ]
            connect Sum10.in "Signal switch22.out" as Connection556
            connect "Signal switch16.out" "Signal switch23.in1" as Connection557
            [
                breakpoints = 8576, 7800
            ]
            connect "Signal switch23.out" Integrator4.in as Connection558
            connect Gain32.in From25 as connmode
            connect Sum9.in From11 as connP
            connect Sum7.in From10 as connQ
            connect Sum11.in From15 as connV
            connect Gain30.in From22 as connw

            Q_ki = ".05"
            Q_kp = ".01"
            execution_rate = "100e-6"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Generator Control module.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This module is used in conjuction with the Generator component (with enabled initializtion) to implement multiple modes of steady state operations.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">When external control mode is selected, the operation mode can be selected and changed in real time using the following inputs to \"Generator control mode\" input:</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0 = PV operation mode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1 = PQ operation mode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2 = Grid forming operation mode</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Active power P (in Watts), Reactive power Q (In VARs), Line RMS voltage (in Volts), and Line frequency (in Hz) can be controlled individually depending on mode of operation. Controller coefficients for above variables can be set in \"Controller settings\" tab.</p></body></html>"

                ctrl_mode_str {
                    label = "Generator control mode"
                    widget = combo
                    combo_values = "PQ", "PV", "Grid Forming", "External Control"
                    type = string
                    default_value = "PQ"
                    group = "Control mode:1"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External Control":
                            mode_ext = mdl.get_item("mode_set", parent=comp_handle, item_type=ITEM_PORT)
                            mode_inp = mdl.get_item("Gain32", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_mode = mdl.get_item("Termination5", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mode_int = mdl.get_item("From25", parent=comp_handle, item_type=ITEM_TAG)
                            conn_mode_int = mdl.get_item("connmode", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_mode_int:
                                mdl.delete_item(conn_mode_int)

                            if not term_mode:
                                term_mode = mdl.create_component("Termination", parent=comp_handle,
                                                                name="Termination5", position=(6909,7906),
                                                                rotation='right', hide_name=True)
                            mdl.create_connection(mdl.term(term_mode, "in"), mode_int)
                            if not mode_ext:
                                mode_ext = mdl.create_port(parent=comp_handle, name="mode_set", direction="in", kind = "sp",
                                                    terminal_position=("left", 5),
                                                    position=(6998, 7846))
                                mdl.create_connection(mdl.term(mode_inp, "in"), mode_ext)
                        else:
                            mode_ext = mdl.get_item("mode_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_mode = mdl.get_item("Termination5", parent=comp_handle, item_type=ITEM_COMPONENT)
                            mode_int = mdl.get_item("From25", parent=comp_handle, item_type=ITEM_TAG)
                            mode_inp = mdl.get_item("Gain32", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_mode_int = mdl.get_item("connmode", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if mode_ext:
                                mdl.delete_item(mode_ext)
                            if term_mode:
                                mdl.delete_item(term_mode)
                            if conn_mode_int:
                                mdl.delete_item(conn_mode_int)
                            mdl.create_connection(mdl.term(mode_inp, "in"), mode_int, name="connmode")

                        gen_control_mode_value_edited(mdl, container_handle, new_value)
                    ENDCODE

                    CODE property_value_edited
                        gen_control_mode_value_edited(mdl, container_handle, new_value)
                    ENDCODE
                }

                ctrl_mode_int {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                ext_mode {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                P_ref_str {
                    label = "Active power reference (kW)"
                    widget = combo
                    combo_values = "External input", "Generator nominal"
                    type = string
                    default_value = "Generator nominal"
                    group = "Control mode"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                            P_inp = mdl.get_item("Sum9", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                            P_int = mdl.get_item("From11", parent=comp_handle, item_type=ITEM_TAG)
                            conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_P_int:
                                mdl.delete_item(conn_P_int)

                            if not term_P:
                                term_P = mdl.create_component("Termination", parent=comp_handle,
                                                              name="Termination1", position=(7706,7620),
                                                              rotation='left', hide_name=True)
                                mdl.create_connection(mdl.term(term_P, "in"), P_int)
                            if not P_ext:
                                P_ext = mdl.create_port(parent=comp_handle, name="P_set", direction="in", kind = "sp",
                                                    terminal_position=("left", 1),
                                                    position=(7909, 7640))
                                mdl.create_connection(mdl.term(P_inp, "in"), P_ext)
                        elif new_value == "Generator nominal":
                            P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                            P_int = mdl.get_item("From11", parent=comp_handle, item_type=ITEM_TAG)
                            P_inp = mdl.get_item("Sum9", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if P_ext:
                                mdl.delete_item(P_ext)
                            if term_P:
                                mdl.delete_item(term_P)
                            if conn_P_int:
                                mdl.delete_item(conn_P_int)
                            mdl.create_connection(mdl.term(P_inp, "in"), P_int, name="connP")
                    ENDCODE
                }

                P_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Q_ref_str {
                    label = "Reactive power reference (kVAR)"
                    widget = combo
                    combo_values = "External input", "Generator nominal"
                    type = string
                    default_value = "Generator nominal"
                    group = "Control mode"
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                            Q_inp = mdl.get_item("Sum7", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Q_int = mdl.get_item("From10", parent=comp_handle, item_type=ITEM_TAG)
                            conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_Q_int:
                                mdl.delete_item(conn_Q_int)

                            if not term_Q:
                                term_Q = mdl.create_component("Termination", parent=comp_handle,
                                                            name="Termination2", position=(7709, 7343),
                                                            rotation='left', hide_name=True)
                                mdl.create_connection(mdl.term(term_Q, "in"), Q_int)
                            if not Q_ext:
                                Q_ext = mdl.create_port(parent=comp_handle, name="Q_set", direction="in", kind = "sp",
                                                    terminal_position=("left", 2),
                                                    position=(7808, 7390))
                                mdl.create_connection(mdl.term(Q_inp, "in"), Q_ext)
                        elif new_value == "Generator nominal":
                            Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                            Q_int = mdl.get_item("From10", parent=comp_handle, item_type=ITEM_TAG)
                            Q_inp = mdl.get_item("Sum7", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if Q_ext:
                                mdl.delete_item(Q_ext)
                            if term_Q:
                                mdl.delete_item(term_Q)
                            if conn_Q_int:
                                mdl.delete_item(conn_Q_int)
                            mdl.create_connection(mdl.term(Q_inp, "in"), Q_int, name="connQ")
                    ENDCODE
                }

                Q_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                V_ref_str {
                    label = "Line voltage reference (kV)"
                    widget = combo
                    combo_values = "External input", "Generator nominal"
                    type = string
                    default_value = "Generator nominal"
                    group = "Control mode"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            V_ext = mdl.get_item("V_set", parent=comp_handle, item_type=ITEM_PORT)
                            V_inp = mdl.get_item("Sum11", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_V = mdl.get_item("Termination3", parent=comp_handle, item_type=ITEM_COMPONENT)
                            V_int = mdl.get_item("From15", parent=comp_handle, item_type=ITEM_TAG)
                            conn_V_int = mdl.get_item("connV", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_V_int:
                                mdl.delete_item(conn_V_int)

                            if not term_V:
                                term_V = mdl.create_component("Termination", parent=comp_handle,
                                                              name="Termination3", position=(7706, 7560),
                                                              rotation='right', hide_name=True)
                                mdl.create_connection(mdl.term(term_V, "in"), V_int)
                            if not V_ext:
                                V_ext = mdl.create_port(parent=comp_handle, name="V_set", direction="in", kind = "sp",
                                                    terminal_position=("left", 3),
                                                    position=(7802, 7489))
                                mdl.create_connection(mdl.term(V_inp, "in"), V_ext)
                        elif new_value == "Generator nominal":
                            V_ext = mdl.get_item("V_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_V = mdl.get_item("Termination3", parent=comp_handle, item_type=ITEM_COMPONENT)
                            V_int = mdl.get_item("From15", parent=comp_handle, item_type=ITEM_TAG)
                            V_inp = mdl.get_item("Sum11", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_V_int = mdl.get_item("connV", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if V_ext:
                                mdl.delete_item(V_ext)
                            if term_V:
                                mdl.delete_item(term_V)
                            if conn_V_int:
                                mdl.delete_item(conn_V_int)
                            mdl.create_connection(mdl.term(V_inp, "in"), V_int, name="connV")
                    ENDCODE
                }

                V_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                w_ref_str {
                    label = "Frequency (Hz)"
                    widget = combo
                    combo_values = "External input", "Generator nominal"
                    type = string
                    default_value = "Generator nominal"
                    group = "Control mode"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                        comp_handle = mdl.get_sub_level_handle(container_handle)

                        if new_value == "External input":
                            w_ext = mdl.get_item("w_set", parent=comp_handle, item_type=ITEM_PORT)
                            w_inp = mdl.get_item("Gain30", parent=comp_handle, item_type=ITEM_COMPONENT)
                            term_w = mdl.get_item("Termination4", parent=comp_handle, item_type=ITEM_COMPONENT)
                            w_int = mdl.get_item("From22", parent=comp_handle, item_type=ITEM_TAG)
                            conn_w_int = mdl.get_item("connw", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if conn_w_int:
                                mdl.delete_item(conn_w_int)

                            if not term_w:
                                term_w = mdl.create_component("Termination", parent=comp_handle,
                                                              name="Termination4", position=(7706,7833),
                                                              rotation='right', hide_name=True)
                                mdl.create_connection(mdl.term(term_w, "in"), w_int)
                            if not w_ext:
                                w_ext = mdl.create_port(parent=comp_handle, name="w_set", direction="in", kind = "sp",
                                                    terminal_position=("left", 4),
                                                    position=(7760, 7768))
                                mdl.create_connection(mdl.term(w_inp, "in"), w_ext)
                        elif new_value == "Generator nominal":
                            w_ext = mdl.get_item("w_set", parent=comp_handle, item_type=ITEM_PORT)
                            term_w = mdl.get_item("Termination4", parent=comp_handle, item_type=ITEM_COMPONENT)
                            w_int = mdl.get_item("From22", parent=comp_handle, item_type=ITEM_TAG)
                            w_inp = mdl.get_item("Gain30", parent=comp_handle, item_type=ITEM_COMPONENT)
                            conn_w_int = mdl.get_item("connw", parent=comp_handle, item_type=ITEM_CONNECTION)
                            if w_ext:
                                mdl.delete_item(w_ext)
                            if term_w:
                                mdl.delete_item(term_w)
                            if conn_w_int:
                                mdl.delete_item(conn_w_int)
                            mdl.create_connection(mdl.term(w_inp, "in"), w_int, name="connw")
                    ENDCODE
                }

                w_sel {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                P_kp {
                    label = "P Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Controller settings:2"
                }

                P_ki {
                    label = "P Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "2"
                    group = "Controller settings"
                }

                Q_kp {
                    label = "Q Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "0.01"
                    group = "Controller settings"
                }

                Q_ki {
                    label = "Q Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "0.05"
                    group = "Controller settings"
                }

                V_kp {
                    label = "V Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "10"
                    group = "Controller settings"
                    disabled
                }

                V_ki {
                    label = "V Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "60"
                    group = "Controller settings"
                    disabled
                }

                w_kp {
                    label = "Frequency Controller proportional gain"
                    widget = edit
                    type = generic
                    default_value = "300"
                    group = "Controller settings"
                    disabled
                }

                w_ki {
                    label = "Frequency Controller integral gain"
                    widget = edit
                    type = generic
                    default_value = "300"
                    group = "Controller settings"
                    disabled
                }

                execution_rate {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Controller settings"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE pre_compile
                    # HEADER START
                    ctrl_mode_str = mdl.get_property_value(mdl.prop(item_handle, "ctrl_mode_str"))
                    ctrl_mode_int = mdl.get_property_value(mdl.prop(item_handle, "ctrl_mode_int"))
                    ext_mode = mdl.get_property_value(mdl.prop(item_handle, "ext_mode"))
                    P_ref_str = mdl.get_property_value(mdl.prop(item_handle, "P_ref_str"))
                    P_sel = mdl.get_property_value(mdl.prop(item_handle, "P_sel"))
                    Q_ref_str = mdl.get_property_value(mdl.prop(item_handle, "Q_ref_str"))
                    Q_sel = mdl.get_property_value(mdl.prop(item_handle, "Q_sel"))
                    V_ref_str = mdl.get_property_value(mdl.prop(item_handle, "V_ref_str"))
                    V_sel = mdl.get_property_value(mdl.prop(item_handle, "V_sel"))
                    w_ref_str = mdl.get_property_value(mdl.prop(item_handle, "w_ref_str"))
                    w_sel = mdl.get_property_value(mdl.prop(item_handle, "w_sel"))
                    P_kp = mdl.get_property_value(mdl.prop(item_handle, "P_kp"))
                    P_ki = mdl.get_property_value(mdl.prop(item_handle, "P_ki"))
                    Q_kp = mdl.get_property_value(mdl.prop(item_handle, "Q_kp"))
                    Q_ki = mdl.get_property_value(mdl.prop(item_handle, "Q_ki"))
                    V_kp = mdl.get_property_value(mdl.prop(item_handle, "V_kp"))
                    V_ki = mdl.get_property_value(mdl.prop(item_handle, "V_ki"))
                    w_kp = mdl.get_property_value(mdl.prop(item_handle, "w_kp"))
                    w_ki = mdl.get_property_value(mdl.prop(item_handle, "w_ki"))
                    execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                    # HEADER STOP
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                    import numpy
                    import math

                    if ctrl_mode_str == "PQ":
                        ctrl_mode_int = 1
                        ext_mode = 0
                    elif ctrl_mode_str == "PV":
                        ctrl_mode_int = 0
                        ext_mode = 0
                    elif ctrl_mode_str == "Grid Forming":
                        ctrl_mode_int = 2
                        ext_mode = 0
                    elif ctrl_mode_str == "External Control":
                        ctrl_mode_int = -1
                        ext_mode = 1
                    else:
                        ctrl_mode_int = 0
                        ext_mode = 0

                    mdl.set_property_value(mdl.prop(item_handle, "P_kp"), P_kp)
                    mdl.set_property_value(mdl.prop(item_handle, "P_ki"), P_ki)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_kp"), Q_kp)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_ki"), Q_ki)
                    mdl.set_property_value(mdl.prop(item_handle, "V_kp"), V_kp)
                    mdl.set_property_value(mdl.prop(item_handle, "V_ki"), V_ki)
                    mdl.set_property_value(mdl.prop(item_handle, "P_sel"), P_sel)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_sel"), Q_sel)
                    mdl.set_property_value(mdl.prop(item_handle, "V_sel"), V_sel)
                    mdl.set_property_value(mdl.prop(item_handle, "ctrl_mode_int"), ctrl_mode_int)
                    mdl.set_property_value(mdl.prop(item_handle, "ext_mode"), ext_mode)
                ENDCODE

                CODE init
                    def gen_control_mode_value_edited(mdl, container_handle, new_value):
                        if new_value == "PQ":
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'V_ref_str'), "Generator nominal")
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'w_ref_str'), "Generator nominal")
                            mdl.disable_property(mdl.prop(container_handle, "V_ref_str"))
                            mdl.disable_property(mdl.prop(container_handle, "V_kp"))
                            mdl.disable_property(mdl.prop(container_handle, "V_ki"))
                            mdl.disable_property(mdl.prop(container_handle, "w_ref_str"))
                            mdl.disable_property(mdl.prop(container_handle, "w_kp"))
                            mdl.disable_property(mdl.prop(container_handle, "w_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "P_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "P_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "P_ki"))
                        elif new_value == "PV":
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'Q_ref_str'), "Generator nominal")
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'w_ref_str'), "Generator nominal")
                            mdl.disable_property(mdl.prop(container_handle, "Q_ref_str"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_kp"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_ki"))
                            mdl.disable_property(mdl.prop(container_handle, "w_ref_str"))
                            mdl.disable_property(mdl.prop(container_handle, "w_kp"))
                            mdl.disable_property(mdl.prop(container_handle, "w_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "V_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "V_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "V_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "P_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "P_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "P_ki"))
                        elif new_value == "Grid Forming":
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'P_ref_str'), "Generator nominal")
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'Q_ref_str'), "Generator nominal")
                            mdl.disable_property(mdl.prop(container_handle, "P_ref_str"))
                            mdl.disable_property(mdl.prop(container_handle, "P_kp"))
                            mdl.disable_property(mdl.prop(container_handle, "P_ki"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_ref_str"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_kp"))
                            mdl.disable_property(mdl.prop(container_handle, "Q_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "V_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "V_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "V_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "w_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "w_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "w_ki"))
                        elif new_value == "External Control":
                            mdl.enable_property(mdl.prop(container_handle, "P_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "P_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "P_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "Q_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "V_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "V_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "V_ki"))
                            mdl.enable_property(mdl.prop(container_handle, "w_ref_str"))
                            mdl.enable_property(mdl.prop(container_handle, "w_kp"))
                            mdl.enable_property(mdl.prop(container_handle, "w_ki"))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'P_ref_str'), "External input")
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'Q_ref_str'), "External input")
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'V_ref_str'), "External input")
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'w_ref_str'), "External input")

                ENDCODE
            }
        }
        [
            position = 5168, 4064
            size = 120, 96
        ]

        component Subsystem Generator {
            layout = static
            label = "Gen"
            component gen_c_function "C function2" {
                global_variables = "real thet_r_mem;real wr_k1;real wr_k2;real wm_mem;real psifd_mem;real psikq_mem;real wr_est;real Te_mem;real psikq2_mem;real psikd_mem;real ppsikq;real ppsikq2;real ppsikd;real ppsifd;"
                init_fnc = "/*Begin code section*/
psifd_mem = 0.0;
psikq_mem = 0.0;
psikq2_mem = 0.0;
psikd_mem = 0.0;
wr_k1 = 0.0;
wr_k2 = 0.0;
wm_mem = 0.0;
thet_r_mem = angle_in-0;
wr_est = 0.0;
Te_mem = 0.0;
/*End code section*/"
                input_terminals = "real dt;real vfd;real isq;real isd;real Tm;inherit Tm_mem;inherit M_inp;inherit Wm_inp;inherit pisq;inherit eq_init;inherit ed_init;inherit V2S;inherit S2M;inherit angle_in;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True;True;True;True;True;True;True;True;True;True;True;True"
                input_terminals_show_labels = "True;True;True;True;True;True;True;True;True;True;True;True;True;True"
                output_fnc = "/*Begin code section*/
if (V2S == 0) {
    psikq = -ed_init*ws_inv;
    psikq2 = -ed_init*ws_inv;
    psikd = eq_init*ws_inv;
    psifd = eq_init*ws_inv + Llfd*(eq_init*ws_inv - isd*Lmd)/Lmd;
}
else {
    psikq = dA11*psikq_mem + dA12*psikq2_mem + dA13*psikd_mem + dA14*psifd_mem + dB11*isq + dB12*isd + dB13*vfd;
    psikq2 = dA21*psikq_mem + dA22*psikq2_mem + dA23*psikd_mem + dA24*psifd_mem + dB21*isq + dB22*isd + dB23*vfd;
    psikd = dA31*psikq_mem + dA32*psikq2_mem + dA33*psikd_mem + dA34*psifd_mem + dB31*isq + dB32*isd + dB33*vfd;
    psifd = dA41*psikq_mem + dA42*psikq2_mem + dA43*psikd_mem + dA44*psifd_mem + dB41*isq + dB42*isd + dB43*vfd;
}

psimd = Lmzd*(isd+psikd/Llkd+psifd/Llfd);
psimq = Lmzq*(isq+psikq/Llkq+psikq2/Llkq2);

ppsikq = (-rkq/Llkq)*(psikq - psimq);
ppsikq2 = (-rkq2/Llkq2)*(psikq2 - psimq);
ppsikd = (-rkd/Llkd)*(psikd - psimd);
ppsifd = (-rfd/Llfd)*(psifd - psimd)+vfd;

wr_est = 2*wr_k1 - 1*wr_k2;

if (V2S == 0) {
    eq = wr_est*psimd - wr_est*Lmzd*isd;
    ed = -wr_est*psimq + wr_est*Lmzd*isq;
}
else {
    eq = wr_est*psimd - wr_est*Lmzd*isd + (Lmzq-Lmzd)*pisq + Lmzq*ppsikq/Llkq + Lmzq*ppsikq2/Llkq2;
    ed = -wr_est*psimq + wr_est*Lmzd*isq + Lmzd*ppsikd/Llkd + Lmzd*ppsifd/Llfd;
}


Te = (1.5*PP)*(isq*psimd-isd*psimq);

if (S2M == 0) {
    wm = Wm_inp;
}
else {
    if (M_inp == 0) {
        wm = wm_mem + (dt/2.0/J)*(Te-Tm + Te_mem - Tm_mem);
    }
    else {
        wm = Wm_inp;
    }
}

wr = PP*wm;

thet_r = 0 + (dt/2)*(wr+wr_k1)+thet_r_mem;
if (thet_r > 2.0*3.1415926535897932384626433832795) {
    thet_r -= 2.0*3.1415926535897932384626433832795;
}

psifd_mem = psifd;
psikq_mem = psikq;
psikd_mem = psikd;
psikq2_mem = psikq2;
wm_mem = wm;
wr_k2 = wr_k1;
wr_k1 = wr;
thet_r_mem = thet_r;
Te_mem = Te;
/*End code section*/"
                output_terminals = "real psifd;real psikq;real psimd;real psimq;real ed;real eq;real Te;real wr;real thet_r;real wm;real psikq2;real psikd;"
                output_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                output_terminals_feedthrough = "True;True;True;True;True;True;True;True;True;True;True;True"
                output_terminals_show_labels = "True;True;True;True;True;True;True;True;True;True;True;True"
                parameters = "real dA11;real dA12;real dA13;real dA14;real dB11;real dB12;real dB13;real Llfd;real Lmd;real J;real PP;real rs;real rfd;real rkd;real rkq;real Llkd;real Llkq;real Lls;real Lmq;real ws;real dA21;real dA22;real dA23;real dA24;real dA31;real dA32;real dA33;real dA34;real dA41;real dA42;real dA43;real dA44;real dB21;real dB22;real dB23;real dB31;real dB32;real dB33;real dB41;real dB42;real dB43;real Lmzd;real Lmzq;real rkq2;real Llkq2;real ws_inv;"
            }
            [
                position = 5032, 7624
                size = 240, 472
            ]

            component pas_resistor R1 {
                resistance = "rs"
            }
            [
                position = 5832, 8280
                hide_name = True
            ]

            component pas_inductor L2 {
                inductance = "Lls+Lmzd"
            }
            [
                position = 5736, 8376
                hide_name = True
            ]

            component pas_inductor L1 {
                inductance = "Lls+Lmzd"
            }
            [
                position = 5736, 8280
                hide_name = True
            ]

            component "core/Voltage Measurement" Vc {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 5664, 8592
                rotation = right
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vb {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 5584, 8592
                rotation = right
                size = 64, 32
            ]

            component pas_resistor R2 {
                resistance = "rs"
            }
            [
                position = 5832, 8376
                hide_name = True
            ]

            component "core/Signal Controlled Voltage Source" ec {
            }
            [
                position = 5928, 8472
                size = 64, 32
            ]

            component "core/Voltage Measurement" Va {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 5496, 8592
                rotation = right
                size = 64, 32
            ]

            component pas_resistor R3 {
                resistance = "rs"
            }
            [
                position = 5832, 8472
                hide_name = True
            ]

            component pas_inductor L3 {
                inductance = "Lls+Lmzd"
            }
            [
                position = 5736, 8472
                hide_name = True
            ]

            component "core/Signal Controlled Voltage Source" ea {
            }
            [
                position = 5928, 8280
                size = 64, 32
            ]

            component "core/Signal Controlled Voltage Source" eb {
            }
            [
                position = 5928, 8376
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vab {
                execution_rate = "Ts"
            }
            [
                position = 5392, 8328
                rotation = right
                size = 64, 32
            ]

            component "core/Voltage Measurement" Vbc {
                execution_rate = "Ts"
            }
            [
                position = 5392, 8424
                rotation = right
                size = 64, 32
            ]

            component "core/Current Measurement" Ia {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 5256, 8280
                size = 64, 32
            ]

            component "core/Current Measurement" Ib {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 5256, 8376
                size = 64, 32
            ]

            component "core/Current Measurement" Ic {
                execution_rate = "Ts"
                sig_output = "True"
            }
            [
                position = 5256, 8472
                size = 64, 32
            ]

            component src_constant Constant3 {
                execution_rate = "Ts"
                value = "0.0"
            }
            [
                position = 6104, 7440
                hide_name = True
            ]

            component "core/dq to abc" "dq to abc1" {
                execution_rate = "inherit"
            }
            [
                position = 6264, 7432
                hide_name = True
                size = 48, 80
            ]

            component "core/abc to dq" "abc to dq1" {
            }
            [
                position = 6264, 7544
                hide_name = True
                size = 48, 80
            ]

            component src_constant Constant4 {
                execution_rate = "Ts"
                value = "Ts"
            }
            [
                position = 4816, 7416
                hide_name = True
            ]

            component tm_delay "Unit Delay2" {
            }
            [
                position = 4840, 7576
                hide_name = True
            ]

            component src_constant Constant5 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 4800, 7608
                hide_name = True
            ]

            component gen_gain Gain1 {
                gain = "3"
            }
            [
                position = 5560, 7920
                hide_name = True
            ]

            component src_constant Constant6 {
                execution_rate = "Ts"
                value = "0.5/Ts"
            }
            [
                position = 5704, 8120
                hide_name = True
            ]

            component tm_delay "Unit Delay3" {
            }
            [
                position = 5560, 7960
                hide_name = True
            ]

            component gen_gain Gain2 {
                gain = "4"
            }
            [
                position = 5648, 7960
                hide_name = True
            ]

            component gen_sum Sum1 {
                signs = "+-+"
            }
            [
                position = 5704, 8048
                rotation = right
                hide_name = True
            ]

            component gen_product Product1 {
            }
            [
                position = 5792, 8088
                hide_name = True
            ]

            component tm_delay "Unit Delay4" {
            }
            [
                position = 5648, 8000
                hide_name = True
            ]

            component tm_delay "Unit Delay8" {
            }
            [
                position = 6336, 7520
                hide_name = True
            ]

            component tm_delay "Unit Delay9" {
            }
            [
                position = 6392, 7544
                hide_name = True
            ]

            component gen_probe Tm {
                signal_type = "torque"
                streaming_en = "False"
            }
            [
                position = 4744, 7584
                rotation = right
            ]

            component gen_probe Te {
                signal_type = "torque"
                streaming_en = "False"
            }
            [
                position = 5760, 7880
            ]

            component gen_probe vfd_p {
                signal_type = "voltage"
                streaming_en = "False"
            }
            [
                position = 6008, 7592
            ]

            component src_constant Constant13 {
                execution_rate = "Ts"
                value = "ws/PP"
            }
            [
                position = 4760, 7640
                hide_name = True
            ]

            component gen_probe psifd {
                signal_type = "flux"
                streaming_en = "False"
            }
            [
                position = 5256, 7448
            ]

            component gen_probe Tm_p {
                signal_type = "torque"
                streaming_en = "False"
            }
            [
                position = 5928, 7880
            ]

            component gen_gain Gain3 {
                gain = "ws_inv"
            }
            [
                position = 5520, 7648
                hide_name = True
            ]

            component gen_gain Gain4 {
                gain = "Lmd"
            }
            [
                position = 5520, 7688
                hide_name = True
            ]

            component gen_sum Sum2 {
                signs = "+-"
            }
            [
                position = 5600, 7656
                hide_name = True
            ]

            component gen_gain Gain5 {
                gain = "1/Lmd"
            }
            [
                position = 5680, 7656
                hide_name = True
            ]

            component gen_probe w_mech {
                signal_type = "angular speed"
                streaming_en = "False"
            }
            [
                position = 6704, 7928
                rotation = down
            ]

            component gen_probe psimd {
                signal_type = "flux"
                streaming_en = "False"
            }
            [
                position = 5344, 7512
            ]

            component gen_gain Gain6 {
                gain = "rfd"
            }
            [
                position = 5744, 7656
                hide_name = True
            ]

            component src_constant Constant14 {
                execution_rate = "Ts"
                value = "0.0"
            }
            [
                position = 4248, 7664
                hide_name = True
            ]

            component sys_signal_switch "Signal switch1" {
                threshold = "0.5"
            }
            [
                position = 5880, 7640
                hide_name = True
            ]

            component gen_sum Sum3 {
                signs = "++"
            }
            [
                position = 4584, 7432
                hide_name = True
                scale = 1, -1
            ]

            component gen_limiter Limit1 {
                lower_limit = "0"
            }
            [
                position = 5808, 7656
                hide_name = True
            ]

            component tm_delay "Unit Delay10" {
            }
            [
                position = 5752, 7568
                rotation = down
                hide_name = True
            ]

            component gen_z_domain_transfer "Discrete Transfer Function1" {
                a_coeff = "[0.1,1]"
                domain = "S-domain"
                method = "Euler"
            }
            [
                position = 5864, 8088
                hide_name = True
            ]

            component gen_sum Sum4 {
                signs = "++"
            }
            [
                position = 4584, 7528
                hide_name = True
                scale = 1, -1
            ]

            component sys_signal_switch "Signal switch2" {
                threshold = "0.5"
            }
            [
                position = 5760, 7824
                hide_name = True
            ]

            component tm_delay "Unit Delay11" {
            }
            [
                position = 5648, 7752
                rotation = down
                hide_name = True
            ]

            component tm_delay "Unit Delay13" {
            }
            [
                position = 5840, 7824
                hide_name = True
            ]

            component gen_probe psimq {
                signal_type = "flux"
                streaming_en = "False"
            }
            [
                position = 5288, 7544
            ]

            component sys_signal_switch "Signal switch3" {
                threshold = "0.5"
            }
            [
                position = 4736, 7448
                hide_name = True
            ]

            component src_constant Constant18 {
                execution_rate = "Ts"
                value = "Init_switch"
            }
            [
                position = 4616, 7376
                hide_name = True
            ]

            component sys_signal_switch "Signal switch4" {
                threshold = "0.5"
            }
            [
                position = 4672, 7544
                hide_name = True
            ]

            component gen_comparator Comparator1 {
            }
            [
                position = 5616, 7456
                hide_name = True
            ]

            component gen_comparator Comparator2 {
            }
            [
                position = 5616, 7520
                hide_name = True
            ]

            component src_constant Constant19 {
                execution_rate = "Ts"
                value = "thet_ph_init"
            }
            [
                position = 4152, 7584
                hide_name = True
            ]

            component src_constant Constant20 {
                execution_rate = "Ts"
                value = "V_ph_init"
            }
            [
                position = 4152, 7624
                hide_name = True
            ]

            component gen_gain Gain7 {
                gain = "1414.2135"
            }
            [
                position = 4224, 7624
                hide_name = True
            ]

            component src_clock Clock1 {
                execution_rate = "Ts"
            }
            [
                position = 5560, 7408
                rotation = right
                hide_name = True
            ]

            component src_constant Constant21 {
                execution_rate = "Ts"
                value = "V2M_t"
            }
            [
                position = 5520, 7464
                hide_name = True
            ]

            component src_constant Constant23 {
                execution_rate = "Ts"
                value = "Mech_En"
            }
            [
                position = 5520, 7528
                hide_name = True
            ]

            component "core/Rate Transition" "Rate Transition1" {
                execution_rate = "Ts"
            }
            [
                position = 4240, 7712
                hide_name = True
                size = 32, 32
            ]

            component "core/Rate Transition" "Rate Transition2" {
                execution_rate = "Ts"
            }
            [
                position = 4240, 7768
                hide_name = True
                size = 32, 32
            ]

            component src_constant Constant24 {
                execution_rate = "Ts"
                value = "Init_switch"
            }
            [
                position = 4472, 7872
                hide_name = True
            ]

            component sys_signal_switch "Signal switch5" {
                threshold = "0.5"
            }
            [
                position = 4632, 7808
                rotation = left
                hide_name = True
            ]

            component sys_signal_switch "Signal switch6" {
                threshold = "0.5"
            }
            [
                position = 4752, 7872
                rotation = left
                hide_name = True
            ]

            component src_constant Constant25 {
                execution_rate = "Ts"
            }
            [
                position = 4608, 7936
                hide_name = True
            ]

            component "core/Voltage Measurement" Vca {
                execution_rate = "Ts"
            }
            [
                position = 5448, 8424
                rotation = left
                size = 64, 32
            ]

            component gen_bus_join "Bus Join3" {
                inputs = "8"
            }
            [
                position = 6800, 7992
                rotation = right
            ]

            component src_constant Constant26 {
                execution_rate = "Ts"
                value = "Init_switch"
            }
            [
                position = 6696, 8200
                hide_name = True
            ]

            component gen_bus_join "Bus Join4" {
                inputs = "11"
            }
            [
                position = 6768, 8568
                rotation = right
                hide_name = True
            ]

            component src_constant Constant27 {
                execution_rate = "Ts"
                value = "kw"
            }
            [
                position = 6656, 8224
                hide_name = True
            ]

            component src_constant Constant28 {
                execution_rate = "Ts"
                value = "kvar"
            }
            [
                position = 6696, 8248
                hide_name = True
            ]

            component src_constant Constant29 {
                execution_rate = "Ts"
                value = "kv"
            }
            [
                position = 6656, 8272
                hide_name = True
            ]

            component src_constant Constant30 {
                execution_rate = "Ts"
                value = "PP"
            }
            [
                position = 6656, 8320
                hide_name = True
            ]

            component src_constant Constant31 {
                execution_rate = "Ts"
                value = "ws"
            }
            [
                position = 6696, 8296
                hide_name = True
            ]

            component gen_terminator Termination60 {
            }
            [
                position = 5280, 7768
                hide_name = True
            ]

            component gen_terminator Termination61 {
            }
            [
                position = 5216, 7800
                hide_name = True
            ]

            component gen_terminator Termination62 {
            }
            [
                position = 5280, 7672
                hide_name = True
            ]

            component gen_terminator Termination63 {
            }
            [
                position = 6344, 7592
                rotation = right
                hide_name = True
            ]

            component gen_terminator Termination64 {
            }
            [
                position = 5216, 7480
                hide_name = True
            ]

            component Subsystem TS_module {
                layout = dynamic
                component src_clock Clock1 {
                    execution_rate = "Texec"
                }
                [
                    position = 6824, 8000
                ]

                component gen_probe d_rel {
                    signal_name = "Delay release"
                }
                [
                    position = 6928, 7936
                ]

                component gen_comparator Comparator1 {
                }
                [
                    position = 6928, 8000
                ]

                component src_constant Constant1 {
                    execution_rate = "Texec"
                    value = "Tdel"
                }
                [
                    position = 6824, 8064
                ]

                component sys_signal_switch "Signal switch1" {
                    threshold = "0.5"
                }
                [
                    position = 7008, 8144
                ]

                component src_constant Constant3 {
                    execution_rate = "Texec"
                }
                [
                    position = 6840, 8128
                ]

                component gen_integrator Integrator1 {
                    show_reset = "rising"
                    show_state = "True"
                }
                [
                    position = 7352, 8152
                ]

                component src_constant Constant4 {
                    execution_rate = "Texec"
                    value = "Tmax"
                }
                [
                    position = 7152, 8304
                ]

                component gen_comparator Comparator2 {
                }
                [
                    position = 7240, 8296
                ]

                component lut_1d "1D look-up table1" {
                    in_vec_x = "T_vecP"
                    out_vec_f_x = "P_vec1"
                }
                [
                    position = 7608, 8008
                ]

                component lut_1d "1D look-up table2" {
                    in_vec_x = "T_vecQ"
                    out_vec_f_x = "Q_vec1"
                }
                [
                    position = 7608, 8192
                ]

                component src_constant Constant5 {
                    execution_rate = "Texec"
                    value = "0"
                }
                [
                    position = 6840, 8176
                ]

                component sys_signal_switch "Signal switch2" {
                    threshold = "0.5"
                }
                [
                    position = 7176, 8144
                ]

                component src_constant Constant6 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7112, 8048
                ]

                component sys_signal_switch "Signal switch3" {
                    threshold = "0.5"
                }
                [
                    position = 7456, 8160
                ]

                component src_constant Constant7 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7400, 8064
                ]

                component gen_gain Gain1 {
                }
                [
                    position = 7384, 8352
                ]

                port P {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8008
                ]

                port Q {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8192
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7240, 8440
                ]

                junction Junction3 sp
                [
                    position = 6952, 8176
                ]

                junction Junction4 sp
                [
                    position = 7496, 8160
                ]

                connect Clock1.out Comparator1.in1 as Connection1
                connect Constant1.out Comparator1.in2 as Connection2
                connect d_rel.in Comparator1.out as Connection530
                connect "Signal switch1.in2" Comparator1.out as Connection3
                connect Constant3.out "Signal switch1.in" as Connection5
                connect Constant4.out Comparator2.in2 as Connection7
                connect Comparator2.out Integrator1.reset as Connection8
                connect Comparator2.in1 Integrator1.state_port as Connection9
                [
                    position = 0, 0
                    breakpoints = 7208, 8232; 7392, 8232
                ]
                connect "1D look-up table1.value" P as Connection10
                connect "1D look-up table2.value" Q as Connection12
                connect Constant6.out "Signal switch2.in2" as Connection21
                connect "Signal switch1.out" "Signal switch2.in" as Connection26
                connect Constant5.out Junction3 as Connection31
                connect Junction3 "Signal switch1.in1" as Connection32
                [
                    position = 0, 0
                ]
                connect "Signal switch2.in1" Junction3 as Connection33
                [
                    position = 0, 0
                ]
                connect Constant7.out "Signal switch3.in2" as Connection38
                connect Integrator1.out "Signal switch3.in" as Connection40
                connect "1D look-up table2.addr" Junction4 as Connection41
                [
                    position = 0, 0
                ]
                connect "Signal switch3.out" Junction4 as Connection43
                connect Gain1.out "Signal switch3.in1" as Connection44
                connect Integrator1.in "Signal switch2.out" as Connection45
                [
                    position = 0, 0
                ]
                connect "1D look-up table1.addr" Junction4 as Connection49
                [
                    position = 0, 0
                ]
                connect Gain1.in T as connT

                P_mode = "Manual input"
                T_vec = "T_Ts_internal"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    P_nom {
                        label = "Nominal active power"
                        widget = edit
                        type = generic
                        default_value = "kw"
                        unit = "kW"
                    }

                    Q_nom {
                        label = "Nominal reactive power"
                        widget = edit
                        type = generic
                        default_value = "kvar"
                        unit = "kVAR"
                    }

                    S_vec {
                        label = "Load profile"
                        widget = edit
                        type = generic
                        default_value = "S_Ts"
                        unit = "pu"
                    }

                    S_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    S_vec2 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Plen {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Q_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecP {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_mode {
                        label = "Power profile mode"
                        widget = combo
                        combo_values = "Manual input", "Loop cycle"
                        type = string
                        default_value = "Loop cycle"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT
                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            if new_value == "Loop cycle":
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                T_def = mdl.get_item("Constant5", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if T_ext:
                                    mdl.delete_item(T_ext)

                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not conn_T_int:
                                    mdl.create_connection(mdl.term(T_inp, "in"), mdl.term(T_def, "out"), "connT")

                            else:
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_T_int:
                                    mdl.delete_item(conn_T_int)

                                if not T_ext:
                                    T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                                                        terminal_position=("left", 1),
                                                        position=(7237, 8437))

                                mdl.create_connection(mdl.term(T_inp, "in"), T_ext, "connT")
                        ENDCODE

                        CODE property_value_edited
                            if new_value == "Manual input":
                                mdl.disable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.disable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.enable_property(mdl.prop(container_handle, "T_vec"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.enable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.disable_property(mdl.prop(container_handle, "T_vec"))
                        ENDCODE
                    }

                    loop_en {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vec {
                        label = "Time profile"
                        widget = edit
                        type = generic
                        default_value = "T_Ts"
                        unit = "h"
                    }

                    Tmax {
                        label = "Power profile loop cycle"
                        widget = edit
                        type = generic
                        default_value = "T_Ts_max"
                        unit = "s"
                        disabled
                    }

                    Tdel {
                        label = "Profile start delay"
                        widget = edit
                        type = generic
                        default_value = "del_Ts+Mech_En"
                        unit = "s"
                        disabled
                    }

                    Texec {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        P_nom = mdl.get_property_value(mdl.prop(item_handle, "P_nom"))
                        Q_nom = mdl.get_property_value(mdl.prop(item_handle, "Q_nom"))
                        S_vec = mdl.get_property_value(mdl.prop(item_handle, "S_vec"))
                        S_vec1 = mdl.get_property_value(mdl.prop(item_handle, "S_vec1"))
                        S_vec2 = mdl.get_property_value(mdl.prop(item_handle, "S_vec2"))
                        P_vec1 = mdl.get_property_value(mdl.prop(item_handle, "P_vec1"))
                        Plen = mdl.get_property_value(mdl.prop(item_handle, "Plen"))
                        Q_vec1 = mdl.get_property_value(mdl.prop(item_handle, "Q_vec1"))
                        T_vecP = mdl.get_property_value(mdl.prop(item_handle, "T_vecP"))
                        T_vecQ = mdl.get_property_value(mdl.prop(item_handle, "T_vecQ"))
                        P_mode = mdl.get_property_value(mdl.prop(item_handle, "P_mode"))
                        loop_en = mdl.get_property_value(mdl.prop(item_handle, "loop_en"))
                        T_vec = mdl.get_property_value(mdl.prop(item_handle, "T_vec"))
                        Tmax = mdl.get_property_value(mdl.prop(item_handle, "Tmax"))
                        Tdel = mdl.get_property_value(mdl.prop(item_handle, "Tdel"))
                        Texec = mdl.get_property_value(mdl.prop(item_handle, "Texec"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy as np
                        import math

                        if P_mode == "Manual input":
                            loop_en = 0
                        else:
                            loop_en = 1


                        Plen = len(S_vec)
                        S_vec2 = S_vec

                        S_vec1 = [0] * Plen

                        idxS = 0
                        for S_val in S_vec:
                            S_vec1[idxS] = S_vec[idxS]
                            idxS += 1


                        T_vecP = [0] * Plen
                        T_vecQ = [0] * Plen

                        P_vec1 = [P_nom*i for i in S_vec2]
                        Q_vec1 = [Q_nom*i for i in S_vec2]

                        TstepP = Tmax/(Plen - 1)
                        TstepQ = Tmax/(Plen - 1)

                        idxP = 0
                        for P_val in S_vec1:

                            if loop_en == 1:
                                T_vecP[idxP] = idxP * TstepP
                            else:
                                T_vecP[idxP] = T_vec[idxP]
                            idxP += 1

                        idxQ = 0
                        for Q_val in S_vec1:

                            if loop_en == 1:
                                T_vecQ[idxQ] = idxQ * TstepQ
                            else:
                                T_vecQ[idxQ] = T_vec[idxQ]
                            idxQ += 1






                        mdl.set_property_value(mdl.prop(item_handle, "P_vec1"), P_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_vec1"), Q_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecP"), T_vecP)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecQ"), T_vecQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Tdel"), Tdel)
                        mdl.set_property_value(mdl.prop(item_handle, "Tmax"), Tmax)
                        mdl.set_property_value(mdl.prop(item_handle, "loop_en"), loop_en)
                        mdl.set_property_value(mdl.prop(item_handle, "P_nom"), P_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_nom"), Q_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Plen"), Plen)

                        mdl.set_property_value(mdl.prop(item_handle, "S_vec"), S_vec)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec1"), S_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec2"), S_vec2)

                        mdl.set_property_value(mdl.prop(item_handle, "Texec"), Texec)
                    ENDCODE
                }
            }
            [
                position = 6440, 8504
                size = 112, 72
            ]

            component src_constant Constant32 {
                execution_rate = "Ts"
                value = "gen_ts_en_bit"
            }
            [
                position = 6656, 8360
                hide_name = True
            ]

            component src_constant Constant33 {
                execution_rate = "Ts"
                value = "0"
            }
            [
                position = 6472, 8400
                hide_name = True
            ]

            component Subsystem T_switch {
                layout = dynamic
                component sys_signal_switch "Signal switch1" {
                    threshold = "0.5"
                }
                [
                    position = 7632, 8056
                ]

                component gen_round Round1 {
                }
                [
                    position = 7392, 8072
                ]

                component gen_limiter Limit1 {
                    lower_limit = "T_lim_low"
                    upper_limit = "T_lim_high"
                }
                [
                    position = 7808, 8056
                ]

                port T {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7176, 8040
                ]

                port T_out {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8096, 8056
                ]

                port mode {
                    position = auto:auto
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7472, 7920
                ]

                junction Junction1 sp
                [
                    position = 7280, 8040
                ]

                junction Junction2 sp
                [
                    position = 7712, 8056
                ]

                junction Junction3 sp
                [
                    position = 7880, 8056
                ]

                connect mode "Signal switch1.in2" as Connection1
                connect T Junction1 as Connection5
                connect Junction1 "Signal switch1.in" as Connection6
                connect Round1.in Junction1 as Connection7
                connect Round1.out "Signal switch1.in1" as Connection8
                connect "Signal switch1.out" Junction2 as Connection11
                connect Junction2 Limit1.in as Connection12
                connect Limit1.out Junction3 as Connection14
                connect Junction3 T_out as Connection15
            }
            [
                position = 6320, 8504
                size = 72, 64
            ]

            component src_constant Constant102 {
                execution_rate = "Ts"
                value = "Ts_switch"
            }
            [
                position = 6200, 8536
            ]

            port A1 {
                label = "A1"
                position = 88.0, -32.0
                kind = pe
            }
            [
                position = 5176, 8280
            ]

            port B1 {
                label = "B1"
                position = 88.0, 0.0
                kind = pe
            }
            [
                position = 5176, 8376
            ]

            port C1 {
                label = "C1"
                position = 88.0, 32.0
                kind = pe
            }
            [
                position = 5176, 8472
            ]

            port Vfd_in {
                label = "Vfd"
                position = -88.0, -1.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 4176, 7712
            ]

            port Tm_in {
                label = "Tm"
                position = -36.0, -88.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 4176, 7768
            ]

            port meas {
                label = "meas"
                position = -50.0, -88.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 6848, 8040
            ]

            port ctrl {
                label = "ctrl"
                position = -88.0, -80.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 6840, 8624
            ]

            port Vfd0 {
                label = "Vfd0"
                position = -88.0, -51.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 5968, 7640
            ]

            port Tm0 {
                label = "Tm0"
                position = -88.0, -65.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                    readonly = True
                }
            }
            [
                position = 5936, 7824
            ]

            tag From31 {
                value = "ea"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5968, 8248
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag From33 {
                value = "ec"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5968, 8440
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag From32 {
                value = "eb"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5968, 8344
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag Goto36 {
                value = "va"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5536, 8544
                rotation = left
                hide_name = True
                size = 60, 20
            ]

            tag Goto37 {
                value = "vb"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5616, 8544
                rotation = left
                hide_name = True
                size = 60, 20
            ]

            tag Goto38 {
                value = "vc"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5704, 8544
                rotation = left
                hide_name = True
                size = 60, 20
            ]

            tag Goto64 {
                value = "ia"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5312, 8232
                hide_name = True
                size = 60, 20
            ]

            tag Goto65 {
                value = "ib"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5312, 8328
                hide_name = True
                size = 60, 20
            ]

            tag Goto66 {
                value = "ic"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5312, 8424
                hide_name = True
                size = 60, 20
            ]

            tag Goto20 {
                value = "ea"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 6368, 7408
                hide_name = True
                size = 60, 20
            ]

            tag From27 {
                value = "eq"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6176, 7424
                hide_name = True
                size = 60, 20
            ]

            tag Goto22 {
                value = "ec"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 6368, 7456
                hide_name = True
                size = 60, 20
            ]

            tag From28 {
                value = "ed"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6112, 7408
                hide_name = True
                size = 60, 20
            ]

            tag From30 {
                value = "thetar"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6176, 7456
                hide_name = True
                size = 60, 20
            ]

            tag Goto21 {
                value = "eb"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 6368, 7432
                hide_name = True
                size = 60, 20
            ]

            tag From18 {
                value = "ib"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6176, 7536
                hide_name = True
                size = 60, 20
            ]

            tag Goto18 {
                value = "isd"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 6480, 7520
                hide_name = True
                size = 60, 20
            ]

            tag From19 {
                value = "ic"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6112, 7552
                hide_name = True
                size = 60, 20
            ]

            tag From26 {
                value = "thetar"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6176, 7568
                hide_name = True
                size = 60, 20
            ]

            tag Goto19 {
                value = "isq"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 6480, 7544
                hide_name = True
                size = 60, 20
            ]

            tag From46 {
                value = "ia"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6112, 7520
                hide_name = True
                size = 60, 20
            ]

            tag Goto67 {
                value = "ed"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5224, 7576
                hide_name = True
                size = 60, 20
            ]

            tag Goto68 {
                value = "eq"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5224, 7608
                hide_name = True
                size = 60, 20
            ]

            tag From47 {
                value = "isd"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4816, 7512
                hide_name = True
                size = 60, 20
            ]

            tag From48 {
                value = "isq"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4816, 7480
                hide_name = True
                size = 60, 20
            ]

            tag From49 {
                value = "vfd"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4488, 7440
                hide_name = True
                size = 60, 20
            ]

            tag From50 {
                value = "Tm"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4488, 7536
                hide_name = True
                size = 60, 20
            ]

            tag Goto69 {
                value = "thetar"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5224, 7704
                hide_name = True
                size = 60, 20
            ]

            tag From51 {
                value = "isq"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5472, 7920
                hide_name = True
                size = 60, 20
            ]

            tag Goto70 {
                value = "pisq"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5952, 8088
                hide_name = True
                size = 60, 20
            ]

            tag From52 {
                value = "pisq"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4824, 7672
                hide_name = True
                size = 60, 20
            ]

            tag Goto71 {
                value = "vfd"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 4328, 7712
                hide_name = True
                size = 60, 20
            ]

            tag Goto72 {
                value = "Tm"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 4328, 7768
                hide_name = True
                size = 60, 20
            ]

            tag From53 {
                value = "isd"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5440, 7688
                hide_name = True
                size = 60, 20
            ]

            tag Goto73 {
                value = "ed_initial"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 4328, 7664
                hide_name = True
                size = 60, 20
            ]

            tag Goto74 {
                value = "eq_initial"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 4328, 7624
                hide_name = True
                size = 60, 20
            ]

            tag From55 {
                value = "eq_initial"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4824, 7704
                hide_name = True
                size = 60, 20
            ]

            tag From56 {
                value = "ed_initial"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4824, 7736
                hide_name = True
                size = 60, 20
            ]

            tag From57 {
                value = "eq_initial"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5440, 7648
                hide_name = True
                size = 60, 20
            ]

            tag Goto75 {
                value = "vfd_pre"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5968, 7696
                hide_name = True
                size = 60, 20
            ]

            tag Goto76 {
                value = "V2S_switch"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5712, 7456
                hide_name = True
                size = 60, 20
            ]

            tag From58 {
                value = "V2S_switch"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5824, 7592
                hide_name = True
                size = 60, 20
            ]

            tag From59 {
                value = "V2S_switch"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4568, 7848
                hide_name = True
                size = 60, 20
            ]

            tag From60 {
                value = "vfd_pre"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4488, 7416
                hide_name = True
                size = 60, 20
            ]

            tag Goto77 {
                value = "S2M_switch"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5712, 7520
                hide_name = True
                size = 60, 20
            ]

            tag From63 {
                value = "S2M_switch"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4688, 7912
                hide_name = True
                size = 60, 20
            ]

            tag From64 {
                value = "Tm_pre"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4488, 7512
                hide_name = True
                size = 60, 20
            ]

            tag Goto78 {
                value = "Te"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5224, 7640
                hide_name = True
                size = 60, 20
            ]

            tag From65 {
                value = "Te"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5664, 7840
                hide_name = True
                size = 60, 20
            ]

            tag From66 {
                value = "S2M_switch"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 5704, 7776
                hide_name = True
                size = 60, 20
            ]

            tag Goto79 {
                value = "Tm_pre"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5944, 7784
                hide_name = True
                size = 60, 20
            ]

            tag Goto80 {
                value = "angle_init"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 4328, 7584
                hide_name = True
                size = 60, 20
            ]

            tag From67 {
                value = "angle_init"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 4824, 7832
                hide_name = True
                size = 60, 20
            ]

            tag From70 {
                value = "ia"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7776
                hide_name = True
                size = 60, 20
            ]

            tag From71 {
                value = "ib"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7800
                hide_name = True
                size = 60, 20
            ]

            tag From72 {
                value = "ic"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7824
                hide_name = True
                size = 60, 20
            ]

            tag From73 {
                value = "va"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7704
                hide_name = True
                size = 60, 20
            ]

            tag From74 {
                value = "vb"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7728
                hide_name = True
                size = 60, 20
            ]

            tag From75 {
                value = "vc"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7752
                hide_name = True
                size = 60, 20
            ]

            tag From76 {
                value = "Te"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7848
                hide_name = True
                size = 60, 20
            ]

            tag From77 {
                value = "S2M_switch"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6680, 8168
                hide_name = True
                size = 60, 20
            ]

            tag From78 {
                value = "V2S_switch"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6680, 8144
                hide_name = True
                size = 60, 20
            ]

            tag Goto81 {
                value = "w_mech"
                scope = masked_subsystem
                kind = sp
                direction = in
            }
            [
                position = 5224, 7736
                hide_name = True
                size = 60, 20
            ]

            tag From79 {
                value = "w_mech"
                scope = masked_subsystem
                kind = sp
                direction = out
            }
            [
                position = 6648, 7872
                hide_name = True
                size = 60, 20
            ]

            junction Junction160 pe
            [
                position = 5584, 8656
            ]

            junction Junction162 sp
            [
                position = 5520, 7920
            ]

            junction Junction163 sp
            [
                position = 5608, 7960
            ]

            junction Junction169 sp
            [
                position = 5920, 7592
            ]

            junction Junction175 sp
            [
                position = 5800, 7824
            ]

            junction Junction176 sp
            [
                position = 5720, 7840
            ]

            junction Junction178 sp
            [
                position = 5888, 7824
            ]

            junction Junction179 sp
            [
                position = 4536, 7440
            ]

            junction Junction181 sp
            [
                position = 4536, 7536
            ]

            junction Junction182 sp
            [
                position = 4672, 7376
            ]

            junction Junction183 sp
            [
                position = 5560, 7448
            ]

            junction Junction184 sp
            [
                position = 5920, 7640
            ]

            junction Junction185 sp
            [
                position = 4792, 7544
            ]

            junction Junction189 sp
            [
                position = 4648, 7936
            ]

            junction Junction201 pe
            [
                position = 5496, 8280
            ]

            junction Junction202 pe
            [
                position = 5584, 8376
            ]

            junction Junction203 pe
            [
                position = 5664, 8472
            ]

            junction Junction204 pe
            [
                position = 5664, 8656
            ]

            junction Junction205 pe
            [
                position = 6008, 8472
            ]

            junction Junction206 pe
            [
                position = 5392, 8280
            ]

            junction Junction207 pe
            [
                position = 5392, 8376
            ]

            junction Junction208 pe
            [
                position = 5448, 8472
            ]

            junction Junction209 pe
            [
                position = 5448, 8280
            ]

            junction Junction210 pe
            [
                position = 5392, 8376
            ]

            junction Junction211 pe
            [
                position = 5392, 8472
            ]

            junction Junction212 pe
            [
                position = 6008, 8376
            ]

            junction Junction213 sp
            [
                position = 6744, 7928
            ]

            junction Junction214 sp
            [
                position = 4512, 7872
            ]

            junction Junction215 sp
            [
                position = 4744, 7544
            ]

            connect From32 eb.in as Connection110
            connect From31 ea.in as Connection109
            connect ec.p_node R3.n_node as Connection102
            connect L3.n_node R3.p_node as Connection414
            connect eb.p_node R2.n_node as Connection103
            connect ea.p_node R1.n_node as Connection104
            connect L2.n_node R2.p_node as Connection426
            connect From33 ec.in as Connection111
            connect L1.n_node R1.p_node as Connection434
            connect Vb.n_node Junction160 as Connection4607
            connect Va.n_node Junction160 as Connection4609
            connect A1 Ia.p_node as Connection4610
            connect B1 Ib.p_node as Connection4611
            connect C1 Ic.p_node as Connection4612
            connect Constant3.out "dq to abc1.zero_input" as Connection97
            connect From27 "dq to abc1.q_input" as Connection96
            connect From28 "dq to abc1.d_input" as Connection95
            connect From18 "abc to dq1.vb" as Connection90
            connect From46 "abc to dq1.va" as Connection89
            connect From19 "abc to dq1.vc" as Connection91
            connect From48 "C function2.isq" as Connection4629
            connect From47 "C function2.isd" as Connection4630
            connect Constant4.out "C function2.dt" as Connection4632
            connect "Unit Delay2.out" "C function2.Tm_mem" as Connection4633
            connect "C function2.thet_r" Goto69 as Connection4638
            connect From51 Junction162 as Connection4641
            connect Junction162 Gain1.in as Connection4642
            connect "Unit Delay3.in" Junction162 as Connection4643
            connect Gain1.out Sum1.in as Connection4645
            connect Sum1.out Product1.in as Connection4646
            connect Constant6.out Product1.in1 as Connection4647
            connect Gain2.out Sum1.in1 as Connection4649
            connect "Unit Delay3.out" Junction163 as Connection4650
            connect Junction163 Gain2.in as Connection4651
            connect "Unit Delay4.in" Junction163 as Connection4652
            connect "Unit Delay4.out" Sum1.in2 as Connection4653
            connect From52 "C function2.pisq" as Connection4654
            connect From30 "dq to abc1.wt" as Connection4655
            connect From26 "abc to dq1.wt" as Connection4656
            connect Goto18 "Unit Delay8.out" as Connection4668
            connect "Unit Delay8.in" "abc to dq1.d_axis" as Connection4669
            connect Goto19 "Unit Delay9.out" as Connection4670
            connect "Unit Delay9.in" "abc to dq1.q_axis" as Connection4671
            connect "dq to abc1.phase_a" Goto20 as Connection4672
            connect "dq to abc1.phase_b" Goto21 as Connection4673
            connect "dq to abc1.phase_c" Goto22 as Connection4674
            connect Constant13.out "C function2.Wm_inp" as Connection4685
            connect Gain3.out Sum2.in as Connection4692
            connect Gain4.out Sum2.in1 as Connection4693
            connect Constant14.out Goto73 as Connection4723
            connect From55 "C function2.eq_init" as Connection4724
            connect From56 "C function2.ed_init" as Connection4725
            connect From57 Gain3.in as Connection4726
            connect Gain6.out Limit1.in as Connection4734
            connect From58 "Signal switch1.in2" as Connection4737
            connect From60 Sum3.in1 as Connection4739
            connect "Unit Delay10.in" Junction169 as Connection4745
            connect vfd_p.in Junction169 as Connection4747
            connect "Signal switch1.in1" Limit1.out as Connection4751
            connect "Unit Delay10.out" "Signal switch1.in" as Connection4752
            connect "Discrete Transfer Function1.out" Goto70 as Connection4775
            connect From66 "Signal switch2.in2" as Connection4786
            connect "Unit Delay11.out" "Signal switch2.in" as Connection4791
            connect "Signal switch2.out" Junction175 as Connection4801
            connect Junction175 "Unit Delay11.in" as Connection4802
            connect From65 Junction176 as Connection4807
            connect Junction176 "Signal switch2.in1" as Connection4808
            connect From67 "C function2.angle_in" as Connection4814
            connect "Unit Delay13.in" Junction175 as Connection4816
            connect "C function2.Te" Goto78 as Connection4817
            connect "C function2.M_inp" Constant5.out as Connection4824
            connect From64 Sum4.in1 as Connection4825
            connect "C function2.psimq" psimq.in as Connection4833
            connect psimd.in "C function2.psimd" as Connection4834
            connect "C function2.psifd" psifd.in as Connection4835
            connect Product1.out "Discrete Transfer Function1.in" as Connection4840
            connect From53 Gain4.in as Connection4841
            connect Goto79 Junction178 as Connection4842
            connect Junction178 "Unit Delay13.out" as Connection4843
            connect Tm_p.in Junction178 as Connection4844
            connect Sum3.out "Signal switch3.in" as Connection4847
            connect From49 Junction179 as Connection4850
            connect Junction179 Sum3.in as Connection4851
            connect "Signal switch3.in1" Junction179 as Connection4852
            connect Sum4.out "Signal switch4.in" as Connection4857
            connect Sum4.in Junction181 as Connection4858
            connect Junction181 From50 as Connection4859
            connect "Signal switch4.in1" Junction181 as Connection4860
            connect Constant18.out Junction182 as Connection4861
            connect Junction182 "Signal switch3.in2" as Connection4862
            connect Comparator2.out Goto77 as Connection4867
            connect Constant19.out Goto80 as Connection4868
            connect Constant20.out Gain7.in as Connection4869
            connect Gain7.out Goto74 as Connection4870
            connect Constant21.out Comparator1.in2 as Connection4875
            connect Constant23.out Comparator2.in2 as Connection4876
            connect Comparator2.in1 Junction183 as Connection4884
            connect Junction183 Comparator1.in1 as Connection4885
            connect Clock1.out Junction183 as Connection4886
            connect Junction169 Junction184 as Connection4894
            connect Junction184 "Signal switch1.out" as Connection4895
            connect Goto75 Junction184 as Connection4896
            connect Junction185 "C function2.Tm" as Connection4899
            connect "Signal switch3.out" "C function2.vfd" as Connection4901
            connect Vfd_in "Rate Transition1.in" as Connection4902
            connect "Rate Transition1.out" Goto71 as Connection4903
            connect Tm_in "Rate Transition2.in" as Connection4904
            connect "Rate Transition2.out" Goto72 as Connection4905
            connect Gain5.in Sum2.out as Connection4906
            connect From59 "Signal switch5.in" as Connection4910
            connect "Signal switch5.out" "C function2.V2S" as Connection4911
            connect From63 "Signal switch6.in" as Connection4917
            connect Constant25.out Junction189 as Connection4927
            connect Junction189 "Signal switch6.in1" as Connection4928
            connect "Signal switch5.in1" Junction189 as Connection4929
            connect "Signal switch4.in2" Junction182 as Connection4930
            connect Gain6.in Gain5.out as Connection4931
            connect Ia.out Goto64 as Connection4982
            connect Ib.out Goto65 as Connection4983
            connect Goto66 Ic.out as Connection4984
            connect Goto38 Vc.out as Connection4985
            connect Goto37 Vb.out as Connection4986
            connect Va.out Goto36 as Connection4987
            connect Junction176 Te.in as Connection4991
            connect "Bus Join3.out" meas as Connection4993
            connect From73 "Bus Join3.in" as Connection4994
            connect From74 "Bus Join3.in1" as Connection4995
            connect From75 "Bus Join3.in2" as Connection4996
            connect From70 "Bus Join3.in3" as Connection4997
            connect From71 "Bus Join3.in4" as Connection4998
            connect From72 "Bus Join3.in5" as Connection4999
            connect From76 "Bus Join3.in6" as Connection5000
            connect From78 "Bus Join4.in" as Connection5011
            connect From77 "Bus Join4.in1" as Connection5012
            connect Constant26.out "Bus Join4.in2" as Connection5013
            connect "Bus Join4.out" ctrl as Connection5014
            connect Constant27.out "Bus Join4.in3" as Connection5015
            connect Constant28.out "Bus Join4.in4" as Connection5016
            connect Constant29.out "Bus Join4.in5" as Connection5017
            connect "C function2.ed" Goto67 as Connection5027
            connect "C function2.eq" Goto68 as Connection5028
            connect Goto76 Comparator1.out as Connection5037
            connect "Signal switch6.out" "C function2.S2M" as Connection5038
            connect Constant30.out "Bus Join4.in7" as Connection5042
            connect Constant31.out "Bus Join4.in6" as Connection5043
            connect "C function2.psikq2" Termination60.in as Connection5046
            connect Termination62.in "C function2.wr" as Connection5047
            connect Termination61.in "C function2.psikd" as Connection5048
            connect Termination63.in "abc to dq1.zero_axis" as Connection5049
            connect Termination64.in "C function2.psikq" as Connection5050
            connect L1.p_node Junction201 as Connection5056
            connect Va.p_node Junction201 as Connection5058
            connect Junction202 L2.p_node as Connection5060
            connect Vb.p_node Junction202 as Connection5061
            connect Junction203 L3.p_node as Connection5063
            connect Vc.p_node Junction203 as Connection5064
            connect Junction160 Junction204 as Connection5065
            connect Junction204 Vc.n_node as Connection5066
            connect ec.n_node Junction205 as Connection5067
            connect Junction204 Junction205 as Connection5069
            connect Junction206 Ia.n_node as Connection5075
            connect Vab.p_node Junction206 as Connection5076
            connect Ib.n_node Junction207 as Connection5077
            connect Junction207 Junction202 as Connection5078
            connect Junction208 Junction203 as Connection5081
            connect Vca.p_node Junction208 as Connection5082
            connect Junction201 Junction209 as Connection5083
            connect Junction209 Junction206 as Connection5084
            connect Vca.n_node Junction209 as Connection5085
            connect Vab.n_node Junction210 as Connection5086
            connect Junction210 Junction207 as Connection5087
            connect Vbc.p_node Junction210 as Connection5088
            connect Ic.n_node Junction211 as Connection5089
            connect Junction211 Junction208 as Connection5090
            connect Vbc.n_node Junction211 as Connection5091
            connect eb.n_node Junction212 as Connection5093
            connect Junction212 Junction205 as Connection5094
            connect ea.n_node Junction212 as Connection5095
            connect Goto81 "C function2.wm" as Connection5097
            connect "Bus Join3.in7" Junction213 as Connection5098
            connect Junction213 w_mech.in as Connection5099
            connect From79 Junction213 as Connection5100
            connect Constant24.out Junction214 as Connection5102
            connect Junction214 "Signal switch6.in2" as Connection5103
            connect "Signal switch5.in2" Junction214 as Connection5104
            connect Junction185 "Unit Delay2.in" as Connection5105
            connect "Signal switch4.out" Junction215 as Connection5106
            connect Junction215 Junction185 as Connection5107
            connect Tm.in Junction215 as Connection5108
            connect Junction184 Vfd0 as Connection5109
            connect Junction178 Tm0 as Connection5110
            connect "Bus Join4.in8" Constant32.out as Connection5115
            connect Constant102.out T_switch.mode as Connection3
            connect T_switch.T_out TS_module.T as Connection5116
            connect "Bus Join4.in9" Constant33.out as connP
            connect "Bus Join4.in10" Constant33.out as connQ

            gen_ts_en = "False"

            mask {
                icon = "image(\'images/mchn_wrsync_generic2.svg\')"
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Wound rotor synchronous generator with constant-parameter VBR interface and initialization capability.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Initialization is done in three steps. </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Step-1: The machine starts as an ideal voltage source behind sstator impedance while the rotor is rotating at a constant speed. </p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Step-2: The machine electrical circuit is connected and fully enabled, while the rotor is still rotating at a constant speed.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Step-3: Full machine model is enabled including both electrical circuit and mechanical model.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Note: When initializing the machine, two extra outputs (Vfd0 and Tm0) are provided indicating the amount of exciter voltage and mechanical torque which are internally applied to the model for seamless transition between modes. In this case, the external inputs to Vfd and Tm ports are added on top of Vfd0 and Tm0.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The measurement signal port provides a 8x1 vectorized output including generator three-phase to neutral voltages in volts, three-phase currents in amps, electromagnetic torque in N.m and mechanical speed in rad/s.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=196"

                phases {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kw {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kvar {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kv {
                    label = "Nominal line voltage"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "kV"
                    group = "General:1"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "General"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                basefreq {
                    label = "Nominal Frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    group = "General"
                }

                nom_rpm {
                    label = "Nominal RPM"
                    widget = edit
                    type = generic
                    default_value = "1800"
                    unit = "rpm"
                    group = "General"
                }

                kVA {
                    label = "Nominal Apparent Power"
                    widget = edit
                    type = generic
                    default_value = "1000"
                    unit = "kVA"
                    group = "General"
                }

                pf {
                    label = "Nominal Power Factor "
                    widget = edit
                    type = generic
                    default_value = ".96"
                    group = "General"
                }

                model {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Xd {
                    label = "Synchronous Reactance"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "pu"
                    group = "Circuit Parameters:2"
                }

                Xdp {
                    label = "Transient Reactance"
                    widget = edit
                    type = generic
                    default_value = "0.3"
                    unit = "pu"
                    group = "Circuit Parameters"
                }

                Xdpp {
                    label = "Sub-Transient Reactance"
                    widget = edit
                    type = generic
                    default_value = ".2"
                    unit = "pu"
                    group = "Circuit Parameters"
                }

                XRdp {
                    label = "Transient X/R ratio"
                    widget = edit
                    type = generic
                    default_value = "50"
                    group = "Circuit Parameters"
                }

                H {
                    label = "Mass Constant"
                    widget = edit
                    type = generic
                    default_value = "0.5"
                    unit = "s"
                    group = "Circuit Parameters"
                }

                J {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                rs {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Lls {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Lmq {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Lmd {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Lmzq {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Lmzd {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                rkq {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                rkq2 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                rkd {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                rfd {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Llkq {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Llkq2 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Llkd {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Llfd {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                PP {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                w_base {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                T_base {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                ws {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                ws_inv {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Z_base {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                G_mod {
                    label = "Generator model"
                    widget = combo
                    combo_values = "Constant kW", "Constant admittance", "Constant kW, Constant kV", "Constant kW, Fixed Q", "Constant kW, Fixed Q (constant reactance)"
                    type = string
                    default_value = "Constant kW, Fixed Q"
                    group = "OpenDSS model setting:3"
                    no_evaluate
                }

                Ts {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "s"
                    group = "Execution rate:4"
                }

                dA {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA11 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA12 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA13 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA14 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA21 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA22 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA23 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA24 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA31 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA32 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA33 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA34 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA41 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA42 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA43 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dA44 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB11 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB12 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB13 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB21 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB22 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB23 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB31 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB32 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB33 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB41 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB42 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                dB43 {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Init_En {
                    label = "Initialization"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Initialization:5"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.components_and_connections(mdl, container_handle, created_ports, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                Init_switch {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                V_ph_init {
                    label = "Initial phase voltage magnitude"
                    widget = edit
                    type = generic
                    default_value = "0.581"
                    unit = "kV"
                    group = "Initialization"
                }

                thet_ph_init {
                    label = "Initial phase voltage angle"
                    widget = edit
                    type = generic
                    default_value = "-1.58"
                    unit = "Rad"
                    group = "Initialization"
                }

                V2M_t {
                    label = "Transition time from V Source to Machine"
                    widget = edit
                    type = generic
                    default_value = "5"
                    unit = "s"
                    group = "Initialization"
                }

                Mech_En {
                    label = "Mechanical system enable time"
                    widget = edit
                    type = generic
                    default_value = "9"
                    unit = "s"
                    group = "Initialization"
                }

                gen_ts_en {
                    label = "Enable time series (override gen control)"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "OpenDSS model setting"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.components_and_connections(mdl, container_handle, created_ports, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                load_loadshape {
                    label = "LoadShape object"
                    widget = button
                    type = string
                    default_value = "Choose"
                    group = "OpenDSS model setting"
                    no_evaluate

                    CODE button_clicked
                        comp_script_load = return_comp_script_load()
                        comp_script_load.load_loadshape(mdl, container_handle)
                    ENDCODE
                }

                loadshape_name {
                    label = "LoadShape name"
                    widget = edit
                    type = generic
                    default_value = "gen1"
                    group = "OpenDSS model setting"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape {
                    label = "LoadShape points"
                    widget = edit
                    type = generic
                    default_value = "[0.5, 0.8, 1, 0.4, 0.5]"
                    unit = "pu"
                    group = "OpenDSS model setting"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_int {
                    label = "LoadShape interval"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "h"
                    group = "OpenDSS model setting"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                gen_ts_en_bit {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                T_mode {
                    label = "Loadshape input mode"
                    widget = combo
                    combo_values = "Loadshape index", "Time"
                    type = string
                    default_value = "Loadshape index"
                    group = "OpenDSS model setting"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                S_Ts {
                    label = "Power profile"
                    widget = edit
                    type = generic
                    default_value = "[0.2,0.28,0.5,0.32,0.2]"
                    unit = "pu"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                Q_Ts {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                S_Ts_mode {
                    label = "Power Profile mode"
                    widget = combo
                    combo_values = "Manual input"
                    type = string
                    default_value = "Manual input"
                    group = "OpenDSS model setting"
                    nonvisible
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.components_and_connections(mdl, container_handle, created_ports, caller_prop_handle=prop_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                T_Ts {
                    label = "Loadshape time range"
                    widget = edit
                    type = generic
                    default_value = "[0, 6, 12, 18, 24]"
                    unit = "h"
                    group = "OpenDSS model setting"
                    disabled
                }

                timespan {
                    label = "Loadshape time span"
                    widget = combo
                    combo_values =  "Daily", "Yearly"
                    type = string
                    default_value = "Daily"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                T_Ts_internal {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                dssT {
                    label = "OpenDSS time interval"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "h"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                dssnpts {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                T_Ts_max {
                    label = "Power profile loop cycle"
                    widget = edit
                    type = generic
                    default_value = "20"
                    unit = "s"
                    group = "OpenDSS model setting"
                    nonvisible
                    disabled
                }

                del_Ts {
                    label = "Profile start delay"
                    widget = edit
                    type = generic
                    default_value = "10"
                    unit = "s"
                    group = "OpenDSS model setting"
                    nonvisible
                    disabled
                }

                Slen {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                T_lim_low {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                T_lim_high {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                Ts_switch {
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "OpenDSS model setting"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_generator as comp_script
                    importlib.reload(comp_script)
                    import comp_load as comp_script2
                    importlib.reload(comp_script2)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    def return_comp_script_load():
                        return comp_script2
                ENDCODE

                CODE pre_compile
                    # HEADER START
                    phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
                    kw = mdl.get_property_value(mdl.prop(item_handle, "kw"))
                    kvar = mdl.get_property_value(mdl.prop(item_handle, "kvar"))
                    kv = mdl.get_property_value(mdl.prop(item_handle, "kv"))
                    global_basefreq = mdl.get_property_value(mdl.prop(item_handle, "global_basefreq"))
                    basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
                    nom_rpm = mdl.get_property_value(mdl.prop(item_handle, "nom_rpm"))
                    kVA = mdl.get_property_value(mdl.prop(item_handle, "kVA"))
                    pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                    model = mdl.get_property_value(mdl.prop(item_handle, "model"))
                    Xd = mdl.get_property_value(mdl.prop(item_handle, "Xd"))
                    Xdp = mdl.get_property_value(mdl.prop(item_handle, "Xdp"))
                    Xdpp = mdl.get_property_value(mdl.prop(item_handle, "Xdpp"))
                    XRdp = mdl.get_property_value(mdl.prop(item_handle, "XRdp"))
                    H = mdl.get_property_value(mdl.prop(item_handle, "H"))
                    J = mdl.get_property_value(mdl.prop(item_handle, "J"))
                    rs = mdl.get_property_value(mdl.prop(item_handle, "rs"))
                    Lls = mdl.get_property_value(mdl.prop(item_handle, "Lls"))
                    Lmq = mdl.get_property_value(mdl.prop(item_handle, "Lmq"))
                    Lmd = mdl.get_property_value(mdl.prop(item_handle, "Lmd"))
                    Lmzq = mdl.get_property_value(mdl.prop(item_handle, "Lmzq"))
                    Lmzd = mdl.get_property_value(mdl.prop(item_handle, "Lmzd"))
                    rkq = mdl.get_property_value(mdl.prop(item_handle, "rkq"))
                    rkq2 = mdl.get_property_value(mdl.prop(item_handle, "rkq2"))
                    rkd = mdl.get_property_value(mdl.prop(item_handle, "rkd"))
                    rfd = mdl.get_property_value(mdl.prop(item_handle, "rfd"))
                    Llkq = mdl.get_property_value(mdl.prop(item_handle, "Llkq"))
                    Llkq2 = mdl.get_property_value(mdl.prop(item_handle, "Llkq2"))
                    Llkd = mdl.get_property_value(mdl.prop(item_handle, "Llkd"))
                    Llfd = mdl.get_property_value(mdl.prop(item_handle, "Llfd"))
                    PP = mdl.get_property_value(mdl.prop(item_handle, "PP"))
                    w_base = mdl.get_property_value(mdl.prop(item_handle, "w_base"))
                    T_base = mdl.get_property_value(mdl.prop(item_handle, "T_base"))
                    ws = mdl.get_property_value(mdl.prop(item_handle, "ws"))
                    ws_inv = mdl.get_property_value(mdl.prop(item_handle, "ws_inv"))
                    Z_base = mdl.get_property_value(mdl.prop(item_handle, "Z_base"))
                    G_mod = mdl.get_property_value(mdl.prop(item_handle, "G_mod"))
                    Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                    dA = mdl.get_property_value(mdl.prop(item_handle, "dA"))
                    dB = mdl.get_property_value(mdl.prop(item_handle, "dB"))
                    dA11 = mdl.get_property_value(mdl.prop(item_handle, "dA11"))
                    dA12 = mdl.get_property_value(mdl.prop(item_handle, "dA12"))
                    dA13 = mdl.get_property_value(mdl.prop(item_handle, "dA13"))
                    dA14 = mdl.get_property_value(mdl.prop(item_handle, "dA14"))
                    dA21 = mdl.get_property_value(mdl.prop(item_handle, "dA21"))
                    dA22 = mdl.get_property_value(mdl.prop(item_handle, "dA22"))
                    dA23 = mdl.get_property_value(mdl.prop(item_handle, "dA23"))
                    dA24 = mdl.get_property_value(mdl.prop(item_handle, "dA24"))
                    dA31 = mdl.get_property_value(mdl.prop(item_handle, "dA31"))
                    dA32 = mdl.get_property_value(mdl.prop(item_handle, "dA32"))
                    dA33 = mdl.get_property_value(mdl.prop(item_handle, "dA33"))
                    dA34 = mdl.get_property_value(mdl.prop(item_handle, "dA34"))
                    dA41 = mdl.get_property_value(mdl.prop(item_handle, "dA41"))
                    dA42 = mdl.get_property_value(mdl.prop(item_handle, "dA42"))
                    dA43 = mdl.get_property_value(mdl.prop(item_handle, "dA43"))
                    dA44 = mdl.get_property_value(mdl.prop(item_handle, "dA44"))
                    dB11 = mdl.get_property_value(mdl.prop(item_handle, "dB11"))
                    dB12 = mdl.get_property_value(mdl.prop(item_handle, "dB12"))
                    dB13 = mdl.get_property_value(mdl.prop(item_handle, "dB13"))
                    dB21 = mdl.get_property_value(mdl.prop(item_handle, "dB21"))
                    dB22 = mdl.get_property_value(mdl.prop(item_handle, "dB22"))
                    dB23 = mdl.get_property_value(mdl.prop(item_handle, "dB23"))
                    dB31 = mdl.get_property_value(mdl.prop(item_handle, "dB31"))
                    dB32 = mdl.get_property_value(mdl.prop(item_handle, "dB32"))
                    dB33 = mdl.get_property_value(mdl.prop(item_handle, "dB33"))
                    dB41 = mdl.get_property_value(mdl.prop(item_handle, "dB41"))
                    dB42 = mdl.get_property_value(mdl.prop(item_handle, "dB42"))
                    dB43 = mdl.get_property_value(mdl.prop(item_handle, "dB43"))
                    Init_En = mdl.get_property_value(mdl.prop(item_handle, "Init_En"))
                    Init_switch = mdl.get_property_value(mdl.prop(item_handle, "Init_switch"))
                    V_ph_init = mdl.get_property_value(mdl.prop(item_handle, "V_ph_init"))
                    thet_ph_init = mdl.get_property_value(mdl.prop(item_handle, "thet_ph_init"))
                    V2M_t = mdl.get_property_value(mdl.prop(item_handle, "V2M_t"))
                    Mech_En = mdl.get_property_value(mdl.prop(item_handle, "Mech_En"))
                    gen_ts_en = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en"))
                    load_loadshape = mdl.get_property_value(mdl.prop(item_handle, "load_loadshape"))
                    loadshape_name = mdl.get_property_value(mdl.prop(item_handle, "loadshape_name"))
                    loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
                    loadshape_int = mdl.get_property_value(mdl.prop(item_handle, "loadshape_int"))
                    gen_ts_en_bit = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en_bit"))
                    T_mode = mdl.get_property_value(mdl.prop(item_handle, "T_mode"))
                    S_Ts = mdl.get_property_value(mdl.prop(item_handle, "S_Ts"))
                    Q_Ts = mdl.get_property_value(mdl.prop(item_handle, "Q_Ts"))
                    S_Ts_mode = mdl.get_property_value(mdl.prop(item_handle, "S_Ts_mode"))
                    T_Ts = mdl.get_property_value(mdl.prop(item_handle, "T_Ts"))
                    T_Ts_internal = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_internal"))
                    dssT = mdl.get_property_value(mdl.prop(item_handle, "dssT"))
                    dssnpts = mdl.get_property_value(mdl.prop(item_handle, "dssnpts"))
                    T_Ts_max = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_max"))
                    del_Ts = mdl.get_property_value(mdl.prop(item_handle, "del_Ts"))
                    Slen = mdl.get_property_value(mdl.prop(item_handle, "Slen"))
                    T_lim_low = mdl.get_property_value(mdl.prop(item_handle, "T_lim_low"))
                    T_lim_high = mdl.get_property_value(mdl.prop(item_handle, "T_lim_high"))
                    Ts_switch = mdl.get_property_value(mdl.prop(item_handle, "Ts_switch"))
                    # HEADER STOP
                    from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                    import numpy
                    import math

                    PP = 60*basefreq/nom_rpm

                    if Init_En == True:
                        Init_switch = 1
                    else:
                        Init_switch = 0

                    phases = 3

                    if gen_ts_en:
                        gen_ts_en_bit = 1
                    else:
                        gen_ts_en_bit = 0

                    dssnpts = len(S_Ts)

                    S_Ts = loadshape
                    dssT = loadshape_int
                    Slen = len(S_Ts)

                    if T_mode == "Loadshape index":
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for S_val in S_vec1:
                            T_Ts_internal[idxS] = idxS
                            idxS += 1
                        T_lim_low = T_Ts_internal[0]
                        T_lim_high = T_Ts_internal[Slen-1]
                    elif T_mode == "Time":
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for T_val in T_Ts:
                            T_Ts_internal[idxS] = T_val
                            idxS += 1
                        T_lim_low = T_Ts[0]
                        T_lim_high = T_Ts[len(T_Ts)-1]
                    else:
                        T_Ts_internal = [0] * Slen
                        S_vec1 = [0] * Slen
                        idxS = 0
                        for S_val in S_vec1:
                            T_Ts_internal[idxS] = idxS
                            idxS += 1
                        T_lim_low = T_Ts_internal[0]
                        T_lim_high = T_Ts_internal[Slen-1]



                    if T_mode == "Loadshape index":
                        Ts_switch = 0
                    elif T_mode == "Time":
                        Ts_switch = 1
                    else:
                        Ts_switch = 0



                    if G_mod == "Constant kW":
                        model = 1
                    elif G_mod == "Constant admittance":
                        model = 2
                    elif G_mod == "Constant kW, Constant kV":
                        model = 3
                    elif G_mod == "Constant kW, Fixed Q":
                        model = 4
                    elif G_mod == "Constant kW, Fixed Q (constant reactance)":
                        model = 5
                    else:
                        model = 3

                    kw = pf * kVA
                    kvar = kVA * ((1-pf**2)**0.5)

                    ws = basefreq * 2 * numpy.pi
                    ws_inv = 1/ws
                    Z_base = (1000*kv)*(1000*kv)/(1000*kVA)

                    rs = 0.01 * Z_base
                    Lmd = Xd * Z_base / ws
                    Lmq = Lmd
                    Lls = 0.05 * Lmd
                    Llfd = (((Xdp * Z_base / ws)-Lls)*Lmd)/(Lmd-((Xdp * Z_base / ws)-Lls))
                    Llkd = (((Xdpp * Z_base / ws)-Lls)*Llfd)/(Llfd-((Xdpp * Z_base / ws)-Lls))

                    rfd = (Xdp * Z_base)/XRdp
                    rkd = (Xdpp * Z_base)/(XRdp)

                    Llkq = Llkd
                    Llkq2 = Llkq
                    rkq = rkd
                    rkq2 = rkq

                    J = H * 1000 * kVA / (0.5*(ws / PP)*(ws / PP))

                    w_base = ws / 2
                    T_base = 1000 * kVA / w_base

                    Lmzq = 1/(1/Lmq + 1/Llkq + 1/Llkq2)
                    Lmzd = 1/(1/Lmd + 1/Llkd + 1/Llfd)

                    A = [[(rkq/Llkq)*((Lmzq/Llkq)-1), rkq*Lmzq/(Llkq*Llkq2), 0, 0],[rkq2*Lmzq/(Llkq*Llkq2), (rkq2/Llkq2)*((Lmzq/Llkq2)-1), 0, 0],[0, 0, (rkd/Llkd)*((Lmzd/Llkd)-1), rkd*Lmzd/(Llkd*Llfd)],[0, 0, rfd*Lmzd/(Llkd*Llfd), (rfd/Llfd)*((Lmzd/Llfd)-1)]]
                    B = [[rkq*Lmzq/Llkq, 0, 0],[rkq2*Lmzq/Llkq2, 0, 0],[0, rkd*Lmzd/Llkd, 0],[0, rfd*Lmzd/Llfd, 1]]

                    A = numpy.matrix(A)
                    B = numpy.matrix(B)

                    dA = numpy.linalg.inv((numpy.eye(4)-(0.5*Ts)*A)) * ((numpy.eye(4)+(0.5*Ts)*A))
                    dB = numpy.linalg.inv((numpy.eye(4)-(0.5*Ts)*A)) * (Ts*B)

                    dA11=dA[0, 0]
                    dA12=dA[0, 1]
                    dA13=dA[0, 2]
                    dA14=dA[0, 3]
                    dA21=dA[1, 0]
                    dA22=dA[1, 1]
                    dA23=dA[1, 2]
                    dA24=dA[1, 3]
                    dA31=dA[2, 0]
                    dA32=dA[2, 1]
                    dA33=dA[2, 2]
                    dA34=dA[2, 3]
                    dA41=dA[3, 0]
                    dA42=dA[3, 1]
                    dA43=dA[3, 2]
                    dA44=dA[3, 3]

                    dB11=dB[0, 0]
                    dB12=dB[0, 1]
                    dB13=dB[0, 2]
                    dB21=dB[1, 0]
                    dB22=dB[1, 1]
                    dB23=dB[1, 2]
                    dB31=dB[2, 0]
                    dB32=dB[2, 1]
                    dB33=dB[2, 2]
                    dB41=dB[3, 0]
                    dB42=dB[3, 1]
                    dB43=dB[3, 2]




                    mdl.set_property_value(mdl.prop(item_handle, "dA11"), dA11)
                    mdl.set_property_value(mdl.prop(item_handle, "dA12"), dA12)
                    mdl.set_property_value(mdl.prop(item_handle, "dA13"), dA13)
                    mdl.set_property_value(mdl.prop(item_handle, "dA14"), dA14)
                    mdl.set_property_value(mdl.prop(item_handle, "dA21"), dA21)
                    mdl.set_property_value(mdl.prop(item_handle, "dA22"), dA22)
                    mdl.set_property_value(mdl.prop(item_handle, "dA23"), dA23)
                    mdl.set_property_value(mdl.prop(item_handle, "dA24"), dA24)
                    mdl.set_property_value(mdl.prop(item_handle, "dA31"), dA31)
                    mdl.set_property_value(mdl.prop(item_handle, "dA32"), dA32)
                    mdl.set_property_value(mdl.prop(item_handle, "dA33"), dA33)
                    mdl.set_property_value(mdl.prop(item_handle, "dA34"), dA34)
                    mdl.set_property_value(mdl.prop(item_handle, "dA41"), dA41)
                    mdl.set_property_value(mdl.prop(item_handle, "dA42"), dA42)
                    mdl.set_property_value(mdl.prop(item_handle, "dA43"), dA43)
                    mdl.set_property_value(mdl.prop(item_handle, "dA44"), dA44)

                    mdl.set_property_value(mdl.prop(item_handle, "dB11"), dB11)
                    mdl.set_property_value(mdl.prop(item_handle, "dB12"), dB12)
                    mdl.set_property_value(mdl.prop(item_handle, "dB13"), dB13)
                    mdl.set_property_value(mdl.prop(item_handle, "dB21"), dB21)
                    mdl.set_property_value(mdl.prop(item_handle, "dB22"), dB22)
                    mdl.set_property_value(mdl.prop(item_handle, "dB23"), dB23)
                    mdl.set_property_value(mdl.prop(item_handle, "dB31"), dB31)
                    mdl.set_property_value(mdl.prop(item_handle, "dB32"), dB32)
                    mdl.set_property_value(mdl.prop(item_handle, "dB33"), dB33)
                    mdl.set_property_value(mdl.prop(item_handle, "dB41"), dB41)
                    mdl.set_property_value(mdl.prop(item_handle, "dB42"), dB42)
                    mdl.set_property_value(mdl.prop(item_handle, "dB43"), dB43)

                    mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)
                    mdl.set_property_value(mdl.prop(item_handle, "ws"), ws)
                    mdl.set_property_value(mdl.prop(item_handle, "ws_inv"), ws_inv)
                    mdl.set_property_value(mdl.prop(item_handle, "Z_base"), Z_base)
                    mdl.set_property_value(mdl.prop(item_handle, "rs"), rs)
                    mdl.set_property_value(mdl.prop(item_handle, "Lmd"), Lmd)
                    mdl.set_property_value(mdl.prop(item_handle, "Lmq"), Lmq)
                    mdl.set_property_value(mdl.prop(item_handle, "Lmzd"), Lmzd)
                    mdl.set_property_value(mdl.prop(item_handle, "Lmzq"), Lmzq)
                    mdl.set_property_value(mdl.prop(item_handle, "Lls"), Lls)
                    mdl.set_property_value(mdl.prop(item_handle, "Llfd"), Llfd)
                    mdl.set_property_value(mdl.prop(item_handle, "Llkd"), Llkd)
                    mdl.set_property_value(mdl.prop(item_handle, "Llkq"), Llkq)
                    mdl.set_property_value(mdl.prop(item_handle, "Llkq2"), Llkq2)
                    mdl.set_property_value(mdl.prop(item_handle, "rfd"), rfd)
                    mdl.set_property_value(mdl.prop(item_handle, "rkd"), rkd)
                    mdl.set_property_value(mdl.prop(item_handle, "rkq"), rkq)
                    mdl.set_property_value(mdl.prop(item_handle, "rkq2"), rkq2)
                    mdl.set_property_value(mdl.prop(item_handle, "J"), J)
                    mdl.set_property_value(mdl.prop(item_handle, "kw"), kw)
                    mdl.set_property_value(mdl.prop(item_handle, "w_base"), w_base)
                    mdl.set_property_value(mdl.prop(item_handle, "T_base"), T_base)
                    mdl.set_property_value(mdl.prop(item_handle, "phases"), phases)
                    mdl.set_property_value(mdl.prop(item_handle, "PP"), PP)
                    mdl.set_property_value(mdl.prop(item_handle, "model"), model)
                    mdl.set_property_value(mdl.prop(item_handle, "G_mod"), G_mod)
                    mdl.set_property_value(mdl.prop(item_handle, "kvar"), kvar)
                    mdl.set_property_value(mdl.prop(item_handle, "kv"), kv)

                    mdl.set_property_value(mdl.prop(item_handle, "Init_switch"), Init_switch)
                    mdl.set_property_value(mdl.prop(item_handle, "V_ph_init"), V_ph_init)
                    mdl.set_property_value(mdl.prop(item_handle, "thet_ph_init"), thet_ph_init)
                    mdl.set_property_value(mdl.prop(item_handle, "V2M_t"), V2M_t)
                    mdl.set_property_value(mdl.prop(item_handle, "Mech_En"), Mech_En)

                    mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en"), gen_ts_en)
                    mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en_bit"), gen_ts_en_bit)
                    mdl.set_property_value(mdl.prop(item_handle, "S_Ts"), S_Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "Q_Ts"), Q_Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "S_Ts_mode"), S_Ts_mode)
                    mdl.set_property_value(mdl.prop(item_handle, "T_Ts"), T_Ts)
                    mdl.set_property_value(mdl.prop(item_handle, "dssT"), dssT)
                    mdl.set_property_value(mdl.prop(item_handle, "dssnpts"), dssnpts)
                    mdl.set_property_value(mdl.prop(item_handle, "T_Ts_max"), T_Ts_max)
                    mdl.set_property_value(mdl.prop(item_handle, "del_Ts"), del_Ts)

                    mdl.set_property_value(mdl.prop(item_handle, "loadshape"), loadshape)
                    mdl.set_property_value(mdl.prop(item_handle, "loadshape_int"), loadshape_int)

                    mdl.set_property_value(mdl.prop(item_handle, "T_lim_low"), T_lim_low)
                    mdl.set_property_value(mdl.prop(item_handle, "T_lim_high"), T_lim_high)
                    mdl.set_property_value(mdl.prop(item_handle, "Ts_switch"), Ts_switch)
                    mdl.set_property_value(mdl.prop(item_handle, "Slen"), Slen)
                    mdl.set_property_value(mdl.prop(item_handle, "T_Ts_internal"), T_Ts_internal)
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4952, 4064
            size = 175, 175
        ]

        component Subsystem Vsource {
            layout = static
            label = "V"
            component src_voltage Va {
                init_frequency = "60"
                init_phase = "0"
                init_rms_value = "66395.28095681"
                init_source_nature = "Sine"
            }
            [
                position = 8112, 8096
                rotation = down
            ]

            component src_voltage Vb {
                init_frequency = "60"
                init_phase = "-120"
                init_rms_value = "66395.28095681"
                init_source_nature = "Sine"
            }
            [
                position = 8112, 8192
                rotation = down
            ]

            component src_voltage Vc {
                init_frequency = "60"
                init_phase = "-240"
                init_rms_value = "66395.28095681"
                init_source_nature = "Sine"
            }
            [
                position = 8112, 8288
                rotation = down
            ]

            component src_ground gnd1 {
            }
            [
                position = 8000, 8400
            ]

            component "core/Transmission Line" TL1 {
                Frequency = "60"
                L_sequence_metric = "[[0.015119719593730058, 0, 0], [0, 0.017507043740108485, 0], [0, 0, 0.017507043740108485]]"
                Length_metric = "1"
                R_sequence_metric = "[[1.9, 0, 0], [0, 1.65, 0], [0, 0, 1.65]]"
                model_def = "Sequence"
                unit_sys = "metric"
            }
            [
                position = 8304, 8192
                size = 256, 72
            ]

            port A1 {
                position = 32.0, -32.0
                kind = pe
            }
            [
                position = 8496, 8096
                rotation = down
            ]

            port B1 {
                position = 32.0, 0.0
                kind = pe
            }
            [
                position = 8496, 8192
                rotation = down
            ]

            port C1 {
                position = 32.0, 32.0
                kind = pe
            }
            [
                position = 8496, 8288
                rotation = down
            ]

            connect Vb.p_node TL1.b_in as Connection25
            connect Va.p_node TL1.a_in as Connection26
            connect Vc.p_node TL1.c_in as Connection27
            connect TL1.a_out A1 as Connection28
            connect B1 TL1.b_out as Connection29
            connect TL1.c_out C1 as Connection30
            connect gnd1.node Va.n_node as Connection31
            connect Vc.n_node gnd1.node as Connection32
            connect Vb.n_node gnd1.node as Connection33

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A Vsource object is a voltage source behind an impedance. The most common way to use a voltage source object is with the first terminal connected to one bus with the second terminal connected to ground, but it is possible to connect it to two different buses by unchecking the “ground-connected” property.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=166"

                ground_connected {
                    label = "Ground-connected"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if not new_value == old_value:
                            ports, _ = comp_script.port_dynamics(mdl, container_handle)
                            comp_script.update_connections(mdl, container_handle, ports)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                basekv {
                    label = "Base voltage"
                    widget = edit
                    type = generic
                    default_value = "115"
                    unit = "kV"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                pu {
                    label = "pu"
                    widget = edit
                    type = generic
                    default_value = "1"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                Angle {
                    label = "Angle"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "°"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                Frequency {
                    label = "Frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE

                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                BaseFreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    nonvisible
                }

                r1 {
                    label = "Positive-sequence resistance"
                    widget = edit
                    type = generic
                    default_value = "1.65"
                    unit = "Ω"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                x1 {
                    label = "Positive-sequence reactance"
                    widget = edit
                    type = generic
                    default_value = "6.6"
                    unit = "Ω"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                r0 {
                    label = "Zero-sequence resistance"
                    widget = edit
                    type = generic
                    default_value = "1.9"
                    unit = "Ω"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                x0 {
                    label = "Zero-sequence reactance"
                    widget = edit
                    type = generic
                    default_value = "5.7"
                    unit = "Ω"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE


                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_vsource as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                    comp_script.update_source_values(mdl, item_handle)
                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_source_values(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4328, 4064
            size = 64, 96
        ]

        component Subsystem "Manual Switch" {
            layout = static
            component el_short SC_A {
                circuit_connector = "true"
            }
            [
                position = 7744, 7856
            ]

            component el_short SC_B {
                circuit_connector = "true"
            }
            [
                position = 7744, 7952
            ]

            component el_short SC_C {
                circuit_connector = "true"
            }
            [
                position = 7744, 8048
            ]

            port A1 {
                label = "A1"
                position = left top
                kind = pe
                direction =  in
            }
            [
                position = 7600, 7856
            ]

            port B1 {
                label = "B1"
                position = left center
                kind = pe
                direction =  in
            }
            [
                position = 7600, 7952
            ]

            port C1 {
                label = "C1"
                position = left bottom
                kind = pe
                direction =  in
            }
            [
                position = 7600, 8048
            ]

            port A2 {
                label = "A2"
                position = right top
                kind = pe
                direction =  in
            }
            [
                position = 7872, 7856
                scale = -1, 1
            ]

            port B2 {
                label = "B2"
                position = right center
                kind = pe
                direction =  in
            }
            [
                position = 7872, 7952
                scale = -1, 1
            ]

            port C2 {
                label = "C2"
                position = right bottom
                kind = pe
                direction =  in
            }
            [
                position = 7872, 8048
                scale = -1, 1
            ]

            connect SC_A.p_node A1 as Connection1
            connect SC_A.n_node A2 as Connection2
            connect SC_B.p_node B1 as Connection3
            connect SC_B.n_node B2 as Connection4
            connect SC_C.n_node C2 as Connection5
            connect SC_C.p_node C1 as Connection6

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Manual switch.</p></body></html>"

                switch_status {
                    label = "Closed switch"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_inner_structure(mdl, container_handle, new_value)
                    ENDCODE
                }

                CODE open
                    import opendssdirect as dss
                    sw_status_prop = mdl.prop(item_handle, "switch_status")
                    switch_status = mdl.get_property_value(sw_status_prop)

                    try: # Error if the circuit has been just loaded
                        dss.Circuit.SetActiveElement(f"Line.{mdl.get_name(mdl.get_parent(item_handle))}")
                        if switch_status == False:
                            dss.CktElement.Open()
                        elif switch_status == True:
                            dss.CktElement.Close()
                    except:
                        pass

                    mdl.set_property_value(sw_status_prop, not switch_status)
                    mdl.refresh_icon(item_handle)
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_manualsw as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4768, 4064
            size = 64, 96
        ]

        component Subsystem Container {
            layout = static

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Container component is converted to the selected component type in OpenDSS, but is unlinked from the library.<br><br>This allows the user to create any HIL model to represent real-time behavior and still be able to convert the model to OpenDSS.<br><br>Mask parameters and port creation will behave similarly to the original library component, and the created PE ports should not be removed, as they are required for the conversion.</p></body></html>"

                dss_container_mask_type {
                    label = "Component type"
                    widget = combo
                    combo_values = "Capacitor Bank", "Controlled Switch", "Fault", "Isource", "Line", "Single-Phase Transformer", "Three-Phase Transformer", "Storage", "Generator", "Load", "Vsource", "VSConverter"
                    type = string
                    default_value = "Line"
                    no_evaluate
                }

                dss_apply_mask_type {
                    label = "Apply mask type"
                    widget = button
                    type = string
                    default_value = "Apply"

                    CODE button_clicked
                        import comp_container
                        comp_container.apply_mask_button_handler(mdl, container_handle)
                    ENDCODE
                }

                dss_container_comp_identifier {
                    label = "Do not delete this property"
                    widget = edit
                    type = string
                    default_value = "None"
                    no_evaluate
                    nonvisible
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    mdl.set_ns_var("container_dialog_handler", dialog)
                    dialog.exec_()

                ENDCODE

                CODE model_loaded
                    mdl.refresh_icon(mdl.get_parent(item_handle))
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                    gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)
                    if not gui_scripts_path in sys.path:
                        sys.path.append(gui_scripts_path)

                    import comp_container
                    importlib.reload(comp_container)
                    comp_container.define_icon(mdl, item_handle)
                    def return_comp_script(mdl, item_handle):
                        id_prop = mdl.prop(item_handle, "dss_container_comp_identifier")
                        id = mdl.get_property_value(id_prop)
                        comp_script = comp_container.pick_comp_script(mdl, item_handle, "init")
                        importlib.reload(comp_script)
                        return comp_script
                ENDCODE
            }
        }
        [
            position = 4616, 4320
            size = 96, 96
        ]

        component Subsystem "Controlled Switch" {
            layout = static
            label = "SW"
            component "core/Triple Pole Single Throw Contactor" S {
                ctrl_src = "Model"
                initial_state = "on"
                off_delay = "0.0"
                on_delay = "0.0"
            }
            [
                position = 7736, 7952
                size = 0, 0
            ]

            port ctrl {
                label = "ctrl"
                position = top center
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7688, 7800
                rotation = right
            ]

            port A1 {
                label = "A1"
                position = left top
                kind = pe
                direction =  in
            }
            [
                position = 7600, 7856
            ]

            port B1 {
                label = "B1"
                position = left center
                kind = pe
                direction =  in
            }
            [
                position = 7600, 7952
            ]

            port C1 {
                label = "C1"
                position = left bottom
                kind = pe
                direction =  in
            }
            [
                position = 7600, 8048
            ]

            port A2 {
                label = "A2"
                position = right top
                kind = pe
                direction =  in
            }
            [
                position = 7872, 7856
                scale = -1, 1
            ]

            port B2 {
                label = "B2"
                position = right center
                kind = pe
                direction =  in
            }
            [
                position = 7872, 7952
                scale = -1, 1
            ]

            port C2 {
                label = "C2"
                position = right bottom
                kind = pe
                direction =  in
            }
            [
                position = 7872, 8048
                scale = -1, 1
            ]

            connect A1 S.a_in as Connection1
            connect B1 S.b_in as Connection2
            connect C1 S.c_in as Connection3
            connect A2 S.a_out as Connection4
            connect B2 S.b_out as Connection5
            connect C2 S.c_out as Connection6
            connect ctrl S.ctrl_in as Connection7

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The controlled switch is represented by a Line component in OpenDSS and by a Triple Pole Single Throw Contactor component in the Schematic Editor.<br><br>When simulating in the time domain within Typhoon’s environment, the control signal must be provided by signal processing elements or digital inputs.<br><br>If external control is not needed, a Manual Switch component can be used to allow fast double-click state toggling.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=173"

                enable_fb_out {
                    label = "Feedback output"
                    description = "Enable contactor feedback output"
                    widget = combo
                    combo_values = "True", "False"
                    type = string
                    default_value = "False"
                    group = "General:1"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_inner_property(mdl, container_handle, "enable_fb_out", new_value)
                        comp_script.update_fb_connection(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                fb_out_type {
                    label = "Signal type"
                    description = "Feedback signal type"
                    widget = combo
                    combo_values = "real", "int", "uint"
                    type = string
                    default_value = "real"
                    group = "General:1"
                    nonvisible
                    keepline
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_inner_property(mdl, container_handle, "fb_out_type", new_value)
                    ENDCODE
                }

                execution_rate {
                    label = "Execution rate"
                    description = "Signal processing execution rate"
                    widget = edit
                    type = real
                    default_value = "inherit"
                    min_value = .5e-6
                    group = "General"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_inner_property(mdl, container_handle, "execution_rate", new_value)
                    ENDCODE
                }

                initial_state {
                    label = "Initial state"
                    description = "Initial state of the contactor"
                    widget = combo
                    combo_values = "off", "on"
                    type = string
                    default_value = "on"
                    group = "Initial state:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_inner_property(mdl, container_handle, "initial_state", new_value)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                on_delay {
                    label = "On delay"
                    description = "Turn on delay"
                    widget = edit
                    type = real
                    default_value = "0"
                    unit = "s"
                    min_value = 0
                    max_value = 0.5
                    group = "Timing:3"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_inner_property(mdl, container_handle, "on_delay", new_value)
                    ENDCODE
                }

                off_delay {
                    label = "Off delay"
                    description = "Turn off delay"
                    widget = edit
                    type = real
                    default_value = "0"
                    unit = "s"
                    min_value = 0
                    max_value = 0.5
                    group = "Timing"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_inner_property(mdl, container_handle, "off_delay", new_value)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    ok = dialog.show()
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_ctrlsw as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                ENDCODE
            }
        }
        [
            position = 4768, 4200
            size = 64, 96
        ]

        component Subsystem Fault {
            layout = static

            port A1 {
                label = "A1"
                position = left top
                kind = pe
                direction =  in
            }
            [
                position = 7600, 7856
            ]

            port B1 {
                label = "B1"
                position = left center
                kind = pe
                direction =  in
            }
            [
                position = 7600, 7952
            ]

            port C1 {
                label = "C1"
                position = left bottom
                kind = pe
                direction =  in
            }
            [
                position = 7600, 8048
            ]

            port A2 {
                label = "A2"
                position = right top
                kind = pe
                direction =  in
            }
            [
                position = 7872, 7856
                scale = -1, 1
            ]

            port B2 {
                label = "B2"
                position = right center
                kind = pe
                direction =  in
            }
            [
                position = 7872, 7952
                scale = -1, 1
            ]

            port C2 {
                label = "C2"
                position = 32, 32
                kind = pe
                direction =  in
            }
            [
                position = 7872, 8048
                scale = -1, 1
            ]

            connect A1 A2 as Connection1
            connect B1 B2 as Connection2
            connect C1 C2 as Connection3

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The OpenDSS Fault object is a resistor network, a two-terminal device in which the second terminal defaults to ground.<br><br>Only one Bus must be connected to either side this component.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=169"

                type {
                    label = "Fault type"
                    widget = combo
                    combo_values = "A-B-C-GND", "A-B-GND", "A-C-GND", "B-C-GND", "A-GND", "B-GND", "C-GND", "A-B-C", "A-B", "A-C", "B-C", "None"
                    type = string
                    default_value = "A-B-C-GND"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_inner_fault(mdl, container_handle, "fault_type", new_value)
                        comp_script.update_inner_gnd(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                resistance {
                    label = "Resistance (phase)"
                    widget = edit
                    type = string
                    default_value = "0.0001"
                    unit = "Ω"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_inner_fault(mdl, container_handle, "resistance", new_value)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_fault as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4768, 4320
            size = 64, 96
        ]

        component Subsystem "Single-Phase Transformer" {
            layout = static
            label = "T"
            component "core/Single Phase Multi-Winding Transformer" T1 {
                I_prim = "0"
                I_sec = "[0]"
                L_prim = "0.004124789481706419"
                L_sec = "[0.004124789481706419]"
                Lm = "inf"
                R_prim = "1.5550090000000003"
                R_sec = "[1.5550090000000003]"
                Rm = "7775.045"
                Sn = "1000000"
                f = "60"
                n_prim = "12470.0"
                n_sec = "[12470.0]"
            }
            [
                position = 8400, 8200
                size = 124, 256
            ]

            port A2 {
                position = 32.0, -16.0
                kind = pe
                direction =  in
            }
            [
                position = 9320, 8104
                scale = -1, 1
            ]

            port B2 {
                position = 32.0, 16.0
                kind = pe
                direction =  in
            }
            [
                position = 9320, 8296
                scale = -1, 1
            ]

            port A1 {
                position = -32.0, -16.0
                kind = pe
            }
            [
                position = 7992, 8104
            ]

            port B1 {
                position = -32.0, 16.0
                kind = pe
            }
            [
                position = 7992, 8296
            ]

            tag TagA2 {
                value = "TA_2"
                scope = local
                kind = pe
            }
            [
                position = 9200, 8104
                size = 60, 20
            ]

            tag TagB2 {
                value = "TB_2"
                scope = local
                kind = pe
            }
            [
                position = 9200, 8296
                size = 59, 20
            ]

            tag TagRegA1 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 8696, 8104
                size = 60, 20
            ]

            tag TagRegB1 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 8696, 8296
                size = 59, 20
            ]

            tag TagRegA2 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 9064, 8104
                scale = -1, 1
                size = 60, 20
            ]

            tag TagRegB2 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 9064, 8296
                scale = -1, 1
                size = 59, 20
            ]

            tag TagTB2 {
                value = "TB_2"
                scope = local
                kind = pe
            }
            [
                position = 8576, 8296
                scale = -1, 1
                size = 60, 20
            ]

            tag TagTA2 {
                value = "TA_2"
                scope = local
                kind = pe
            }
            [
                position = 8576, 8104
                scale = -1, 1
                size = 60, 20
            ]

            tag TagTB1 {
                value = "TB_1"
                scope = local
                kind = pe
            }
            [
                position = 8240, 8296
                size = 60, 20
            ]

            tag TagA1 {
                value = "TA_1"
                scope = local
                kind = pe
            }
            [
                position = 8104, 8104
                scale = -1, 1
                size = 60, 20
            ]

            tag TagB1 {
                value = "TB_1"
                scope = local
                kind = pe
            }
            [
                position = 8096, 8296
                scale = -1, 1
                size = 59, 20
            ]

            tag TagTA1 {
                value = "TA_1"
                scope = local
                kind = pe
            }
            [
                position = 8240, 8104
                size = 60, 20
            ]

            connect A1 TagA1 as Connection91
            connect TagB1 B1 as Connection92
            connect TagTB1 T1.prm_2 as Connection93
            connect TagTA2 T1.sec_1 as Connection95
            connect T1.sec_2 TagTB2 as Connection96
            connect TagA2 A2 as Connection97
            connect TagB2 B2 as Connection98
            connect T1.prm_1 TagTA1 as Connection99

            KVAs = "[1000, 1000]"
            KVs = "[12.47, 12.47]"
            XscArray = "[2.0, 2.0]"
            percentNoloadloss = "2"
            percentRs = "[1, 1]"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Single-Phase Transfomer is implemented as a multi-terminal power delivery element and consists of two or more windings.<br></br><br></br>Note that contrary to OpenDSS, individual reactances are defined in the mask. Reactances between windings will be calculated.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=179"

                num_windings {
                    label = "Number of windings"
                    widget = combo
                    combo_values = "2", "3", "4", "5", "6", "7", "8", "9", "10"
                    type = string
                    default_value = "2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_subsystem_components(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.show_hide_couplings(mdl, container_handle)
                        comp_script.update_regctrl_combo(mdl, container_handle)
                    ENDCODE
                }

                embedded_cpl_12 {
                    label = "Embedded coupling 1-2"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_13 {
                    label = "Embedded coupling 1-3"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_14 {
                    label = "Embedded coupling 1-4"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_15 {
                    label = "Embedded coupling 1-5"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_16 {
                    label = "Embedded coupling 1-6"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_17 {
                    label = "Embedded coupling 1-7"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_18 {
                    label = "Embedded coupling 1-8"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_19 {
                    label = "Embedded coupling 1-9"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                embedded_cpl_110 {
                    label = "Embedded coupling 1-10"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        prop_name = mdl.get_name(prop_handle)
                        inner_prop_handle = mdl.prop(T_handle, prop_name)
                        mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE
                }

                KVs {
                    label = "Array of rated winding phase voltages"
                    widget = edit
                    type = generic
                    default_value = "[12.47e3, 12.47e3]"
                    unit = "kV"
                }

                KVAs {
                    label = "Array of winding kVA ratings"
                    widget = edit
                    type = generic
                    default_value = "[12e6, 6e6]"
                    unit = "kVA"
                }

                percentRs {
                    label = "Array of winding percent resistances"
                    widget = edit
                    type = generic
                    default_value = "[2, 2]"
                    unit = "%"
                }

                XArray {
                    label = "Winding reactances"
                    widget = edit
                    type = generic
                    default_value = "[1, 1]"
                    unit = "%"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.convert_all_properties(mdl, container_handle)
                    ENDCODE
                }

                XscArray {
                    label = "Array of short-circuit reactances"
                    widget = edit
                    type = generic
                    default_value = "[1]"
                    unit = "%"
                    nonvisible
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_frequency_prop(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                Basefreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    nonvisible
                }

                percentNoloadloss {
                    label = "No-load losses"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "%"
                }

                percentimag {
                    label = "Magnetizing current"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                }

                regcontrol_on {
                    label = "Activate RegControl"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "RegControl:4"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_regcontrol_props(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_regcontrol_props(mdl, container_handle)
                        comp_script.vreg_connection(mdl, container_handle)
                    ENDCODE
                }

                maxtap {
                    label = "Maximum tap voltage"
                    widget = edit
                    type = string
                    default_value = "1.1"
                    unit = "pu"
                    group = "RegControl:4"
                    disabled
                }

                mintap {
                    label = "Minimum tap voltage"
                    widget = edit
                    type = string
                    default_value = "0.9"
                    unit = "pu"
                    group = "RegControl:4"
                    disabled
                }

                numtaps {
                    label = "Number of taps"
                    widget = edit
                    type = string
                    default_value = "32"
                    group = "RegControl:4"
                    disabled
                }

                ctrl_winding {
                    label = "Monitored winding"
                    widget = combo
                    combo_values = "Winding 1", "Winding 2"
                    type = string
                    default_value = "Winding 1"
                    group = "RegControl:4"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.vreg_connection(mdl, container_handle)
                        comp_script.update_regctrl_combo(mdl, container_handle)
                    ENDCODE
                }

                vreg {
                    label = "Vreg"
                    widget = edit
                    type = string
                    default_value = "207.84"
                    unit = "V"
                    group = "RegControl:4"
                    disabled

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.calculate_winding_voltage(mdl, container_handle)
                    ENDCODE
                }

                ptratio {
                    label = "PT ratio"
                    widget = edit
                    type = string
                    default_value = "60"
                    unit = "V"
                    group = "RegControl:4"
                    disabled

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                winding_voltage {
                    label = "Voltage result"
                    widget = edit
                    type = string
                    default_value = "12470"
                    unit = "V"
                    group = "RegControl:4"
                    disabled
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                band {
                    label = "Bandwidth"
                    widget = edit
                    type = string
                    default_value = "3"
                    unit = "V"
                    group = "RegControl:4"
                    disabled
                }

                delay {
                    label = "Delay"
                    widget = edit
                    type = string
                    default_value = "15"
                    unit = "s"
                    group = "RegControl:4"
                    disabled
                }

                execution_rate {
                    label = "Execution rate"
                    widget = edit
                    type = string
                    default_value = "100e-6"
                    unit = "s"
                    group = "RegControl:4"
                    disabled
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring:5"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.show_hide_couplings(mdl, item_handle)

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_sptransf as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    # HEADER START
                    num_windings = mdl.get_property_value(mdl.prop(item_handle, "num_windings"))
                    KVs = mdl.get_property_value(mdl.prop(item_handle, "KVs"))
                    KVAs = mdl.get_property_value(mdl.prop(item_handle, "KVAs"))
                    percentRs = mdl.get_property_value(mdl.prop(item_handle, "percentRs"))
                    XscArray = mdl.get_property_value(mdl.prop(item_handle, "XscArray"))
                    Basefreq = mdl.get_property_value(mdl.prop(item_handle, "Basefreq"))
                    percentNoloadloss = mdl.get_property_value(mdl.prop(item_handle, "percentNoloadloss"))
                    percentimag = mdl.get_property_value(mdl.prop(item_handle, "percentimag"))
                    # HEADER STOP
                    comp_script.validate_properties(mdl, item_handle)
                    comp_script.convert_all_properties(mdl, item_handle)

                ENDCODE
            }
        }
        [
            position = 4616, 4192
            size = 64, 64
        ]

        component Subsystem "Three-Phase Transformer" {
            layout = static
            label = "T"

            component "core/Three Phase Two Winding Transformer" T1 {
                input = "SI"
            }
            [
                position = 8448, 8192
                size = 126, 256
            ]

            port A1 {
                position = -32.0, -32.0
                kind = pe
            }
            [
                position = 8056, 8088
            ]

            port B1 {
                position = -32.0, 0.0
                kind = pe
            }
            [
                position = 8056, 8160
            ]

            port C1 {
                position = -32.0, 32.0
                kind = pe
            }
            [
                position = 8056, 8232
            ]

            port A2 {
                position = 32.0, -32.0
                kind = pe
            }
            [
                position = 9408, 8088
                scale = -1, 1
            ]

            port B2 {
                position = 32.0, 0.0
                kind = pe
            }
            [
                position = 9408, 8160
                scale = -1, 1
            ]

            port C2 {
                position = 32.0, 32.0
                kind = pe
            }
            [
                position = 9408, 8240
                scale = -1, 1
            ]

            port N1 {
                position = -24, 48
                kind = pe
                direction =  in
            }
            [
                position = 8224, 8496
            ]

            port N2 {
                position = 24, 48
                kind = pe
                direction =  in
            }
            [
                position = 8496, 8496
                scale = -1, 1
            ]

            tag TagA1 {
                value = "TA_1"
                scope = local
                kind = pe
            }
            [
                position = 8136, 8088
                scale = -1, 1
                size = 60, 20
            ]

            tag TagB1 {
                value = "TB_1"
                scope = local
                kind = pe
            }
            [
                position = 8136, 8160
                scale = -1, 1
                size = 59, 20
            ]

            tag TagC1 {
                value = "TC_1"
                scope = local
                kind = pe
            }
            [
                position = 8136, 8232
                scale = -1, 1
                size = 60, 20
            ]

            tag TagA2 {
                value = "TA_2"
                scope = local
                kind = pe
            }
            [
                position = 9272, 8088
                size = 60, 20
            ]

            tag TagB2 {
                value = "TB_2"
                scope = local
                kind = pe
            }
            [
                position = 9272, 8160
                size = 59, 20
            ]

            tag TagC2 {
                value = "TC_2"
                scope = local
                kind = pe
            }
            [
                position = 9272, 8240
                size = 60, 20
            ]

            tag TagRegA1 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 8800, 8088
                size = 60, 20
            ]

            tag TagRegB1 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 8800, 8184
                size = 59, 20
            ]

            tag TagRegC1 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 8800, 8280
                size = 60, 20
            ]

            tag Reg_N1 {
                value = "T_N2"
                scope = local
                kind = pe
            }
            [
                position = 8800, 8376
                size = 60, 20
            ]

            tag TagRegA2 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 9120, 8088
                scale = -1, 1
                size = 60, 20
            ]

            tag TagRegB2 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 9120, 8232
                scale = -1, 1
                size = 59, 20
            ]

            tag TagRegC2 {
                value = "not_used"
                scope = local
                kind = pe
            }
            [
                position = 9120, 8376
                scale = -1, 1
                size = 60, 20
            ]

            tag TagTB2 {
                value = "TB_2"
                scope = local
                kind = pe
            }
            [
                position = 8600, 8192
                scale = -1, 1
                size = 60, 20
            ]

            tag TagTC2 {
                value = "TC_2"
                scope = local
                kind = pe
            }
            [
                position = 8600, 8288
                scale = -1, 1
                size = 60, 20
            ]

            tag TagTN2 {
                value = "T_N2"
                scope = local
                kind = pe
            }
            [
                position = 8600, 8464
                scale = -1, 1
                size = 60, 20
            ]

            tag TagTA2 {
                value = "TA_2"
                scope = local
                kind = pe
            }
            [
                position = 8600, 8096
                scale = -1, 1
                size = 60, 20
            ]

            tag TagTB1 {
                value = "TB_1"
                scope = local
                kind = pe
            }
            [
                position = 8296, 8192
                size = 60, 20
            ]

            tag TagTC1 {
                value = "TC_1"
                scope = local
                kind = pe
            }
            [
                position = 8296, 8288
                size = 60, 20
            ]

            tag TagTA1 {
                value = "TA_1"
                scope = local
                kind = pe
            }
            [
                position = 8296, 8096
                size = 60, 20
            ]

            junction Junction1 pe
            [
                position = 8480, 8464
            ]

            connect TagA1 A1 as Connection42
            connect B1 TagB1 as Connection43
            connect TagC1 C1 as Connection44
            connect T1.sec_2 TagTB2 as Connection68
            connect T1.sec_3 TagTC2 as Connection69
            connect A2 TagA2 as Connection72
            connect TagB2 B2 as Connection73
            connect C2 TagC2 as Connection74
            connect T1.n2 Junction1 as Connection79
            connect TagTN2 Junction1 as Connection81
            connect TagTA2 T1.sec_1 as Connection84
            connect T1.prm_2 TagTB1 as Connection86
            connect TagTC1 T1.prm_3 as Connection87
            connect T1.n1 N1 as Connection88
            connect T1.n2 N2 as Connection89
            connect TagTA1 T1.prm_1 as Connection90

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Three-Phase Transfomer is implemented as a multi-terminal power delivery element and consists of two or more windings, with a default wye-wye connection.<br></br><br></br>Note that contrary to OpenDSS, individual reactances are defined in the mask. Reactances between windings will be calculated.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=179"

                num_windings {
                    label = "Number of windings"
                    widget = combo
                    combo_values = "2", "3", "4"
                    type = string
                    default_value = "2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
                        comp_script.update_subsystem_components(mdl, container_handle, created_ports)
                        comp_script.update_all_windings(mdl, container_handle, created_ports)
                        comp_script.show_hide_conn(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.show_hide_conn(mdl, container_handle)
                        comp_script.show_hide_couplings(mdl, container_handle)
                        comp_script.enable_disable_grounds(mdl, container_handle)
                        comp_script.update_regctrl_combo(mdl, container_handle)
                    ENDCODE
                }

                embedded_cpl {
                    label = "Embedded coupling"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling:3"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        T_type = mdl.get_component_type_name(T_handle)
                        if "Two Winding" in T_type:
                            prop_name = mdl.get_name(prop_handle)
                            inner_prop_handle = mdl.prop(T_handle, prop_name)
                            mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.enable_disable_grounds(mdl, container_handle)
                    ENDCODE
                }

                embedded_cpl_12 {
                    label = "Embedded coupling 1-2"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        T_type = mdl.get_component_type_name(T_handle)
                        types = ["Three Winding", "Four Winding"]
                        if any(t in T_type for t in types):
                            prop_name = mdl.get_name(prop_handle)
                            inner_prop_handle = mdl.prop(T_handle, prop_name)
                            mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.enable_disable_grounds(mdl, container_handle)
                    ENDCODE
                }

                embedded_cpl_13 {
                    label = "Embedded coupling 1-3"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        T_type = mdl.get_component_type_name(T_handle)
                        types = ["Three Winding", "Four Winding"]
                        if any(t in T_type for t in types):
                            prop_name = mdl.get_name(prop_handle)
                            inner_prop_handle = mdl.prop(T_handle, prop_name)
                            mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.enable_disable_grounds(mdl, container_handle)
                    ENDCODE
                }

                embedded_cpl_14 {
                    label = "Embedded coupling 1-4"
                    widget = combo
                    combo_values = "None", "Ideal Transformer", "TLM"
                    type = string
                    default_value = "None"
                    group = "Core coupling"
                    no_evaluate

                    CODE property_value_changed
                        T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
                        T_type = mdl.get_component_type_name(T_handle)
                        if "Four Winding" in T_type:
                            prop_name = mdl.get_name(prop_handle)
                            inner_prop_handle = mdl.prop(T_handle, prop_name)
                            mdl.set_property_value(inner_prop_handle, new_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.enable_disable_grounds(mdl, container_handle)
                    ENDCODE
                }

                KVs {
                    label = "Array of rated winding phase voltages"
                    widget = edit
                    type = generic
                    default_value = "[12.47, 12.47]"
                    unit = "kV"
                }

                KVAs {
                    label = "Array of winding kVA ratings"
                    widget = edit
                    type = generic
                    default_value = "[1000, 1000]"
                    unit = "kVA"
                }

                percentRs {
                    label = "Array of winding percent resistances"
                    widget = edit
                    type = generic
                    default_value = "[2, 2]"
                    unit = "%"
                }

                XArray {
                    label = "Winding reactances"
                    widget = edit
                    type = generic
                    default_value = "[1, 1]"
                    unit = "%"
                }

                XscArray {
                    label = "Short circuit reactances"
                    widget = edit
                    type = generic
                    default_value = "[2.0, 2.0]"
                    unit = "%"
                    nonvisible
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_frequency_prop(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                Basefreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    nonvisible
                }

                percentNoloadloss {
                    label = "No-load losses"
                    widget = edit
                    type = generic
                    default_value = "2"
                    unit = "%"
                }

                percentimag {
                    label = "Magnetizing current"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                }

                prim_conn {
                    label = "Primary"
                    widget = combo
                    combo_values = "Y", "Δ"
                    type = string
                    default_value = "Y"
                    group = "Winding connections:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.show_hide_ground(mdl, prop_handle, container_handle)
                    ENDCODE
                }

                grounded_prim {
                    label = "Grounded Primary"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Winding connections"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                    ENDCODE
                }

                sec1_conn {
                    label = "Secondary 1"
                    widget = combo
                    combo_values = "Y", "Δ"
                    type = string
                    default_value = "Y"
                    group = "Winding connections"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                        comp_script.vreg_connection(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.show_hide_ground(mdl, prop_handle, container_handle)
                    ENDCODE
                }

                grounded_sec1 {
                    label = "Grounded Secondary 1"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Winding connections"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                        comp_script.vreg_connection(mdl, container_handle)
                    ENDCODE
                }

                sec2_conn {
                    label = "Secondary 2"
                    widget = combo
                    combo_values = "Y", "Δ"
                    type = string
                    default_value = "Y"
                    group = "Winding connections"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                        comp_script.vreg_connection(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.show_hide_ground(mdl, prop_handle, container_handle)
                    ENDCODE
                }

                grounded_sec2 {
                    label = "Grounded Secondary 2"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Winding connections"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                        comp_script.vreg_connection(mdl, container_handle)
                    ENDCODE
                }

                sec3_conn {
                    label = "Secondary 3"
                    widget = combo
                    combo_values = "Y", "Δ"
                    type = string
                    default_value = "Y"
                    group = "Winding connections"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                        comp_script.vreg_connection(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.show_hide_ground(mdl, prop_handle, container_handle)
                    ENDCODE
                }

                grounded_sec3 {
                    label = "Grounded Secondary 3"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Winding connections"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
                    ENDCODE
                }

                regcontrol_on {
                    label = "Activate RegControl"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "RegControl:4"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_regcontrol_props(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_regcontrol_props(mdl, container_handle)
                        comp_script.vreg_connection(mdl, container_handle)
                    ENDCODE
                }

                maxtap {
                    label = "Maximum tap voltage"
                    widget = edit
                    type = string
                    default_value = "1.1"
                    unit = "pu"
                    group = "RegControl:4"
                    disabled
                }

                mintap {
                    label = "Minimum tap voltage"
                    widget = edit
                    type = string
                    default_value = "0.9"
                    unit = "pu"
                    group = "RegControl:4"
                    disabled
                }

                numtaps {
                    label = "Number of taps"
                    widget = edit
                    type = string
                    default_value = "32"
                    group = "RegControl:4"
                    disabled
                }

                ctrl_winding {
                    label = "Monitored winding"
                    widget = combo
                    combo_values = "Winding 1", "Winding 2"
                    type = string
                    default_value = "Winding 1"
                    group = "RegControl:4"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.vreg_connection(mdl, container_handle)
                        comp_script.update_regctrl_combo(mdl, container_handle)
                    ENDCODE
                }

                vreg {
                    label = "Vreg"
                    widget = edit
                    type = string
                    default_value = "120"
                    unit = "V"
                    group = "RegControl:4"
                    disabled

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.calculate_winding_voltage(mdl, container_handle)
                    ENDCODE
                }

                ptratio {
                    label = "PT ratio"
                    widget = edit
                    type = string
                    default_value = "60"
                    unit = "V"
                    group = "RegControl:4"
                    disabled

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.calculate_winding_voltage(mdl, container_handle)
                    ENDCODE
                }

                winding_voltage {
                    label = "Line voltage result"
                    widget = edit
                    type = string
                    default_value = "7200.0"
                    unit = "V"
                    group = "RegControl:4"
                    disabled
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                band {
                    label = "Bandwidth"
                    widget = edit
                    type = string
                    default_value = "3"
                    unit = "V"
                    group = "RegControl:4"
                    disabled
                }

                delay {
                    label = "Delay"
                    widget = edit
                    type = string
                    default_value = "15"
                    unit = "s"
                    group = "RegControl:4"
                    disabled
                }

                execution_rate {
                    label = "Execution rate"
                    widget = edit
                    type = string
                    default_value = "100e-6"
                    unit = "s"
                    group = "RegControl:4"
                    disabled
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring:5"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_tptransf as comp_script

                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    # HEADER START
                    num_windings = mdl.get_property_value(mdl.prop(item_handle, "num_windings"))
                    embedded_cpl = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl"))
                    embedded_cpl_12 = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl_12"))
                    embedded_cpl_13 = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl_13"))
                    embedded_cpl_14 = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl_14"))
                    KVs = mdl.get_property_value(mdl.prop(item_handle, "KVs"))
                    KVAs = mdl.get_property_value(mdl.prop(item_handle, "KVAs"))
                    percentRs = mdl.get_property_value(mdl.prop(item_handle, "percentRs"))
                    XArray = mdl.get_property_value(mdl.prop(item_handle, "XArray"))
                    XscArray = mdl.get_property_value(mdl.prop(item_handle, "XscArray"))
                    Basefreq = mdl.get_property_value(mdl.prop(item_handle, "Basefreq"))
                    percentNoloadloss = mdl.get_property_value(mdl.prop(item_handle, "percentNoloadloss"))
                    percentimag = mdl.get_property_value(mdl.prop(item_handle, "percentimag"))
                    prim_conn = mdl.get_property_value(mdl.prop(item_handle, "prim_conn"))
                    grounded_prim = mdl.get_property_value(mdl.prop(item_handle, "grounded_prim"))
                    sec1_conn = mdl.get_property_value(mdl.prop(item_handle, "sec1_conn"))
                    grounded_sec1 = mdl.get_property_value(mdl.prop(item_handle, "grounded_sec1"))
                    sec2_conn = mdl.get_property_value(mdl.prop(item_handle, "sec2_conn"))
                    grounded_sec2 = mdl.get_property_value(mdl.prop(item_handle, "grounded_sec2"))
                    sec3_conn = mdl.get_property_value(mdl.prop(item_handle, "sec3_conn"))
                    grounded_sec3 = mdl.get_property_value(mdl.prop(item_handle, "grounded_sec3"))
                    # HEADER STOP

                    comp_script.validate_properties(mdl, item_handle)
                    comp_script.convert_all_properties(mdl, item_handle)

                ENDCODE

                CODE post_resolve
                ENDCODE
            }
        }
        [
            position = 4616, 4064
            size = 64, 96
        ]

        component Subsystem SimDSS {
            layout = static

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Use this component to control the simulation and interact with the model.<br><br>Define the solution type and voltage bases in the Simulation tab. You may also append OpenDSS commands or entire .dss files to the generated code.<br><br>You can display the OpenDSS calculation results by selecting the desired output in the Show tab. Alternatively, you can generate an automatic report from the Report tab.<br><br>From the Advanced tab some simulation parameters can be set and OpenDSS text commands can be run.</p></body></html>"

                sim_mode {
                    label = "Simulation mode"
                    widget = combo
                    combo_values = "Snap", "Faultstudy", "Time Series"
                    type = string
                    default_value = "Snap"
                    group = "Simulation:1"
                    no_evaluate
                }

                basefrequency {
                    label = "Base frequency"
                    widget = edit
                    type = string
                    default_value = "60"
                    unit = "Hz"
                    group = "Simulation"
                }

                voltagebases {
                    label = "Voltage bases"
                    widget = edit
                    type = generic
                    default_value = "[0.480, 12.47]"
                    unit = "kV"
                    group = "Simulation"
                }

                tsstp {
                    label = "Time Series Step size"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "h"
                    group = "Simulation"
                }

                tspoints {
                    label = "Time Series num. points"
                    widget = edit
                    type = generic
                    default_value = "24"
                    group = "Simulation"
                }

                append {
                    label = "Append DSS commands"
                    widget = button
                    type = string
                    default_value = "Open"
                    group = "Simulation"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.append_commands(mdl, container_handle)
                    ENDCODE
                }

                export_to_dss {
                    label = "Start the simulation"
                    widget = button
                    type = string
                    default_value = "Run"
                    group = "Simulation"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.sim_with_opendss(mdl, container_handle)
                    ENDCODE
                }

                sim_status {
                    label = "Last simulation status"
                    widget = edit
                    type = string
                    default_value = "None"
                    group = "Simulation"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                sim_counter {
                    label = "sim_counter"
                    widget = edit
                    type = string
                    default_value = "0"
                    group = "Simulation"
                    nonvisible
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                voltages {
                    label = "Voltages"
                    widget = combo
                    combo_values = "LN", "LL", "LN Nodes", "LN Elements", "LL Nodes"
                    type = string
                    default_value = "LN Nodes"
                    group = "Show:2"
                    no_evaluate
                }

                show_v {
                    widget = button
                    type = string
                    default_value = "Show voltages"
                    group = "Show"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.command_buttons(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                currents {
                    label = "Currents"
                    widget = combo
                    combo_values = "Seq", "Elem", "Elem Resid"
                    type = string
                    default_value = "Seq"
                    group = "Show"
                    no_evaluate
                }

                show_c {
                    widget = button
                    type = string
                    default_value = "Show currents"
                    group = "Show"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.command_buttons(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                powers {
                    label = "Powers"
                    widget = combo
                    combo_values = "kVA", "MVA", "kVA Elem", "MVA Elem"
                    type = string
                    default_value = "kVA"
                    group = "Show"
                    no_evaluate
                }

                show_p {
                    widget = button
                    type = string
                    default_value = "Show powers"
                    group = "Show"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.command_buttons(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                misc {
                    label = "Misc"
                    widget = combo
                    combo_values = "Buses", "Elements", "Generators", "Losses"
                    type = string
                    default_value = "Buses"
                    group = "Show"
                    no_evaluate
                }

                show_misc {
                    widget = button
                    type = string
                    default_value = "Show misc"
                    group = "Show"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.command_buttons(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                report_snap {
                    label = "Power flow report"
                    widget = button
                    type = string
                    default_value = "Generate"
                    group = "Report:3"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.report(mdl, container_handle, mode="snap")
                    ENDCODE
                }

                report_fault {
                    label = "Fault study report"
                    widget = button
                    type = string
                    default_value = "Generate"
                    group = "Report:3"
                    no_evaluate
                    nonvisible

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.report(mdl, container_handle, mode="fault")
                    ENDCODE
                }

                algorithm {
                    label = "Algorithm"
                    widget = combo
                    combo_values = "Normal", "Newton"
                    type = string
                    default_value = "Normal"
                    group = "Advanced:4"
                    no_evaluate
                }

                loadmodel {
                    label = "Load model"
                    widget = combo
                    combo_values = "Power flow", "Admittance"
                    type = string
                    default_value = "Power flow"
                    group = "Advanced"
                    no_evaluate
                }

                miniterations {
                    label = "Minimum iterations"
                    widget = edit
                    type = generic
                    default_value = "2"
                    group = "Advanced"
                }

                maxiter {
                    label = "Maximum iterations"
                    widget = edit
                    type = generic
                    default_value = "15"
                    group = "Advanced"
                }

                command {
                    label = "Command"
                    widget = edit
                    type = generic
                    default_value = "show voltages LN"
                    group = "Advanced"
                    no_evaluate
                }

                run {
                    widget = button
                    type = string
                    default_value = "Run"
                    group = "Advanced"
                    keepline
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.run_command(mdl, container_handle)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.set_basefrequency_ns_var(mdl, item_handle)

                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                    extra_path = os.path.join(os.path.realpath(lib_path), "extra")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)
                    if not extra_path in sys.path:
                        sys.path.append(extra_path)

                    import comp_simdss as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.add_python_portable_to_path(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)

                    comp_script.set_basefrequency_ns_var(mdl, item_handle)

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.add_python_portable_to_path(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE post_copy
                    mdl.info("You must add a new SimDSS component from the library instead of copying to another model.")
                ENDCODE
            }
        }
        [
            position = 4480, 3904
            size = 96, 96
        ]

        component Subsystem Isource {
            layout = static
            label = "I"
            component src_current Ia {
                init_frequency = "60"
                init_phase = "0"
                init_rms_value = "0"
                init_source_nature = "Sine"
            }
            [
                position = 8112, 8096
                rotation = down
            ]

            component src_current Ib {
                init_frequency = "60"
                init_phase = "-120"
                init_rms_value = "0"
                init_source_nature = "Sine"
            }
            [
                position = 8112, 8192
                rotation = down
            ]

            component src_current Ic {
                init_frequency = "60"
                init_phase = "-240"
                init_rms_value = "0"
                init_source_nature = "Sine"
            }
            [
                position = 8112, 8288
                rotation = down
            ]

            component src_ground gnd1 {
            }
            [
                position = 8000, 8400
            ]

            port A1 {
                position = 32.0, -32.0
                kind = pe
            }
            [
                position = 8496, 8096
                rotation = down
            ]

            port B1 {
                position = 32.0, 0.0
                kind = pe
            }
            [
                position = 8496, 8192
                rotation = down
            ]

            port C1 {
                position = 32.0, 32.0
                kind = pe
            }
            [
                position = 8496, 8288
                rotation = down
            ]

            connect Ib.p_node B1 as Connection25
            connect Ia.p_node A1 as Connection26
            connect Ic.p_node C1 as Connection27
            connect gnd1.node Ia.n_node as Connection31
            connect Ic.n_node gnd1.node as Connection32
            connect Ib.n_node gnd1.node as Connection33

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The most common use of a current source is to represent harmonic sources and to be used in frequency response scans of circuit models.<br>Note that if the device you are trying to model produces or consumes power, it is generally better to model it with a Load or Generator object.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=168"

                amps {
                    label = "Current"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "A"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                Angle {
                    label = "Angle"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "°"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                Frequency {
                    label = "Frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_source_values(mdl, container_handle)
                    ENDCODE
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                BaseFreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_isource as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_source_values(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4328, 4192
            size = 64, 96
        ]

        component Subsystem Monitoring {
            layout = dynamic

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                not_used {
                    widget = edit
                    type = generic
                    default_value = "0"
                }

                run {
                    widget = button
                    type = string
                    default_value = "Run"
                    group = "Advanced"
                    no_evaluate

                    CODE button_clicked
                        #comp_script = return_comp_script(mdl, container_handle)
                        #comp_script.run_command(mdl, container_handle)
                    ENDCODE
                }

                CODE open
                    import pathlib
                    import json
                    import os
                    comp_script = return_comp_script(mdl, item_handle)

                    # Get the path to the the objects file
                    mdlfile = mdl.get_model_file_path()
                    mdlfile_name = pathlib.Path(mdlfile).stem
                    mdlfile_folder = pathlib.Path(mdlfile).parents[0]
                    mdlfile_target_folder = mdlfile_folder.joinpath(mdlfile_name + ' Target files')
                    dss_folder_path = pathlib.Path(mdlfile_target_folder).joinpath('dss')
                    dss_monitors_file = dss_folder_path.joinpath('data', 'monitors.dss')

                    if not dss_folder_path.is_dir():
                        os.makedirs(dss_folder_path)

                    monitors_dict = {}
                    new_obj_window = comp_script.Mon_obj(monitors_dict)
                    if os.path.isfile(dss_monitors_file):
                        new_obj_window.update_comps_list(str(dss_monitors_file))
                    new_obj_window.update_core_model(mdl, new_obj_window)
                    new_obj_window.update_dss_path(dss_folder_path, mdlfile_name)
                    new_obj_window.show()


                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                    gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)
                    if not gui_scripts_path in sys.path:
                        sys.path.append(gui_scripts_path)

                    import comp_monitoring as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4328, 4320
            size = 64, 64
        ]

        component Subsystem "Capacitor Bank" {
            layout = static
            label = "C"
            component pas_capacitor Ca {
                capacitance = "C"
            }
            [
                position = 8112, 8096
                rotation = down
            ]

            component pas_capacitor Cb {
                capacitance = "C"
            }
            [
                position = 8112, 8192
                rotation = down
            ]

            component pas_capacitor Cc {
                capacitance = "C"
            }
            [
                position = 8112, 8288
                rotation = down
            ]

            port A1 {
                position = -32.0, -32.0
                kind = pe
            }
            [
                position = 8392, 8096
                rotation = down
            ]

            port B1 {
                position = 0.0, -32.0
                kind = pe
            }
            [
                position = 8392, 8192
                rotation = down
            ]

            port C1 {
                position = 32.0, -32.0
                kind = pe
            }
            [
                position = 8392, 8288
                rotation = down
            ]

            junction j pe
            [
                position = 7992, 8192
            ]

            connect Ca.p_node A1 as Connection26
            connect Cc.p_node C1 as c1_conn
            connect j Ca.n_node as Connection28
            connect j Cb.n_node as Connection29
            connect j Cc.n_node as Connection30
            connect B1 Cb.p_node as b1_conn

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br>Three-Phase Capacitor Bank.</br></p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=171"

                tp_connection {
                    label = "Connection"
                    widget = combo
                    combo_values = "Y", "Y-grounded", "Δ", "Series"
                    type = string
                    default_value = "Y"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.port_dynamics(mdl, container_handle)
                        comp_script.redo_connections(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                BaseFreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    nonvisible
                }

                phases {
                    label = "Phases"
                    widget = combo
                    combo_values = "3", "2", "1"
                    type = string
                    default_value = "3"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.port_dynamics(mdl, container_handle)
                        comp_script.redo_connections(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                Kv {
                    label = "kV"
                    widget = edit
                    type = generic
                    default_value = "12.47"
                    unit = "kV"
                }

                Kvar {
                    label = "kVar"
                    widget = edit
                    type = generic
                    default_value = "600"
                    unit = "kVAr"
                }

                C {
                    label = "C"
                    widget = edit
                    type = generic
                    default_value = "1e-6"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                    gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)
                    if not gui_scripts_path in sys.path:
                        sys.path.append(gui_scripts_path)

                    import comp_capacitor as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    comp_script.calculate_c(mdl, item_handle)
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4472, 4320
            size = 96, 64
        ]

        component Subsystem Storage {
            layout = static

            component src_constant chtrigger {
                execution_rate = "execution_rate"
                value = "chargetrigger"
            }
            [
                position = 8128, 7440
            ]

            component src_constant dchtrigger {
                execution_rate = "execution_rate"
                value = "dischargetrigger"
            }
            [
                position = 8200, 7392
            ]

            component gen_c_function "Dispatch kW Reference Calculation" {
                input_terminals = "real loadshape_point;inherit kwrated;real dchtrigger;real chtrigger;int dispatch_mode;real pct_charge;real pct_discharge;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True;True;True;True;True"
                input_terminals_show_labels = "True;True;True;True;True;True;True"
                output_fnc = "/*Begin code section*/
if (dispatch_mode == 1 || dispatch_mode == 2 || dispatch_mode == 3){
    // Discharge mode
    if (loadshape_point > dchtrigger)
        {
            close_contactor = 1;
            kwref = kwrated*1000*pct_discharge/100;
        }
    // Charge mode
    else if (loadshape_point < chtrigger)
        {
            close_contactor = 1;
            kwref = -kwrated*1000*pct_charge/100;
        }
    // Idle mode
    else
        {
            close_contactor = 0;
            kwref = 0;
        }
}
else if (dispatch_mode == 4 || dispatch_mode == 5 || dispatch_mode == 6){
    // Idle mode
    if (loadshape_point == 0)
        {
            close_contactor = 0;
            kwref = 0;
        }
    else
        {
            close_contactor = 1;
            kwref = loadshape_point*kwrated*1000;
        }
}
/*End code section*/"
                output_terminals = "real close_contactor;real kwref;"
                output_terminals_dimensions = "inherit;inherit"
                output_terminals_feedthrough = "True;True"
                output_terminals_show_labels = "True;True"
            }
            [
                position = 8392, 7440
                size = 280, 368
            ]

            component gen_probe "Enable Inverter" {
            }
            [
                position = 8632, 7344
            ]

            component "core/Voltage Measurement" Vbat {
                execution_rate = "execution_rate"
                sig_output = "True"
            }
            [
                position = 8592, 8304
                rotation = right
                size = 64, 32
            ]

            component "core/Simple Battery inverter (Average)" "Simple Battery inverter (Average)1" {
                Cf = "inv_cf"
                Ki = "inv_ki"
                Kp = "inv_kp"
                L = "inv_l"
                R = "inv_r"
                Rf = "inv_rf"
                Sn = "4*kva*1000"
                Ts = "execution_rate"
            }
            [
                position = 7768, 8312
                scale = -1, 1
                size = 288, 239
            ]

            component Subsystem "Inverter Power Reference" {
                layout = dynamic
                component Subsystem "kvar calculation" {
                    layout = dynamic
                    component sys_mp_signal_switch kVAr {
                        number_of_input_terminals = "6"
                    }
                    [
                        position = 8872, 8240
                    ]

                    component src_constant "unit pf" {
                        execution_rate = "execution_rate"
                        value = "0"
                    }
                    [
                        position = 8664, 8208
                    ]

                    component src_constant kvar_kvar {
                        execution_rate = "execution_rate"
                        value = "kvar*1000"
                    }
                    [
                        position = 8664, 8352
                    ]

                    component gen_gain Gain1 {
                        gain = "np.sqrt(1/(pf*pf)-1)"
                    }
                    [
                        position = 8752, 8272
                    ]

                    component src_constant kwrated {
                        execution_rate = "execution_rate"
                        value = "kwrated*1000"
                    }
                    [
                        position = 8664, 8272
                    ]

                    port dispatch_int {
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8824, 8152
                        rotation = right
                    ]

                    port kvar_out {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8952, 8240
                    ]

                    junction Junction1 sp
                    [
                        position = 8808, 8208
                    ]

                    junction Junction2 sp
                    [
                        position = 8832, 8272
                    ]

                    junction Junction3 sp
                    [
                        position = 8800, 8288
                    ]

                    connect kvar_out kVAr.out as Connection47
                    connect dispatch_int kVAr.ctrl as Connection74
                    connect kwrated.out Gain1.in as Connection101
                    connect kVAr.in Junction1 as Connection103
                    connect Junction1 "unit pf.out" as Connection104
                    connect kVAr.in3 Junction1 as Connection105
                    connect Gain1.out Junction2 as Connection107
                    connect Junction2 kVAr.in1 as Connection108
                    connect kVAr.in4 Junction2 as Connection109
                    connect kvar_kvar.out Junction3 as Connection111
                    [
                        position = 0, 0
                        breakpoints = 8800, 8352
                    ]
                    connect Junction3 kVAr.in2 as Connection112
                    [
                        position = 0, 0
                        breakpoints = 8800, 8240
                    ]
                    connect kVAr.in5 Junction3 as Connection113
                }
                [
                    position = 7440, 8048
                    size = 120, 80
                ]

                component gen_product Product16 {
                    signs = "/*"
                }
                [
                    position = 7280, 7760
                ]

                component gen_product Product18 {
                }
                [
                    position = 6976, 7864
                ]

                component gen_product Product19 {
                }
                [
                    position = 7168, 7680
                ]

                component src_constant vmax {
                    execution_rate = "execution_rate"
                    value = "kv*1000*vmaxpu"
                }
                [
                    position = 6928, 7648
                ]

                component src_constant vmin {
                    execution_rate = "execution_rate"
                    value = "kv*1000*vminpu"
                }
                [
                    position = 6928, 7712
                ]

                component sys_signal_switch "Signal switch4" {
                    criterion = "ctrl > threshold"
                    threshold = "kv*1000"
                }
                [
                    position = 7024, 7680
                ]

                component gen_product Product20 {
                }
                [
                    position = 7672, 7912
                ]

                component gen_product Product21 {
                }
                [
                    position = 7672, 8040
                ]

                component sys_signal_switch "Signal switch2" {
                    criterion = "ctrl > threshold"
                    threshold = "0.1"
                }
                [
                    position = 7448, 7776
                ]

                component Subsystem "Constant Z mode check" {
                    layout = dynamic
                    component src_constant vmaxpu {
                        execution_rate = "execution_rate"
                        value = "vmaxpu*kv*1000"
                    }
                    [
                        position = 8088, 8152
                    ]

                    component src_constant vminpu {
                        execution_rate = "execution_rate"
                        value = "vminpu*kv*1000"
                    }
                    [
                        position = 8088, 8248
                    ]

                    component gen_rel_op "Relational operator1" {
                        relational_op = ">"
                    }
                    [
                        position = 8184, 8144
                    ]

                    component gen_rel_op "Relational operator2" {
                        relational_op = "<"
                    }
                    [
                        position = 8184, 8240
                    ]

                    component gen_logic_op "Logical operator1" {
                        operator = "OR"
                    }
                    [
                        position = 8296, 8192
                    ]

                    port v_line {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8088, 8080
                    ]

                    port constant_z_mode {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8408, 8192
                    ]

                    junction Junction560 sp
                    [
                        position = 8120, 8136
                    ]

                    connect Junction560 v_line as Connection2884
                    connect "Logical operator1.out" constant_z_mode as Connection2885
                    connect vmaxpu.out "Relational operator1.in1" as Connection2877
                    connect vminpu.out "Relational operator2.in1" as Connection2878
                    connect "Relational operator1.in" Junction560 as Connection2879
                    connect "Relational operator2.in" Junction560 as Connection2881
                    connect "Logical operator1.in" "Relational operator1.out" as Connection2882
                    connect "Relational operator2.out" "Logical operator1.in1" as Connection2883
                    [
                        position = 0, 0
                        breakpoints = 8216, 8240; 8216, 8200
                    ]
                }
                [
                    position = 7032, 7520
                    size = 152, 88
                ]

                component gen_probe ctZ {
                }
                [
                    position = 7496, 7520
                ]

                component src_constant const_p_mult {
                    execution_rate = "execution_rate"
                }
                [
                    position = 7344, 7840
                ]

                component sys_signal_switch "Signal switch3" {
                    criterion = "ctrl > threshold"
                    threshold = "0.1"
                }
                [
                    position = 7880, 7928
                ]

                component src_constant Constant1 {
                    execution_rate = "execution_rate"
                    value = "-pct_idlingkw/100*kwrated*1000"
                }
                [
                    position = 7776, 7944
                ]

                component gen_probe ctz_multiplier {
                }
                [
                    position = 7392, 7696
                ]

                component gen_data_type_conversion "Data Type Conversion1" {
                }
                [
                    position = 7784, 8040
                ]

                component gen_limiter Limit1 {
                    lower_limit = "[-4*kwrated*1000]"
                    upper_limit = "[4*kwrated*1000]"
                }
                [
                    position = 7968, 7928
                ]

                component gen_bus_join "Bus Join1" {
                    inputs = "3"
                }
                [
                    position = 8216, 7984
                ]

                component gen_probe "Inverter P Reference" {
                }
                [
                    position = 8056, 7888
                    rotation = left
                ]

                component src_constant enable_inverter {
                    execution_rate = "execution_rate"
                    _tunable = "False"
                }
                [
                    position = 8280, 7912
                    rotation = down
                    scale = 1, -1
                ]

                component gen_probe "Inverter Q Reference" {
                }
                [
                    position = 8056, 8112
                    rotation = right
                ]

                port dispatch_mode_int {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7288, 8048
                ]

                port v_line {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6720, 7872
                ]

                port active_status {
                    position = left:4
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7776, 7840
                ]

                port dss_kw {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7288, 7920
                ]

                port inv_inputs {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8304, 7984
                ]

                junction Junction18 sp
                [
                    position = 6928, 7872
                ]

                junction Junction20 sp
                [
                    position = 6800, 7872
                ]

                junction Junction21 sp
                [
                    position = 7120, 7680
                ]

                junction Junction562 sp
                [
                    position = 7448, 7520
                ]

                junction Junction563 sp
                [
                    position = 6800, 7616
                ]

                junction Junction564 sp
                [
                    position = 7536, 7904
                ]

                junction Junction566 sp
                [
                    position = 7344, 7760
                ]

                junction Junction567 sp
                [
                    position = 8056, 7928
                ]

                junction Junction568 sp
                [
                    position = 8056, 8040
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Multiplier</p></body></html> ENDCOMMENT
                [
                    position = 7544, 7776
                ]

                connect dispatch_mode_int "kvar calculation.dispatch_int" as Connection3112
                connect Product18.in1 Junction18 as Connection3148
                connect Product18.in Junction18 as Connection3150
                connect vmax.out "Signal switch4.in" as Connection3155
                connect vmin.out "Signal switch4.in1" as Connection3156
                connect Junction18 Junction20 as Connection3157
                connect Product19.in Junction21 as Connection3161
                connect Junction21 "Signal switch4.out" as Connection3162
                connect Product19.in1 Junction21 as Connection3163
                connect Product18.out Product16.in1 as Connection3173
                [
                    position = 0, 0
                    breakpoints = 7208, 7864; 7208, 7768
                ]
                connect v_line Junction20 as Connection3174
                [
                    position = 0, 0
                    breakpoints = 6800, 7872; 6800, 7872; 6800, 7872
                ]
                connect Product21.in1 "kvar calculation.kvar_out" as Connection3178
                connect "Constant Z mode check.constant_z_mode" Junction562 as Connection2900
                [
                    position = 0, 0
                ]
                connect Junction562 "Signal switch2.in2" as Connection2901
                connect ctZ.in Junction562 as Connection2902
                connect "Signal switch4.in2" Junction563 as Connection3183
                [
                    position = 0, 0
                    breakpoints = 7024, 7616
                ]
                connect Junction563 Junction20 as Connection3184
                [
                    position = 0, 0
                    breakpoints = 6800, 7688; 6800, 7712; 6800, 7832
                ]
                connect "Constant Z mode check.v_line" Junction563 as Connection3185
                connect const_p_mult.out "Signal switch2.in1" as Connection3188
                connect Product20.in Junction564 as Connection3189
                connect Junction564 Product21.in as Connection3190
                [
                    position = 0, 0
                    breakpoints = 7536, 7904
                ]
                connect "Signal switch2.out" Junction564 as Connection3191
                connect active_status "Signal switch3.in2" as Connection3193
                connect Constant1.out "Signal switch3.in1" as Connection3194
                connect "Signal switch3.in" Product20.out as Connection3195
                connect Product19.out Product16.in as Connection3203
                [
                    position = 0, 0
                    breakpoints = 7208, 7688
                ]
                connect Product16.out Junction566 as Connection3204
                connect Junction566 "Signal switch2.in" as Connection3205
                connect ctz_multiplier.in Junction566 as Connection3206
                connect "Data Type Conversion1.in" Product21.out as Connection3208
                connect Limit1.in "Signal switch3.out" as Connection3210
                connect enable_inverter.out "Bus Join1.in" as Connection3216
                connect dss_kw Product20.in1 as Connection3368
                [
                    position = 0, 0
                    breakpoints = 7360, 7920
                ]
                connect "Inverter P Reference.in" Junction567 as Connection3371
                connect Junction567 "Bus Join1.in1" as Connection3372
                [
                    position = 0, 0
                    breakpoints = 8056, 7936
                ]
                connect Limit1.out Junction567 as Connection3373
                connect "Bus Join1.in2" Junction568 as Connection3374
                [
                    position = 0, 0
                    breakpoints = 8056, 8000
                ]
                connect Junction568 "Inverter Q Reference.in" as Connection3375
                [
                    position = 0, 0
                    breakpoints = 8056, 8064; 8056, 8064
                ]
                connect "Data Type Conversion1.out" Junction568 as Connection3376
                connect "Bus Join1.out" inv_inputs as Connection3377
            }
            [
                position = 7728, 7952
                size = 144, 176
            ]

            component gen_probe Vline {
            }
            [
                position = 7472, 7872
                rotation = left
            ]

            component gen_probe "DSS kW Reference" {
            }
            [
                position = 8632, 7528
            ]

            component "core/Current Measurement" Ibat {
                execution_rate = "execution_rate"
                sig_output = "True"
            }
            [
                position = 8416, 8216
                size = 64, 32
            ]

            component Subsystem "Active status" {
                layout = dynamic
                component gen_data_type_conversion bool_to_real {
                }
                [
                    position = 8296, 8192
                ]

                component gen_logic_op "Logical operator1" {
                }
                [
                    position = 8192, 8192
                ]

                port In2 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8072, 8240
                ]

                port In1 {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8072, 8144
                ]

                port Out3 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8384, 8192
                ]

                connect "Logical operator1.in" In1 as Connection2
                connect "Logical operator1.in1" In2 as Connection1
                connect "Logical operator1.out" bool_to_real.in as Connection3
                connect bool_to_real.out Out3 as Connection4
            }
            [
                position = 7696, 7696
                size = 104, 96
            ]

            component gen_probe "Battery Active" {
            }
            [
                position = 7864, 7632
            ]

            component "core/Signal Controlled Current Source" i_ch_dch_losses {
            }
            [
                position = 8272, 8320
                rotation = left
                scale = -1, 1
                size = 64, 32
            ]

            component Subsystem "Ch | Dch Losses Current Calc" {
                layout = dynamic
                component sys_signal_switch "Signal switch3" {
                    criterion = "ctrl > threshold"
                }
                [
                    position = 8240, 8192
                ]

                component src_constant charge_losses {
                    execution_rate = "execution_rate"
                    value = "1-pct_effcharge/100"
                }
                [
                    position = 8056, 8120
                ]

                component src_constant discharge_losses {
                    execution_rate = "execution_rate"
                    value = "1-pct_effdischarge/100"
                }
                [
                    position = 8064, 8264
                ]

                component gen_product Power1 {
                }
                [
                    position = 8488, 8208
                ]

                component gen_abs Abs1 {
                }
                [
                    position = 8064, 8400
                ]

                component sys_signal_switch "Signal switch4" {
                    criterion = "ctrl > threshold"
                    threshold = "0.5"
                }
                [
                    position = 8904, 8240
                ]

                component src_constant Constant1 {
                    execution_rate = "execution_rate"
                    value = "0"
                }
                [
                    position = 8832, 8368
                ]

                port i_minus_idle {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7888, 8064
                ]

                port "i_ch|dch_losses" {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 9000, 8240
                ]

                port active_bat {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8848, 8128
                ]

                junction Junction1 sp
                [
                    position = 7952, 8064
                ]

                connect "Signal switch3.out" Power1.in as Connection3193
                connect "i_ch|dch_losses" "Signal switch4.out" as Connection3214
                connect active_bat "Signal switch4.in2" as Connection3215
                connect Constant1.out "Signal switch4.in1" as Connection3216
                [
                    position = 0, 0
                    breakpoints = 8864, 8320; 8864, 8256
                ]
                connect charge_losses.out "Signal switch3.in" as Connection3228
                connect discharge_losses.out "Signal switch3.in1" as Connection3229
                connect Abs1.out Power1.in1 as Connection3249
                [
                    position = 0, 0
                    breakpoints = 8360, 8400; 8360, 8208
                ]
                connect Power1.out "Signal switch4.in" as Connection3269
                connect "Signal switch3.in2" Junction1 as Connection3280
                [
                    position = 0, 0
                    breakpoints = 8240, 8064; 8240, 8064
                ]
                connect Junction1 i_minus_idle as Connection3281
                [
                    position = 0, 0
                    breakpoints = 7960, 8064; 7944, 8064; 7944, 8064; 7944, 8064
                ]
                connect Abs1.in Junction1 as Connection3282
            }
            [
                position = 8240, 8112
                size = 160, 104
            ]

            component "core/Three-phase Meter" "Three-phase Meter1" {
                P_meas = "True"
                Ts = "execution_rate"
                VAB = "True"
                VBC = "True"
                VCA = "True"
                VLL_avg_rms = "True"
                VLL_rms = "True"
                freq = "True"
            }
            [
                position = 7296, 8312
                scale = -1, 1
                size = 56, 240
            ]

            component "core/Meter Split" "Meter Split1" {
                power_p = "True"
                power_pf = "True"
                power_q = "True"
                van = "False"
                vbn = "False"
                vcn = "False"
                vll_rms = "True"
            }
            [
                position = 7384, 8008
                size = 88, 200
            ]

            component gen_probe P {
            }
            [
                position = 7464, 7984
            ]

            component gen_probe Q {
            }
            [
                position = 7488, 8032
            ]

            component gen_probe pf {
            }
            [
                position = 7520, 8080
            ]

            component Subsystem "Dispatch Mode Integer" {
                layout = dynamic
                component src_constant kw_mode {
                    execution_rate = "execution_rate"
                    signal_type = "int"
                    value = "dispatch_mode_int"
                }
                [
                    position = 8352, 8168
                ]

                port dispatch_mode_int {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8440, 8168
                ]

                connect dispatch_mode_int kw_mode.out as Connection95

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    dispatch_mode_int {
                        label = "Dispatch Mode"
                        widget = edit
                        type = generic
                        default_value = "1"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                    ENDCODE
                }
            }
            [
                position = 7944, 7488
                size = 152, 56
            ]

            component src_constant pct_charge {
                execution_rate = "execution_rate"
                value = "pct_charge"
            }
            [
                position = 8128, 7536
            ]

            component src_constant pct_discharge {
                execution_rate = "execution_rate"
                value = "pct_discharge"
            }
            [
                position = 8200, 7584
            ]

            component src_constant kwrated {
                execution_rate = "execution_rate"
                value = "kwrated"
            }
            [
                position = 8128, 7344
            ]

            component "core/Signal Controlled Voltage Source" "Ideal Bat" {
            }
            [
                position = 8488, 8304
                rotation = right
                size = 64, 32
            ]

            component src_constant Vdc {
                execution_rate = "execution_rate"
                value = "4*kv*1000*vmaxpu"
            }
            [
                position = 8584, 8304
                scale = -1, 1
            ]

            component pas_resistor R1 {
                resistance = "(4*kv*1000*vmaxpu)**2/(pct_idlingkw/100*kwrated*1000 + 1e-6)"
            }
            [
                position = 8112, 8344
                rotation = right
            ]

            component Subsystem "Battery Energy" {
                layout = dynamic
                component gen_integrator Energy {
                    init_value = "pct_stored/100*kwhrated*1000"
                    limit_lower = "kwhrated*1000*pct_reserve/100"
                    limit_output = "True"
                    limit_upper = "kwhrated*1000"
                }
                [
                    position = 8312, 8248
                ]

                component gen_probe SOC {
                }
                [
                    position = 8504, 8184
                ]

                component gen_product Power {
                }
                [
                    position = 7888, 8224
                ]

                component gen_gain Gain3 {
                    gain = "100/(kwhrated*1000)"
                }
                [
                    position = 8424, 8184
                ]

                component gen_probe "Battery Power" {
                }
                [
                    position = 8016, 8048
                ]

                component sys_signal_switch "Signal switch3" {
                    criterion = "ctrl > threshold"
                    threshold = "0.5"
                }
                [
                    position = 8016, 8240
                ]

                component src_constant Constant1 {
                    execution_rate = "execution_rate"
                    value = "0"
                }
                [
                    position = 7920, 8288
                ]

                component src_step Step1 {
                    execution_rate = "execution_rate"
                    step_time = "0.5"
                }
                [
                    position = 8032, 8336
                ]

                component gen_product "E meas sw" {
                }
                [
                    position = 8136, 8248
                ]

                component gen_gain Gain4 {
                    gain = "1/3600"
                }
                [
                    position = 8216, 8248
                ]

                port Ibat {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7808, 8280
                ]

                port In3 {
                    position = top:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8016, 8160
                    rotation = right
                ]

                port "Battery Energy" {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8504, 8248
                ]

                port Vbat {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7808, 8184
                ]

                junction Junction611 sp
                [
                    position = 7936, 8224
                ]

                junction Junction627 sp
                [
                    position = 8376, 8248
                ]

                connect Junction627 "Battery Energy" as Connection3412
                connect "Signal switch3.in2" In3 as Connection3411
                connect Power.in Vbat as Connection3413
                connect Power.in1 Ibat as Connection3410
                connect Energy.in Gain4.out as Connection3414
                [
                    position = 0, 0
                    breakpoints = 8248, 8248
                ]
                connect SOC.in Gain3.out as Connection2733
                connect Power.out Junction611 as Connection3223
                connect Junction611 "Battery Power.in" as Connection3224
                [
                    position = 0, 0
                    breakpoints = 7936, 8224; 7936, 8224; 7936, 8128
                ]
                connect "Signal switch3.in" Junction611 as Connection3225
                connect Constant1.out "Signal switch3.in1" as Connection3227
                connect "E meas sw.in" "Signal switch3.out" as Connection3389
                connect "E meas sw.in1" Step1.out as Connection3390
                [
                    position = 0, 0
                    breakpoints = 8080, 8256; 8080, 8336
                ]
                connect Energy.out Junction627 as Connection3402
                connect Gain3.in Junction627 as Connection3404
                connect "E meas sw.out" Gain4.in as Connection3405
            }
            [
                position = 8760, 8240
                size = 120, 160
            ]

            component "core/Current Measurement" Idc {
                execution_rate = "execution_rate"
                sig_output = "True"
            }
            [
                position = 7984, 8216
                size = 64, 32
            ]

            component "core/Current Measurement" I_idl_losses {
                execution_rate = "execution_rate"
                sig_output = "True"
            }
            [
                position = 8112, 8264
                rotation = left
                scale = 1, -1
                size = 64, 32
            ]

            component gen_sum Sum1 {
                signs = "+-"
            }
            [
                position = 8088, 8080
            ]

            component gen_c_function "Disconnect if on reserve or charged" {
                input_terminals = "real energy;inherit kwhrated;inherit pct_reserve;inherit kwref;inherit active_inverter;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True;True;True"
                input_terminals_show_labels = "True;True;True;True;True"
                output_fnc = "/*Begin code section*/
if (active_inverter){
    if (energy >= kwhrated*1000){
        if (kwref >= 0){
            connect_battery = 1;
        }
        else{
            connect_battery = 0;
        }
    }
    else if (energy <= kwhrated*1000*pct_reserve/100){
            if (kwref < 0){
                connect_battery = 1;
            }
            else{
                connect_battery = 0;
            }
        }
    else {
            connect_battery = 1;
        }
}
else{
    connect_battery = 0;
}
/*End code section*/"
                output_terminals = "real connect_battery;"
                output_terminals_dimensions = "inherit"
                output_terminals_feedthrough = "True"
                output_terminals_show_labels = "True"
            }
            [
                position = 7552, 7400
                size = 216, 280
            ]

            component src_constant kwhrated {
                execution_rate = "execution_rate"
                value = "kwhrated"
            }
            [
                position = 7352, 7344
            ]

            component src_constant pct_reserve {
                execution_rate = "execution_rate"
                value = "pct_reserve"
            }
            [
                position = 7352, 7400
            ]

            component gen_terminator Termination2 {
            }
            [
                position = 7656, 8160
                rotation = left
            ]

            component Subsystem "Loadshape Point Selector" {
                layout = dynamic
                component src_constant loadshape {
                    execution_rate = "execution_rate"
                    value = "loadshape"
                }
                [
                    position = 8200, 8144
                ]

                component gen_c_function Selector {
                    global_variables = "real out_value;"
                    input_terminals = "real loadshape;int point;"
                    input_terminals_dimensions = "inherit;inherit"
                    input_terminals_feedthrough = "True;True"
                    input_terminals_show_labels = "True;True"
                    output_fnc = "/*Begin code section*/
if (point > loadshape_n_points - 1) {
    point = loadshape_n_points - 1;
}

out_value = loadshape[point];

if (out_value > 1) {
    out_value = 1;
}
else if (out_value < -1) {
    out_value = -1;
}

out = out_value;
/*End code section*/"
                    output_terminals_dimensions = "1"
                    output_terminals_feedthrough = "False"
                    output_terminals_show_labels = "True"
                    parameters = "real loadshape_n_points;"
                }
                [
                    position = 8336, 8208
                    size = 168, 168
                ]

                component gen_probe "Loadshape Value" {
                }
                [
                    position = 8528, 8096
                ]

                port loadshape_point {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8528, 8208
                ]

                port point {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8200, 8272
                ]

                junction Junction1 sp
                [
                    position = 8464, 8208
                ]

                connect loadshape.out Selector.loadshape as Connection1
                connect point Selector.point as Connection2
                connect Selector.out Junction1 as Connection14
                connect Junction1 "Loadshape Value.in" as Connection15
                [
                    position = 0, 0
                    breakpoints = 8464, 8208
                ]
                connect loadshape_point Junction1 as Connection16
            }
            [
                position = 7944, 7296
                size = 144, 80
            ]

            port A1 {
                position = -32.0, -32.0
                kind = pe
            }
            [
                position = 7160, 8216
            ]

            port B1 {
                position = -32.0, 0.0
                kind = pe
            }
            [
                position = 7160, 8312
            ]

            port C1 {
                position = -32.0, 32.0
                kind = pe
            }
            [
                position = 7160, 8408
            ]

            port "Load point" {
                position = -8.0, -44.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7816, 7296
                hide_name = True
            ]

            tag Goto5 {
                value = "kwref"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8632, 7600
                size = 60, 20
            ]

            tag From4 {
                value = "dispatch_int"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7584, 7888
                size = 68, 20
            ]

            tag Goto8 {
                value = "active_inverter"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8632, 7280
                size = 60, 20
            ]

            tag From7 {
                value = "active_inverter"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7568, 7664
                size = 69, 20
            ]

            tag From12 {
                value = "active_battery"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7568, 7728
                size = 60, 20
            ]

            tag Goto9 {
                value = "active_status"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7864, 7696
                size = 60, 20
            ]

            tag From19 {
                value = "active_battery"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8104, 8144
                size = 60, 20
            ]

            tag Goto10 {
                value = "dispatch_int"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8064, 7552
                rotation = right
                size = 60, 20
            ]

            tag From21 {
                value = "active_status"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7584, 8016
                size = 46, 20
            ]

            tag From22 {
                value = "kwref"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7584, 7968
                size = 46, 20
            ]

            tag From23 {
                value = "active_battery"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8704, 8120
                size = 60, 20
            ]

            tag Goto11 {
                value = "bat_energy"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8896, 8240
                size = 60, 20
            ]

            tag From24 {
                value = "bat_energy"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7352, 7288
                size = 60, 20
            ]

            tag Goto4 {
                value = "active_battery"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7728, 7400
                size = 60, 20
            ]

            tag From3 {
                value = "kwref"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7352, 7456
                size = 46, 20
            ]

            tag From20 {
                value = "active_inverter"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7352, 7512
                size = 46, 20
            ]

            junction Junction581 sp
            [
                position = 7784, 7696
            ]

            junction Junction603 pe
            [
                position = 8272, 8408
            ]

            junction Junction616 sp
            [
                position = 7472, 7936
            ]

            junction Junction617 sp
            [
                position = 8568, 7600
            ]

            junction Junction619 sp
            [
                position = 8568, 7280
            ]

            junction Junction622 sp
            [
                position = 8064, 7488
            ]

            junction Junction626 pe
            [
                position = 8112, 8408
            ]

            junction Junction631 pe
            [
                position = 8488, 8216
            ]

            junction Junction632 pe
            [
                position = 8488, 8408
            ]

            junction Junction633 pe
            [
                position = 8112, 8216
            ]

            junction Junction634 pe
            [
                position = 8272, 8216
            ]

            connect dchtrigger.out "Dispatch kW Reference Calculation.dchtrigger" as Connection26
            connect chtrigger.out "Dispatch kW Reference Calculation.chtrigger" as Connection27
            connect From7 "Active status.In1" as Connection2952
            connect From12 "Active status.In2" as Connection2953
            connect "Active status.Out3" Junction581 as Connection3009
            connect Junction581 Goto9 as Connection3010
            connect "Battery Active.in" Junction581 as Connection3011
            connect i_ch_dch_losses.p_node Junction603 as Connection3178
            connect "Ch | Dch Losses Current Calc.i_ch|dch_losses" i_ch_dch_losses.in as Connection3189
            [
                position = 0, 0
                breakpoints = 8344, 8192; 8344, 8304
            ]
            connect From19 "Ch | Dch Losses Current Calc.active_bat" as Connection3228
            connect "Three-phase Meter1.A+" "Simple Battery inverter (Average)1.A" as Connection3266
            connect "Simple Battery inverter (Average)1.B" "Three-phase Meter1.B+" as Connection3267
            connect "Simple Battery inverter (Average)1.C" "Three-phase Meter1.C+" as Connection3269
            connect "Meter Split1.Input" "Three-phase Meter1.Out" as Connection3271
            connect A1 "Three-phase Meter1.A-" as Connection3278
            connect C1 "Three-phase Meter1.C-" as Connection3281
            connect B1 "Three-phase Meter1.B-" as Connection3280
            connect Q.in "Meter Split1.POWER_Q" as Connection3282
            connect pf.in "Meter Split1.POWER_PF" as Connection3283
            connect P.in "Meter Split1.POWER_P" as Connection3284
            connect Junction616 "Meter Split1.VLL_RMS" as Connection3291
            connect Vline.in Junction616 as Connection3292
            connect pct_charge.out "Dispatch kW Reference Calculation.pct_charge" as Connection3295
            connect "Dispatch kW Reference Calculation.pct_discharge" pct_discharge.out as Connection3296
            connect kwrated.out "Dispatch kW Reference Calculation.kwrated" as Connection3297
            connect "DSS kW Reference.in" Junction617 as Connection3299
            [
                position = 0, 0
            ]
            connect Junction617 Goto5 as Connection3300
            connect "Dispatch kW Reference Calculation.kwref" Junction617 as Connection3301
            connect "Enable Inverter.in" Junction619 as Connection3316
            connect Junction619 Goto8 as Connection3317
            [
                position = 0, 0
            ]
            connect "Dispatch kW Reference Calculation.close_contactor" Junction619 as Connection3318
            connect "Dispatch Mode Integer.dispatch_mode_int" Junction622 as Connection3341
            connect Goto10 Junction622 as Connection3343
            connect "Inverter Power Reference.v_line" Junction616 as Connection3356
            [
                position = 0, 0
            ]
            connect From4 "Inverter Power Reference.dispatch_mode_int" as Connection3357
            connect From21 "Inverter Power Reference.active_status" as Connection3369
            connect From22 "Inverter Power Reference.dss_kw" as Connection3370
            connect Junction603 Junction626 as Connection3393
            [
                position = 0, 0
            ]
            connect Junction626 "Simple Battery inverter (Average)1.DC-" as Connection3394
            [
                position = 0, 0
            ]
            connect R1.n_node Junction626 as Connection3395
            connect Vdc.out "Ideal Bat.in" as Connection_batt
            connect Vbat.out "Battery Energy.Vbat" as Connection3421
            connect Ibat.out "Battery Energy.Ibat" as Connection3418
            connect "Ideal Bat.p_node" Junction631 as Connection3424
            connect Junction631 Ibat.n_node as Connection3425
            connect Vbat.p_node Junction631 as Connection3426
            connect Junction603 Junction632 as Connection3427
            connect Junction632 "Ideal Bat.n_node" as Connection3428
            connect Vbat.n_node Junction632 as Connection3429
            connect From23 "Battery Energy.In3" as Connection3435
            connect "Simple Battery inverter (Average)1.DC+" Idc.p_node as Connection3437
            connect I_idl_losses.n_node R1.p_node as Connection3439
            connect Sum1.out "Ch | Dch Losses Current Calc.i_minus_idle" as Connection3440
            connect Idc.n_node Junction633 as Connection3441
            connect Junction633 I_idl_losses.p_node as Connection3442
            connect Ibat.p_node Junction634 as Connection3443
            connect Junction634 i_ch_dch_losses.n_node as Connection3444
            connect Junction633 Junction634 as Connection3445
            connect Sum1.in1 I_idl_losses.out as Connection3446
            connect Sum1.in Idc.out as Connection3447
            connect kwhrated.out "Disconnect if on reserve or charged.kwhrated" as Connection2716
            connect pct_reserve.out "Disconnect if on reserve or charged.pct_reserve" as Connection2717
            connect From3 "Disconnect if on reserve or charged.kwref" as Connection3137
            connect From20 "Disconnect if on reserve or charged.active_inverter" as Connection3229
            connect "Disconnect if on reserve or charged.connect_battery" Goto4 as Connection3434
            [
                position = 0, 0
                breakpoints = 7664, 7400
            ]
            connect From24 "Disconnect if on reserve or charged.energy" as Connection3448
            connect Goto11 "Battery Energy.Battery Energy" as Connection3449
            connect "Dispatch kW Reference Calculation.dispatch_mode" Junction622 as Connection3450
            [
                position = 0, 0
                breakpoints = 8096, 7488
            ]
            connect Termination2.in "Simple Battery inverter (Average)1.Outputs" as Connection3451
            connect "Dispatch kW Reference Calculation.loadshape_point" "Loadshape Point Selector.loadshape_point" as Connection3452
            connect "Load point" "Loadshape Point Selector.point" as Connection3453
            connect "Inverter Power Reference.inv_inputs" "Simple Battery inverter (Average)1.Inputs" as Connection3454

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p>A detailed explanation of the OpenDSS Storage model can be found by clicking on the help button.</p><p>The Storage component time-domain model is comprised of an ideal battery and a Simple Battery inverter (average) from the Microgrid library.</p></body></html>"
                help_file = "help/Storage.pdf"

                dispatch_p {
                    label = "Dispatch P"
                    widget = combo
                    combo_values = "Default", "Follow"
                    type = string
                    default_value = "Default"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                dispatch_q {
                    label = "Dispatch Q"
                    widget = combo
                    combo_values = "Unit PF", "Constant PF", "Constant kVAr"
                    type = string
                    default_value = "Unit PF"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                snap_status {
                    label = "Snap solve status"
                    widget = combo
                    combo_values = "Charging", "Discharging", "Idling"
                    type = string
                    default_value = "Charging"
                    no_evaluate
                }

                kv {
                    label = "Nominal voltage"
                    widget = edit
                    type = generic
                    default_value = "115"
                    unit = "kV"
                    group = "Ratings:2"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate
                    group = "Ratings:2"

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_frequency_prop(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                basefreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    group = "Ratings:2"
                    nonvisible
                }

                kwrated {
                    label = "Rated kW"
                    widget = edit
                    type = generic
                    default_value = "25"
                    unit = "kW"
                    group = "Ratings:2"
                }

                kwhrated {
                    label = "Rated kWh"
                    widget = edit
                    type = generic
                    default_value = "50"
                    unit = "kWh"
                    group = "Ratings:2"
                }

                chargetrigger {
                    label = "ChargeTrigger"
                    widget = edit
                    type = generic
                    default_value = "0.2"
                }

                dischargetrigger {
                    label = "DischargeTrigger"
                    widget = edit
                    type = generic
                    default_value = "0.6"
                }

                pct_charge {
                    label = "%Charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                }

                pct_discharge {
                    label = "%Discharge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                }

                pct_effcharge {
                    label = "Charge efficiency"
                    widget = edit
                    type = generic
                    default_value = "90"
                    unit = "%"
                    group = "Ratings:2"
                }

                pct_effdischarge {
                    label = "Discharge efficiency"
                    widget = edit
                    type = generic
                    default_value = "90"
                    unit = "%"
                    group = "Ratings:2"
                }

                kvar {
                    label = "Reactive power"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kVAr"
                    group = "Ratings:2"
                    nonvisible
                }

                pf {
                    label = "Power factor"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Ratings:2"
                    nonvisible
                }

                pct_idlingkvar {
                    label = "%IdlingkVAr"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    group = "Ratings:2"
                    nonvisible
                }

                pct_idlingkw {
                    label = "Idling losses"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "%"
                    group = "Ratings:2"
                }

                pct_reserve {
                    label = "Reserve mode SOC"
                    widget = edit
                    type = generic
                    default_value = "20"
                    unit = "%"
                    group = "Ratings:2"
                }

                load_loadshape {
                    label = "LoadShape object"
                    widget = button
                    type = generic
                    default_value = "Choose"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_loadshape(mdl, container_handle)
                    ENDCODE
                }

                loadshape_name {
                    label = "LoadShape name"
                    widget = edit
                    type = generic
                    default_value = ""
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_from_file {
                    label = "From CSV file"
                    widget = checkbox
                    type = generic
                    default_value = "False"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                useactual {
                    label = "Actual load value"
                    widget = checkbox
                    type = generic
                    default_value = "False"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_from_file_path {
                    label = "LoadShape from file - path"
                    widget = edit
                    type = generic
                    default_value = ""
                    no_evaluate
                    nonvisible
                }

                loadshape_from_file_column {
                    label = "LoadShape from file - column"
                    widget = edit
                    type = generic
                    default_value = "1"
                    no_evaluate
                    nonvisible
                }

                loadshape_from_file_header {
                    label = "LoadShape from file - header"
                    widget = checkbox
                    type = generic
                    default_value = "True"
                    no_evaluate
                    nonvisible
                }

                loadshape {
                    label = "LoadShape points"
                    widget = edit
                    type = generic
                    default_value = ""
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_int {
                    label = "LoadShape interval"
                    widget = edit
                    type = generic
                    default_value = "1"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                timespan {
                    label = "Loadshape time span"
                    widget = combo
                    combo_values =  "Daily", "Yearly"
                    type = string
                    default_value = "Daily"
                    nonvisible
                }

                pct_stored {
                    label = "Initial SOC"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                }

                execution_rate {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                }

                vmaxpu {
                    label = "vmaxpu"
                    widget = edit
                    type = generic
                    default_value = "1.1"
                    nonvisible
                }

                vminpu {
                    label = "vminpu"
                    widget = edit
                    type = generic
                    default_value = "0.9"
                    nonvisible
                }

                kva {
                    label = "kva"
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                inv_r {
                    label = "AC-side resistance"
                    widget = edit
                    type = generic
                    default_value = "1e-5"
                    unit = "Ω"
                    group = "Inverter:3"
                }

                inv_l {
                    label = "AC-side inductance"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "H"
                    group = "Inverter:3"
                }

                inv_rf {
                    label = "Filter resistance"
                    widget = edit
                    type = generic
                    default_value = "100e-3"
                    unit = "Ω"
                    group = "Inverter:3"
                }

                inv_cf {
                    label = "Filter capacitance"
                    widget = edit
                    type = generic
                    default_value = "1.013e-3"
                    unit = "F"
                    group = "Inverter:3"
                }

                inv_kp {
                    label = "Controller Kp"
                    widget = edit
                    type = generic
                    default_value = "0.0001"
                    group = "Inverter:3"
                }

                inv_ki {
                    label = "Controller Ki"
                    widget = edit
                    type = generic
                    default_value = "0.03"
                    group = "Inverter:3"
                }

                loadshape_n_points {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }
                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                }


                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.read_loadshape_from_json(mdl, item_handle)

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    comp_script.restore_all_storages_points(mdl, item_handle)
                    # HEADER START
                    dispatch_p = mdl.get_property_value(mdl.prop(item_handle, "dispatch_p"))
                    dispatch_q = mdl.get_property_value(mdl.prop(item_handle, "dispatch_q"))
                    snap_status = mdl.get_property_value(mdl.prop(item_handle, "snap_status"))
                    kv = mdl.get_property_value(mdl.prop(item_handle, "kv"))
                    basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
                    kwrated = mdl.get_property_value(mdl.prop(item_handle, "kwrated"))
                    kwhrated = mdl.get_property_value(mdl.prop(item_handle, "kwhrated"))
                    chargetrigger = mdl.get_property_value(mdl.prop(item_handle, "chargetrigger"))
                    dischargetrigger = mdl.get_property_value(mdl.prop(item_handle, "dischargetrigger"))
                    pct_charge = mdl.get_property_value(mdl.prop(item_handle, "pct_charge"))
                    pct_discharge = mdl.get_property_value(mdl.prop(item_handle, "pct_discharge"))
                    pct_effcharge = mdl.get_property_value(mdl.prop(item_handle, "pct_effcharge"))
                    pct_effdischarge = mdl.get_property_value(mdl.prop(item_handle, "pct_effdischarge"))
                    kvar = mdl.get_property_value(mdl.prop(item_handle, "kvar"))
                    pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                    pct_idlingkvar = mdl.get_property_value(mdl.prop(item_handle, "pct_idlingkvar"))
                    pct_idlingkw = mdl.get_property_value(mdl.prop(item_handle, "pct_idlingkw"))
                    pct_reserve = mdl.get_property_value(mdl.prop(item_handle, "pct_reserve"))
                    loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
                    pct_stored = mdl.get_property_value(mdl.prop(item_handle, "pct_stored"))
                    execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                    vmaxpu = mdl.get_property_value(mdl.prop(item_handle, "vmaxpu"))
                    vminpu = mdl.get_property_value(mdl.prop(item_handle, "vminpu"))
                    kva = mdl.get_property_value(mdl.prop(item_handle, "kva"))
                    inv_r = mdl.get_property_value(mdl.prop(item_handle, "inv_r"))
                    inv_l = mdl.get_property_value(mdl.prop(item_handle, "inv_l"))
                    inv_rf = mdl.get_property_value(mdl.prop(item_handle, "inv_rf"))
                    inv_cf = mdl.get_property_value(mdl.prop(item_handle, "inv_cf"))
                    inv_kp = mdl.get_property_value(mdl.prop(item_handle, "inv_kp"))
                    inv_ki = mdl.get_property_value(mdl.prop(item_handle, "inv_ki"))
                    #loadshape_n_points = mdl.get_property_value(mdl.prop(item_handle, "loadshape_n_points"))
                    # HEADER STOP

                    comp_script.update_dispatch_int_comp(mdl, item_handle)

                    comp_name = mdl.get_name(mdl.get_parent(item_handle))

                    loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
                    if not loadshape:
                        mdl.error(f"Select a LoadShape for component {comp_name}")
                    #mdl.set_property_value(mdl.prop(item_handle, "loadshape_n_points"), len(loadshape))
                    #loadshape_n_points = mdl.get_property_value(mdl.prop(item_handle, "loadshape_n_points"))

                    try:
                        pf_value = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                        float(pf_value) # test
                    except:
                        raise Exception(f"Invalid power factor value for component {comp_name}")

                    comp_script.calculate_kva(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                    gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)
                    if not gui_scripts_path in sys.path:
                        sys.path.append(gui_scripts_path)

                    import comp_storage as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 5176, 4256
            size = 64, 96
        ]

        component Subsystem "Co-simulation Interface" {
            layout = dynamic
            label = "CoSim"
            component src_constant f {
                execution_rate = "execution_rate"
                value = "f"
            }
            [
                position = 1504, 9200
                hide_name = True
            ]

            component src_ground gnd1 {
            }
            [
                position = 1224, 9248
            ]

            component src_sine "vref" {
                amplitude = "100"
                execution_rate = "execution_rate"
                frequency = "f"
            }
            [
                position = 1312, 9200
                hide_name = True
            ]

            tag Goto1 {
                value = "f"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 1592, 9200
                hide_name = True
                size = 60, 20
            ]

            tag gnd_tag {
                value = "gnd"
                scope = local
                kind = pe
            }
            [
                position = 1112, 9200
                size = 60, 20
            ]

            tag Goto2 {
                value = "vref"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 1392, 9200
                hide_name = True
                size = 60, 20
            ]

            connect Goto1 f.out as Connection52
            [
                hide_name = True
            ]
            connect gnd_tag gnd1.node as Connection127
            connect "vref.out" Goto2 as Connection128
            [
                hide_name = True
            ]

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><p><br></br></p></body></html>"

                model_path {
                    label = "Model file"
                    widget = edit
                    type = generic
                    default_value = ""
                    no_evaluate
                }

                execution_rate {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                }

                f {
                    label = "Frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate
                }

                saved_position_dict {
                    widget = combo
                    combo_values = "{}"
                    type = string
                    default_value = "{}"
                    nonvisible
                    no_evaluate
                }

                saved_selected_interface_points {
                    widget = combo
                    combo_values = "[]"
                    type = string
                    default_value = "[]"
                    nonvisible
                    no_evaluate
                }

                CODE open
                    import cosim
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.open_mask(mdl, item_handle, cosim)

                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.pre_compilation(mdl, item_handle)
                ENDCODE

                CODE init
                    import sys
                    import os
                    import importlib

                    comp_handle = mdl.get_parent(item_handle)

                    for item in mdl.get_items():
                        if item.item_type == "masked_component" and not item == comp_handle:
                            type_name = mdl.get_component_type_name(item)
                            if type_name == "Co-simulation Interface":
                                mdl.info("Only one Co-simulation component is supported.")

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                    gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)
                    if not gui_scripts_path in sys.path:
                        sys.path.append(gui_scripts_path)

                    import comp_cosim as comp_script
                    importlib.reload(comp_script)

                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    # Create phases when opening a saved TSE file
                    comp_script.restore_configuration(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 5464, 4272
            size = 120, 120
        ]

        component Category Auxiliary {
            layout = dynamic
            component Subsystem CIL {
                layout = static
                component pas_resistor Ra {
                    resistance = "Ra"
                }
                [
                    position = 8112, 8120
                    rotation = right
                ]

                component pas_resistor Rb {
                    resistance = "Rb"
                }
                [
                    position = 8192, 8128
                    rotation = right
                ]

                component pas_resistor Rc {
                    resistance = "Rc"
                }
                [
                    position = 8272, 8128
                    rotation = right
                ]

                component pas_capacitor Ca {
                    capacitance = "Ca"
                }
                [
                    position = 8112, 8232
                    rotation = right
                ]

                component pas_capacitor Cb {
                    capacitance = "Cb"
                }
                [
                    position = 8192, 8232
                    rotation = right
                ]

                component pas_capacitor Cc {
                    capacitance = "Cc"
                }
                [
                    position = 8272, 8232
                    rotation = right
                ]

                port A1 {
                    position = -30, -30
                    kind = pe
                    direction =  in
                }
                [
                    position = 8112, 8024
                    rotation = right
                ]

                port B1 {
                    position = 0.0, -30.0
                    kind = pe
                    direction =  in
                }
                [
                    position = 8192, 8024
                    rotation = right
                ]

                port C1 {
                    position = 30.0, -30.0
                    kind = pe
                    direction =  in
                }
                [
                    position = 8272, 8024
                    rotation = right
                ]

                port N {
                    position = 0, 30
                    kind = pe
                    direction =  in
                }
                [
                    position = 8192, 8376
                    rotation = left
                ]

                junction JA0 pe
                [
                    position = 8112, 8072
                ]

                junction JA1 pe
                [
                    position = 8112, 8280
                ]

                junction JB0 pe
                [
                    position = 8192, 8072
                ]

                junction JB1 pe
                [
                    position = 8192, 8280
                ]

                junction JC0 pe
                [
                    position = 8272, 8072
                ]

                junction JC1 pe
                [
                    position = 8272, 8280
                ]

                junction JN pe
                [
                    position = 8192, 8328
                ]

                connect Ra.p_node JA0 as Connection17
                connect JA0 A1 as ConnAA0
                connect JB0 B1 as ConnBB0
                connect Rb.p_node JB0 as Conn19
                connect JC0 C1 as ConnCC0
                connect Rc.p_node JC0 as Conn21
                connect JA1 JN as Conn_AN
                connect JB1 JN as Conn_BN
                connect JC1 JN as Conn_CN
                connect JN N as Conn_N
                connect Ca.n_node JA1 as Conn_A
                connect Ra.n_node Ca.p_node as Conn_A0
                connect Cb.n_node JB1 as Conn_B
                connect Rb.n_node Cb.p_node as Conn_B0
                connect Cc.n_node JC1 as Conn_C
                connect Rc.n_node Cc.p_node as Conn_C0

                SAB = "5000*1000/3"
                SAn = "5000*1000/3"
                SBC = "5000*1000/3"
                SBn = "5000*1000/3"
                SCA = "5000*1000/3"
                SCn = "5000*1000/3"
                pf_modeA = "Lead"
                pf_modeB = "Lead"
                pf_modeC = "Lead"
                pf_mode_3ph = "Lead"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A three-phase balanced or unbalanced constant impedance load. The impedance is set in series. The combinations possible for each phase individually are R, RL and RC.</p></body></html>"
                    help_file = "constant_impedance_load.html"

                    fn {
                        label = "Nominal frequency"
                        widget = edit
                        type = generic
                        default_value = "fn"
                        unit = "Hz"
                        group = "General:1"
                    }

                    conn_type {
                        label = "Connection type"
                        widget = combo
                        combo_values = "Y", "Δ"
                        type = string
                        default_value = "Y"
                        group = "General"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT

                            comp_script = return_comp_script(mdl, container_handle)

                            comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            mdl.refresh_icon(container_handle)

                            if new_value == "Δ":
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)

                                connAB = mdl.get_item("Conn_AB", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connAB:
                                    mdl.create_connection(junA1, junB0, name="Conn_AB")
                                connBC = mdl.get_item("Conn_BC", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connBC:
                                    mdl.create_connection(junB1, junC0, name="Conn_BC")
                                connCA = mdl.get_item("Conn_CA", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connCA:
                                    mdl.create_connection(junC1, junA0, name="Conn_CA")

                                if junN:
                                    mdl.delete_item(junN)

                                portN = mdl.get_item("N", parent=comp_handle, item_type=ITEM_PORT)
                                if portN:
                                    mdl.delete_item(portN)

                            else:
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)

                                if not junN:
                                    junN = mdl.create_junction(name='JN', parent=comp_handle, kind='pe',
                                                               position=(8192, 8328))

                                connAN = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connAN:
                                    mdl.create_connection(junA1, junN, name="Conn_AN")
                                connBN = mdl.get_item("Conn_BN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connBN:
                                    mdl.create_connection(junB1, junN, name="Conn_BN")
                                connCN = mdl.get_item("Conn_CN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connCN:
                                    mdl.create_connection(junC1, junN, name="Conn_CN")

                                connAB = mdl.get_item("Conn_AB", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if connAB:
                                    mdl.delete_item(connAB)
                                connBC = mdl.get_item("Conn_BC", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if connBC:
                                    mdl.delete_item(connBC)
                                connCA = mdl.get_item("Conn_CA", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if connCA:
                                    mdl.delete_item(connCA)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)
                        ENDCODE
                    }

                    ground_connected {
                        label = "Ground-connected"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "General"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

                            comp_handle = mdl.get_sub_level_handle(container_handle)
                            mdl.refresh_icon(container_handle)

                            if not new_value:
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                gnd1 = mdl.get_item("gndc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                if gnd1:
                                    mdl.delete_item(gnd1)
                                if junN:
                                    portN = mdl.get_item("N", parent=comp_handle, item_type = ITEM_PORT)
                                    if not portN:
                                        portN = mdl.create_port(parent=comp_handle, name="N", direction="out", kind = "pe",
                                                        terminal_position=(0, 30),
                                                        position=(8192, 8378), rotation="left")
                                    connN = mdl.get_item("Conn_N", parent=comp_handle, item_type=ITEM_CONNECTION)
                                    if not connN:
                                        mdl.create_connection(junN, portN, name="Conn_N")
                            else:
                                portN = mdl.get_item("N", parent=comp_handle, item_type=ITEM_PORT)
                                gnd1 = mdl.get_item("gndc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                if portN:
                                    mdl.delete_item(portN)
                                if junN:
                                    if not gnd1:
                                        gnd1 = mdl.create_component("src_ground", parent=comp_handle, name="gndc", position=(8192, 8378))
                                    connG = mdl.get_item("Conn_G", parent=comp_handle, item_type=ITEM_CONNECTION)
                                    if not connG:
                                        mdl.create_connection(mdl.term(gnd1, "node"), junN, name="ConnG")
                        ENDCODE
                    }

                    set_balanced {
                        label = "Set balanced 3ph power"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "General"
                        nonvisible
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.set_balanced_fcn(mdl, container_handle, new_value)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.set_balanced_fcn(mdl, container_handle, new_value)
                        ENDCODE
                    }

                    Vn_3ph {
                        label = "Nominal line voltage"
                        widget = edit
                        type = generic
                        default_value = "Vn_3ph_CPL"
                        unit = "kV"
                        group = "Load Parameters:2"

                        CODE property_value_changed
                            mdl.set_property_value(mdl.prop(container_handle, 'VAn'), str(new_value) + '*1000/(3**0.5)')
                            mdl.set_property_value(mdl.prop(container_handle, 'VBn'), str(new_value) + '*1000/(3**0.5)')
                            mdl.set_property_value(mdl.prop(container_handle, 'VCn'), str(new_value) + '*1000/(3**0.5)')
                            mdl.set_property_value(mdl.prop(container_handle, 'VAB'), str(new_value) + '*1000')
                            mdl.set_property_value(mdl.prop(container_handle, 'VBC'), str(new_value) + '*1000')
                            mdl.set_property_value(mdl.prop(container_handle, 'VCA'), str(new_value) + '*1000')
                        ENDCODE

                        CODE property_value_edited
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VAn'), new_value + '*1000/(3**0.5)')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VBn'), new_value + '*1000/(3**0.5)')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VCn'), new_value + '*1000/(3**0.5)')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VAB'), new_value + '*1000')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VBC'), new_value + '*1000')
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'VCA'), new_value + '*1000')
                        ENDCODE
                    }

                    Sn_3ph {
                        label = "Total Nominal power"
                        widget = edit
                        type = generic
                        default_value = "Sn_3ph"
                        unit = "kVA"
                        group = "Load Parameters"

                        CODE property_value_changed
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            mdl.set_property_value(mdl.prop(container_handle, 'SAn'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SBn'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SCn'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SAB'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SBC'), str(new_value) + '*1000/' + str(phases))
                            mdl.set_property_value(mdl.prop(container_handle, 'SCA'), str(new_value) + '*1000/' + str(phases))
                        ENDCODE

                        CODE property_value_edited
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SAn'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SBn'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SCn'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SAB'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SBC'), new_value + '*1000/' + str(phases))
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'SCA'), new_value + '*1000/' + str(phases))
                        ENDCODE
                    }

                    pf_mode_3ph {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is True:
                                comp_script.lock_prop(mdl, container_handle, "pf_3ph", new_value, "Unit")

                            mdl.set_property_value(mdl.prop(container_handle, 'pf_modeA'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pf_modeB'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pf_modeC'), new_value)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is True:
                                comp_script.lock_prop(mdl, container_handle, "pf_3ph", new_value, "Unit")

                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeA'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeB'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeC'), new_value)
                        ENDCODE
                    }

                    pf_3ph {
                        label = "Power factor"
                        widget = edit
                        type = generic
                        default_value = "pf_3ph_set"
                        group = "Load Parameters"

                        CODE property_value_changed
                            mdl.set_property_value(mdl.prop(container_handle, 'pfA'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pfB'), new_value)
                            mdl.set_property_value(mdl.prop(container_handle, 'pfC'), new_value)
                        ENDCODE

                        CODE property_value_edited
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pfA'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pfB'), new_value)
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'pfC'), new_value)
                        ENDCODE
                    }

                    VAn {
                        label = "Nominal phase voltage (VAn)"
                        widget = edit
                        type = generic
                        default_value = "0*1000/(3**0.5)"
                        unit = "V"
                        group = "Phase A:3"
                        nonvisible
                        disabled
                    }

                    VAB {
                        label = "Nominal line voltage (VAB)"
                        widget = edit
                        type = generic
                        default_value = "0*1000"
                        unit = "V"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    SAn {
                        label = "Nominal phase power (SAn)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    SAB {
                        label = "Nominal line power (SAB)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    pf_modeA {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Phase A"
                        nonvisible
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfA", new_value, "Unit")


                            comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'A', (8112, 8232), (8112, 8288))
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfA", new_value, "Unit")
                        ENDCODE
                    }

                    pfA {
                        label = "Power factor (A)"
                        widget = edit
                        type = generic
                        default_value = "0"
                        group = "Phase A"
                        nonvisible
                        disabled
                    }

                    VBn {
                        label = "Nominal phase voltage (VBn)"
                        widget = edit
                        type = generic
                        default_value = "0*1000/(3**0.5)"
                        unit = "V"
                        group = "Phase B:4"
                        nonvisible
                        disabled
                    }

                    VBC {
                        label = "Nominal line voltage (VBC)"
                        widget = edit
                        type = generic
                        default_value = "0*1000"
                        unit = "V"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    SBn {
                        label = "Nominal phase power (SBn)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    SBC {
                        label = "Nominal line power (SBC)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    pf_modeB {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Phase B"
                        nonvisible
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfB", new_value, "Unit")

                            if phases=="3" or phases=="2":
                                comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'B', (8192, 8232), (8192, 8288))
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfB", new_value, "Unit")
                        ENDCODE
                    }

                    pfB {
                        label = "Power factor (B)"
                        widget = edit
                        type = generic
                        default_value = "0"
                        group = "Phase B"
                        nonvisible
                        disabled
                    }

                    VCn {
                        label = "Nominal phase voltage (VCn)"
                        widget = edit
                        type = generic
                        default_value = "0*1000/(3**0.5)"
                        unit = "V"
                        group = "Phase C:5"
                        nonvisible
                        disabled
                    }

                    VCA {
                        label = "Nominal line voltage (VCA)"
                        widget = edit
                        type = generic
                        default_value = "0*1000"
                        unit = "V"
                        group = "Phase C"
                        nonvisible
                        disabled
                    }

                    SCn {
                        label = "Nominal phase power (SCn)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase C:5"
                        nonvisible
                        disabled
                    }

                    SCA {
                        label = "Nominal line power (SCA)"
                        widget = edit
                        type = generic
                        default_value = "3500*1000/3"
                        unit = "VA"
                        group = "Phase C"
                        nonvisible
                        disabled
                    }

                    pf_modeC {
                        label = "Power factor mode"
                        widget = combo
                        combo_values = "Lag", "Lead", "Unit"
                        type = string
                        default_value = "Lag"
                        group = "Phase C"
                        nonvisible
                        disabled
                        no_evaluate

                        CODE property_value_changed
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfC", new_value, "Unit")

                            if phases=="3":
                                comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'C', (8272, 8232), (8272, 8288))
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)

                            set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
                            if set_balanced is False:
                                comp_script.lock_prop(mdl, container_handle, "pfC", new_value, "Unit")
                        ENDCODE
                    }

                    pfC {
                        label = "Power factor (C)"
                        widget = edit
                        type = generic
                        default_value = "0"
                        group = "Phase C"
                        nonvisible
                        disabled
                    }

                    kV {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    model {
                        widget = edit
                        type = generic
                        default_value = "2"
                        nonvisible
                    }

                    phases {
                        label = "Number of Phases"
                        widget = combo
                        combo_values = "1", "3"
                        type = string
                        default_value = "3"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

                            comp_script = return_comp_script(mdl, container_handle)

                            comp_script.phase_value_changed_fnc(mdl, container_handle, new_value)

                            pf_mode_3ph = mdl.get_property_disp_value(mdl.prop(container_handle, "pf_mode_3ph"))
                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            mdl.refresh_icon(container_handle)

                            if new_value == "3":
                                mdl.enable_property(mdl.prop(container_handle, "ground_connected"))
                                mdl.enable_property(mdl.prop(container_handle, "conn_type"))
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if not pA:
                                    pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                                                        terminal_position=(-30, -30),
                                                        position=(8112, 8024), rotation="right")
                                    mdl.create_connection(junA0, pA, name="ConnAA0")
                                else:
                                    mdl.set_port_properties(pA, terminal_position=(-30, -30))
                                if not Ra:
                                    Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
                                    mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn17")
                                    mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))

                                if not pB:
                                    pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                                                        terminal_position=(0, -30),
                                                        position=(8192, 8024), rotation="right")
                                    mdl.create_connection(junB0, pB, name="ConnBB0")
                                if not Rb:
                                    Rb = mdl.create_component("pas_resistor", parent=comp_handle, name="Rb", position=(8192,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Rb, "resistance"), "Rb")
                                    mdl.create_connection(mdl.term(Rb, "p_node"), junB0, name="Conn19")
                                    mdl.create_connection(mdl.term(Rb, "n_node"), junB1, name="Conn_B")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'B', (8192, 8232), (8192, 8288))
                                if not pC:
                                    pC = mdl.create_port(parent=comp_handle, name="C1", direction="out", kind = "pe",
                                                        terminal_position=(30, -30),
                                                        position=(8272, 8024), rotation="right")
                                    mdl.create_connection(junC0, pC, name="ConnCC0")
                                if not Rc:
                                    Rc = mdl.create_component("pas_resistor", parent=comp_handle, name="Rc", position=(8272,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Rc, "resistance"), "Rc")
                                    mdl.create_connection(mdl.term(Rc, "p_node"), junC0, name="Conn21")
                                    mdl.create_connection(mdl.term(Rc, "n_node"), junC1, name="Conn_C")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'C', (8272, 8232), (8272, 8288))





                            elif new_value == "2":
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                if not pA:
                                    pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                                                        terminal_position=("top", 1),
                                                        position=(8112, 8024), rotation="right")
                                    mdl.create_connection(junA0, pA, name="ConnAA0")
                                if not Ra:
                                    Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
                                    mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn21")
                                    mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))
                                if not pB:
                                    pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                                                        terminal_position=("top", 2),
                                                        position=(8192, 8024), rotation="right")
                                    mdl.create_connection(junB0, pB, name="ConnBB0")
                                if not Rb:
                                    Rb = mdl.create_component("pas_resistor", parent=comp_handle, name="Rb", position=(8192,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Rb, "resistance"), "Rb")
                                    mdl.create_connection(mdl.term(Rb, "p_node"), junB0, name="Conn19")
                                    mdl.create_connection(mdl.term(Rb, "n_node"), junB1, name="Conn_B")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'B', (8192, 8232), (8192, 8288))
                                if pC:
                                    comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'C', (8272, 8232), (8272, 8288))
                                    mdl.delete_item(pC)
                                    mdl.delete_item(Rc)



                            elif new_value == "1":
                                junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
                                junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
                                Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if not junN:
                                    junN = mdl.create_junction(name='JN', parent=comp_handle, kind='pe',
                                                               position=(8192, 8328))

                                connAN = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connAN:
                                    mdl.create_connection(junA1, junN, name="Conn_AN")
                                connBN = mdl.get_item("Conn_BN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connBN:
                                    mdl.create_connection(junB1, junN, name="Conn_BN")
                                connCN = mdl.get_item("Conn_CN", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not connCN:
                                    mdl.create_connection(junC1, junN, name="Conn_CN")

                                if not pA:
                                    pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                                                        terminal_position=(0, -30),
                                                        position=(8112, 8024), rotation="right")
                                    mdl.create_connection(junA0, pA, name="ConnAA0")
                                else:
                                    mdl.set_port_properties(pA, terminal_position=(0, -30))

                                if not Ra:
                                    Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
                                    mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
                                    mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn21")
                                    mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
                                    comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))
                                if pB:
                                    comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'B', (8192, 8232), (8192, 8288))
                                    mdl.delete_item(pB)
                                    mdl.delete_item(Rb)

                                if pC:
                                    comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'C', (8272, 8232), (8272, 8288))
                                    mdl.delete_item(pC)
                                    mdl.delete_item(Rc)
                        ENDCODE

                        CODE property_value_edited
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.phase_value_changed_fnc(mdl, container_handle, new_value)
                        ENDCODE
                    }

                    phs {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    ph_num {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    pf {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    conn {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kVA {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    basefreq {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    dss_mod {
                        label = "OpenDSS load type"
                        widget = combo
                        combo_values = "Constant P, Q", "Constant Impedance", "Constant Current Mag.", "Constant P, Fixed Q", "Constant P, Fixed Impedance Q"
                        type = string
                        default_value = "Constant Impedance"
                        group = "OpenDSS:6"
                        no_evaluate
                    }

                    CODE init
                        import os
                        import sys
                        import importlib

                        lib_path = mdl.get_library_resource_dir_path(item_handle)
                        comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
                        gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

                        if not comp_scripts_path in sys.path:
                            sys.path.append(comp_scripts_path)
                        if not gui_scripts_path in sys.path:
                            sys.path.append(gui_scripts_path)

                        import comp_load as comp_script
                        importlib.reload(comp_script)
                        def return_comp_script(mdl, item_handle):
                            return comp_script

                        comp_script.define_icon(mdl, item_handle)

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        fn = mdl.get_property_value(mdl.prop(item_handle, "fn"))
                        conn_type = mdl.get_property_value(mdl.prop(item_handle, "conn_type"))
                        ground_connected = mdl.get_property_value(mdl.prop(item_handle, "ground_connected"))
                        set_balanced = mdl.get_property_value(mdl.prop(item_handle, "set_balanced"))
                        Vn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Vn_3ph"))
                        Sn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Sn_3ph"))
                        pf_mode_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_mode_3ph"))
                        pf_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_3ph"))
                        VAn = mdl.get_property_value(mdl.prop(item_handle, "VAn"))
                        VAB = mdl.get_property_value(mdl.prop(item_handle, "VAB"))
                        SAn = mdl.get_property_value(mdl.prop(item_handle, "SAn"))
                        SAB = mdl.get_property_value(mdl.prop(item_handle, "SAB"))
                        pf_modeA = mdl.get_property_value(mdl.prop(item_handle, "pf_modeA"))
                        pfA = mdl.get_property_value(mdl.prop(item_handle, "pfA"))
                        VBn = mdl.get_property_value(mdl.prop(item_handle, "VBn"))
                        VBC = mdl.get_property_value(mdl.prop(item_handle, "VBC"))
                        SBn = mdl.get_property_value(mdl.prop(item_handle, "SBn"))
                        SBC = mdl.get_property_value(mdl.prop(item_handle, "SBC"))
                        pf_modeB = mdl.get_property_value(mdl.prop(item_handle, "pf_modeB"))
                        pfB = mdl.get_property_value(mdl.prop(item_handle, "pfB"))
                        VCn = mdl.get_property_value(mdl.prop(item_handle, "VCn"))
                        VCA = mdl.get_property_value(mdl.prop(item_handle, "VCA"))
                        SCn = mdl.get_property_value(mdl.prop(item_handle, "SCn"))
                        SCA = mdl.get_property_value(mdl.prop(item_handle, "SCA"))
                        pf_modeC = mdl.get_property_value(mdl.prop(item_handle, "pf_modeC"))
                        pfC = mdl.get_property_value(mdl.prop(item_handle, "pfC"))
                        kV = mdl.get_property_value(mdl.prop(item_handle, "kV"))
                        model = mdl.get_property_value(mdl.prop(item_handle, "model"))
                        phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
                        phs = mdl.get_property_value(mdl.prop(item_handle, "phs"))
                        ph_num = mdl.get_property_value(mdl.prop(item_handle, "ph_num"))
                        pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                        conn = mdl.get_property_value(mdl.prop(item_handle, "conn"))
                        kVA = mdl.get_property_value(mdl.prop(item_handle, "kVA"))
                        basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
                        dss_mod = mdl.get_property_value(mdl.prop(item_handle, "dss_mod"))
                        # HEADER STOP
                        def calc_impedance(mdl, power_1ph, voltage, pf_mode, power_factor,
                                               frequency, phase_id):

                            if power_1ph <= 0:
                                mdl.error("Power set is negative or zero.", kind="General error",
                                            context=mdl.prop(item_handle, "S" + phase_id))
                                return float('nan'), float('nan'), float('nan')
                            if voltage <= 0:
                                mdl.error("Voltage set is negative or zero.", kind="General error",
                                            context=mdl.prop(item_handle, "V" + phase_id))
                                return float('nan'), float('nan'), float('nan')
                            if pf_mode != "Unit":
                                if power_factor < 0.01:
                                    mdl.warning("Power factor set is less than 0.01. Clipping it to 0.01",
                                                kind="General error",
                                                context=mdl.prop(item_handle, "pf" + phase_id[0]))
                                    power_factor = 0.01
                                elif power_factor > 0.99:
                                    mdl.warning("Power factor set is greater than 0.99. Clipping it to 0.99",
                                                kind="General error",
                                                context=mdl.prop(item_handle, "pf" + phase_id[0]))
                                    power_factor = 0.99


                            if pf_mode == "Unit":
                                R = (voltage**2)/power_1ph
                                L = float('nan')
                                C = float('nan')
                            elif pf_mode == "Lag":
                                Z = (voltage**2)/power_1ph
                                R = power_factor*Z
                                L = Z*((1-power_factor**2)**0.5)/(2*np.pi*frequency)
                                C = float('nan')
                            else:
                                Z = (voltage**2)/power_1ph
                                R = power_factor*Z
                                L = float('nan')
                                C = 1/(Z*2*np.pi*frequency*((1-power_factor**2)**0.5))
                            return R, L, C

                        if fn <= 0:
                            mdl.error("Frequency set is negative or zero.", kind="General error",
                                        context=mdl.prop(item_handle, "fn"))
                            fn = float('nan')

                        VAn = Vn_3ph*1000/(3**0.5)
                        VBn = Vn_3ph*1000/(3**0.5)
                        VCn = Vn_3ph*1000/(3**0.5)
                        VAB = Vn_3ph*1000
                        VBC = Vn_3ph*1000
                        VCA = Vn_3ph*1000

                        if phases == "3":
                            phs = 3
                        else:
                            phs = 1

                        SAn = Sn_3ph*1000/phs
                        SBn = Sn_3ph*1000/phs
                        SCn = Sn_3ph*1000/phs
                        SAB = Sn_3ph*1000/phs
                        SBC = Sn_3ph*1000/phs
                        SCA = Sn_3ph*1000/phs

                        if pf_mode_3ph == "Unit":
                            pfA = 1.0
                            pfB = 1.0
                            pfC = 1.0
                        else:
                            pfA = pf_3ph
                            pfB = pf_3ph
                            pfC = pf_3ph



                        if (conn_type == 'Δ'):
                            Ra, La, Ca = calc_impedance(mdl, SAB, VAB, pf_mode_3ph, pfA, fn, "AB")
                            Rb, Lb, Cb = calc_impedance(mdl, SBC, VBC, pf_mode_3ph, pfB, fn, "BC")
                            Rc, Lc, Cc = calc_impedance(mdl, SCA, VCA, pf_mode_3ph, pfC, fn, "CA")
                        else:
                            if phases == "1":
                                if ground_connected:
                                    Ra, La, Ca = calc_impedance(mdl, SAn, VAn, pf_mode_3ph, pfA, fn, "An")
                                    Rb, Lb, Cb = calc_impedance(mdl, SBn, VBn, pf_mode_3ph, pfB, fn, "Bn")
                                    Rc, Lc, Cc = calc_impedance(mdl, SCn, VCn, pf_mode_3ph, pfC, fn, "Cn")
                                else:
                                    Ra, La, Ca = calc_impedance(mdl, SAB, VAB, pf_mode_3ph, pfA, fn, "AB")
                                    Rb, Lb, Cb = calc_impedance(mdl, SBC, VBC, pf_mode_3ph, pfB, fn, "BC")
                                    Rc, Lc, Cc = calc_impedance(mdl, SCA, VCA, pf_mode_3ph, pfC, fn, "CA")
                            else:
                                Ra, La, Ca = calc_impedance(mdl, SAn, VAn, pf_mode_3ph, pfA, fn, "An")
                                Rb, Lb, Cb = calc_impedance(mdl, SBn, VBn, pf_mode_3ph, pfB, fn, "Bn")
                                Rc, Lc, Cc = calc_impedance(mdl, SCn, VCn, pf_mode_3ph, pfC, fn, "Cn")

                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy
                        import math

                        basefreq = fn
                        kVA = Sn_3ph
                        if (conn_type == 'Δ'):
                            conn = "delta"
                        else:
                            conn = "wye"

                        if pf_mode_3ph == "Unit":
                            pf = 1.0
                        elif pf_mode_3ph == "Lag":
                            pf = pf_3ph
                        else:
                            pf = -1 * pf_3ph

                        if phases == "1":
                            if ground_connected:
                                kV = (Vn_3ph/(1))/1
                            else:
                                kV = Vn_3ph
                        else:
                            kV = Vn_3ph

                        if dss_mod == "Constant P, Q":
                            model = 1
                        elif dss_mod == "Constant Impedance":
                            model = 2
                        elif dss_mod == "Constant Current Mag.":
                            model = 5
                        elif dss_mod == "Constant P, Fixed Q":
                            model = 6
                        elif dss_mod == "Constant P, Fixed Impedance Q":
                            model = 7
                        else:
                            model = 2

                        mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)
                        mdl.set_property_value(mdl.prop(item_handle, "kVA"), kVA)
                        mdl.set_property_value(mdl.prop(item_handle, "conn"), conn)
                        mdl.set_property_value(mdl.prop(item_handle, "pf"), pf)
                        mdl.set_property_value(mdl.prop(item_handle, "phases"), phases)
                        mdl.set_property_value(mdl.prop(item_handle, "kV"), kV)
                        mdl.set_property_value(mdl.prop(item_handle, "dss_mod"), dss_mod)
                        mdl.set_property_value(mdl.prop(item_handle, "model"), model)
                    ENDCODE

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        comp_script = return_comp_script(mdl, item_handle)
                        comp_script.define_icon(mdl, item_handle)
                    ENDCODE
                }
            }
            [
                position = 8048, 8112
                size = 96, 64
            ]

            component Subsystem CPL {
                layout = dynamic
                component src_constant Constant1 {
                    execution_rate = "Ts"
                    value = "kP_tot"
                }
                [
                    position = 7120, 7496
                    hide_name = True
                ]

                component src_constant Constant11 {
                    execution_rate = "Ts"
                    value = "kQ_tot"
                }
                [
                    position = 7120, 7584
                    hide_name = True
                ]

                component gen_gain Gain1 {
                    gain = "inv_ph"
                }
                [
                    position = 7704, 7456
                    hide_name = True
                ]

                component gen_gain Gain2 {
                    gain = "inv_ph"
                }
                [
                    position = 7576, 7584
                    hide_name = True
                ]

                component "core/Rate Transition" "Rate Transition1" {
                    execution_rate = "Ts"
                }
                [
                    position = 7792, 7456
                    hide_name = True
                    size = 32, 32
                ]

                component "core/Rate Transition" "Rate Transition2" {
                    execution_rate = "Ts"
                }
                [
                    position = 7680, 7584
                    hide_name = True
                    size = 32, 32
                ]

                component gen_rate_limiter "Rate Limiter1" {
                    falling_limit = "-SS/Freq"
                    rising_limit = "SS/Freq"
                }
                [
                    position = 7880, 7456
                    hide_name = True
                ]

                component gen_rate_limiter "Rate Limiter2" {
                    falling_limit = "-SS/Freq"
                    rising_limit = "SS/Freq"
                }
                [
                    position = 7760, 7584
                    hide_name = True
                ]

                component src_constant Constant14 {
                    execution_rate = "Ts"
                    value = "Pc_T"
                }
                [
                    position = 7920, 7520
                    hide_name = True
                ]

                component gen_product Product23 {
                }
                [
                    position = 8016, 7512
                    hide_name = True
                ]

                component gen_sum Sum10 {
                    signs = "++"
                }
                [
                    position = 8096, 7464
                    hide_name = True
                ]

                component src_constant Constant17 {
                    execution_rate = "Ts"
                    value = "0.01*(Ts-600e-6)/Ts"
                }
                [
                    position = 7808, 7672
                    hide_name = True
                ]

                component sys_signal_switch "Signal switch27" {
                    criterion = "ctrl >= threshold"
                    threshold = "0"
                }
                [
                    position = 7896, 7688
                    hide_name = True
                ]

                component src_constant Constant18 {
                    execution_rate = "Ts"
                    value = "0.005*(Ts-600e-6)/Ts"
                }
                [
                    position = 7808, 7736
                    hide_name = True
                ]

                component gen_sum Sum14 {
                    signs = "++"
                }
                [
                    position = 8096, 7592
                    hide_name = True
                ]

                component gen_sign Sign3 {
                }
                [
                    position = 7856, 7616
                    hide_name = True
                ]

                component gen_product Product24 {
                }
                [
                    position = 8008, 7680
                    hide_name = True
                ]

                component Subsystem CPL1 {
                    layout = dynamic
                    component gen_limiter Limit1 {
                        lower_limit = "0.1"
                    }
                    [
                        position = 7464, 8168
                        hide_name = True
                    ]

                    component gen_product Product1 {
                        signs = "*/"
                    }
                    [
                        position = 7928, 8152
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 7544, 8176
                        hide_name = True
                    ]

                    component gen_product Product3 {
                    }
                    [
                        position = 8392, 8144
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function1" {
                        a_coeff = "[0.01,1]"
                        b_coeff = "[1]"
                        domain = "S-domain"
                        method = "Euler"
                    }
                    [
                        position = 8296, 8136
                        hide_name = True
                    ]

                    component pas_resistor R1 {
                        resistance = "Rsnb"
                    }
                    [
                        position = 7976, 8888
                    ]

                    component "core/Signal Controlled Current Source" Isp1 {
                    }
                    [
                        position = 7968, 8784
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Voltage RMS" Varms {
                        sig_output = "True"
                    }
                    [
                        position = 7968, 9088
                        size = 64, 32
                    ]

                    component "core/Voltage Measurement" Va {
                        execution_rate = "inherit"
                        sig_output = "True"
                    }
                    [
                        position = 7968, 9200
                        size = 64, 32
                    ]

                    component gen_limiter Limit2 {
                    }
                    [
                        position = 8016, 8152
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch20" {
                        criterion = "ctrl >= threshold"
                    }
                    [
                        position = 8200, 8136
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "1000"
                    }
                    [
                        position = 7816, 8120
                        hide_name = True
                    ]

                    component gen_comparator Comparator1 {
                    }
                    [
                        position = 8168, 7984
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "CPL_curr/(VLL*kVLL)"
                    }
                    [
                        position = 7768, 8048
                        hide_name = True
                    ]

                    component gen_product Product4 {
                    }
                    [
                        position = 7856, 8072
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain16 {
                        gain = "-1"
                    }
                    [
                        position = 8224, 7912
                        hide_name = True
                    ]

                    component gen_limiter Limit10 {
                        upper_limit = "0"
                    }
                    [
                        position = 8144, 7912
                        hide_name = True
                    ]

                    component gen_sign Sign1 {
                    }
                    [
                        position = 8288, 7912
                        hide_name = True
                    ]

                    component gen_product Product19 {
                        signs = "3"
                    }
                    [
                        position = 8576, 7664
                        hide_name = True
                    ]

                    component gen_limiter Limit11 {
                        lower_limit = "0"
                    }
                    [
                        position = 7712, 7680
                        hide_name = True
                    ]

                    component gen_sign Sign2 {
                    }
                    [
                        position = 7776, 7680
                        hide_name = True
                    ]

                    component gen_product Product14 {
                        signs = "*/"
                    }
                    [
                        position = 7992, 7832
                        hide_name = True
                    ]

                    component gen_gain Gain15 {
                        gain = "1000"
                    }
                    [
                        position = 7888, 7824
                        hide_name = True
                    ]

                    component gen_limiter Limit7 {
                        lower_limit = "0"
                    }
                    [
                        position = 8064, 7832
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch23" {
                        criterion = "ctrl >= threshold"
                    }
                    [
                        position = 8272, 7816
                        hide_name = True
                    ]

                    component gen_comparator Comparator4 {
                    }
                    [
                        position = 8208, 7744
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_product Product15 {
                    }
                    [
                        position = 7992, 7736
                        hide_name = True
                    ]

                    component src_constant Constant8 {
                        execution_rate = "inherit"
                        value = "CPL_curr/(VLL*kVLL)"
                    }
                    [
                        position = 7896, 7760
                        hide_name = True
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function4" {
                        a_coeff = "[0.01,1]"
                        b_coeff = "[1]"
                        domain = "S-domain"
                        method = "Euler"
                    }
                    [
                        position = 8336, 7816
                        hide_name = True
                    ]

                    component gen_product Product17 {
                        signs = "3"
                    }
                    [
                        position = 8560, 7912
                        hide_name = True
                    ]

                    component gen_sum Sum5 {
                        signs = "+++"
                    }
                    [
                        position = 8768, 8208
                        rotation = right
                        hide_name = True
                    ]

                    component gen_abs Abs1 {
                    }
                    [
                        position = 7712, 7728
                        hide_name = True
                    ]

                    component gen_product Product20 {
                    }
                    [
                        position = 6864, 7696
                        hide_name = True
                    ]

                    component gen_gain Gain18 {
                        gain = "Pc_pQ"
                    }
                    [
                        position = 6976, 7696
                        hide_name = True
                    ]

                    component gen_sum Sum8 {
                        signs = "+++-"
                    }
                    [
                        position = 7360, 7976
                        rotation = right
                        hide_name = True
                    ]

                    component gen_sign Sign3 {
                    }
                    [
                        position = 6832, 7640
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch24" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7088, 7712
                        hide_name = True
                    ]

                    component gen_gain Gain19 {
                        gain = "Pc_nQ"
                    }
                    [
                        position = 6976, 7728
                        hide_name = True
                    ]

                    component gen_gain Gain20 {
                        gain = "1/(1000*Rsnb)"
                    }
                    [
                        position = 7368, 7552
                        hide_name = True
                    ]

                    component gen_product Product21 {
                    }
                    [
                        position = 7112, 7368
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain21 {
                        gain = "nQc_P"
                    }
                    [
                        position = 7208, 7368
                        hide_name = True
                    ]

                    component gen_sum Sum9 {
                        signs = "+++++"
                    }
                    [
                        position = 7496, 7600
                        rotation = right
                        hide_name = True
                    ]

                    component gen_limiter Limit12 {
                        lower_limit = "0"
                    }
                    [
                        position = 7008, 7416
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch25" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7368, 7384
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain22 {
                        gain = "pQc_P"
                    }
                    [
                        position = 7208, 7400
                        hide_name = True
                    ]

                    component src_constant Constant14 {
                        execution_rate = "Ts"
                        value = "Pc_T_pQ"
                    }
                    [
                        position = 6864, 7816
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch26" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 6976, 7840
                        hide_name = True
                    ]

                    component src_constant Constant15 {
                        execution_rate = "Ts"
                        value = "Pc_T_nQ"
                    }
                    [
                        position = 6864, 7856
                        hide_name = True
                    ]

                    component src_constant Constant17 {
                        execution_rate = "Ts"
                        value = "pQc_T"
                    }
                    [
                        position = 6920, 7496
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch27" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7008, 7520
                        hide_name = True
                    ]

                    component src_constant Constant18 {
                        execution_rate = "Ts"
                        value = "nQc_T"
                    }
                    [
                        position = 6920, 7536
                        hide_name = True
                    ]

                    component gen_abs Abs2 {
                    }
                    [
                        position = 8080, 7976
                        hide_name = True
                    ]

                    component gen_abs Abs3 {
                    }
                    [
                        position = 8120, 8032
                        rotation = left
                        hide_name = True
                    ]

                    component gen_sum Sum14 {
                        signs = "+-"
                    }
                    [
                        position = 6416, 7416
                        hide_name = True
                    ]

                    component src_constant Constant19 {
                        execution_rate = "Ts"
                        value = "60"
                    }
                    [
                        position = 6320, 7456
                        hide_name = True
                    ]

                    component gen_sum Sum15 {
                        signs = "+-"
                    }
                    [
                        position = 6568, 7360
                        hide_name = True
                    ]

                    component src_constant Constant20 {
                        execution_rate = "Ts"
                    }
                    [
                        position = 6488, 7352
                        hide_name = True
                    ]

                    component gen_gain Gain24 {
                        gain = "Fc"
                    }
                    [
                        position = 6488, 7416
                        hide_name = True
                    ]

                    component "core/Edge Detection" "Edge Detection1" {
                    }
                    [
                        position = 9216, 8328
                        rotation = right
                        hide_name = True
                        size = 32, 32
                    ]

                    component "core/Rate Transition" "Rate Transition1" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 8848, 8280
                        hide_name = True
                        size = 32, 32
                    ]

                    component gen_c_function "C function1" {
                        global_variables = "real counter;real m0;real m1;real m2;real corr;"
                        init_fnc = "/*Begin code section*/
counter=0;
/*End code section*/"
                        input_terminals = "real sync;real z;real zi;real zii;real Ts;real Ts_fast;"
                        input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
                        input_terminals_feedthrough = "True;True;True;True;True;True"
                        input_terminals_show_labels = "True;True;True;True;True;True"
                        output_fnc = "/*Begin code section*/
counter = counter + Ts_fast;
if (sync > 0 ) {
    out = z;
    counter = 0;

}
else {
    corr = 1 - 0.11 * (Ts - Ts_fast)/Ts;
    m2 = (zi - zii)/Ts;
    m1 = (z - zi)/Ts;
    m0 = m1 + (m1-m2);

    out = z + counter * corr * m0;
}

if (counter >= Ts) {
    counter = 0;
}
/*End code section*/"
                        output_terminals_dimensions = "inherit"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "True"
                    }
                    [
                        position = 9144, 8536
                        rotation = right
                        hide_name = True
                        size = 48, 128
                    ]

                    component tm_delay "Unit Delay9" {
                    }
                    [
                        position = 8848, 8344
                        hide_name = True
                    ]

                    component tm_delay "Unit Delay10" {
                    }
                    [
                        position = 8952, 8400
                        hide_name = True
                    ]

                    component src_constant Constant21 {
                        execution_rate = "Tfst"
                        value = "Ts"
                    }
                    [
                        position = 9080, 8448
                        hide_name = True
                    ]

                    component "core/Rate Transition" "Rate Transition2" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 8952, 8344
                        hide_name = True
                        size = 32, 32
                    ]

                    component "core/Rate Transition" "Rate Transition3" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 9032, 8400
                        hide_name = True
                        size = 32, 32
                    ]

                    component sys_signal_switch "Signal switch28" {
                        threshold = "Tfst"
                    }
                    [
                        position = 9296, 8648
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant22 {
                        execution_rate = "Tfst"
                        value = "Ts"
                    }
                    [
                        position = 9248, 8704
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch29" {
                    }
                    [
                        position = 9392, 8608
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant23 {
                        execution_rate = "Tfst"
                        value = "Tfast_en"
                    }
                    [
                        position = 9336, 8696
                        hide_name = True
                    ]

                    component gen_product Product22 {
                    }
                    [
                        position = 7120, 7512
                        hide_name = True
                    ]

                    component gen_product Product23 {
                    }
                    [
                        position = 7088, 7848
                        hide_name = True
                    ]

                    component src_constant Constant24 {
                        execution_rate = "Ts"
                        value = "pQc_Q"
                    }
                    [
                        position = 7112, 7264
                        hide_name = True
                    ]

                    component src_constant Constant25 {
                        execution_rate = "Ts"
                        value = "nQc_Q"
                    }
                    [
                        position = 7112, 7216
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch30" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7184, 7248
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_product Product24 {
                    }
                    [
                        position = 7336, 7256
                        hide_name = True
                    ]

                    component gen_terminator Termination70 {
                    }
                    [
                        position = 7784, 8224
                        rotation = left
                        hide_name = True
                    ]

                    component gen_terminator Termination71 {
                    }
                    [
                        position = 7816, 8264
                        rotation = left
                        hide_name = True
                    ]

                    component gen_terminator Termination72 {
                    }
                    [
                        position = 7792, 8408
                        rotation = right
                        hide_name = True
                    ]

                    component gen_gain Gain26 {
                        gain = "1/(1000*Rsnb)"
                    }
                    [
                        position = 7272, 7928
                        hide_name = True
                    ]

                    component "core/Single phase PLL" "Single phase PLL1" {
                        k_SOGI = "0.6"
                        kd_PLL_HIGH = "0"
                        kd_PLL_LOW = "0"
                        kp_PLL_HIGH = "65.7"
                        kp_PLL_LOW = "5.81e2"
                        offset_Hz = "Freq"
                    }
                    [
                        position = 7728, 8320
                        hide_name = True
                        size = 64, 98
                    ]

                    component gen_trigonometric "Trigonometric function1" {
                    }
                    [
                        position = 8024, 8224
                        hide_name = True
                    ]

                    component gen_gain Gain25 {
                        gain = "1.41421356"
                    }
                    [
                        position = 8192, 8264
                        hide_name = True
                    ]

                    component gen_product Product25 {
                    }
                    [
                        position = 8304, 8232
                        hide_name = True
                        scale = 1, -1
                    ]

                    component pas_capacitor C1 {
                        capacitance = "1/(Rsnb*2*np.pi*Freq)"
                    }
                    [
                        position = 7976, 8984
                    ]

                    component gen_trigonometric "Trigonometric function2" {
                    }
                    [
                        position = 8192, 8344
                        hide_name = True
                    ]

                    component gen_sum Sum16 {
                        signs = "++"
                    }
                    [
                        position = 8112, 8344
                        hide_name = True
                    ]

                    component src_constant Constant26 {
                        execution_rate = "Ts"
                        value = "-np.pi/2"
                    }
                    [
                        position = 8016, 8360
                        hide_name = True
                    ]

                    component src_constant Constant28 {
                        execution_rate = "Tfst"
                        value = "Tfst"
                    }
                    [
                        position = 9040, 8472
                        hide_name = True
                    ]

                    component gen_product Product26 {
                        signs = "**"
                    }
                    [
                        position = 8408, 8352
                        hide_name = True
                    ]

                    component gen_sum Sum17 {
                        signs = "++"
                    }
                    [
                        position = 8112, 8432
                        hide_name = True
                    ]

                    component src_constant Constant27 {
                        execution_rate = "Ts"
                        value = "np.pi/2"
                    }
                    [
                        position = 8000, 8456
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function3" {
                    }
                    [
                        position = 8192, 8432
                        hide_name = True
                    ]

                    component gen_product Product27 {
                        signs = "**"
                    }
                    [
                        position = 8304, 8424
                        hide_name = True
                        scale = 1, -1
                    ]

                    port P2 {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 8192, 8784
                        rotation = down
                    ]

                    port P3 {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 7760, 8784
                    ]

                    port P {
                        position = top:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6288, 7592
                    ]

                    port Q {
                        position = top:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6288, 7664
                    ]

                    tag Goto1 {
                        value = "ws"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7888, 8320
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From1 {
                        value = "ws"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6320, 7408
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto2 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6368, 7592
                        size = 60, 20
                    ]

                    tag Goto3 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6368, 7664
                        size = 60, 20
                    ]

                    tag From2 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7288, 7888
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From3 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6920, 7416
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From4 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7432, 7440
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From5 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6712, 7640
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From6 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7000, 7896
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From7 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7248, 7264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto4 {
                        value = "Va"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7912, 9152
                        rotation = down
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From8 {
                        value = "Va"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7616, 8320
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From9 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8104, 8264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From10 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7376, 8168
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto5 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7912, 9048
                        rotation = down
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto6 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7680, 8176
                        hide_name = True
                        size = 100, 20
                    ]

                    tag From11 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7816, 8176
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From12 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7248, 7552
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From13 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7160, 7928
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From14 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7872, 7856
                        hide_name = True
                        size = 97, 20
                    ]

                    tag Goto7 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6912, 7640
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From15 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7312, 7440
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From16 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7120, 7312
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From17 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6952, 7448
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From18 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6928, 7768
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From19 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7032, 7664
                        hide_name = True
                        size = 57, 20
                    ]

                    tag Goto8 {
                        value = "Ia_load"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9528, 8608
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From20 {
                        value = "Ia_load"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7896, 8744
                        hide_name = True
                        size = 60, 20
                    ]

                    junction Junction1 sp
                    [
                        position = 7496, 8168
                    ]

                    junction Junction2 pe
                    [
                        position = 8080, 8784
                    ]

                    junction Junction10 sp
                    [
                        position = 8048, 8152
                    ]

                    junction Junction11 sp
                    [
                        position = 8120, 8072
                    ]

                    junction Junction62 sp
                    [
                        position = 7496, 7728
                    ]

                    junction Junction50 sp
                    [
                        position = 8144, 7832
                    ]

                    junction Junction51 sp
                    [
                        position = 8112, 7736
                    ]

                    junction Junction74 sp
                    [
                        position = 7856, 7728
                    ]

                    junction Junction78 sp
                    [
                        position = 6928, 7696
                    ]

                    junction Junction82 sp
                    [
                        position = 7496, 7680
                    ]

                    junction Junction84 sp
                    [
                        position = 7160, 7368
                    ]

                    junction Junction92 sp
                    [
                        position = 7760, 8120
                    ]

                    junction Junction95 sp
                    [
                        position = 6656, 7360
                    ]

                    junction Junction96 sp
                    [
                        position = 6784, 7640
                    ]

                    junction Junction97 pe
                    [
                        position = 7856, 8784
                    ]

                    junction Junction101 sp
                    [
                        position = 9168, 8280
                    ]

                    junction Junction102 sp
                    [
                        position = 8768, 8280
                    ]

                    junction Junction109 sp
                    [
                        position = 8912, 8344
                    ]

                    junction Junction112 sp
                    [
                        position = 7056, 7416
                    ]

                    junction Junction130 pe
                    [
                        position = 7856, 8888
                    ]

                    junction Junction131 pe
                    [
                        position = 8080, 8888
                    ]

                    junction Junction133 sp
                    [
                        position = 8376, 7816
                    ]

                    junction Junction121 sp
                    [
                        position = 8248, 8264
                    ]

                    junction Junction127 sp
                    [
                        position = 8248, 8360
                    ]

                    junction Junction129 sp
                    [
                        position = 7960, 8336
                    ]

                    junction Junction137 pe
                    [
                        position = 8080, 8984
                    ]

                    junction Junction138 pe
                    [
                        position = 7856, 8984
                    ]

                    junction Junction139 pe
                    [
                        position = 8080, 9088
                    ]

                    junction Junction140 pe
                    [
                        position = 7856, 9088
                    ]

                    junction Junction141 sp
                    [
                        position = 7960, 8336
                    ]

                    junction Junction142 sp
                    [
                        position = 9248, 8592
                    ]

                    junction Junction143 sp
                    [
                        position = 9216, 8280
                    ]

                    connect Limit1.out Junction1 as Connection9
                    connect Junction1 Product2.in1 as Connection10
                    connect "Discrete Transfer Function1.out" Product3.in1 as Connection16
                    connect Product1.out Limit2.in as Connection44
                    connect Gain2.out Product1.in as Connection47
                    connect Constant2.out Product4.in1 as Connection54
                    connect Comparator1.out "Signal switch20.in2" as Connection57
                    connect Junction10 Limit2.out as Connection59
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch20.in1" Junction10 as Connection60
                    connect Product4.out Junction11 as Connection62
                    connect "Signal switch20.in" Junction11 as Connection64
                    connect Limit10.out Gain16.in as Connection299
                    connect Gain16.out Sign1.in as Connection315
                    connect Limit10.in Junction62 as Connection319
                    [
                        position = 0, 0
                    ]
                    connect Limit11.out Sign2.in as Connection320
                    connect Gain15.out Product14.in as Connection227
                    connect Product14.out Limit7.in as Connection228
                    connect Comparator4.out "Signal switch23.in2" as Connection229
                    connect Limit7.out Junction50 as Connection233
                    connect Junction50 "Signal switch23.in1" as Connection234
                    connect Comparator4.in1 Junction50 as Connection235
                    connect "Signal switch23.in" Junction51 as Connection236
                    connect Product15.out Junction51 as Connection238
                    connect Constant8.out Product15.in1 as Connection239
                    connect "Signal switch23.out" "Discrete Transfer Function4.in" as Connection243
                    connect Junction51 Comparator4.in2 as Connection253
                    [
                        position = 0, 0
                    ]
                    connect Abs1.in Junction62 as Connection395
                    [
                        position = 0, 0
                    ]
                    connect Product15.in Junction74 as Connection396
                    connect Junction74 Abs1.out as Connection397
                    connect Gain15.in Junction74 as Connection398
                    connect "Signal switch24.in" Gain18.out as Connection419
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch24.out" Sum8.in as Connection420
                    connect Gain19.out "Signal switch24.in1" as Connection422
                    connect Product20.out Junction78 as Connection423
                    connect Junction78 Gain18.in as Connection424
                    connect Gain19.in Junction78 as Connection425
                    connect Product19.in2 Sign2.out as Connection430
                    [
                        position = 0, 0
                    ]
                    connect Limit11.in Junction82 as Connection444
                    connect Junction82 Junction62 as Connection445
                    [
                        position = 0, 0
                    ]
                    connect Sum9.out Junction82 as Connection446
                    connect Product21.out Junction84 as Connection461
                    [
                        position = 0, 0
                    ]
                    connect Junction84 Gain21.in as Connection462
                    connect Gain22.in Junction84 as Connection463
                    connect Gain22.out "Signal switch25.in" as Connection464
                    connect Gain21.out "Signal switch25.in1" as Connection468
                    [
                        position = 0, 0
                    ]
                    connect Junction92 Gain2.in as Connection509
                    [
                        position = 0, 0
                    ]
                    connect Product4.in Junction92 as Connection510
                    connect Comparator1.in1 Abs2.out as Connection511
                    connect Abs2.in Junction10 as Connection512
                    connect Junction11 Abs3.in as Connection513
                    connect Abs3.out Comparator1.in2 as Connection514
                    connect Junction92 Sum8.out as Connection515
                    [
                        position = 0, 0
                    ]
                    connect From1 Sum14.in as Connection523
                    connect Constant19.out Sum14.in1 as Connection524
                    connect Constant20.out Sum15.in as Connection525
                    connect Gain24.in Sum14.out as Connection526
                    connect Gain24.out Sum15.in1 as Connection527
                    connect Sum15.out Junction95 as Connection529
                    connect P Goto2 as Connection532
                    connect Q Goto3 as Connection533
                    connect From3 Limit12.in as Connection535
                    connect Sign3.in Junction96 as Connection538
                    connect Junction96 Product20.in as Connection539
                    [
                        position = 0, 0
                    ]
                    connect From5 Junction96 as Connection540
                    connect "Signal switch20.out" "Discrete Transfer Function1.in" as Connection554
                    connect Constant21.out "C function1.Ts" as Connection605
                    connect Junction101 "C function1.z" as Connection607
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition3.in" "Unit Delay10.out" as Connection615
                    connect "Rate Transition2.out" "C function1.zi" as Connection616
                    connect "Rate Transition3.out" "C function1.zii" as Connection617
                    connect "C function1.sync" "Edge Detection1.Out1" as Connection618
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition1.in" Junction102 as Connection622
                    [
                        position = 0, 0
                    ]
                    connect Constant22.out "Signal switch28.in2" as Connection624
                    connect Sum5.out Junction102 as Connection649
                    [
                        position = 0, 0
                    ]
                    connect Constant23.out "Signal switch29.in2" as Connection653
                    connect "Signal switch28.out" "Signal switch29.in" as Connection660
                    [
                        position = 0, 0
                    ]
                    connect Isp1.p_node Junction2 as Connection670
                    [
                        position = 0, 0
                    ]
                    connect Isp1.n_node Junction97 as Connection669
                    [
                        position = 0, 0
                    ]
                    connect Junction102 "Unit Delay9.in" as Connection683
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition2.in" Junction109 as Connection684
                    connect Junction109 "Unit Delay9.out" as Connection685
                    connect "Unit Delay10.in" Junction109 as Connection686
                    connect Junction95 Product21.in1 as Connection697
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch27.out" Product22.in1 as Connection701
                    connect Product21.in Junction112 as Connection704
                    connect Junction112 Limit12.out as Connection705
                    [
                        position = 0, 0
                    ]
                    connect Product22.in Junction112 as Connection706
                    connect Product23.in "Signal switch26.out" as Connection710
                    connect From6 Product23.in1 as Connection711
                    [
                        position = 0, 0
                    ]
                    connect Constant24.out "Signal switch30.in" as Connection713
                    connect Constant25.out "Signal switch30.in1" as Connection714
                    connect "Single phase PLL1.f" Goto1 as Connection881
                    connect "Signal switch30.out" Product24.in as Connection718
                    connect From7 Product24.in1 as Connection719
                    connect "Single phase PLL1.d" Termination70.in as Connection882
                    connect "Single phase PLL1.q" Termination71.in as Connection883
                    connect Product20.in1 Junction95 as Connection721
                    [
                        position = 0, 0
                    ]
                    connect "Single phase PLL1.sin(wt)" Termination72.in as Connection884
                    connect "Signal switch28.in" "C function1.out" as Connection724
                    [
                        position = 0, 0
                    ]
                    connect Gain20.out Sum9.in4 as Connection869
                    [
                        position = 0, 0
                    ]
                    connect Constant17.out "Signal switch27.in" as Connection875
                    connect Constant18.out "Signal switch27.in1" as Connection876
                    connect Constant14.out "Signal switch26.in" as Connection878
                    connect Constant15.out "Signal switch26.in1" as Connection879
                    connect Product3.in Product25.out as Connection767
                    connect Constant26.out Sum16.in1 as Connection771
                    connect Sum16.out "Trigonometric function2.in" as Connection772
                    connect "Trigonometric function1.out" Product25.in1 as Connection773
                    [
                        position = 0, 0
                    ]
                    connect Constant28.out "C function1.Ts_fast" as Connection837
                    connect R1.p_node Junction130 as Connection838
                    connect Junction130 Junction97 as Connection839
                    [
                        position = 0, 0
                    ]
                    connect Junction131 Junction2 as Connection842
                    [
                        position = 0, 0
                    ]
                    connect R1.n_node Junction131 as Connection843
                    connect Product25.in Junction121 as Connection786
                    connect "Discrete Transfer Function4.out" Junction133 as Connection847
                    connect Junction121 Gain25.out as Connection787
                    connect Product17.in Junction133 as Connection849
                    connect "Trigonometric function2.out" Product26.in as Connection793
                    [
                        position = 0, 0
                    ]
                    connect Product19.in1 Junction133 as Connection860
                    [
                        position = 0, 0
                    ]
                    connect Constant27.out Sum17.in1 as Connection800
                    connect Junction1 Product2.in as Connection866
                    [
                        position = 0, 0
                    ]
                    connect Sum17.out "Trigonometric function3.in" as Connection808
                    connect "Trigonometric function3.out" Product27.in as Connection809
                    connect Product26.in1 Junction127 as Connection813
                    connect Junction127 Junction121 as Connection814
                    connect Product27.in1 Junction127 as Connection815
                    connect Product19.in Product26.out as Connection818
                    [
                        position = 0, 0
                    ]
                    connect "Trigonometric function1.in" Junction129 as Connection823
                    [
                        position = 0, 0
                    ]
                    connect "Single phase PLL1.wt" Junction129 as Connection825
                    connect Product22.out Sum9.in3 as Connection889
                    connect From4 Sum9.in2 as Connection890
                    connect "Signal switch25.out" Sum9.in1 as Connection891
                    connect Product24.out Sum9.in as Connection892
                    connect Gain26.out Sum8.in3 as Connection894
                    connect C1.n_node Junction137 as Connection896
                    connect Junction137 Junction131 as Connection897
                    connect C1.p_node Junction138 as Connection900
                    connect Junction138 Junction130 as Connection901
                    connect P2 Junction2 as Connection903
                    connect Varms.n_node Junction139 as Connection904
                    connect Junction139 Junction137 as Connection905
                    connect Va.n_node Junction139 as Connection906
                    connect P3 Junction97 as Connection907
                    connect Varms.p_node Junction140 as Connection908
                    connect Junction140 Junction138 as Connection909
                    connect Va.p_node Junction140 as Connection910
                    connect Goto4 Va.out as Connection914
                    connect From8 "Single phase PLL1.In" as Connection915
                    connect From9 Gain25.in as Connection917
                    connect Limit1.in From10 as Connection918
                    connect Goto5 Varms.out as Connection919
                    connect Sum16.in Junction141 as Connection921
                    [
                        position = 0, 0
                        breakpoints = 7984, 8336
                    ]
                    connect Junction141 Junction129 as Connection922
                    connect Sum17.in Junction141 as Connection923
                    connect Sign1.out Product17.in1 as Connection925
                    connect Product27.out Product17.in2 as Connection926
                    connect From11 Product1.in1 as Connection931
                    connect From12 Gain20.in as Connection933
                    connect From13 Gain26.in as Connection935
                    connect Goto6 Product2.out as Connection936
                    connect From14 Product14.in1 as Connection937
                    connect From15 "Signal switch25.in2" as Connection942
                    connect From16 "Signal switch30.in2" as Connection944
                    connect From17 "Signal switch27.in2" as Connection946
                    connect Goto7 Sign3.out as Connection947
                    connect From18 "Signal switch26.in2" as Connection948
                    connect From19 "Signal switch24.in2" as Connection949
                    connect Product23.out Sum8.in1 as Connection950
                    connect From2 Sum8.in2 as Connection951
                    connect Product3.out Sum5.in2 as Connection952
                    connect Product17.out Sum5.in1 as Connection953
                    connect Product19.out Sum5.in as Connection954
                    connect Junction101 "Rate Transition1.out" as Connection956
                    connect "Signal switch28.in1" Junction142 as Connection957
                    connect Junction142 "Signal switch29.in1" as Connection958
                    connect Junction101 Junction143 as Connection959
                    connect Junction143 "Edge Detection1.In1" as Connection960
                    connect Junction142 Junction143 as Connection961
                    connect Goto8 "Signal switch29.out" as Connection965
                    connect From20 Isp1.in as Connection966
                }
                [
                    position = 8040, 8024
                    size = 48, 48
                ]

                component Subsystem CPL2 {
                    layout = dynamic
                    component gen_limiter Limit1 {
                        lower_limit = "0.1"
                    }
                    [
                        position = 7296, 8584
                        hide_name = True
                    ]

                    component gen_product Product1 {
                        signs = "*/"
                    }
                    [
                        position = 7760, 8568
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 7376, 8592
                        hide_name = True
                    ]

                    component gen_product Product3 {
                    }
                    [
                        position = 8224, 8560
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function1" {
                        a_coeff = "[0.01,1]"
                        b_coeff = "[1]"
                        domain = "S-domain"
                        method = "Euler"
                    }
                    [
                        position = 8128, 8552
                        hide_name = True
                    ]

                    component pas_resistor R1 {
                        resistance = "Rsnb"
                    }
                    [
                        position = 7808, 9304
                    ]

                    component "core/Signal Controlled Current Source" Isp1 {
                    }
                    [
                        position = 7800, 9200
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Voltage RMS" Varms {
                        sig_output = "True"
                    }
                    [
                        position = 7800, 9504
                        size = 64, 32
                    ]

                    component "core/Voltage Measurement" Va {
                        execution_rate = "inherit"
                        sig_output = "True"
                    }
                    [
                        position = 7800, 9616
                        size = 64, 32
                    ]

                    component gen_limiter Limit2 {
                    }
                    [
                        position = 7848, 8568
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch20" {
                        criterion = "ctrl >= threshold"
                    }
                    [
                        position = 8032, 8552
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "1000"
                    }
                    [
                        position = 7648, 8536
                        hide_name = True
                    ]

                    component gen_comparator Comparator1 {
                    }
                    [
                        position = 8000, 8400
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "CPL_curr/(VLL*kVLL)"
                    }
                    [
                        position = 7600, 8464
                        hide_name = True
                    ]

                    component gen_product Product4 {
                    }
                    [
                        position = 7688, 8488
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain16 {
                        gain = "-1"
                    }
                    [
                        position = 8056, 8328
                        hide_name = True
                    ]

                    component gen_limiter Limit10 {
                        upper_limit = "0"
                    }
                    [
                        position = 7976, 8328
                        hide_name = True
                    ]

                    component gen_sign Sign1 {
                    }
                    [
                        position = 8120, 8328
                        hide_name = True
                    ]

                    component gen_product Product19 {
                        signs = "3"
                    }
                    [
                        position = 8408, 8080
                        hide_name = True
                    ]

                    component gen_limiter Limit11 {
                        lower_limit = "0"
                    }
                    [
                        position = 7544, 8096
                        hide_name = True
                    ]

                    component gen_sign Sign2 {
                    }
                    [
                        position = 7608, 8096
                        hide_name = True
                    ]

                    component gen_product Product14 {
                        signs = "*/"
                    }
                    [
                        position = 7824, 8248
                        hide_name = True
                    ]

                    component gen_gain Gain15 {
                        gain = "1000"
                    }
                    [
                        position = 7720, 8240
                        hide_name = True
                    ]

                    component gen_limiter Limit7 {
                        lower_limit = "0"
                    }
                    [
                        position = 7896, 8248
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch23" {
                        criterion = "ctrl >= threshold"
                    }
                    [
                        position = 8104, 8232
                        hide_name = True
                    ]

                    component gen_comparator Comparator4 {
                    }
                    [
                        position = 8040, 8160
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_product Product15 {
                    }
                    [
                        position = 7824, 8152
                        hide_name = True
                    ]

                    component src_constant Constant8 {
                        execution_rate = "inherit"
                        value = "CPL_curr/(VLL*kVLL)"
                    }
                    [
                        position = 7728, 8176
                        hide_name = True
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function4" {
                        a_coeff = "[0.01,1]"
                        b_coeff = "[1]"
                        domain = "S-domain"
                        method = "Euler"
                    }
                    [
                        position = 8168, 8232
                        hide_name = True
                    ]

                    component gen_product Product17 {
                        signs = "3"
                    }
                    [
                        position = 8392, 8328
                        hide_name = True
                    ]

                    component gen_sum Sum5 {
                        signs = "+++"
                    }
                    [
                        position = 8600, 8624
                        rotation = right
                        hide_name = True
                    ]

                    component gen_abs Abs1 {
                    }
                    [
                        position = 7544, 8144
                        hide_name = True
                    ]

                    component gen_product Product20 {
                    }
                    [
                        position = 6696, 8112
                        hide_name = True
                    ]

                    component gen_gain Gain18 {
                        gain = "Pc_pQ"
                    }
                    [
                        position = 6808, 8112
                        hide_name = True
                    ]

                    component gen_sum Sum8 {
                        signs = "+++-"
                    }
                    [
                        position = 7192, 8392
                        rotation = right
                        hide_name = True
                    ]

                    component gen_sign Sign3 {
                    }
                    [
                        position = 6664, 8056
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch24" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 6920, 8128
                        hide_name = True
                    ]

                    component gen_gain Gain19 {
                        gain = "Pc_nQ"
                    }
                    [
                        position = 6808, 8144
                        hide_name = True
                    ]

                    component gen_gain Gain20 {
                        gain = "1/(1000*Rsnb)"
                    }
                    [
                        position = 7200, 7968
                        hide_name = True
                    ]

                    component gen_product Product21 {
                    }
                    [
                        position = 6944, 7784
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain21 {
                        gain = "nQc_P"
                    }
                    [
                        position = 7040, 7784
                        hide_name = True
                    ]

                    component gen_sum Sum9 {
                        signs = "+++++"
                    }
                    [
                        position = 7328, 8016
                        rotation = right
                        hide_name = True
                    ]

                    component gen_limiter Limit12 {
                        lower_limit = "0"
                    }
                    [
                        position = 6840, 7832
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch25" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7200, 7800
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain22 {
                        gain = "pQc_P"
                    }
                    [
                        position = 7040, 7816
                        hide_name = True
                    ]

                    component src_constant Constant14 {
                        execution_rate = "Ts"
                        value = "Pc_T_pQ"
                    }
                    [
                        position = 6696, 8232
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch26" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 6808, 8256
                        hide_name = True
                    ]

                    component src_constant Constant15 {
                        execution_rate = "Ts"
                        value = "Pc_T_nQ"
                    }
                    [
                        position = 6696, 8272
                        hide_name = True
                    ]

                    component src_constant Constant17 {
                        execution_rate = "Ts"
                        value = "pQc_T"
                    }
                    [
                        position = 6752, 7912
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch27" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 6840, 7936
                        hide_name = True
                    ]

                    component src_constant Constant18 {
                        execution_rate = "Ts"
                        value = "nQc_T"
                    }
                    [
                        position = 6752, 7952
                        hide_name = True
                    ]

                    component gen_abs Abs2 {
                    }
                    [
                        position = 7912, 8392
                        hide_name = True
                    ]

                    component gen_abs Abs3 {
                    }
                    [
                        position = 7952, 8448
                        rotation = left
                        hide_name = True
                    ]

                    component gen_sum Sum14 {
                        signs = "+-"
                    }
                    [
                        position = 6248, 7832
                        hide_name = True
                    ]

                    component src_constant Constant19 {
                        execution_rate = "Ts"
                        value = "60"
                    }
                    [
                        position = 6152, 7872
                        hide_name = True
                    ]

                    component gen_sum Sum15 {
                        signs = "+-"
                    }
                    [
                        position = 6400, 7776
                        hide_name = True
                    ]

                    component src_constant Constant20 {
                        execution_rate = "Ts"
                    }
                    [
                        position = 6320, 7768
                        hide_name = True
                    ]

                    component gen_gain Gain24 {
                        gain = "Fc"
                    }
                    [
                        position = 6320, 7832
                        hide_name = True
                    ]

                    component "core/Edge Detection" "Edge Detection1" {
                    }
                    [
                        position = 9048, 8744
                        rotation = right
                        hide_name = True
                        size = 32, 32
                    ]

                    component "core/Rate Transition" "Rate Transition1" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 8680, 8696
                        hide_name = True
                        size = 32, 32
                    ]

                    component gen_c_function "C function1" {
                        global_variables = "real counter;real m0;real m1;real m2;real corr;"
                        init_fnc = "/*Begin code section*/
counter=0;
/*End code section*/"
                        input_terminals = "real sync;real z;real zi;real zii;real Ts;real Ts_fast;"
                        input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
                        input_terminals_feedthrough = "True;True;True;True;True;True"
                        input_terminals_show_labels = "True;True;True;True;True;True"
                        output_fnc = "/*Begin code section*/
counter = counter + Ts_fast;
if (sync > 0 ) {
    out = z;
    counter = 0;

}
else {
    corr = 1 - 0.11 * (Ts - Ts_fast)/Ts;
    m2 = (zi - zii)/Ts;
    m1 = (z - zi)/Ts;
    m0 = m1 + (m1-m2);

    out = z + counter * corr * m0;
}

if (counter >= Ts) {
    counter = 0;
}
/*End code section*/"
                        output_terminals_dimensions = "inherit"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "True"
                    }
                    [
                        position = 8976, 8952
                        rotation = right
                        hide_name = True
                        size = 48, 128
                    ]

                    component tm_delay "Unit Delay9" {
                    }
                    [
                        position = 8680, 8760
                        hide_name = True
                    ]

                    component tm_delay "Unit Delay10" {
                    }
                    [
                        position = 8784, 8816
                        hide_name = True
                    ]

                    component src_constant Constant21 {
                        execution_rate = "Tfst"
                        value = "Ts"
                    }
                    [
                        position = 8912, 8864
                        hide_name = True
                    ]

                    component "core/Rate Transition" "Rate Transition2" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 8784, 8760
                        hide_name = True
                        size = 32, 32
                    ]

                    component "core/Rate Transition" "Rate Transition3" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 8864, 8816
                        hide_name = True
                        size = 32, 32
                    ]

                    component sys_signal_switch "Signal switch28" {
                        threshold = "Tfst"
                    }
                    [
                        position = 9128, 9064
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant22 {
                        execution_rate = "Tfst"
                        value = "Ts"
                    }
                    [
                        position = 9080, 9120
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch29" {
                    }
                    [
                        position = 9224, 9024
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant23 {
                        execution_rate = "Tfst"
                        value = "Tfast_en"
                    }
                    [
                        position = 9168, 9112
                        hide_name = True
                    ]

                    component gen_product Product22 {
                    }
                    [
                        position = 6952, 7928
                        hide_name = True
                    ]

                    component gen_product Product23 {
                    }
                    [
                        position = 6920, 8264
                        hide_name = True
                    ]

                    component src_constant Constant24 {
                        execution_rate = "Ts"
                        value = "pQc_Q"
                    }
                    [
                        position = 6944, 7680
                        hide_name = True
                    ]

                    component src_constant Constant25 {
                        execution_rate = "Ts"
                        value = "nQc_Q"
                    }
                    [
                        position = 6944, 7632
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch30" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7016, 7664
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_product Product24 {
                    }
                    [
                        position = 7168, 7672
                        hide_name = True
                    ]

                    component gen_terminator Termination70 {
                    }
                    [
                        position = 7616, 8640
                        rotation = left
                        hide_name = True
                    ]

                    component gen_terminator Termination71 {
                    }
                    [
                        position = 7648, 8680
                        rotation = left
                        hide_name = True
                    ]

                    component gen_terminator Termination72 {
                    }
                    [
                        position = 7624, 8824
                        rotation = right
                        hide_name = True
                    ]

                    component gen_gain Gain26 {
                        gain = "1/(1000*Rsnb)"
                    }
                    [
                        position = 7104, 8344
                        hide_name = True
                    ]

                    component "core/Single phase PLL" "Single phase PLL1" {
                        k_SOGI = "0.6"
                        kd_PLL_HIGH = "0"
                        kd_PLL_LOW = "0"
                        kp_PLL_HIGH = "65.7"
                        kp_PLL_LOW = "5.81e2"
                        offset_Hz = "Freq"
                    }
                    [
                        position = 7560, 8736
                        hide_name = True
                        size = 64, 98
                    ]

                    component gen_trigonometric "Trigonometric function1" {
                    }
                    [
                        position = 7856, 8640
                        hide_name = True
                    ]

                    component gen_gain Gain25 {
                        gain = "1.41421356"
                    }
                    [
                        position = 8024, 8680
                        hide_name = True
                    ]

                    component gen_product Product25 {
                    }
                    [
                        position = 8136, 8648
                        hide_name = True
                        scale = 1, -1
                    ]

                    component pas_capacitor C1 {
                        capacitance = "1/(Rsnb*2*np.pi*Freq)"
                    }
                    [
                        position = 7808, 9400
                    ]

                    component gen_trigonometric "Trigonometric function2" {
                    }
                    [
                        position = 8024, 8760
                        hide_name = True
                    ]

                    component gen_sum Sum16 {
                        signs = "++"
                    }
                    [
                        position = 7944, 8760
                        hide_name = True
                    ]

                    component src_constant Constant26 {
                        execution_rate = "Ts"
                        value = "-np.pi/2"
                    }
                    [
                        position = 7848, 8776
                        hide_name = True
                    ]

                    component src_constant Constant28 {
                        execution_rate = "Tfst"
                        value = "Tfst"
                    }
                    [
                        position = 8872, 8888
                        hide_name = True
                    ]

                    component gen_product Product26 {
                        signs = "**"
                    }
                    [
                        position = 8240, 8768
                        hide_name = True
                    ]

                    component gen_sum Sum17 {
                        signs = "++"
                    }
                    [
                        position = 7944, 8848
                        hide_name = True
                    ]

                    component src_constant Constant27 {
                        execution_rate = "Ts"
                        value = "np.pi/2"
                    }
                    [
                        position = 7832, 8872
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function3" {
                    }
                    [
                        position = 8024, 8848
                        hide_name = True
                    ]

                    component gen_product Product27 {
                        signs = "**"
                    }
                    [
                        position = 8136, 8840
                        hide_name = True
                        scale = 1, -1
                    ]

                    port P2 {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 8000, 9200
                        rotation = down
                    ]

                    port P3 {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 7584, 9200
                    ]

                    port P {
                        position = top:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6120, 8008
                    ]

                    port Q {
                        position = top:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6120, 8080
                    ]

                    tag Goto1 {
                        value = "ws"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7720, 8736
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From1 {
                        value = "ws"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6152, 7824
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto2 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6200, 8008
                        size = 0, 0
                    ]

                    tag Goto3 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6200, 8080
                        size = 0, 0
                    ]

                    tag From2 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7120, 8304
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From3 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6752, 7832
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From4 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7264, 7856
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From5 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6544, 8056
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From6 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6832, 8312
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From7 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7080, 7680
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto4 {
                        value = "Va"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7744, 9568
                        rotation = down
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From8 {
                        value = "Va"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7448, 8736
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From9 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7936, 8680
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From10 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7208, 8584
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto5 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7744, 9464
                        rotation = down
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto6 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7512, 8592
                        hide_name = True
                        size = 100, 20
                    ]

                    tag From11 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7648, 8592
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From12 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7080, 7968
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From13 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6992, 8344
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From14 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7704, 8272
                        hide_name = True
                        size = 97, 20
                    ]

                    tag Goto7 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6744, 8056
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From15 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7144, 7856
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From16 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6952, 7728
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From17 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6784, 7864
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From18 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6760, 8184
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From19 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6864, 8080
                        hide_name = True
                        size = 57, 20
                    ]

                    tag Goto8 {
                        value = "Ia_load"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9360, 9024
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From20 {
                        value = "Ia_load"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7728, 9160
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction1 sp
                    [
                        position = 7328, 8584
                    ]

                    junction Junction10 sp
                    [
                        position = 7880, 8568
                    ]

                    junction Junction11 sp
                    [
                        position = 7952, 8488
                    ]

                    junction Junction62 sp
                    [
                        position = 7328, 8144
                    ]

                    junction Junction50 sp
                    [
                        position = 7976, 8248
                    ]

                    junction Junction51 sp
                    [
                        position = 7944, 8152
                    ]

                    junction Junction74 sp
                    [
                        position = 7688, 8144
                    ]

                    junction Junction78 sp
                    [
                        position = 6760, 8112
                    ]

                    junction Junction82 sp
                    [
                        position = 7328, 8096
                    ]

                    junction Junction84 sp
                    [
                        position = 6992, 7784
                    ]

                    junction Junction92 sp
                    [
                        position = 7592, 8536
                    ]

                    junction Junction95 sp
                    [
                        position = 6488, 7776
                    ]

                    junction Junction96 sp
                    [
                        position = 6616, 8056
                    ]

                    junction Junction101 sp
                    [
                        position = 9000, 8696
                    ]

                    junction Junction102 sp
                    [
                        position = 8600, 8696
                    ]

                    junction Junction109 sp
                    [
                        position = 8744, 8760
                    ]

                    junction Junction112 sp
                    [
                        position = 6888, 7832
                    ]

                    junction Junction130 pe
                    [
                        position = 7688, 9304
                    ]

                    junction Junction131 pe
                    [
                        position = 7912, 9304
                    ]

                    junction Junction133 sp
                    [
                        position = 8208, 8232
                    ]

                    junction Junction121 sp
                    [
                        position = 8080, 8680
                    ]

                    junction Junction127 sp
                    [
                        position = 8080, 8776
                    ]

                    junction Junction129 sp
                    [
                        position = 7792, 8752
                    ]

                    junction Junction137 pe
                    [
                        position = 7912, 9400
                    ]

                    junction Junction138 pe
                    [
                        position = 7688, 9400
                    ]

                    junction Junction139 pe
                    [
                        position = 7912, 9504
                    ]

                    junction Junction140 pe
                    [
                        position = 7688, 9504
                    ]

                    junction Junction141 sp
                    [
                        position = 7792, 8752
                    ]

                    junction Junction142 sp
                    [
                        position = 9080, 9008
                    ]

                    junction Junction143 sp
                    [
                        position = 9048, 8696
                    ]

                    junction Junction144 pe
                    [
                        position = 7912, 9200
                    ]

                    junction Junction145 pe
                    [
                        position = 7688, 9200
                    ]

                    connect Limit1.out Junction1 as Connection9
                    connect Junction1 Product2.in1 as Connection10
                    connect "Discrete Transfer Function1.out" Product3.in1 as Connection16
                    connect Product1.out Limit2.in as Connection44
                    connect Gain2.out Product1.in as Connection47
                    connect Constant2.out Product4.in1 as Connection54
                    connect Comparator1.out "Signal switch20.in2" as Connection57
                    connect Junction10 Limit2.out as Connection59
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch20.in1" Junction10 as Connection60
                    connect Product4.out Junction11 as Connection62
                    connect "Signal switch20.in" Junction11 as Connection64
                    connect Limit10.out Gain16.in as Connection299
                    connect Gain16.out Sign1.in as Connection315
                    connect Limit10.in Junction62 as Connection319
                    [
                        position = 0, 0
                    ]
                    connect Limit11.out Sign2.in as Connection320
                    connect Gain15.out Product14.in as Connection227
                    connect Product14.out Limit7.in as Connection228
                    connect Comparator4.out "Signal switch23.in2" as Connection229
                    connect Limit7.out Junction50 as Connection233
                    connect Junction50 "Signal switch23.in1" as Connection234
                    connect Comparator4.in1 Junction50 as Connection235
                    connect "Signal switch23.in" Junction51 as Connection236
                    connect Product15.out Junction51 as Connection238
                    connect Constant8.out Product15.in1 as Connection239
                    connect "Signal switch23.out" "Discrete Transfer Function4.in" as Connection243
                    connect Junction51 Comparator4.in2 as Connection253
                    [
                        position = 0, 0
                    ]
                    connect Abs1.in Junction62 as Connection395
                    [
                        position = 0, 0
                    ]
                    connect Product15.in Junction74 as Connection396
                    connect Junction74 Abs1.out as Connection397
                    connect Gain15.in Junction74 as Connection398
                    connect "Signal switch24.in" Gain18.out as Connection419
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch24.out" Sum8.in as Connection420
                    connect Gain19.out "Signal switch24.in1" as Connection422
                    connect Product20.out Junction78 as Connection423
                    connect Junction78 Gain18.in as Connection424
                    connect Gain19.in Junction78 as Connection425
                    connect Product19.in2 Sign2.out as Connection430
                    [
                        position = 0, 0
                    ]
                    connect Limit11.in Junction82 as Connection444
                    connect Junction82 Junction62 as Connection445
                    [
                        position = 0, 0
                    ]
                    connect Sum9.out Junction82 as Connection446
                    connect Product21.out Junction84 as Connection461
                    [
                        position = 0, 0
                    ]
                    connect Junction84 Gain21.in as Connection462
                    connect Gain22.in Junction84 as Connection463
                    connect Gain22.out "Signal switch25.in" as Connection464
                    connect Gain21.out "Signal switch25.in1" as Connection468
                    [
                        position = 0, 0
                    ]
                    connect Junction92 Gain2.in as Connection509
                    [
                        position = 0, 0
                    ]
                    connect Product4.in Junction92 as Connection510
                    connect Comparator1.in1 Abs2.out as Connection511
                    connect Abs2.in Junction10 as Connection512
                    connect Junction11 Abs3.in as Connection513
                    connect Abs3.out Comparator1.in2 as Connection514
                    connect Junction92 Sum8.out as Connection515
                    [
                        position = 0, 0
                    ]
                    connect From1 Sum14.in as Connection523
                    connect Constant19.out Sum14.in1 as Connection524
                    connect Constant20.out Sum15.in as Connection525
                    connect Gain24.in Sum14.out as Connection526
                    connect Gain24.out Sum15.in1 as Connection527
                    connect Sum15.out Junction95 as Connection529
                    connect P Goto2 as Connection532
                    connect Q Goto3 as Connection533
                    connect From3 Limit12.in as Connection535
                    connect Sign3.in Junction96 as Connection538
                    connect Junction96 Product20.in as Connection539
                    [
                        position = 0, 0
                    ]
                    connect From5 Junction96 as Connection540
                    connect "Signal switch20.out" "Discrete Transfer Function1.in" as Connection554
                    connect Constant21.out "C function1.Ts" as Connection605
                    connect Junction101 "C function1.z" as Connection607
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition3.in" "Unit Delay10.out" as Connection615
                    connect "Rate Transition2.out" "C function1.zi" as Connection616
                    connect "Rate Transition3.out" "C function1.zii" as Connection617
                    connect "C function1.sync" "Edge Detection1.Out1" as Connection618
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition1.in" Junction102 as Connection622
                    [
                        position = 0, 0
                    ]
                    connect Constant22.out "Signal switch28.in2" as Connection624
                    connect Sum5.out Junction102 as Connection649
                    [
                        position = 0, 0
                    ]
                    connect Constant23.out "Signal switch29.in2" as Connection653
                    connect "Signal switch28.out" "Signal switch29.in" as Connection660
                    [
                        position = 0, 0
                    ]
                    connect Junction102 "Unit Delay9.in" as Connection683
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition2.in" Junction109 as Connection684
                    connect Junction109 "Unit Delay9.out" as Connection685
                    connect "Unit Delay10.in" Junction109 as Connection686
                    connect Junction95 Product21.in1 as Connection697
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch27.out" Product22.in1 as Connection701
                    connect Product21.in Junction112 as Connection704
                    connect Junction112 Limit12.out as Connection705
                    [
                        position = 0, 0
                    ]
                    connect Product22.in Junction112 as Connection706
                    connect Product23.in "Signal switch26.out" as Connection710
                    connect From6 Product23.in1 as Connection711
                    [
                        position = 0, 0
                    ]
                    connect Constant24.out "Signal switch30.in" as Connection713
                    connect Constant25.out "Signal switch30.in1" as Connection714
                    connect "Single phase PLL1.f" Goto1 as Connection881
                    connect "Signal switch30.out" Product24.in as Connection718
                    connect From7 Product24.in1 as Connection719
                    connect "Single phase PLL1.d" Termination70.in as Connection882
                    connect "Single phase PLL1.q" Termination71.in as Connection883
                    connect Product20.in1 Junction95 as Connection721
                    [
                        position = 0, 0
                    ]
                    connect "Single phase PLL1.sin(wt)" Termination72.in as Connection884
                    connect "Signal switch28.in" "C function1.out" as Connection724
                    [
                        position = 0, 0
                    ]
                    connect Gain20.out Sum9.in4 as Connection869
                    [
                        position = 0, 0
                    ]
                    connect Constant17.out "Signal switch27.in" as Connection875
                    connect Constant18.out "Signal switch27.in1" as Connection876
                    connect Constant14.out "Signal switch26.in" as Connection878
                    connect Constant15.out "Signal switch26.in1" as Connection879
                    connect Product3.in Product25.out as Connection767
                    connect Constant26.out Sum16.in1 as Connection771
                    connect Sum16.out "Trigonometric function2.in" as Connection772
                    connect "Trigonometric function1.out" Product25.in1 as Connection773
                    [
                        position = 0, 0
                    ]
                    connect Constant28.out "C function1.Ts_fast" as Connection837
                    connect R1.p_node Junction130 as Connection838
                    connect R1.n_node Junction131 as Connection843
                    connect Product25.in Junction121 as Connection786
                    connect "Discrete Transfer Function4.out" Junction133 as Connection847
                    connect Junction121 Gain25.out as Connection787
                    connect Product17.in Junction133 as Connection849
                    connect "Trigonometric function2.out" Product26.in as Connection793
                    [
                        position = 0, 0
                    ]
                    connect Product19.in1 Junction133 as Connection860
                    [
                        position = 0, 0
                    ]
                    connect Constant27.out Sum17.in1 as Connection800
                    connect Junction1 Product2.in as Connection866
                    [
                        position = 0, 0
                    ]
                    connect Sum17.out "Trigonometric function3.in" as Connection808
                    connect "Trigonometric function3.out" Product27.in as Connection809
                    connect Product26.in1 Junction127 as Connection813
                    connect Junction127 Junction121 as Connection814
                    connect Product27.in1 Junction127 as Connection815
                    connect Product19.in Product26.out as Connection818
                    [
                        position = 0, 0
                    ]
                    connect "Trigonometric function1.in" Junction129 as Connection823
                    [
                        position = 0, 0
                    ]
                    connect "Single phase PLL1.wt" Junction129 as Connection825
                    connect Product22.out Sum9.in3 as Connection889
                    connect From4 Sum9.in2 as Connection890
                    connect "Signal switch25.out" Sum9.in1 as Connection891
                    connect Product24.out Sum9.in as Connection892
                    connect Gain26.out Sum8.in3 as Connection894
                    connect C1.n_node Junction137 as Connection896
                    connect Junction137 Junction131 as Connection897
                    connect C1.p_node Junction138 as Connection900
                    connect Junction138 Junction130 as Connection901
                    connect Varms.n_node Junction139 as Connection904
                    connect Junction139 Junction137 as Connection905
                    connect Va.n_node Junction139 as Connection906
                    connect Varms.p_node Junction140 as Connection908
                    connect Junction140 Junction138 as Connection909
                    connect Va.p_node Junction140 as Connection910
                    connect Goto4 Va.out as Connection914
                    connect From8 "Single phase PLL1.In" as Connection915
                    connect From9 Gain25.in as Connection917
                    connect Limit1.in From10 as Connection918
                    connect Goto5 Varms.out as Connection919
                    connect Sum16.in Junction141 as Connection921
                    [
                        position = 0, 0
                        breakpoints = 7816, 8752
                    ]
                    connect Junction141 Junction129 as Connection922
                    connect Sum17.in Junction141 as Connection923
                    connect Sign1.out Product17.in1 as Connection925
                    connect Product27.out Product17.in2 as Connection926
                    connect From11 Product1.in1 as Connection931
                    connect From12 Gain20.in as Connection933
                    connect From13 Gain26.in as Connection935
                    connect Goto6 Product2.out as Connection936
                    connect From14 Product14.in1 as Connection937
                    connect From15 "Signal switch25.in2" as Connection942
                    connect From16 "Signal switch30.in2" as Connection944
                    connect From17 "Signal switch27.in2" as Connection946
                    connect Goto7 Sign3.out as Connection947
                    connect From18 "Signal switch26.in2" as Connection948
                    connect From19 "Signal switch24.in2" as Connection949
                    connect Product23.out Sum8.in1 as Connection950
                    connect From2 Sum8.in2 as Connection951
                    connect Product3.out Sum5.in2 as Connection952
                    connect Product17.out Sum5.in1 as Connection953
                    connect Product19.out Sum5.in as Connection954
                    connect Junction101 "Rate Transition1.out" as Connection956
                    connect "Signal switch28.in1" Junction142 as Connection957
                    connect Junction142 "Signal switch29.in1" as Connection958
                    connect Junction101 Junction143 as Connection959
                    connect Junction143 "Edge Detection1.In1" as Connection960
                    connect Junction142 Junction143 as Connection961
                    connect Goto8 "Signal switch29.out" as Connection965
                    connect From20 Isp1.in as Connection966
                    connect Junction131 Junction144 as Connection969
                    [
                        position = 0, 0
                    ]
                    connect Junction144 Isp1.p_node as Connection970
                    [
                        position = 0, 0
                    ]
                    connect P2 Junction144 as Connection971
                    connect Junction130 Junction145 as Connection972
                    [
                        position = 0, 0
                    ]
                    connect Junction145 Isp1.n_node as Connection973
                    [
                        position = 0, 0
                    ]
                    connect P3 Junction145 as Connection974
                }
                [
                    position = 7936, 8096
                    size = 48, 48
                ]

                component Subsystem CPL3 {
                    layout = dynamic
                    component gen_limiter Limit1 {
                        lower_limit = "0.1"
                    }
                    [
                        position = 7576, 8520
                        hide_name = True
                    ]

                    component gen_product Product1 {
                        signs = "*/"
                    }
                    [
                        position = 8040, 8504
                        hide_name = True
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 7656, 8528
                        hide_name = True
                    ]

                    component gen_product Product3 {
                    }
                    [
                        position = 8504, 8496
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function1" {
                        a_coeff = "[0.01,1]"
                        b_coeff = "[1]"
                        domain = "S-domain"
                        method = "Euler"
                    }
                    [
                        position = 8408, 8488
                        hide_name = True
                    ]

                    component pas_resistor R1 {
                        resistance = "Rsnb"
                    }
                    [
                        position = 8088, 9240
                    ]

                    component "core/Signal Controlled Current Source" Isp1 {
                    }
                    [
                        position = 8080, 9136
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Voltage RMS" Varms {
                        sig_output = "True"
                    }
                    [
                        position = 8080, 9440
                        size = 64, 32
                    ]

                    component "core/Voltage Measurement" Va {
                        execution_rate = "inherit"
                        sig_output = "True"
                    }
                    [
                        position = 8080, 9552
                        size = 64, 32
                    ]

                    component gen_limiter Limit2 {
                    }
                    [
                        position = 8128, 8504
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch20" {
                        criterion = "ctrl >= threshold"
                    }
                    [
                        position = 8312, 8488
                        hide_name = True
                    ]

                    component gen_gain Gain2 {
                        gain = "1000"
                    }
                    [
                        position = 7928, 8472
                        hide_name = True
                    ]

                    component gen_comparator Comparator1 {
                    }
                    [
                        position = 8280, 8336
                        hide_name = True
                    ]

                    component src_constant Constant2 {
                        execution_rate = "Ts"
                        value = "CPL_curr/(VLL*kVLL)"
                    }
                    [
                        position = 7880, 8400
                        hide_name = True
                    ]

                    component gen_product Product4 {
                    }
                    [
                        position = 7968, 8424
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain16 {
                        gain = "-1"
                    }
                    [
                        position = 8336, 8264
                        hide_name = True
                    ]

                    component gen_limiter Limit10 {
                        upper_limit = "0"
                    }
                    [
                        position = 8256, 8264
                        hide_name = True
                    ]

                    component gen_sign Sign1 {
                    }
                    [
                        position = 8400, 8264
                        hide_name = True
                    ]

                    component gen_product Product19 {
                        signs = "3"
                    }
                    [
                        position = 8688, 8016
                        hide_name = True
                    ]

                    component gen_limiter Limit11 {
                        lower_limit = "0"
                    }
                    [
                        position = 7824, 8032
                        hide_name = True
                    ]

                    component gen_sign Sign2 {
                    }
                    [
                        position = 7888, 8032
                        hide_name = True
                    ]

                    component gen_product Product14 {
                        signs = "*/"
                    }
                    [
                        position = 8104, 8184
                        hide_name = True
                    ]

                    component gen_gain Gain15 {
                        gain = "1000"
                    }
                    [
                        position = 8000, 8176
                        hide_name = True
                    ]

                    component gen_limiter Limit7 {
                        lower_limit = "0"
                    }
                    [
                        position = 8176, 8184
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch23" {
                        criterion = "ctrl >= threshold"
                    }
                    [
                        position = 8384, 8168
                        hide_name = True
                    ]

                    component gen_comparator Comparator4 {
                    }
                    [
                        position = 8320, 8096
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_product Product15 {
                    }
                    [
                        position = 8104, 8088
                        hide_name = True
                    ]

                    component src_constant Constant8 {
                        execution_rate = "inherit"
                        value = "CPL_curr/(VLL*kVLL)"
                    }
                    [
                        position = 8008, 8112
                        hide_name = True
                    ]

                    component gen_z_domain_transfer "Discrete Transfer Function4" {
                        a_coeff = "[0.01,1]"
                        b_coeff = "[1]"
                        domain = "S-domain"
                        method = "Euler"
                    }
                    [
                        position = 8448, 8168
                        hide_name = True
                    ]

                    component gen_product Product17 {
                        signs = "3"
                    }
                    [
                        position = 8672, 8264
                        hide_name = True
                    ]

                    component gen_sum Sum5 {
                        signs = "+++"
                    }
                    [
                        position = 8880, 8560
                        rotation = right
                        hide_name = True
                    ]

                    component gen_abs Abs1 {
                    }
                    [
                        position = 7824, 8080
                        hide_name = True
                    ]

                    component gen_product Product20 {
                    }
                    [
                        position = 6976, 8048
                        hide_name = True
                    ]

                    component gen_gain Gain18 {
                        gain = "Pc_pQ"
                    }
                    [
                        position = 7088, 8048
                        hide_name = True
                    ]

                    component gen_sum Sum8 {
                        signs = "+++-"
                    }
                    [
                        position = 7472, 8328
                        rotation = right
                        hide_name = True
                    ]

                    component gen_sign Sign3 {
                    }
                    [
                        position = 6944, 7992
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch24" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7200, 8064
                        hide_name = True
                    ]

                    component gen_gain Gain19 {
                        gain = "Pc_nQ"
                    }
                    [
                        position = 7088, 8080
                        hide_name = True
                    ]

                    component gen_gain Gain20 {
                        gain = "1/(1000*Rsnb)"
                    }
                    [
                        position = 7480, 7904
                        hide_name = True
                    ]

                    component gen_product Product21 {
                    }
                    [
                        position = 7224, 7720
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain21 {
                        gain = "nQc_P"
                    }
                    [
                        position = 7320, 7720
                        hide_name = True
                    ]

                    component gen_sum Sum9 {
                        signs = "+++++"
                    }
                    [
                        position = 7608, 7952
                        rotation = right
                        hide_name = True
                    ]

                    component gen_limiter Limit12 {
                        lower_limit = "0"
                    }
                    [
                        position = 7120, 7768
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch25" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7480, 7736
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_gain Gain22 {
                        gain = "pQc_P"
                    }
                    [
                        position = 7320, 7752
                        hide_name = True
                    ]

                    component src_constant Constant14 {
                        execution_rate = "Ts"
                        value = "Pc_T_pQ"
                    }
                    [
                        position = 6976, 8168
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch26" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7088, 8192
                        hide_name = True
                    ]

                    component src_constant Constant15 {
                        execution_rate = "Ts"
                        value = "Pc_T_nQ"
                    }
                    [
                        position = 6976, 8208
                        hide_name = True
                    ]

                    component src_constant Constant17 {
                        execution_rate = "Ts"
                        value = "pQc_T"
                    }
                    [
                        position = 7032, 7848
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch27" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7120, 7872
                        hide_name = True
                    ]

                    component src_constant Constant18 {
                        execution_rate = "Ts"
                        value = "nQc_T"
                    }
                    [
                        position = 7032, 7888
                        hide_name = True
                    ]

                    component gen_abs Abs2 {
                    }
                    [
                        position = 8192, 8328
                        hide_name = True
                    ]

                    component gen_abs Abs3 {
                    }
                    [
                        position = 8232, 8384
                        rotation = left
                        hide_name = True
                    ]

                    component gen_sum Sum14 {
                        signs = "+-"
                    }
                    [
                        position = 6528, 7768
                        hide_name = True
                    ]

                    component src_constant Constant19 {
                        execution_rate = "Ts"
                        value = "60"
                    }
                    [
                        position = 6432, 7808
                        hide_name = True
                    ]

                    component gen_sum Sum15 {
                        signs = "+-"
                    }
                    [
                        position = 6680, 7712
                        hide_name = True
                    ]

                    component src_constant Constant20 {
                        execution_rate = "Ts"
                    }
                    [
                        position = 6600, 7704
                        hide_name = True
                    ]

                    component gen_gain Gain24 {
                        gain = "Fc"
                    }
                    [
                        position = 6600, 7768
                        hide_name = True
                    ]

                    component "core/Edge Detection" "Edge Detection1" {
                    }
                    [
                        position = 9328, 8680
                        rotation = right
                        hide_name = True
                        size = 32, 32
                    ]

                    component "core/Rate Transition" "Rate Transition1" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 8960, 8632
                        hide_name = True
                        size = 32, 32
                    ]

                    component gen_c_function "C function1" {
                        global_variables = "real counter;real m0;real m1;real m2;real corr;"
                        init_fnc = "/*Begin code section*/
counter=0;
/*End code section*/"
                        input_terminals = "real sync;real z;real zi;real zii;real Ts;real Ts_fast;"
                        input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
                        input_terminals_feedthrough = "True;True;True;True;True;True"
                        input_terminals_show_labels = "True;True;True;True;True;True"
                        output_fnc = "/*Begin code section*/
counter = counter + Ts_fast;
if (sync > 0 ) {
    out = z;
    counter = 0;

}
else {
    corr = 1 - 0.11 * (Ts - Ts_fast)/Ts;
    m2 = (zi - zii)/Ts;
    m1 = (z - zi)/Ts;
    m0 = m1 + (m1-m2);

    out = z + counter * corr * m0;
}

if (counter >= Ts) {
    counter = 0;
}
/*End code section*/"
                        output_terminals_dimensions = "inherit"
                        output_terminals_feedthrough = "True"
                        output_terminals_show_labels = "True"
                    }
                    [
                        position = 9256, 8888
                        rotation = right
                        hide_name = True
                        size = 48, 128
                    ]

                    component tm_delay "Unit Delay9" {
                    }
                    [
                        position = 8960, 8696
                        hide_name = True
                    ]

                    component tm_delay "Unit Delay10" {
                    }
                    [
                        position = 9064, 8752
                        hide_name = True
                    ]

                    component src_constant Constant21 {
                        execution_rate = "Tfst"
                        value = "Ts"
                    }
                    [
                        position = 9192, 8800
                        hide_name = True
                    ]

                    component "core/Rate Transition" "Rate Transition2" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 9064, 8696
                        hide_name = True
                        size = 32, 32
                    ]

                    component "core/Rate Transition" "Rate Transition3" {
                        execution_rate = "Tfst"
                    }
                    [
                        position = 9144, 8752
                        hide_name = True
                        size = 32, 32
                    ]

                    component sys_signal_switch "Signal switch28" {
                        threshold = "Tfst"
                    }
                    [
                        position = 9408, 9000
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant22 {
                        execution_rate = "Tfst"
                        value = "Ts"
                    }
                    [
                        position = 9360, 9056
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch29" {
                    }
                    [
                        position = 9504, 8960
                        hide_name = True
                        scale = 1, -1
                    ]

                    component src_constant Constant23 {
                        execution_rate = "Tfst"
                        value = "Tfast_en"
                    }
                    [
                        position = 9448, 9048
                        hide_name = True
                    ]

                    component gen_product Product22 {
                    }
                    [
                        position = 7232, 7864
                        hide_name = True
                    ]

                    component gen_product Product23 {
                    }
                    [
                        position = 7200, 8200
                        hide_name = True
                    ]

                    component src_constant Constant24 {
                        execution_rate = "Ts"
                        value = "pQc_Q"
                    }
                    [
                        position = 7224, 7616
                        hide_name = True
                    ]

                    component src_constant Constant25 {
                        execution_rate = "Ts"
                        value = "nQc_Q"
                    }
                    [
                        position = 7224, 7568
                        hide_name = True
                    ]

                    component sys_signal_switch "Signal switch30" {
                        criterion = "ctrl >= threshold"
                        threshold = "0"
                    }
                    [
                        position = 7296, 7600
                        hide_name = True
                        scale = 1, -1
                    ]

                    component gen_product Product24 {
                    }
                    [
                        position = 7448, 7608
                        hide_name = True
                    ]

                    component gen_terminator Termination70 {
                    }
                    [
                        position = 7896, 8576
                        rotation = left
                        hide_name = True
                    ]

                    component gen_terminator Termination71 {
                    }
                    [
                        position = 7928, 8616
                        rotation = left
                        hide_name = True
                    ]

                    component gen_terminator Termination72 {
                    }
                    [
                        position = 7904, 8760
                        rotation = right
                        hide_name = True
                    ]

                    component gen_gain Gain26 {
                        gain = "1/(1000*Rsnb)"
                    }
                    [
                        position = 7384, 8280
                        hide_name = True
                    ]

                    component "core/Single phase PLL" "Single phase PLL1" {
                        k_SOGI = "0.6"
                        kd_PLL_HIGH = "0"
                        kd_PLL_LOW = "0"
                        kp_PLL_HIGH = "65.7"
                        kp_PLL_LOW = "5.81e2"
                        offset_Hz = "Freq"
                    }
                    [
                        position = 7840, 8672
                        hide_name = True
                        size = 64, 98
                    ]

                    component gen_trigonometric "Trigonometric function1" {
                    }
                    [
                        position = 8136, 8576
                        hide_name = True
                    ]

                    component gen_gain Gain25 {
                        gain = "1.41421356"
                    }
                    [
                        position = 8304, 8616
                        hide_name = True
                    ]

                    component gen_product Product25 {
                    }
                    [
                        position = 8416, 8584
                        hide_name = True
                        scale = 1, -1
                    ]

                    component pas_capacitor C1 {
                        capacitance = "1/(Rsnb*2*np.pi*Freq)"
                    }
                    [
                        position = 8088, 9336
                    ]

                    component gen_trigonometric "Trigonometric function2" {
                    }
                    [
                        position = 8304, 8696
                        hide_name = True
                    ]

                    component gen_sum Sum16 {
                        signs = "++"
                    }
                    [
                        position = 8224, 8696
                        hide_name = True
                    ]

                    component src_constant Constant26 {
                        execution_rate = "Ts"
                        value = "-np.pi/2"
                    }
                    [
                        position = 8128, 8712
                        hide_name = True
                    ]

                    component src_constant Constant28 {
                        execution_rate = "Tfst"
                        value = "Tfst"
                    }
                    [
                        position = 9152, 8824
                        hide_name = True
                    ]

                    component gen_product Product26 {
                        signs = "**"
                    }
                    [
                        position = 8520, 8704
                        hide_name = True
                    ]

                    component gen_sum Sum17 {
                        signs = "++"
                    }
                    [
                        position = 8224, 8784
                        hide_name = True
                    ]

                    component src_constant Constant27 {
                        execution_rate = "Ts"
                        value = "np.pi/2"
                    }
                    [
                        position = 8112, 8808
                        hide_name = True
                    ]

                    component gen_trigonometric "Trigonometric function3" {
                    }
                    [
                        position = 8304, 8784
                        hide_name = True
                    ]

                    component gen_product Product27 {
                        signs = "**"
                    }
                    [
                        position = 8416, 8776
                        hide_name = True
                        scale = 1, -1
                    ]

                    port P2 {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 8256, 9136
                        rotation = down
                    ]

                    port P3 {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 7888, 9136
                    ]

                    port P {
                        position = top:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6400, 7944
                    ]

                    port Q {
                        position = top:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 6400, 8016
                    ]

                    tag Goto1 {
                        value = "ws"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8000, 8672
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From1 {
                        value = "ws"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6432, 7760
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto2 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6480, 7944
                        size = 0, 0
                    ]

                    tag Goto3 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6480, 8016
                        size = 0, 0
                    ]

                    tag From2 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7400, 8240
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From3 {
                        value = "kP"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7032, 7768
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From4 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7544, 7792
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From5 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 6824, 7992
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From6 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7112, 8248
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From7 {
                        value = "kQ"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7360, 7616
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto4 {
                        value = "Va"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8024, 9504
                        rotation = down
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From8 {
                        value = "Va"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7728, 8672
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From9 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8216, 8616
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From10 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7488, 8520
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto5 {
                        value = "Va_rms"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8024, 9400
                        rotation = down
                        hide_name = True
                        size = 0, 0
                    ]

                    tag Goto6 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7792, 8528
                        hide_name = True
                        size = 100, 20
                    ]

                    tag From11 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7928, 8528
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From12 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7360, 7904
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From13 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7272, 8280
                        hide_name = True
                        size = 97, 20
                    ]

                    tag From14 {
                        value = "Va_rms_squared"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7984, 8208
                        hide_name = True
                        size = 97, 20
                    ]

                    tag Goto7 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7024, 7992
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From15 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7424, 7792
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From16 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7232, 7664
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From17 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7064, 7800
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From18 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7040, 8120
                        hide_name = True
                        size = 57, 20
                    ]

                    tag From19 {
                        value = "Q_sign"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7144, 8016
                        hide_name = True
                        size = 57, 20
                    ]

                    tag Goto8 {
                        value = "Ia_load"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9640, 8960
                        hide_name = True
                        size = 0, 0
                    ]

                    tag From20 {
                        value = "Ia_load"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8008, 9096
                        hide_name = True
                        size = 0, 0
                    ]

                    junction Junction1 sp
                    [
                        position = 7608, 8520
                    ]

                    junction Junction10 sp
                    [
                        position = 8160, 8504
                    ]

                    junction Junction11 sp
                    [
                        position = 8232, 8424
                    ]

                    junction Junction62 sp
                    [
                        position = 7608, 8080
                    ]

                    junction Junction50 sp
                    [
                        position = 8256, 8184
                    ]

                    junction Junction51 sp
                    [
                        position = 8224, 8088
                    ]

                    junction Junction74 sp
                    [
                        position = 7968, 8080
                    ]

                    junction Junction78 sp
                    [
                        position = 7040, 8048
                    ]

                    junction Junction82 sp
                    [
                        position = 7608, 8032
                    ]

                    junction Junction84 sp
                    [
                        position = 7272, 7720
                    ]

                    junction Junction92 sp
                    [
                        position = 7872, 8472
                    ]

                    junction Junction95 sp
                    [
                        position = 6768, 7712
                    ]

                    junction Junction96 sp
                    [
                        position = 6896, 7992
                    ]

                    junction Junction101 sp
                    [
                        position = 9280, 8632
                    ]

                    junction Junction102 sp
                    [
                        position = 8880, 8632
                    ]

                    junction Junction109 sp
                    [
                        position = 9024, 8696
                    ]

                    junction Junction112 sp
                    [
                        position = 7168, 7768
                    ]

                    junction Junction130 pe
                    [
                        position = 7968, 9240
                    ]

                    junction Junction131 pe
                    [
                        position = 8192, 9240
                    ]

                    junction Junction133 sp
                    [
                        position = 8488, 8168
                    ]

                    junction Junction121 sp
                    [
                        position = 8360, 8616
                    ]

                    junction Junction127 sp
                    [
                        position = 8360, 8712
                    ]

                    junction Junction129 sp
                    [
                        position = 8072, 8688
                    ]

                    junction Junction137 pe
                    [
                        position = 8192, 9336
                    ]

                    junction Junction138 pe
                    [
                        position = 7968, 9336
                    ]

                    junction Junction139 pe
                    [
                        position = 8192, 9440
                    ]

                    junction Junction140 pe
                    [
                        position = 7968, 9440
                    ]

                    junction Junction141 sp
                    [
                        position = 8072, 8688
                    ]

                    junction Junction142 sp
                    [
                        position = 9360, 8944
                    ]

                    junction Junction143 sp
                    [
                        position = 9328, 8632
                    ]

                    junction Junction144 pe
                    [
                        position = 8192, 9136
                    ]

                    junction Junction145 pe
                    [
                        position = 7968, 9136
                    ]

                    connect Limit1.out Junction1 as Connection9
                    connect Junction1 Product2.in1 as Connection10
                    connect "Discrete Transfer Function1.out" Product3.in1 as Connection16
                    connect Product1.out Limit2.in as Connection44
                    connect Gain2.out Product1.in as Connection47
                    connect Constant2.out Product4.in1 as Connection54
                    connect Comparator1.out "Signal switch20.in2" as Connection57
                    connect Junction10 Limit2.out as Connection59
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch20.in1" Junction10 as Connection60
                    connect Product4.out Junction11 as Connection62
                    connect "Signal switch20.in" Junction11 as Connection64
                    connect Limit10.out Gain16.in as Connection299
                    connect Gain16.out Sign1.in as Connection315
                    connect Limit10.in Junction62 as Connection319
                    [
                        position = 0, 0
                    ]
                    connect Limit11.out Sign2.in as Connection320
                    connect Gain15.out Product14.in as Connection227
                    connect Product14.out Limit7.in as Connection228
                    connect Comparator4.out "Signal switch23.in2" as Connection229
                    connect Limit7.out Junction50 as Connection233
                    connect Junction50 "Signal switch23.in1" as Connection234
                    connect Comparator4.in1 Junction50 as Connection235
                    connect "Signal switch23.in" Junction51 as Connection236
                    connect Product15.out Junction51 as Connection238
                    connect Constant8.out Product15.in1 as Connection239
                    connect "Signal switch23.out" "Discrete Transfer Function4.in" as Connection243
                    connect Junction51 Comparator4.in2 as Connection253
                    [
                        position = 0, 0
                    ]
                    connect Abs1.in Junction62 as Connection395
                    [
                        position = 0, 0
                    ]
                    connect Product15.in Junction74 as Connection396
                    connect Junction74 Abs1.out as Connection397
                    connect Gain15.in Junction74 as Connection398
                    connect "Signal switch24.in" Gain18.out as Connection419
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch24.out" Sum8.in as Connection420
                    connect Gain19.out "Signal switch24.in1" as Connection422
                    connect Product20.out Junction78 as Connection423
                    connect Junction78 Gain18.in as Connection424
                    connect Gain19.in Junction78 as Connection425
                    connect Product19.in2 Sign2.out as Connection430
                    [
                        position = 0, 0
                    ]
                    connect Limit11.in Junction82 as Connection444
                    connect Junction82 Junction62 as Connection445
                    [
                        position = 0, 0
                    ]
                    connect Sum9.out Junction82 as Connection446
                    connect Product21.out Junction84 as Connection461
                    [
                        position = 0, 0
                    ]
                    connect Junction84 Gain21.in as Connection462
                    connect Gain22.in Junction84 as Connection463
                    connect Gain22.out "Signal switch25.in" as Connection464
                    connect Gain21.out "Signal switch25.in1" as Connection468
                    [
                        position = 0, 0
                    ]
                    connect Junction92 Gain2.in as Connection509
                    [
                        position = 0, 0
                    ]
                    connect Product4.in Junction92 as Connection510
                    connect Comparator1.in1 Abs2.out as Connection511
                    connect Abs2.in Junction10 as Connection512
                    connect Junction11 Abs3.in as Connection513
                    connect Abs3.out Comparator1.in2 as Connection514
                    connect Junction92 Sum8.out as Connection515
                    [
                        position = 0, 0
                    ]
                    connect From1 Sum14.in as Connection523
                    connect Constant19.out Sum14.in1 as Connection524
                    connect Constant20.out Sum15.in as Connection525
                    connect Gain24.in Sum14.out as Connection526
                    connect Gain24.out Sum15.in1 as Connection527
                    connect Sum15.out Junction95 as Connection529
                    connect P Goto2 as Connection532
                    connect Q Goto3 as Connection533
                    connect From3 Limit12.in as Connection535
                    connect Sign3.in Junction96 as Connection538
                    connect Junction96 Product20.in as Connection539
                    [
                        position = 0, 0
                    ]
                    connect From5 Junction96 as Connection540
                    connect "Signal switch20.out" "Discrete Transfer Function1.in" as Connection554
                    connect Constant21.out "C function1.Ts" as Connection605
                    connect Junction101 "C function1.z" as Connection607
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition3.in" "Unit Delay10.out" as Connection615
                    connect "Rate Transition2.out" "C function1.zi" as Connection616
                    connect "Rate Transition3.out" "C function1.zii" as Connection617
                    connect "C function1.sync" "Edge Detection1.Out1" as Connection618
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition1.in" Junction102 as Connection622
                    [
                        position = 0, 0
                    ]
                    connect Constant22.out "Signal switch28.in2" as Connection624
                    connect Sum5.out Junction102 as Connection649
                    [
                        position = 0, 0
                    ]
                    connect Constant23.out "Signal switch29.in2" as Connection653
                    connect "Signal switch28.out" "Signal switch29.in" as Connection660
                    [
                        position = 0, 0
                    ]
                    connect Junction102 "Unit Delay9.in" as Connection683
                    [
                        position = 0, 0
                    ]
                    connect "Rate Transition2.in" Junction109 as Connection684
                    connect Junction109 "Unit Delay9.out" as Connection685
                    connect "Unit Delay10.in" Junction109 as Connection686
                    connect Junction95 Product21.in1 as Connection697
                    [
                        position = 0, 0
                    ]
                    connect "Signal switch27.out" Product22.in1 as Connection701
                    connect Product21.in Junction112 as Connection704
                    connect Junction112 Limit12.out as Connection705
                    [
                        position = 0, 0
                    ]
                    connect Product22.in Junction112 as Connection706
                    connect Product23.in "Signal switch26.out" as Connection710
                    connect From6 Product23.in1 as Connection711
                    [
                        position = 0, 0
                    ]
                    connect Constant24.out "Signal switch30.in" as Connection713
                    connect Constant25.out "Signal switch30.in1" as Connection714
                    connect "Single phase PLL1.f" Goto1 as Connection881
                    connect "Signal switch30.out" Product24.in as Connection718
                    connect From7 Product24.in1 as Connection719
                    connect "Single phase PLL1.d" Termination70.in as Connection882
                    connect "Single phase PLL1.q" Termination71.in as Connection883
                    connect Product20.in1 Junction95 as Connection721
                    [
                        position = 0, 0
                    ]
                    connect "Single phase PLL1.sin(wt)" Termination72.in as Connection884
                    connect "Signal switch28.in" "C function1.out" as Connection724
                    [
                        position = 0, 0
                    ]
                    connect Gain20.out Sum9.in4 as Connection869
                    [
                        position = 0, 0
                    ]
                    connect Constant17.out "Signal switch27.in" as Connection875
                    connect Constant18.out "Signal switch27.in1" as Connection876
                    connect Constant14.out "Signal switch26.in" as Connection878
                    connect Constant15.out "Signal switch26.in1" as Connection879
                    connect Product3.in Product25.out as Connection767
                    connect Constant26.out Sum16.in1 as Connection771
                    connect Sum16.out "Trigonometric function2.in" as Connection772
                    connect "Trigonometric function1.out" Product25.in1 as Connection773
                    [
                        position = 0, 0
                    ]
                    connect Constant28.out "C function1.Ts_fast" as Connection837
                    connect R1.p_node Junction130 as Connection838
                    connect R1.n_node Junction131 as Connection843
                    connect Product25.in Junction121 as Connection786
                    connect "Discrete Transfer Function4.out" Junction133 as Connection847
                    connect Junction121 Gain25.out as Connection787
                    connect Product17.in Junction133 as Connection849
                    connect "Trigonometric function2.out" Product26.in as Connection793
                    [
                        position = 0, 0
                    ]
                    connect Product19.in1 Junction133 as Connection860
                    [
                        position = 0, 0
                    ]
                    connect Constant27.out Sum17.in1 as Connection800
                    connect Junction1 Product2.in as Connection866
                    [
                        position = 0, 0
                    ]
                    connect Sum17.out "Trigonometric function3.in" as Connection808
                    connect "Trigonometric function3.out" Product27.in as Connection809
                    connect Product26.in1 Junction127 as Connection813
                    connect Junction127 Junction121 as Connection814
                    connect Product27.in1 Junction127 as Connection815
                    connect Product19.in Product26.out as Connection818
                    [
                        position = 0, 0
                    ]
                    connect "Trigonometric function1.in" Junction129 as Connection823
                    [
                        position = 0, 0
                    ]
                    connect "Single phase PLL1.wt" Junction129 as Connection825
                    connect Product22.out Sum9.in3 as Connection889
                    connect From4 Sum9.in2 as Connection890
                    connect "Signal switch25.out" Sum9.in1 as Connection891
                    connect Product24.out Sum9.in as Connection892
                    connect Gain26.out Sum8.in3 as Connection894
                    connect C1.n_node Junction137 as Connection896
                    connect Junction137 Junction131 as Connection897
                    connect C1.p_node Junction138 as Connection900
                    connect Junction138 Junction130 as Connection901
                    connect Varms.n_node Junction139 as Connection904
                    connect Junction139 Junction137 as Connection905
                    connect Va.n_node Junction139 as Connection906
                    connect Varms.p_node Junction140 as Connection908
                    connect Junction140 Junction138 as Connection909
                    connect Va.p_node Junction140 as Connection910
                    connect Goto4 Va.out as Connection914
                    connect From8 "Single phase PLL1.In" as Connection915
                    connect From9 Gain25.in as Connection917
                    connect Limit1.in From10 as Connection918
                    connect Goto5 Varms.out as Connection919
                    connect Sum16.in Junction141 as Connection921
                    [
                        position = 0, 0
                        breakpoints = 8096, 8688
                    ]
                    connect Junction141 Junction129 as Connection922
                    connect Sum17.in Junction141 as Connection923
                    connect Sign1.out Product17.in1 as Connection925
                    connect Product27.out Product17.in2 as Connection926
                    connect From11 Product1.in1 as Connection931
                    connect From12 Gain20.in as Connection933
                    connect From13 Gain26.in as Connection935
                    connect Goto6 Product2.out as Connection936
                    connect From14 Product14.in1 as Connection937
                    connect From15 "Signal switch25.in2" as Connection942
                    connect From16 "Signal switch30.in2" as Connection944
                    connect From17 "Signal switch27.in2" as Connection946
                    connect Goto7 Sign3.out as Connection947
                    connect From18 "Signal switch26.in2" as Connection948
                    connect From19 "Signal switch24.in2" as Connection949
                    connect Product23.out Sum8.in1 as Connection950
                    connect From2 Sum8.in2 as Connection951
                    connect Product3.out Sum5.in2 as Connection952
                    connect Product17.out Sum5.in1 as Connection953
                    connect Product19.out Sum5.in as Connection954
                    connect Junction101 "Rate Transition1.out" as Connection956
                    connect "Signal switch28.in1" Junction142 as Connection957
                    connect Junction142 "Signal switch29.in1" as Connection958
                    connect Junction101 Junction143 as Connection959
                    connect Junction143 "Edge Detection1.In1" as Connection960
                    connect Junction142 Junction143 as Connection961
                    connect Goto8 "Signal switch29.out" as Connection965
                    connect From20 Isp1.in as Connection966
                    connect Junction131 Junction144 as Connection969
                    [
                        position = 0, 0
                    ]
                    connect Junction144 Isp1.p_node as Connection970
                    [
                        position = 0, 0
                    ]
                    connect P2 Junction144 as Connection971
                    connect Junction130 Junction145 as Connection972
                    [
                        position = 0, 0
                    ]
                    connect Junction145 Isp1.n_node as Connection973
                    [
                        position = 0, 0
                    ]
                    connect P3 Junction145 as Connection974
                }
                [
                    position = 7832, 8176
                    size = 48, 48
                ]

                port A1 {
                    label = "A1"
                    position = left:1
                    kind = pe
                }
                [
                    position = 7664, 8024
                ]

                port N {
                    label = "N"
                    position = right:1
                    kind = pe
                }
                [
                    position = 8320, 8096
                    rotation = down
                ]

                port B1 {
                    position = left:2
                    kind = pe
                    direction =  in
                }
                [
                    position = 7664, 8096
                ]

                port C1 {
                    position = left:3
                    kind = pe
                    direction =  in
                }
                [
                    position = 7664, 8176
                ]

                tag Goto1 {
                    value = "kP_ref"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8200, 7464
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto2 {
                    value = "kQ_ref"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8208, 7592
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto3 {
                    value = "kP_int"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7216, 7496
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto4 {
                    value = "kQ_int"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7216, 7584
                    hide_name = True
                    size = 60, 20
                ]

                tag From1 {
                    value = "kP_int"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7424, 7456
                    hide_name = True
                    size = 60, 20
                ]

                tag From2 {
                    value = "kQ_int"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7336, 7584
                    hide_name = True
                    size = 60, 20
                ]

                tag From3 {
                    value = "kP_ref"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7640, 7904
                    hide_name = True
                    size = 60, 20
                ]

                tag From4 {
                    value = "kQ_ref"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7640, 7944
                    hide_name = True
                    size = 60, 20
                ]

                junction Junction7 sp
                [
                    position = 7960, 7456
                ]

                junction Junction8 sp
                [
                    position = 7808, 7584
                ]

                junction Junction10 sp
                [
                    position = 7952, 7584
                ]

                junction Junction11 pe
                [
                    position = 8264, 8096
                ]

                junction Junction12 pe
                [
                    position = 8264, 8096
                ]

                junction Junction13 sp
                [
                    position = 7928, 7904
                ]

                junction Junction14 sp
                [
                    position = 7944, 7944
                ]

                junction Junction15 sp
                [
                    position = 7824, 7904
                ]

                junction Junction16 sp
                [
                    position = 7840, 7944
                ]

                connect Constant1.out Goto3 as Connection341
                connect Constant11.out Goto4 as Connection342
                connect Gain1.out "Rate Transition1.in" as Connection370
                connect Gain2.out "Rate Transition2.in" as Connection746
                connect "Rate Transition1.out" "Rate Limiter1.in" as Connection945
                connect Constant14.out Product23.in1 as Connection1081
                connect Product23.out Sum10.in1 as Connection1086
                connect "Rate Limiter1.out" Junction7 as Connection1088
                connect Junction7 Product23.in as Connection1089
                connect Sum10.in Junction7 as Connection1090
                connect Sum10.out Goto1 as Connection1091
                connect "Rate Transition2.out" "Rate Limiter2.in" as Connection1092
                connect Sign3.out "Signal switch27.in2" as Connection1097
                connect "Signal switch27.out" Product24.in1 as Connection1101
                [
                    position = 0, 0
                ]
                connect Product24.out Sum14.in1 as Connection1102
                [
                    position = 0, 0
                ]
                connect Constant17.out "Signal switch27.in" as Connection1106
                connect Constant18.out "Signal switch27.in1" as Connection1107
                connect "Rate Limiter2.out" Junction8 as Connection1108
                connect Sign3.in Junction8 as Connection1110
                connect Sum14.in Junction10 as Connection1114
                connect Product24.in Junction10 as Connection1116
                connect Junction10 Junction8 as Connection1117
                [
                    position = 0, 0
                ]
                connect Sum14.out Goto2 as Connection1118
                connect A1 CPL1.P3 as Connection1119
                connect CPL1.P2 Junction11 as Connection1151
                connect Junction11 N as Connection1152
                [
                    position = 0, 0
                ]
                connect Junction12 Junction11 as Connection1155
                connect CPL1.P Junction13 as Connection1159
                connect CPL1.Q Junction14 as Connection1162
                connect Junction13 Junction15 as Connection1165
                connect Junction15 From3 as Connection1166
                connect Junction14 Junction16 as Connection1168
                connect Junction16 From4 as Connection1169
                connect CPL2.P3 B1 as ConnB
                connect CPL3.P3 C1 as ConnC
                connect CPL2.Q Junction14 as Connection1164
                connect CPL2.P Junction13 as Connection1161
                connect CPL3.Q Junction16 as Connection1170
                connect CPL3.P Junction15 as Connection1167
                connect CPL2.P2 Junction12 as Connection1154
                connect CPL3.P2 Junction12 as Connection1156
                connect Gain1.in From1 as connP
                connect Gain2.in From2 as connQ

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    kVLine {
                        label = "Nominal line voltage"
                        widget = edit
                        type = generic
                        default_value = "Vn_3ph_CPL"
                        unit = "kV"
                        group = "Load Parameters:1"
                    }

                    VLL {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kVLL {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kP_inp {
                        label = "Active power input"
                        widget = combo
                        combo_values = "Fixed", "Variable input"
                        type = string
                        default_value = "Fixed"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            if new_value == "Variable input":
                                P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                                P_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                P_int = mdl.get_item("From1", parent=comp_handle, item_type=ITEM_TAG)
                                conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_P_int:
                                    mdl.delete_item(conn_P_int)

                                if not term_P:
                                    term_P = mdl.create_component("Termination", parent=comp_handle, name="Termination1", position=(7509,7452), hide_name=True)
                                    mdl.create_connection(mdl.term(term_P, "in"), P_int)

                                if not P_ext:
                                    P_ext = mdl.create_port(parent=comp_handle, name="P_set", direction="in", kind = "sp",
                                                        terminal_position=("top", 1),
                                                        position=(7613, 7452))
                                    mdl.create_connection(mdl.term(P_inp, "in"), P_ext)
                            elif new_value == "Fixed":
                                P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
                                term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                P_int = mdl.get_item("From1", parent=comp_handle, item_type=ITEM_TAG)
                                P_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if P_ext:
                                    mdl.delete_item(P_ext)
                                if term_P:
                                    mdl.delete_item(term_P)
                                if conn_P_int:
                                    mdl.delete_item(conn_P_int)
                                mdl.create_connection(mdl.term(P_inp, "in"), P_int, name="connP")
                        ENDCODE
                    }

                    kP_tot {
                        label = "Active power"
                        widget = edit
                        type = generic
                        default_value = "P_CPL"
                        unit = "kW"
                        group = "Load Parameters"
                    }

                    kP {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    SS {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Rsnb {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    kQ_inp {
                        label = "Reactive power input"
                        widget = combo
                        combo_values = "Fixed", "Variable input"
                        type = string
                        default_value = "Fixed"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            if new_value == "Variable input":
                                Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                                Q_inp = mdl.get_item("Gain2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Q_int = mdl.get_item("From2", parent=comp_handle, item_type=ITEM_TAG)
                                conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_Q_int:
                                    mdl.delete_item(conn_Q_int)

                                if not term_Q:
                                    term_Q = mdl.create_component("Termination", parent=comp_handle, name="Termination2", position=(7423,7582), hide_name=True)
                                    mdl.create_connection(mdl.term(term_Q, "in"), Q_int)

                                if not Q_ext:
                                    Q_ext = mdl.create_port(parent=comp_handle, name="Q_set", direction="in", kind = "sp",
                                                        terminal_position=("top", 2),
                                                        position=(7502, 7582))
                                    mdl.create_connection(mdl.term(Q_inp, "in"), Q_ext)
                            elif new_value == "Fixed":
                                Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
                                term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                Q_int = mdl.get_item("From2", parent=comp_handle, item_type=ITEM_TAG)
                                Q_inp = mdl.get_item("Gain2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if Q_ext:
                                    mdl.delete_item(Q_ext)
                                if term_Q:
                                    mdl.delete_item(term_Q)
                                if conn_Q_int:
                                    mdl.delete_item(conn_Q_int)
                                mdl.create_connection(mdl.term(Q_inp, "in"), Q_int, name="connQ")
                        ENDCODE
                    }

                    kQ_tot {
                        label = "Reactive power"
                        widget = edit
                        type = generic
                        default_value = "Q_CPL"
                        unit = "kVAR"
                        group = "Load Parameters"
                    }

                    kQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Q {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Ts {
                        label = "Execution Rate"
                        widget = edit
                        type = generic
                        default_value = "Ts"
                        unit = "s"
                        group = "Execution rate:2"
                    }

                    Fast_con {
                        label = "Fast execution rate output conditioning"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Execution rate"
                        no_evaluate
                    }

                    Tfst {
                        label = "Fast execution rate"
                        widget = edit
                        type = generic
                        default_value = "Tfast"
                        unit = "s"
                        group = "Execution rate"
                    }

                    Tfast_en {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    pQc_P {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    nQc_P {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    pQc_T {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    nQc_T {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    pQc_Q {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    nQc_Q {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Pc_pQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Pc_nQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Pc_T_pQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Pc_T_nQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Pc_T {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Fc {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    phases {
                        label = "Number pf phases"
                        widget = combo
                        combo_values = "3", "1"
                        type = string
                        default_value = "3"
                        group = "Load Parameters"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            if new_value == "3":
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                CPLA = mdl.get_item("CPL1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                CPLB = mdl.get_item("CPL2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                CPLC = mdl.get_item("CPL3", parent=comp_handle, item_type=ITEM_COMPONENT)
                                mdl.enable_items(CPLB)
                                mdl.enable_items(CPLC)
                                if not pB:
                                    pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                                                        terminal_position=("left", 2),
                                                        position=(7662, 8094), rotation="up")
                                    mdl.create_connection(mdl.term(CPLB, "P3"), pB, name="ConnB")
                                if not pC:
                                    pC = mdl.create_port(parent=comp_handle, name="C1", direction="out", kind = "pe",
                                                        terminal_position=("left", 3),
                                                        position=(7662, 8175), rotation="up")
                                    mdl.create_connection(mdl.term(CPLC, "P3"), pC, name="ConnC")

                                jun14 = mdl.get_item("Junction14", parent=comp_handle, item_type="junction")
                                conn1164 = mdl.get_item("Connection1164", parent=comp_handle, item_type="connection")
                                if not conn1164:
                                    mdl.create_connection(mdl.term(CPLB, "Q"), jun14, name="Connection1164")
                                jun13 = mdl.get_item("Junction13", parent=comp_handle, item_type="junction")
                                conn1161 = mdl.get_item("Connection1161", parent=comp_handle, item_type="connection")
                                if not conn1161:
                                    mdl.create_connection(mdl.term(CPLB, "P"), jun13, name="Connection1161")
                                jun16 = mdl.get_item("Junction16", parent=comp_handle, item_type="junction")
                                conn1170 = mdl.get_item("Connection1170", parent=comp_handle, item_type="connection")
                                if not conn1170:
                                    mdl.create_connection(mdl.term(CPLC, "Q"), jun16, name="Connection1170")
                                jun15 = mdl.get_item("Junction15", parent=comp_handle, item_type="junction")
                                conn1167 = mdl.get_item("Connection1167", parent=comp_handle, item_type="connection")
                                if not conn1167:
                                    mdl.create_connection(mdl.term(CPLC, "P"), jun15, name="Connection1167")

                                jun12 = mdl.get_item("Junction12", parent=comp_handle, item_type="junction")
                                conn1154 = mdl.get_item("Connection1154", parent=comp_handle, item_type="connection")
                                if not conn1154:
                                    mdl.create_connection(mdl.term(CPLB, "P2"), jun12, name="Connection1154")
                                conn1156 = mdl.get_item("Connection1156", parent=comp_handle, item_type="connection")
                                if not conn1156:
                                    mdl.create_connection(mdl.term(CPLC, "P2"), jun12, name="Connection1156")

                            if new_value == "1":
                                pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
                                pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
                                pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
                                CPLA = mdl.get_item("CPL1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                CPLB = mdl.get_item("CPL2", parent=comp_handle, item_type=ITEM_COMPONENT)
                                CPLC = mdl.get_item("CPL3", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if pB:
                                    mdl.delete_item(pB)
                                if pC:
                                    mdl.delete_item(pC)

                                conn1164 = mdl.get_item("Connection1164", parent=comp_handle, item_type="connection")
                                if conn1164:
                                    mdl.delete_item(conn1164)
                                conn1161 = mdl.get_item("Connection1161", parent=comp_handle, item_type="connection")
                                if conn1161:
                                    mdl.delete_item(conn1161)
                                conn1170 = mdl.get_item("Connection1170", parent=comp_handle, item_type="connection")
                                if conn1170:
                                    mdl.delete_item(conn1170)
                                conn1167 = mdl.get_item("Connection1167", parent=comp_handle, item_type="connection")
                                if conn1167:
                                    mdl.delete_item(conn1167)
                                conn1154 = mdl.get_item("Connection1154", parent=comp_handle, item_type="connection")
                                if conn1154:
                                    mdl.delete_item(conn1154)
                                conn1156 = mdl.get_item("Connection1156", parent=comp_handle, item_type="connection")
                                if conn1156:
                                    mdl.delete_item(conn1156)

                                mdl.disable_items(CPLB)
                                mdl.disable_items(CPLC)
                        ENDCODE
                    }

                    Freq {
                        label = "Nominal frequency"
                        widget = edit
                        type = generic
                        default_value = "fn"
                        unit = "Hz"
                        group = "Load Parameters"
                    }

                    inv_ph {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    CPL_curr {
                        label = "Current limit "
                        widget = edit
                        type = generic
                        default_value = "CPL_LMT"
                        unit = "pu"
                        group = "Load Parameters"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        kVLine = mdl.get_property_value(mdl.prop(item_handle, "kVLine"))
                        VLL = mdl.get_property_value(mdl.prop(item_handle, "VLL"))
                        kVLL = mdl.get_property_value(mdl.prop(item_handle, "kVLL"))
                        kP_inp = mdl.get_property_value(mdl.prop(item_handle, "kP_inp"))
                        kP_tot = mdl.get_property_value(mdl.prop(item_handle, "kP_tot"))
                        kP = mdl.get_property_value(mdl.prop(item_handle, "kP"))
                        P = mdl.get_property_value(mdl.prop(item_handle, "P"))
                        SS = mdl.get_property_value(mdl.prop(item_handle, "SS"))
                        Rsnb = mdl.get_property_value(mdl.prop(item_handle, "Rsnb"))
                        kQ_inp = mdl.get_property_value(mdl.prop(item_handle, "kQ_inp"))
                        kQ_tot = mdl.get_property_value(mdl.prop(item_handle, "kQ_tot"))
                        kQ = mdl.get_property_value(mdl.prop(item_handle, "kQ"))
                        Q = mdl.get_property_value(mdl.prop(item_handle, "Q"))
                        Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
                        Fast_con = mdl.get_property_value(mdl.prop(item_handle, "Fast_con"))
                        Tfst = mdl.get_property_value(mdl.prop(item_handle, "Tfst"))
                        Tfast_en = mdl.get_property_value(mdl.prop(item_handle, "Tfast_en"))
                        pQc_P = mdl.get_property_value(mdl.prop(item_handle, "pQc_P"))
                        nQc_P = mdl.get_property_value(mdl.prop(item_handle, "nQc_P"))
                        pQc_T = mdl.get_property_value(mdl.prop(item_handle, "pQc_T"))
                        nQc_T = mdl.get_property_value(mdl.prop(item_handle, "nQc_T"))
                        pQc_Q = mdl.get_property_value(mdl.prop(item_handle, "pQc_Q"))
                        nQc_Q = mdl.get_property_value(mdl.prop(item_handle, "nQc_Q"))
                        Pc_pQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_pQ"))
                        Pc_nQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_nQ"))
                        Pc_T_pQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_T_pQ"))
                        Pc_T_nQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_T_nQ"))
                        Pc_T = mdl.get_property_value(mdl.prop(item_handle, "Pc_T"))
                        Fc = mdl.get_property_value(mdl.prop(item_handle, "Fc"))
                        phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
                        Freq = mdl.get_property_value(mdl.prop(item_handle, "Freq"))
                        inv_ph = mdl.get_property_value(mdl.prop(item_handle, "inv_ph"))
                        CPL_curr = mdl.get_property_value(mdl.prop(item_handle, "CPL_curr"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy
                        import math

                        kVLL = kVLine/(3**0.5)
                        VLL = kVLL * 1000
                        kP = kP_tot / 3
                        kQ = kQ_tot / 3
                        P = kP * 1000
                        Q = kQ * 1000
                        SS = (P*P + Q*Q)**0.5

                        if SS==0:
                            Rsnb = 100000
                        else:
                            Rsnb = 30 * (VLL*VLL/(SS))

                        if Fast_con:
                            Tfast_en = 1
                        else:
                            Tfast_en = 0

                        pQc_P = -1/9.7
                        nQc_P = -0.097

                        pQc_T = -0.015*(Ts-600e-6)/Ts
                        nQc_T = -0.012*(Ts-600e-6)/Ts

                        pQc_Q = 0.0266
                        nQc_Q = 0.014

                        Pc_pQ = 0.095
                        Pc_nQ = 0.0933

                        Pc_T = 0.005*(Ts-600e-6)/Ts

                        Pc_T_pQ = 0.0075*(Ts-600e-6)/Ts
                        Pc_T_nQ = 0.01*(Ts-600e-6)/Ts

                        Fc = -0*1/15

                        if phases == "3":
                            inv_ph = 1/3
                        else:
                            inv_ph = 1


                        mdl.set_property_value(mdl.prop(item_handle, "kVLine"), kVLine)
                        mdl.set_property_value(mdl.prop(item_handle, "kVLL"), kVLL)
                        mdl.set_property_value(mdl.prop(item_handle, "kP"), kP)
                        mdl.set_property_value(mdl.prop(item_handle, "VLL"), VLL)
                        mdl.set_property_value(mdl.prop(item_handle, "P"), P)
                        mdl.set_property_value(mdl.prop(item_handle, "Rsnb"), Rsnb)
                        mdl.set_property_value(mdl.prop(item_handle, "kQ"), kQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Q"), Q)
                        mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
                        mdl.set_property_value(mdl.prop(item_handle, "kP_tot"), kP_tot)
                        mdl.set_property_value(mdl.prop(item_handle, "kQ_tot"), kQ_tot)
                        mdl.set_property_value(mdl.prop(item_handle, "Tfast_en"), Tfast_en)

                        mdl.set_property_value(mdl.prop(item_handle, "pQc_P"), pQc_P)
                        mdl.set_property_value(mdl.prop(item_handle, "nQc_P"), nQc_P)

                        mdl.set_property_value(mdl.prop(item_handle, "pQc_T"), pQc_T)
                        mdl.set_property_value(mdl.prop(item_handle, "nQc_T"), nQc_T)

                        mdl.set_property_value(mdl.prop(item_handle, "pQc_Q"), pQc_Q)
                        mdl.set_property_value(mdl.prop(item_handle, "nQc_Q"), nQc_Q)

                        mdl.set_property_value(mdl.prop(item_handle, "Pc_pQ"), Pc_pQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Pc_nQ"), Pc_nQ)

                        mdl.set_property_value(mdl.prop(item_handle, "Pc_T"), Pc_T)

                        mdl.set_property_value(mdl.prop(item_handle, "Pc_T_pQ"), Pc_T_pQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Pc_T_nQ"), Pc_T_nQ)

                        mdl.set_property_value(mdl.prop(item_handle, "Fc"), Fc)
                        mdl.set_property_value(mdl.prop(item_handle, "inv_ph"), inv_ph)

                        mdl.set_property_value(mdl.prop(item_handle, "Freq"), Freq)
                        mdl.set_property_value(mdl.prop(item_handle, "SS"), SS)
                        mdl.set_property_value(mdl.prop(item_handle, "Tfst"), Tfst)

                        mdl.set_property_value(mdl.prop(item_handle, "CPL_curr"), CPL_curr)
                    ENDCODE
                }
            }
            [
                position = 8216, 8112
                rotation = left
                scale = 1, -1
                size = 104, 112
            ]

            component Subsystem TS_module {
                layout = dynamic
                component src_clock Clock1 {
                    execution_rate = "Texec"
                }
                [
                    position = 6824, 8000
                ]

                component gen_probe d_rel {
                    signal_name = "Delay release"
                }
                [
                    position = 6928, 7936
                ]

                component gen_comparator Comparator1 {
                }
                [
                    position = 6928, 8000
                ]

                component src_constant Constant1 {
                    execution_rate = "Texec"
                    value = "Tdel"
                }
                [
                    position = 6824, 8064
                ]

                component sys_signal_switch "Signal switch1" {
                    criterion = "ctrl >= threshold"
                }
                [
                    position = 7008, 8144
                ]

                component src_constant Constant3 {
                    execution_rate = "Texec"
                }
                [
                    position = 6840, 8128
                ]

                component gen_integrator Integrator1 {
                    show_reset = "rising"
                    show_state = "True"
                }
                [
                    position = 7352, 8152
                ]

                component src_constant Constant4 {
                    execution_rate = "Texec"
                    value = "Tmax"
                }
                [
                    position = 7152, 8304
                ]

                component gen_comparator Comparator2 {
                }
                [
                    position = 7240, 8296
                ]

                component lut_1d "1D look-up table1" {
                    in_vec_x = "T_vecP"
                    out_vec_f_x = "P_vec1"
                }
                [
                    position = 7608, 8008
                ]

                component lut_1d "1D look-up table2" {
                    in_vec_x = "T_vecQ"
                    out_vec_f_x = "Q_vec1"
                }
                [
                    position = 7608, 8192
                ]

                component src_constant Constant5 {
                    execution_rate = "Texec"
                    value = "0"
                }
                [
                    position = 6840, 8176
                ]

                component sys_signal_switch "Signal switch2" {
                    criterion = "ctrl >= threshold"
                }
                [
                    position = 7176, 8144
                ]

                component src_constant Constant6 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7112, 8048
                ]

                component sys_signal_switch "Signal switch3" {
                    criterion = "ctrl >= threshold"
                }
                [
                    position = 7456, 8160
                ]

                component src_constant Constant7 {
                    execution_rate = "Texec"
                    value = "loop_en"
                }
                [
                    position = 7400, 8064
                ]

                component gen_gain Gain1 {
                }
                [
                    position = 7384, 8352
                ]

                port P {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8008
                ]

                port Q {
                    position = right:2
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7976, 8192
                ]

                port T {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7240, 8440
                ]

                junction Junction3 sp
                [
                    position = 6952, 8176
                ]

                junction Junction4 sp
                [
                    position = 7496, 8160
                ]

                connect Clock1.out Comparator1.in1 as Connection1
                connect Constant1.out Comparator1.in2 as Connection2
                connect d_rel.in Comparator1.out as Connection530
                connect "Signal switch1.in2" Comparator1.out as Connection3
                connect Constant3.out "Signal switch1.in" as Connection5
                connect Constant4.out Comparator2.in2 as Connection7
                connect Comparator2.out Integrator1.reset as Connection8
                connect Comparator2.in1 Integrator1.state_port as Connection9
                [
                    position = 0, 0
                    breakpoints = 7208, 8232; 7392, 8232
                ]
                connect "1D look-up table1.value" P as Connection10
                connect "1D look-up table2.value" Q as Connection12
                connect Constant6.out "Signal switch2.in2" as Connection21
                connect "Signal switch1.out" "Signal switch2.in" as Connection26
                connect Constant5.out Junction3 as Connection31
                connect Junction3 "Signal switch1.in1" as Connection32
                [
                    position = 0, 0
                ]
                connect "Signal switch2.in1" Junction3 as Connection33
                [
                    position = 0, 0
                ]
                connect Constant7.out "Signal switch3.in2" as Connection38
                connect Integrator1.out "Signal switch3.in" as Connection40
                connect "1D look-up table2.addr" Junction4 as Connection41
                [
                    position = 0, 0
                ]
                connect "Signal switch3.out" Junction4 as Connection43
                connect Gain1.out "Signal switch3.in1" as Connection44
                connect Integrator1.in "Signal switch2.out" as Connection45
                [
                    position = 0, 0
                ]
                connect "1D look-up table1.addr" Junction4 as Connection49
                [
                    position = 0, 0
                ]
                connect Gain1.in T as connT

                P_mode = "Manual input"
                T_vec = "T_Ts_internal"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    P_nom {
                        label = "Nominal active power"
                        widget = edit
                        type = generic
                        default_value = "P_CPL"
                        unit = "kW"
                    }

                    Q_nom {
                        label = "Nominal reactive power"
                        widget = edit
                        type = generic
                        default_value = "Q_CPL"
                        unit = "kVAR"
                    }

                    S_vec {
                        label = "Load profile"
                        widget = edit
                        type = generic
                        default_value = "S_Ts"
                        unit = "pu"
                    }

                    S_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    S_vec2 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Plen {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    Q_vec1 {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecP {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vecQ {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    P_mode {
                        label = "Power profile mode"
                        widget = combo
                        combo_values = "Manual input", "Loop cycle"
                        type = string
                        default_value = "Loop cycle"
                        no_evaluate

                        CODE property_value_changed
                            from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT
                            comp_handle = mdl.get_sub_level_handle(container_handle)

                            if new_value == "Loop cycle":
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                T_def = mdl.get_item("Constant5", parent=comp_handle, item_type=ITEM_COMPONENT)

                                if T_ext:
                                    mdl.delete_item(T_ext)

                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if not conn_T_int:
                                    mdl.create_connection(mdl.term(T_inp, "in"), mdl.term(T_def, "out"), "connT")

                            else:
                                T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
                                T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
                                conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
                                if conn_T_int:
                                    mdl.delete_item(conn_T_int)

                                if not T_ext:
                                    T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                                                        terminal_position=("left", 1),
                                                        position=(7237, 8437))

                                mdl.create_connection(mdl.term(T_inp, "in"), T_ext, "connT")
                        ENDCODE

                        CODE property_value_edited
                            if new_value == "Manual input":
                                mdl.disable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.disable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.enable_property(mdl.prop(container_handle, "T_vec"))
                            else:
                                mdl.enable_property(mdl.prop(container_handle, "Tmax"))
                                mdl.enable_property(mdl.prop(container_handle, "Tdel"))
                                mdl.disable_property(mdl.prop(container_handle, "T_vec"))
                        ENDCODE
                    }

                    loop_en {
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                    }

                    T_vec {
                        label = "Time profile"
                        widget = edit
                        type = generic
                        default_value = "T_Ts"
                        unit = "h"
                    }

                    Tmax {
                        label = "Power profile loop cycle"
                        widget = edit
                        type = generic
                        default_value = "T_Ts_max"
                        unit = "s"
                        disabled
                    }

                    Tdel {
                        label = "Profile start delay"
                        widget = edit
                        type = generic
                        default_value = "del_Ts"
                        unit = "s"
                        disabled
                    }

                    Texec {
                        label = "Execution rate"
                        widget = edit
                        type = generic
                        default_value = "Tfast"
                        unit = "s"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        P_nom = mdl.get_property_value(mdl.prop(item_handle, "P_nom"))
                        Q_nom = mdl.get_property_value(mdl.prop(item_handle, "Q_nom"))
                        S_vec = mdl.get_property_value(mdl.prop(item_handle, "S_vec"))
                        S_vec1 = mdl.get_property_value(mdl.prop(item_handle, "S_vec1"))
                        S_vec2 = mdl.get_property_value(mdl.prop(item_handle, "S_vec2"))
                        P_vec1 = mdl.get_property_value(mdl.prop(item_handle, "P_vec1"))
                        Plen = mdl.get_property_value(mdl.prop(item_handle, "Plen"))
                        Q_vec1 = mdl.get_property_value(mdl.prop(item_handle, "Q_vec1"))
                        T_vecP = mdl.get_property_value(mdl.prop(item_handle, "T_vecP"))
                        T_vecQ = mdl.get_property_value(mdl.prop(item_handle, "T_vecQ"))
                        P_mode = mdl.get_property_value(mdl.prop(item_handle, "P_mode"))
                        loop_en = mdl.get_property_value(mdl.prop(item_handle, "loop_en"))
                        T_vec = mdl.get_property_value(mdl.prop(item_handle, "T_vec"))
                        Tmax = mdl.get_property_value(mdl.prop(item_handle, "Tmax"))
                        Tdel = mdl.get_property_value(mdl.prop(item_handle, "Tdel"))
                        Texec = mdl.get_property_value(mdl.prop(item_handle, "Texec"))
                        # HEADER STOP
                        from typhoon.api.schematic_editor.const import ITEM_COMPONENT
                        import numpy as np
                        import math

                        if P_mode == "Manual input":
                            loop_en = 0
                        else:
                            loop_en = 1


                        Plen = len(S_vec)
                        S_vec2 = S_vec

                        S_vec1 = [0] * Plen

                        idxS = 0
                        for S_val in S_vec:
                            S_vec1[idxS] = S_vec[idxS]
                            idxS += 1


                        T_vecP = [0] * Plen
                        T_vecQ = [0] * Plen

                        P_vec1 = [P_nom*i for i in S_vec2]
                        Q_vec1 = [Q_nom*i for i in S_vec2]

                        TstepP = Tmax/(Plen - 1)
                        TstepQ = Tmax/(Plen - 1)

                        idxP = 0
                        for P_val in S_vec1:

                            if loop_en == 1:
                                T_vecP[idxP] = idxP * TstepP
                            else:
                                T_vecP[idxP] = T_vec[idxP]
                            idxP += 1

                        idxQ = 0
                        for Q_val in S_vec1:

                            if loop_en == 1:
                                T_vecQ[idxQ] = idxQ * TstepQ
                            else:
                                T_vecQ[idxQ] = T_vec[idxQ]
                            idxQ += 1






                        mdl.set_property_value(mdl.prop(item_handle, "P_vec1"), P_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_vec1"), Q_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecP"), T_vecP)
                        mdl.set_property_value(mdl.prop(item_handle, "T_vecQ"), T_vecQ)
                        mdl.set_property_value(mdl.prop(item_handle, "Tdel"), Tdel)
                        mdl.set_property_value(mdl.prop(item_handle, "Tmax"), Tmax)
                        mdl.set_property_value(mdl.prop(item_handle, "loop_en"), loop_en)
                        mdl.set_property_value(mdl.prop(item_handle, "P_nom"), P_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Q_nom"), Q_nom)
                        mdl.set_property_value(mdl.prop(item_handle, "Plen"), Plen)

                        mdl.set_property_value(mdl.prop(item_handle, "S_vec"), S_vec)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec1"), S_vec1)
                        mdl.set_property_value(mdl.prop(item_handle, "S_vec2"), S_vec2)

                        mdl.set_property_value(mdl.prop(item_handle, "Texec"), Texec)
                    ENDCODE
                }
            }
            [
                position = 8424, 8112
                size = 112, 72
            ]

            component Subsystem "three-phase voltage regulator" {
                layout = dynamic
                component Subsystem Auto1 {
                    layout = static
                    component el_current_msr Isec_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9256, 8656
                    ]

                    component pas_inductor Lr_A {
                        inductance = "Lright"
                    }
                    [
                        position = 8896, 8656
                    ]

                    component pas_resistor Rr_A {
                        resistance = "Rright"
                    }
                    [
                        position = 8800, 8656
                    ]

                    component pas_inductor Lm_A {
                        inductance = "Lm"
                    }
                    [
                        position = 8288, 8720
                        rotation = right
                    ]

                    component pas_resistor Rm_A {
                        resistance = "Rm"
                    }
                    [
                        position = 8224, 8720
                        rotation = right
                    ]

                    component pas_inductor Ll_A {
                        inductance = "Lleft"
                    }
                    [
                        position = 8160, 8656
                    ]

                    component pas_resistor Rl_A {
                        resistance = "Rleft"
                    }
                    [
                        position = 8064, 8656
                    ]

                    component Subsystem "Elapsed Time" {
                        layout = dynamic
                        component src_clock Clock1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8112, 8168
                            hide_name = True
                        ]

                        component sys_signal_switch "Signal switch1" {
                            criterion = "ctrl >= threshold"
                        }
                        [
                            position = 8200, 8184
                            hide_name = True
                        ]

                        component tm_delay "Unit Delay1" {
                        }
                        [
                            position = 8200, 8240
                            hide_name = True
                            scale = -1, 1
                        ]

                        component "core/Edge Detection" "Edge Detection1" {
                            edge = "rising"
                        }
                        [
                            position = 8200, 8120
                            rotation = right
                            hide_name = True
                            size = 32, 32
                        ]

                        component gen_sum Sum2 {
                            signs = "-+"
                        }
                        [
                            position = 8272, 8264
                            hide_name = True
                        ]

                        port In1 {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8112, 8080
                            hide_name = True
                        ]

                        port Out2 {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8344, 8264
                            hide_name = True
                        ]

                        junction Junction30 sp
                        [
                            position = 8232, 8240
                        ]

                        junction JL2 sp
                        [
                            position = 8152, 8168
                        ]

                        connect "Edge Detection1.In1" In1 as Connection271
                        connect Sum2.out Out2 as Connection272
                        connect "Unit Delay1.out" "Signal switch1.in1" as Connection260
                        [
                            position = 0, 0
                            hide_name = True
                        ]
                        connect "Edge Detection1.Out1" "Signal switch1.in2" as Connection264
                        connect "Signal switch1.out" Junction30 as Connection265
                        connect Junction30 "Unit Delay1.in" as Connection266
                        connect Sum2.in Junction30 as Connection267
                        connect Clock1.out JL2 as Connection268
                        connect JL2 "Signal switch1.in" as Connection269
                        connect Sum2.in1 JL2 as Connection270
                    }
                    [
                        position = 8512, 8320
                        rotation = left
                        scale = -1, -1
                        size = 48, 48
                    ]

                    component src_constant var_per_tap {
                        execution_rate = "execution_rate"
                        value = "var_per_tap"
                    }
                    [
                        position = 8936, 8328
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 9040, 8264
                        hide_name = True
                    ]

                    component gen_probe tap {
                    }
                    [
                        position = 9112, 8184
                        rotation = down
                        scale = -1, -1
                    ]

                    component src_constant regulator_voltage {
                        execution_rate = "execution_rate"
                        value = "Vreg"
                    }
                    [
                        position = 7848, 8264
                        hide_name = True
                    ]

                    component src_constant regulator_voltage1 {
                        execution_rate = "execution_rate"
                        value = "band"
                    }
                    [
                        position = 8152, 8304
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "0.5"
                    }
                    [
                        position = 8216, 8304
                        hide_name = True
                    ]

                    component gen_sum VSum {
                        signs = "-+"
                    }
                    [
                        position = 7960, 8248
                        hide_name = True
                    ]

                    component gen_abs Abs1 {
                    }
                    [
                        position = 8032, 8248
                        hide_name = True
                    ]

                    component gen_sign Sign1 {
                    }
                    [
                        position = 8032, 8208
                        hide_name = True
                    ]

                    component src_constant regulator_voltage2 {
                        execution_rate = "execution_rate"
                        value = "Td"
                    }
                    [
                        position = 8480, 8376
                        hide_name = True
                    ]

                    component gen_rel_op "Relational operator2" {
                        relational_op = ">"
                    }
                    [
                        position = 8560, 8368
                        hide_name = True
                    ]

                    component gen_logic_op "Logical operator1" {
                    }
                    [
                        position = 8672, 8288
                        hide_name = True
                    ]

                    component "core/Edge Detection" "Edge Detection3" {
                    }
                    [
                        position = 8816, 8408
                        hide_name = True
                        scale = -1, 1
                        size = 32, 32
                    ]

                    component gen_logic_op "Logical operator2" {
                    }
                    [
                        position = 8448, 8280
                        hide_name = True
                    ]

                    component gen_logic_op "Logical operator3" {
                        operator = "NOT"
                    }
                    [
                        position = 8728, 8408
                        hide_name = True
                        scale = -1, 1
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8752, 8256
                        hide_name = True
                    ]

                    component "core/Voltage RMS" VLoad_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9456, 8696
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_A {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9160, 8656
                        size = 64, 32
                    ]

                    component gen_gain ABcomp {
                        gain = "ABcomp"
                    }
                    [
                        position = 8448, 8216
                        rotation = down
                        scale = -1, 1
                    ]

                    component gen_accumulator "Tap Position" {
                        limit_lower = "-min_n_tap"
                        limit_output = "True"
                        limit_upper = "max_n_tap"
                    }
                    [
                        position = 8832, 8256
                    ]

                    component el_voltage_msr Vprim_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8368, 8720
                        rotation = right
                    ]

                    component gen_gain Gain4 {
                        gain = "1/ptratio_auto"
                    }
                    [
                        position = 7880, 8232
                        hide_name = True
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_A {
                    }
                    [
                        position = 8704, 8656
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_A {
                    }
                    [
                        position = 8632, 8720
                        rotation = left
                        size = 64, 32
                    ]

                    component gen_product Product11 {
                    }
                    [
                        position = 8312, 8872
                    ]

                    component gen_product Product10 {
                    }
                    [
                        position = 8312, 8968
                    ]

                    component gen_probe per_tap {
                    }
                    [
                        position = 9040, 8328
                        rotation = down
                        scale = -1, -1
                    ]

                    component gen_probe pu_applied {
                    }
                    [
                        position = 9344, 8192
                        rotation = down
                        scale = -1, -1
                    ]

                    component gen_sum VSum1 {
                        signs = "++"
                    }
                    [
                        position = 9256, 8192
                        hide_name = True
                    ]

                    component src_constant regulator_voltage3 {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9168, 8184
                        hide_name = True
                    ]

                    component gen_sum VSum2 {
                        signs = "-+"
                    }
                    [
                        position = 9040, 8184
                        hide_name = True
                    ]

                    component src_constant regulator_voltage4 {
                        execution_rate = "execution_rate"
                        value = "tap_difference"
                    }
                    [
                        position = 8936, 8176
                        hide_name = True
                    ]

                    component el_current_msr Isec_B {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9264, 9136
                    ]

                    component pas_inductor Lr_B {
                        inductance = "Lright"
                    }
                    [
                        position = 8904, 9136
                    ]

                    component pas_resistor Rr_B {
                        resistance = "Rright"
                    }
                    [
                        position = 8808, 9136
                    ]

                    component pas_inductor Lm_B {
                        inductance = "Lm"
                    }
                    [
                        position = 8304, 9200
                        rotation = right
                    ]

                    component pas_resistor Rm_B {
                        resistance = "Rm"
                    }
                    [
                        position = 8240, 9200
                        rotation = right
                    ]

                    component pas_inductor Ll_B {
                        inductance = "Lleft"
                    }
                    [
                        position = 8176, 9136
                    ]

                    component pas_resistor Rl_B {
                        resistance = "Rleft"
                    }
                    [
                        position = 8080, 9136
                    ]

                    component "core/Voltage RMS" VLoad_B {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9464, 9176
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_B {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9168, 9136
                        size = 64, 32
                    ]

                    component el_voltage_msr Vprim_B {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8384, 9200
                        rotation = right
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_B {
                    }
                    [
                        position = 8712, 9136
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_B {
                    }
                    [
                        position = 8640, 9200
                        rotation = left
                        size = 64, 32
                    ]

                    component el_current_msr Isec_C {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9272, 9560
                    ]

                    component pas_inductor Lr_C {
                        inductance = "Lright"
                    }
                    [
                        position = 8912, 9560
                    ]

                    component pas_resistor Rr_C {
                        resistance = "Rright"
                    }
                    [
                        position = 8816, 9560
                    ]

                    component pas_inductor Lm_C {
                        inductance = "Lm"
                    }
                    [
                        position = 8312, 9624
                        rotation = right
                    ]

                    component pas_resistor Rm_C {
                        resistance = "Rm"
                    }
                    [
                        position = 8248, 9624
                        rotation = right
                    ]

                    component pas_inductor Ll_C {
                        inductance = "Lleft"
                    }
                    [
                        position = 8184, 9560
                    ]

                    component pas_resistor Rl_C {
                        resistance = "Rleft"
                    }
                    [
                        position = 8088, 9560
                    ]

                    component "core/Voltage RMS" VLoad_C {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9472, 9600
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_C {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9176, 9560
                        size = 64, 32
                    ]

                    component el_voltage_msr Vprim_C {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8392, 9624
                        rotation = right
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_C {
                    }
                    [
                        position = 8720, 9560
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_C {
                    }
                    [
                        position = 8648, 9624
                        rotation = left
                        size = 64, 32
                    ]

                    component gen_product Product12 {
                    }
                    [
                        position = 8312, 9344
                    ]

                    component gen_product Product13 {
                    }
                    [
                        position = 8312, 9440
                    ]

                    component gen_product Product14 {
                    }
                    [
                        position = 8312, 9784
                    ]

                    component gen_product Product15 {
                    }
                    [
                        position = 8312, 9880
                    ]

                    component gen_rel_op "Relational operator1" {
                        relational_op = ">"
                    }
                    [
                        position = 8280, 8256
                        hide_name = True
                    ]

                    component gen_probe diff {
                    }
                    [
                        position = 8208, 8168
                        rotation = down
                        scale = -1, -1
                    ]

                    component "core/Voltage RMS" VLoad_AB {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9528, 8936
                        rotation = right
                        size = 64, 32
                    ]

                    component pas_resistor Rinb {
                        resistance = "1e10"
                    }
                    [
                        position = 8032, 9200
                        rotation = right
                    ]

                    component pas_resistor Rina {
                        resistance = "1e10"
                    }
                    [
                        position = 8016, 8720
                        rotation = right
                    ]

                    component pas_resistor Rinc {
                        resistance = "1e10"
                    }
                    [
                        position = 8040, 9624
                        rotation = right
                    ]

                    component pas_resistor Rmida {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 8720
                        rotation = right
                        hide_name = True
                    ]

                    component pas_resistor Rmidb {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 9200
                        rotation = right
                        hide_name = True
                    ]

                    component pas_resistor Rmidc {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 9624
                        rotation = right
                        hide_name = True
                    ]

                    component gen_terminator Termination1 {
                    }
                    [
                        position = 7880, 8328
                        hide_name = True
                    ]

                    port P1 {
                        position = -128.0, -120.0
                        kind = pe
                    }
                    [
                        position = 7776, 8656
                        hide_name = True
                    ]

                    port P2 {
                        position = -128.0, -72.0
                        kind = pe
                    }
                    [
                        position = 7776, 8784
                        hide_name = True
                    ]

                    port S1 {
                        position = 128.0, -120.0
                        kind = pe
                    }
                    [
                        position = 9616, 8656
                        rotation = down
                        hide_name = True
                    ]

                    port S2 {
                        position = 128.0, -72.0
                        kind = pe
                    }
                    [
                        position = 9616, 8784
                        rotation = down
                        hide_name = True
                    ]

                    port P3 {
                        position = -128.0, -24.0
                        kind = pe
                    }
                    [
                        position = 7776, 9136
                    ]

                    port S3 {
                        position = 128.0, -24.0
                        kind = pe
                    }
                    [
                        position = 9584, 9136
                        rotation = down
                        hide_name = True
                    ]

                    port P5 {
                        position = -128.0, 72.0
                        kind = pe
                    }
                    [
                        position = 7752, 9560
                    ]

                    port S5 {
                        position = 128.0, 72.0
                        kind = pe
                    }
                    [
                        position = 9584, 9560
                        rotation = down
                        hide_name = True
                    ]

                    port P6 {
                        position = -128.0, 24.0
                        kind = pe
                    }
                    [
                        position = 7776, 9264
                        hide_name = True
                    ]

                    port P7 {
                        position = -128.0, 120.0
                        kind = pe
                    }
                    [
                        position = 7752, 9688
                        hide_name = True
                    ]

                    port S6 {
                        position = 128.0, 24.0
                        kind = pe
                    }
                    [
                        position = 9584, 9264
                        rotation = down
                        hide_name = True
                    ]

                    port S7 {
                        position = 128.0, 120.0
                        kind = pe
                    }
                    [
                        position = 9584, 9688
                        rotation = down
                        hide_name = True
                    ]

                    tag Goto2 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9272, 8264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto3 {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9488, 8744
                        rotation = right
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto6 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9304, 8624
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag1" {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8656
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag2" {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8784
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11a {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8656
                        size = 60, 20
                    ]

                    tag ET12a {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8784
                        size = 60, 20
                    ]

                    tag ET21a {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8656
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22a {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8784
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag7" {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8656
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag8" {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8784
                        hide_name = True
                        size = 60, 20
                    ]

                    tag FromVLDC {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7792, 8232
                        size = 60, 20
                    ]

                    tag From1 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8816
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto11 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8432, 8720
                        size = 60, 20
                    ]

                    tag From11 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8976
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From12 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8880
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8568, 8720
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto12 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8872
                        size = 60, 20
                    ]

                    tag Goto13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8968
                        size = 60, 20
                    ]

                    tag From14 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8640, 8600
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto16 {
                        value = "Iinst_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9312, 9104
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag9" {
                        value = "S1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7912, 9136
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag10" {
                        value = "S2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7912, 9264
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11b {
                        value = "S1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7984, 9136
                        size = 60, 20
                    ]

                    tag ET12b {
                        value = "S2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7984, 9264
                        size = 60, 20
                    ]

                    tag ET21b {
                        value = "L1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9000, 9136
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22b {
                        value = "L2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9000, 9264
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag11" {
                        value = "L1b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9072, 9136
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag12" {
                        value = "L2b"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9072, 9264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto18 {
                        value = "Vprim_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8448, 9200
                        size = 60, 20
                    ]

                    tag From15 {
                        value = "Iprim_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8576, 9200
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From16 {
                        value = "Vsec_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8648, 9080
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto21 {
                        value = "Iinst_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9320, 9528
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag13" {
                        value = "S1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7920, 9560
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag14" {
                        value = "S2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7920, 9688
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11c {
                        value = "S1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7992, 9560
                        size = 60, 20
                    ]

                    tag ET12c {
                        value = "S2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7992, 9688
                        size = 60, 20
                    ]

                    tag ET21c {
                        value = "L1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9008, 9560
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22c {
                        value = "L2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9008, 9688
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag15" {
                        value = "L1c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9080, 9560
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag16" {
                        value = "L2c"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9080, 9688
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto23 {
                        value = "Vprim_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8456, 9624
                        size = 60, 20
                    ]

                    tag From17 {
                        value = "Iprim_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8584, 9624
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From18 {
                        value = "Vsec_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8656, 9528
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From19 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9288
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From20 {
                        value = "Iinst_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9448
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From21 {
                        value = "Vprim_B"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9352
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto24 {
                        value = "Vsec_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9344
                        size = 60, 20
                    ]

                    tag Goto25 {
                        value = "Iprim_B"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9440
                        size = 60, 20
                    ]

                    tag From22 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9728
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From23 {
                        value = "Iinst_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9888
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From24 {
                        value = "Vprim_C"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 9792
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto26 {
                        value = "Vsec_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9784
                        size = 60, 20
                    ]

                    tag Goto27 {
                        value = "Iprim_C"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 9880
                        size = 60, 20
                    ]

                    tag Goto28 {
                        value = "VLoad_ab"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9608, 8936
                        size = 59, 20
                    ]

                    tag FromVLDC_unused {
                        value = "VLoad_ab"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7792, 8328
                        size = 60, 20
                    ]

                    junction Junction8 pe
                    [
                        position = 8256, 8680
                    ]

                    junction Junction10 pe
                    [
                        position = 8256, 8760
                    ]

                    junction Junction11 pe
                    [
                        position = 8256, 8656
                    ]

                    junction Junction42 sp
                    [
                        position = 8000, 8248
                    ]

                    junction Junction43 sp
                    [
                        position = 8512, 8280
                    ]

                    junction JL2 pe
                    [
                        position = 9456, 8784
                    ]

                    junction JL1 pe
                    [
                        position = 9456, 8656
                    ]

                    junction Junction53 pe
                    [
                        position = 8256, 8784
                    ]

                    junction Junction55 pe
                    [
                        position = 8632, 8784
                    ]

                    junction Junction60 pe
                    [
                        position = 8368, 8656
                    ]

                    junction Junction61 pe
                    [
                        position = 8368, 8784
                    ]

                    junction Junction63 pe
                    [
                        position = 8632, 8656
                    ]

                    junction Junction64 sp
                    [
                        position = 8248, 8864
                    ]

                    junction Junction65 sp
                    [
                        position = 9000, 8328
                    ]

                    junction Junction66 sp
                    [
                        position = 9200, 8264
                    ]

                    junction Junction67 sp
                    [
                        position = 8896, 8256
                    ]

                    junction Junction68 sp
                    [
                        position = 8984, 8256
                    ]

                    junction Junction69 pe
                    [
                        position = 8272, 9160
                    ]

                    junction Junction70 pe
                    [
                        position = 8272, 9240
                    ]

                    junction Junction71 pe
                    [
                        position = 8272, 9136
                    ]

                    junction JL4 pe
                    [
                        position = 9464, 9136
                    ]

                    junction Junction73 pe
                    [
                        position = 8272, 9264
                    ]

                    junction Junction75 pe
                    [
                        position = 8640, 9264
                    ]

                    junction Junction78 pe
                    [
                        position = 8384, 9136
                    ]

                    junction Junction79 pe
                    [
                        position = 8384, 9264
                    ]

                    junction Junction80 pe
                    [
                        position = 8640, 9136
                    ]

                    junction Junction81 pe
                    [
                        position = 8280, 9584
                    ]

                    junction Junction82 pe
                    [
                        position = 8280, 9664
                    ]

                    junction Junction83 pe
                    [
                        position = 8280, 9560
                    ]

                    junction JL6 pe
                    [
                        position = 9472, 9560
                    ]

                    junction Junction85 pe
                    [
                        position = 8280, 9688
                    ]

                    junction Junction87 pe
                    [
                        position = 8648, 9688
                    ]

                    junction Junction90 pe
                    [
                        position = 8392, 9560
                    ]

                    junction Junction91 pe
                    [
                        position = 8392, 9688
                    ]

                    junction Junction92 pe
                    [
                        position = 8648, 9560
                    ]

                    junction Junction93 sp
                    [
                        position = 8248, 9336
                    ]

                    junction Junction94 sp
                    [
                        position = 8248, 9776
                    ]

                    junction Junction101 sp
                    [
                        position = 8152, 8248
                    ]

                    junction Junction102 pe
                    [
                        position = 9464, 9264
                    ]

                    junction Junction103 pe
                    [
                        position = 9472, 9688
                    ]

                    junction Junction104 pe
                    [
                        position = 9528, 9136
                    ]

                    junction Junction105 pe
                    [
                        position = 9528, 8656
                    ]

                    junction Junction106 pe
                    [
                        position = 8032, 9136
                    ]

                    junction Junction107 pe
                    [
                        position = 8032, 9264
                    ]

                    junction Junction108 pe
                    [
                        position = 8016, 8656
                    ]

                    junction Junction109 pe
                    [
                        position = 8016, 8784
                    ]

                    junction Junction110 pe
                    [
                        position = 8040, 9560
                    ]

                    junction Junction111 pe
                    [
                        position = 8040, 9688
                    ]

                    junction Junction112 pe
                    [
                        position = 8512, 8656
                    ]

                    junction Junction113 pe
                    [
                        position = 8512, 8784
                    ]

                    junction Junction114 pe
                    [
                        position = 8512, 9136
                    ]

                    junction Junction115 pe
                    [
                        position = 8512, 9264
                    ]

                    junction Junction116 pe
                    [
                        position = 8512, 9560
                    ]

                    junction Junction117 pe
                    [
                        position = 8512, 9688
                    ]

                    comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Tap changer control</p></body></html> ENDCOMMENT
                    [
                        position = 8488, 8168
                    ]

                    connect Lr_A.p_node Rr_A.n_node as Connection144
                    connect Rm_A.p_node Junction8 as Connection148
                    connect Lm_A.p_node Junction8 as Connection150
                    connect Rm_A.n_node Junction10 as Connection154
                    connect Lm_A.n_node Junction10 as Connection156
                    connect Junction8 Junction11 as Connection157
                    connect Rl_A.n_node Ll_A.p_node as Connection172
                    connect Ll_A.n_node Junction11 as Connection173
                    connect Abs1.in Junction42 as Connection431
                    connect Junction42 VSum.out as Connection432
                    connect Sign1.in Junction42 as Connection433
                    connect "Logical operator2.out" Junction43 as Connection434
                    connect Junction43 "Logical operator1.in" as Connection427
                    [
                        position = 0, 0
                        breakpoints = 8512, 8280
                    ]
                    connect "Elapsed Time.In1" Junction43 as Connection435
                    connect "Elapsed Time.Out2" "Relational operator2.in" as Connection436
                    connect regulator_voltage1.out Gain1.in as Connection250
                    connect regulator_voltage.out VSum.in1 as Connection252
                    connect regulator_voltage2.out "Relational operator2.in1" as Connection272
                    connect "Edge Detection3.Out1" "Logical operator3.in" as Connection280
                    connect "Logical operator3.out" "Logical operator2.in1" as Connection281
                    connect "Logical operator1.out" Product2.in1 as Connection295
                    connect VLoad_A.out Goto3 as Connection301
                    connect VLoad_A.n_node JL2 as Connection304
                    connect VLoad_A.p_node JL1 as Connection307
                    connect ILrms_A.n_node Isec_A.p_node as Connection339
                    connect Isec_A.out Goto6 as Connection367
                    connect Sign1.out ABcomp.in as Connection443
                    connect ABcomp.out Product2.in as Connection444
                    connect P1 "Electric Tag1" as Connection453
                    connect Junction53 Junction10 as Connection457
                    [
                        position = 0, 0
                    ]
                    connect Lr_A.n_node ET21a as Connection459
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect "Electric Tag7" ILrms_A.p_node as Connection460
                    connect ET22a Junction55 as Connection466
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Product2.out "Tap Position.in" as Connection471
                    connect Junction11 Junction60 as Connection494
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.p_node Junction60 as Connection496
                    connect Junction61 Junction53 as Connection498
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.n_node Junction61 as Connection499
                    connect FromVLDC Gain4.in as Connection500
                    connect Gain4.out VSum.in as Connection501
                    connect Vsec_ins_A.p_node Rr_A.p_node as Connection512
                    connect Junction63 Vsec_ins_A.n_node as Connection524
                    [
                        position = 0, 0
                    ]
                    connect Isp_A.n_node Junction63 as Connection525
                    connect Goto11 Vprim_A.out as Connection529
                    connect From11 Product10.in1 as Connection526
                    connect From1 Junction64 as Connection531
                    connect Junction64 Product11.in as Connection532
                    connect Product10.in Junction64 as Connection533
                    connect From12 Product11.in1 as Connection534
                    connect Isp_A.p_node Junction55 as Connection535
                    [
                        position = 0, 0
                    ]
                    connect From13 Isp_A.in as Connection536
                    connect From14 Vsec_ins_A.in as Connection539
                    connect Product11.out Goto12 as Connection540
                    connect Goto13 Product10.out as Connection541
                    connect var_per_tap.out Junction65 as Connection544
                    connect Junction65 Product1.in1 as Connection545
                    connect per_tap.in Junction65 as Connection546
                    connect pu_applied.in VSum1.out as Connection551
                    connect regulator_voltage3.out VSum1.in as Connection552
                    connect Product1.out Junction66 as Connection553
                    [
                        position = 0, 0
                    ]
                    connect Junction66 Goto2 as Connection554
                    connect VSum1.in1 Junction66 as Connection555
                    connect regulator_voltage4.out VSum2.in as Connection561
                    connect "Tap Position.out" Junction67 as Connection564
                    connect Junction67 "Edge Detection3.In1" as Connection565
                    [
                        position = 0, 0
                    ]
                    connect Product1.in Junction68 as Connection566
                    connect Junction68 VSum2.in1 as Connection567
                    [
                        position = 0, 0
                        breakpoints = 8984, 8256
                    ]
                    connect Junction67 Junction68 as Connection568
                    connect tap.in VSum2.out as Connection569
                    connect Lr_B.p_node Rr_B.n_node as Connection570
                    connect Rm_B.p_node Junction69 as Connection571
                    connect Lm_B.p_node Junction69 as Connection572
                    connect Rm_B.n_node Junction70 as Connection573
                    connect Lm_B.n_node Junction70 as Connection574
                    connect Junction69 Junction71 as Connection575
                    connect Rl_B.n_node Ll_B.p_node as Connection576
                    connect Ll_B.n_node Junction71 as Connection577
                    connect VLoad_B.p_node JL4 as Connection582
                    connect ILrms_B.n_node Isec_B.p_node as Connection583
                    connect Isec_B.out Goto16 as Connection585
                    connect P3 "Electric Tag9" as Connection590
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Junction73 Junction70 as Connection592
                    [
                        position = 0, 0
                    ]
                    connect Lr_B.n_node ET21b as Connection593
                    connect "Electric Tag11" ILrms_B.p_node as Connection594
                    connect ET22b Junction75 as Connection598
                    connect Junction71 Junction78 as Connection605
                    [
                        position = 0, 0
                    ]
                    connect Vprim_B.p_node Junction78 as Connection606
                    connect Junction79 Junction73 as Connection608
                    [
                        position = 0, 0
                    ]
                    connect Vprim_B.n_node Junction79 as Connection609
                    connect Vsec_ins_B.p_node Rr_B.p_node as Connection610
                    connect Junction80 Vsec_ins_B.n_node as Connection612
                    [
                        position = 0, 0
                    ]
                    connect Isp_B.n_node Junction80 as Connection613
                    connect Goto18 Vprim_B.out as Connection614
                    connect Isp_B.p_node Junction75 as Connection615
                    [
                        position = 0, 0
                    ]
                    connect From15 Isp_B.in as Connection616
                    connect From16 Vsec_ins_B.in as Connection617
                    connect Lr_C.p_node Rr_C.n_node as Connection618
                    connect Rm_C.p_node Junction81 as Connection619
                    connect Lm_C.p_node Junction81 as Connection620
                    connect Rm_C.n_node Junction82 as Connection621
                    connect Lm_C.n_node Junction82 as Connection622
                    connect Junction81 Junction83 as Connection623
                    connect Rl_C.n_node Ll_C.p_node as Connection624
                    connect Ll_C.n_node Junction83 as Connection625
                    connect S5 JL6 as Connection629
                    connect VLoad_C.p_node JL6 as Connection630
                    connect ILrms_C.n_node Isec_C.p_node as Connection631
                    connect Isec_C.out Goto21 as Connection633
                    connect P5 "Electric Tag13" as Connection638
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Junction85 Junction82 as Connection640
                    [
                        position = 0, 0
                    ]
                    connect Lr_C.n_node ET21c as Connection641
                    connect "Electric Tag15" ILrms_C.p_node as Connection642
                    connect ET22c Junction87 as Connection646
                    connect Junction83 Junction90 as Connection653
                    [
                        position = 0, 0
                    ]
                    connect Vprim_C.p_node Junction90 as Connection654
                    connect Junction91 Junction85 as Connection656
                    [
                        position = 0, 0
                    ]
                    connect Vprim_C.n_node Junction91 as Connection657
                    connect Vsec_ins_C.p_node Rr_C.p_node as Connection658
                    connect Junction92 Vsec_ins_C.n_node as Connection660
                    [
                        position = 0, 0
                    ]
                    connect Isp_C.n_node Junction92 as Connection661
                    connect Goto23 Vprim_C.out as Connection662
                    connect Isp_C.p_node Junction87 as Connection663
                    [
                        position = 0, 0
                    ]
                    connect From17 Isp_C.in as Connection664
                    connect From18 Vsec_ins_C.in as Connection665
                    connect From20 Product13.in1 as Connection666
                    connect From19 Junction93 as Connection667
                    connect Junction93 Product12.in as Connection668
                    connect Product13.in Junction93 as Connection669
                    connect From21 Product12.in1 as Connection670
                    connect Product12.out Goto24 as Connection671
                    connect Goto25 Product13.out as Connection672
                    connect From23 Product15.in1 as Connection673
                    connect From22 Junction94 as Connection674
                    connect Junction94 Product14.in as Connection675
                    connect Product15.in Junction94 as Connection676
                    connect From24 Product14.in1 as Connection677
                    connect Product14.out Goto26 as Connection678
                    connect Goto27 Product15.out as Connection679
                    connect Gain1.out "Relational operator1.in1" as Connection725
                    connect "Logical operator1.in1" "Relational operator2.out" as Connection777
                    [
                        position = 0, 0
                        breakpoints = 8632, 8368; 8632, 8368; 8632, 8368; 8592, 8368
                    ]
                    connect diff.in Junction101 as Connection782
                    connect Junction101 "Relational operator1.in" as Connection783
                    [
                        position = 0, 0
                    ]
                    connect Abs1.out Junction101 as Connection784
                    connect "Logical operator2.in" "Relational operator1.out" as Connection785
                    connect JL2 "Electric Tag8" as Connection786
                    [
                        position = 0, 0
                    ]
                    connect JL1 Isec_A.n_node as Connection787
                    [
                        position = 0, 0
                    ]
                    connect JL4 Isec_B.n_node as Connection789
                    [
                        position = 0, 0
                    ]
                    connect Isec_C.n_node JL6 as Connection791
                    [
                        position = 0, 0
                    ]
                    connect "Electric Tag2" P2 as Connection793
                    connect S2 JL2 as Connection797
                    connect P6 "Electric Tag10" as Connection798
                    connect P7 "Electric Tag14" as Connection799
                    connect VLoad_B.n_node Junction102 as Connection800
                    connect Junction102 "Electric Tag12" as Connection801
                    [
                        position = 0, 0
                    ]
                    connect S6 Junction102 as Connection802
                    connect "Electric Tag16" Junction103 as Connection803
                    [
                        position = 0, 0
                    ]
                    connect Junction103 VLoad_C.n_node as Connection804
                    [
                        position = 0, 0
                    ]
                    connect S7 Junction103 as Connection805
                    connect S3 Junction104 as Connection806
                    connect Junction104 JL4 as Connection807
                    connect VLoad_AB.n_node Junction104 as Connection808
                    connect S1 Junction105 as Connection809
                    connect Junction105 JL1 as Connection810
                    connect VLoad_AB.p_node Junction105 as Connection811
                    connect VLoad_AB.out Goto28 as Connection812
                    connect ET11b Junction106 as Connection819
                    connect Junction106 Rl_B.p_node as Connection820
                    connect Rinb.p_node Junction106 as Connection821
                    connect Junction73 Junction107 as Connection822
                    connect Junction107 ET12b as Connection823
                    connect Rinb.n_node Junction107 as Connection824
                    connect ET11a Junction108 as Connection825
                    connect Junction108 Rl_A.p_node as Connection826
                    connect Rina.p_node Junction108 as Connection827
                    connect ET12a Junction109 as Connection828
                    connect Junction109 Junction53 as Connection829
                    connect Rina.n_node Junction109 as Connection830
                    connect Rl_C.p_node Junction110 as Connection831
                    connect Junction110 ET11c as Connection832
                    connect Rinc.p_node Junction110 as Connection833
                    connect Junction85 Junction111 as Connection834
                    connect Junction111 ET12c as Connection835
                    connect Rinc.n_node Junction111 as Connection836
                    connect Junction60 Junction112 as Connection837
                    [
                        position = 0, 0
                    ]
                    connect Junction112 Junction63 as Connection838
                    [
                        position = 0, 0
                    ]
                    connect Rmida.p_node Junction112 as Connection839
                    connect Junction55 Junction113 as Connection840
                    [
                        position = 0, 0
                    ]
                    connect Junction113 Junction61 as Connection841
                    connect Rmida.n_node Junction113 as Connection842
                    connect Junction78 Junction114 as Connection843
                    [
                        position = 0, 0
                    ]
                    connect Junction114 Junction80 as Connection844
                    [
                        position = 0, 0
                    ]
                    connect Rmidb.p_node Junction114 as Connection845
                    connect Junction75 Junction115 as Connection846
                    [
                        position = 0, 0
                    ]
                    connect Junction115 Junction79 as Connection847
                    connect Rmidb.n_node Junction115 as Connection848
                    connect Junction90 Junction116 as Connection849
                    [
                        position = 0, 0
                    ]
                    connect Junction116 Junction92 as Connection850
                    [
                        position = 0, 0
                    ]
                    connect Rmidc.p_node Junction116 as Connection851
                    connect Junction87 Junction117 as Connection852
                    [
                        position = 0, 0
                    ]
                    connect Junction117 Junction91 as Connection853
                    connect Rmidc.n_node Junction117 as Connection854
                    connect Termination1.in FromVLDC_unused as Connection855

                    mask {
                        icon = "image(\'trl_ideal_test.svg\')"
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Autotransformer with load tap changer (LTC) and optional line drop compensator (LDC).</p></body></html>"

                        R1 {
                            label = "R1"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General:1"
                        }

                        L1 {
                            label = "L1"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        R2 {
                            label = "R2"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General"
                        }

                        L2 {
                            label = "L2"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        Rm {
                            label = "Rm"
                            widget = edit
                            type = generic
                            default_value = "1e5"
                            unit = "Ω"
                            group = "General"
                        }

                        Lm {
                            label = "Lm"
                            widget = edit
                            type = generic
                            default_value = "17"
                            unit = "H"
                            group = "General"
                        }

                        n_taps {
                            label = "Number of taps ±"
                            widget = edit
                            type = generic
                            default_value = "16"
                            group = "General"
                        }

                        reg_range {
                            label = "Regualtor range ±"
                            widget = edit
                            type = generic
                            default_value = "10"
                            unit = "%"
                            group = "General"
                            nonvisible
                        }

                        atype {
                            label = "Type"
                            widget = combo
                            combo_values = "Type A", "Type B"
                            type = string
                            default_value = "Type A"
                            group = "Voltage Regulation:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                for phase in ['a', 'b', 'c']:
                                    ET11 = mdl.get_item(f'ET11{phase}', parent=comp_handle, item_type='tag')
                                    ET12 = mdl.get_item(f'ET12{phase}', parent=comp_handle, item_type='tag')
                                    ET21 = mdl.get_item(f'ET21{phase}', parent=comp_handle, item_type='tag')
                                    ET22 = mdl.get_item(f'ET22{phase}', parent=comp_handle, item_type='tag')

                                    if new_value == 'Type A':
                                        mdl.set_tag_properties(ET11, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'S2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'L2{phase}')
                                    else:
                                        mdl.set_tag_properties(ET11, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'L2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'S2{phase}')

                                    mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        reg_method {
                            label = "Regulation method"
                            widget = combo
                            combo_values = "Line voltage regulator", "Bus voltage regulator", "Line drop compensator"
                            type = string
                            default_value = "Line voltage regulator"
                            group = "Voltage Regulation"
                            no_evaluate

                            CODE property_value_changed
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                if new_value == 'Bus voltage regulator':
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if FromVLDC:
                                        mdl.delete_item(FromVLDC)

                                    Vin = mdl.create_port(
                                                            name='vref',
                                                            parent=comp_handle,
                                                            kind='sp',
                                                            direction='in',
                                                            terminal_position=(-32,-128),
                                                            hide_name=False,
                                                            position=(8672, 8856)
                                                         )
                                    VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                    mdl.create_connection(Vin, mdl.term(VSum,'in'))
                                else:
                                    Vin = mdl.get_item('vref', parent=comp_handle, item_type='port')
                                    if Vin:
                                        mdl.delete_item(Vin)
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if not FromVLDC:
                                        FromVLDC = mdl.create_tag(
                                                                    value='VLDC',
                                                                    name='FromVLDC',
                                                                    parent=comp_handle,
                                                                    kind='sp',
                                                                    position=(8656, 8880),
                                                                    direction='out',
                                                                    scope='local'
                                                                 )
                                        mdl.hide_name(FromVLDC)

                                        VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                        mdl.create_connection(FromVLDC, mdl.term(VSum,'in'))
                                    if new_value == 'Line drop compensator':
                                        ctrl_src = 'VLDC'
                                    else:
                                        ctrl_src = 'VLoad'
                                    #mdl.set_tag_properties(FromVLDC, value=ctrl_src)
                            ENDCODE

                            CODE property_value_edited
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))
                            ENDCODE
                        }

                        Vreg {
                            label = "Voltage level"
                            widget = edit
                            type = generic
                            default_value = "vreg"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        band {
                            label = "Bandwidth"
                            widget = edit
                            type = generic
                            default_value = "band"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        Td {
                            label = "Time delay"
                            widget = edit
                            type = generic
                            default_value = "delay"
                            unit = "s"
                            group = "Voltage Regulation"
                        }

                        ptratio_auto {
                            label = "PT ratio"
                            widget = edit
                            type = generic
                            default_value = "ptratio"
                            unit = "V/V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        CTprim {
                            label = "CT primary rating"
                            widget = edit
                            type = generic
                            default_value = "0.2"
                            unit = "A"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Rp {
                            label = "R"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Xp {
                            label = "X"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "execution_rate"
                            unit = "s"
                            group = "Signal Processing:3"
                        }

                        fc {
                            label = "LPF cutoff frequency"
                            widget = edit
                            type = generic
                            default_value = "10e3"
                            unit = "Hz"
                            group = "Stability:4"
                        }

                        maxtap {
                            label = "maxtap"
                            widget = edit
                            type = generic
                            default_value = "maxtap"
                            nonvisible
                        }

                        mintap {
                            label = "mintap"
                            widget = edit
                            type = generic
                            default_value = "mintap"
                            nonvisible
                        }

                        YorD {
                            label = "YorD"
                            widget = edit
                            type = generic
                            default_value = "Y"
                            nonvisible
                            no_evaluate
                        }

                        CODE pre_compile
                            # HEADER START
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            L1 = mdl.get_property_value(mdl.prop(item_handle, "L1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            L2 = mdl.get_property_value(mdl.prop(item_handle, "L2"))
                            Rm = mdl.get_property_value(mdl.prop(item_handle, "Rm"))
                            Lm = mdl.get_property_value(mdl.prop(item_handle, "Lm"))
                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))
                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))
                            reg_method = mdl.get_property_value(mdl.prop(item_handle, "reg_method"))
                            Vreg = mdl.get_property_value(mdl.prop(item_handle, "Vreg"))
                            band = mdl.get_property_value(mdl.prop(item_handle, "band"))
                            Td = mdl.get_property_value(mdl.prop(item_handle, "Td"))
                            ptratio_auto = mdl.get_property_value(mdl.prop(item_handle, "ptratio_auto"))
                            CTprim = mdl.get_property_value(mdl.prop(item_handle, "CTprim"))
                            Rp = mdl.get_property_value(mdl.prop(item_handle, "Rp"))
                            Xp = mdl.get_property_value(mdl.prop(item_handle, "Xp"))
                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                            fc = mdl.get_property_value(mdl.prop(item_handle, "fc"))
                            maxtap = mdl.get_property_value(mdl.prop(item_handle, "maxtap"))
                            mintap = mdl.get_property_value(mdl.prop(item_handle, "mintap"))
                            YorD = mdl.get_property_value(mdl.prop(item_handle, "YorD"))
                            # HEADER STOP
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            comp_handle = mdl.get_parent(item_handle)

                            Rmid = "1e9"

                            FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                            FromVLDC_unused = mdl.get_item('FromVLDC_unused', parent=comp_handle, item_type='tag')

                            if YorD == "Δ":
                                Vreg = float(Vreg)*np.sqrt(3)
                                mdl.set_property_value(mdl.prop(item_handle, "Vreg"), Vreg)
                                mdl.set_tag_properties(FromVLDC, value="VLoad_ab", scope='local')
                                mdl.set_tag_properties(FromVLDC_unused, value="VLoad_a", scope='local')
                            else:
                                mdl.set_tag_properties(FromVLDC, value="VLoad_a", scope='local')
                                mdl.set_tag_properties(FromVLDC_unused, value="VLoad_ab", scope='local')

                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))

                            maxtap = float(maxtap)
                            mintap = float(mintap)

                            var_per_tap = (maxtap-mintap)/n_taps

                            max_n_tap = int(round(((maxtap - 1) / (maxtap - mintap) * n_taps)))
                            min_n_tap = n_taps - max_n_tap

                            tap_difference = max_n_tap - (n_taps // 2 + n_taps % 2)

                            ptratio_auto = float(ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "ptratio_auto"), ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)

                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))

                            if atype == 'Type A':
                                ABcomp = 1
                                Rleft = R1
                                Lleft = L1
                                Rright = R2
                                Lright = L2
                            else:
                                ABcomp = -1
                                Rleft = R2
                                Lleft = L2
                                Rright = R1
                                Lright = L1

                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE init
                            def updateMask(mdl):
                                bw_limit = mdl.get_property_disp_value(mdl.prop(item_handle, "bw_limit"))
                                frequency = mdl.prop(item_handle, "frequency")
                                if bw_limit == 'True':
                                    mdl.enable_property(frequency)
                                else:
                                    mdl.disable_property(frequency)
                                return
                        ENDCODE
                    }
                }
                [
                    position = 8152, 8056
                    size = 256, 256
                ]

                port RegB1 {
                    position = left:2
                    kind = pe
                }
                [
                    position = 7496, 8008
                ]

                port RegC1 {
                    position = left:3
                    kind = pe
                }
                [
                    position = 7496, 8104
                ]

                port RegA2 {
                    position = right:1
                    kind = pe
                }
                [
                    position = 8800, 7888
                    rotation = down
                ]

                port RegC2 {
                    position = right:3
                    kind = pe
                }
                [
                    position = 8800, 8240
                    rotation = down
                ]

                port RegA1 {
                    position = left:1
                    kind = pe
                }
                [
                    position = 7496, 7912
                ]

                port RegB2 {
                    position = right:2
                    kind = pe
                }
                [
                    position = 8800, 8056
                    rotation = down
                ]

                port RegN {
                    position = left:4
                    kind = pe
                }
                [
                    position = 7496, 8208
                ]

                tag TagRegA1 {
                    value = "A1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 7912
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagRegB1 {
                    value = "B1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 8008
                    scale = -1, 1
                    size = 59, 20
                ]

                tag TagRegC1 {
                    value = "C1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 8104
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagRegN1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7600, 8208
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto1A1 {
                    value = "A1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 7936
                    size = 60, 20
                ]

                tag TagAuto1B1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 7984
                    size = 60, 20
                ]

                tag TagAuto2A1 {
                    value = "B1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8032
                    size = 60, 20
                ]

                tag TagAuto3A1 {
                    value = "C1"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8128
                    size = 60, 20
                ]

                tag TagAuto2A2 {
                    value = "B2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8032
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto1A2 {
                    value = "A2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 7936
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto1B2 {
                    value = "N2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 7984
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto3A2 {
                    value = "C2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8128
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagRegA2 {
                    value = "A2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8696, 7888
                    size = 60, 20
                ]

                tag TagRegB2 {
                    value = "B2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8696, 8056
                    size = 59, 20
                ]

                tag TagRegC2 {
                    value = "C2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8696, 8240
                    size = 60, 20
                ]

                tag TagAuto2B2 {
                    value = "N2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8080
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto3B2 {
                    value = "N2"
                    scope = local
                    kind = pe
                }
                [
                    position = 8400, 8176
                    scale = -1, 1
                    size = 60, 20
                ]

                tag TagAuto3B1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8176
                    size = 60, 20
                ]

                tag TagAuto2B1 {
                    value = "N"
                    scope = local
                    kind = pe
                }
                [
                    position = 7896, 8080
                    size = 60, 20
                ]

                connect TagAuto1A1 Auto1.P1 as Connection55
                connect RegA2 TagRegA2 as Connection69
                connect RegB2 TagRegB2 as Connection70
                connect RegC2 TagRegC2 as Connection71
                connect Auto1.S1 TagAuto1A2 as Connection122
                [
                    position = 0, 0
                ]
                connect RegN TagRegN1 as Connection151
                [
                    position = 0, 0
                ]
                connect RegA1 TagRegA1 as Connection154
                [
                    position = 0, 0
                ]
                connect TagRegB1 RegB1 as Connection153
                [
                    position = 0, 0
                ]
                connect TagRegC1 RegC1 as Connection152
                [
                    position = 0, 0
                ]
                connect TagAuto2A1 Auto1.P3 as Connection155
                connect Auto1.S3 TagAuto2A2 as Connection156
                connect TagAuto3A1 Auto1.P5 as Connection157
                connect TagAuto3A2 Auto1.S5 as Connection158
                connect Auto1.S2 TagAuto1B2 as Connection172
                [
                    position = 0, 0
                ]
                connect Auto1.P2 TagAuto1B1 as Connection171
                [
                    position = 0, 0
                ]
                connect TagAuto2B2 Auto1.S6 as Connection173
                connect TagAuto3B2 Auto1.S7 as Connection174
                connect TagAuto3B1 Auto1.P7 as Connection175
                connect TagAuto2B1 Auto1.P6 as Connection176
            }
            [
                position = 8680, 8144
                size = 144, 336
            ]

            component Subsystem "single-phase voltage regulator" {
                layout = dynamic
                component Subsystem Auto1 {
                    layout = static
                    component el_current_msr Isec_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9256, 8656
                    ]

                    component pas_inductor Lr_A {
                        inductance = "Lright"
                    }
                    [
                        position = 8896, 8656
                    ]

                    component pas_resistor Rr_A {
                        resistance = "Rright"
                    }
                    [
                        position = 8800, 8656
                    ]

                    component pas_inductor Lm_A {
                        inductance = "Lm"
                    }
                    [
                        position = 8288, 8720
                        rotation = right
                    ]

                    component pas_resistor Rm_A {
                        resistance = "Rm"
                    }
                    [
                        position = 8224, 8720
                        rotation = right
                    ]

                    component pas_inductor Ll_A {
                        inductance = "Lleft"
                    }
                    [
                        position = 8160, 8656
                    ]

                    component pas_resistor Rl_A {
                        resistance = "Rleft"
                    }
                    [
                        position = 8064, 8656
                    ]

                    component Subsystem "Elapsed Time" {
                        layout = dynamic
                        component src_clock Clock1 {
                            execution_rate = "execution_rate"
                        }
                        [
                            position = 8112, 8168
                            hide_name = True
                        ]

                        component sys_signal_switch "Signal switch1" {
                            criterion = "ctrl >= threshold"
                        }
                        [
                            position = 8200, 8184
                            hide_name = True
                        ]

                        component tm_delay "Unit Delay1" {
                        }
                        [
                            position = 8200, 8240
                            hide_name = True
                            scale = -1, 1
                        ]

                        component "core/Edge Detection" "Edge Detection1" {
                            edge = "rising"
                        }
                        [
                            position = 8200, 8120
                            rotation = right
                            hide_name = True
                            size = 32, 32
                        ]

                        component gen_sum Sum2 {
                            signs = "-+"
                        }
                        [
                            position = 8272, 8264
                            hide_name = True
                        ]

                        port In1 {
                            position = left:1
                            kind = sp
                            direction =  out
                            sp_type {
                                default = auto
                                readonly = True
                            }
                        }
                        [
                            position = 8112, 8080
                            hide_name = True
                        ]

                        port Out2 {
                            position = right:1
                            kind = sp
                            direction =  in
                            sp_type {
                                default = inherit
                                readonly = True
                            }
                        }
                        [
                            position = 8344, 8264
                            hide_name = True
                        ]

                        junction Junction30 sp
                        [
                            position = 8232, 8240
                        ]

                        junction JL2 sp
                        [
                            position = 8152, 8168
                        ]

                        connect "Edge Detection1.In1" In1 as Connection271
                        connect Sum2.out Out2 as Connection272
                        connect "Unit Delay1.out" "Signal switch1.in1" as Connection260
                        [
                            position = 0, 0
                            hide_name = True
                        ]
                        connect "Edge Detection1.Out1" "Signal switch1.in2" as Connection264
                        connect "Signal switch1.out" Junction30 as Connection265
                        connect Junction30 "Unit Delay1.in" as Connection266
                        connect Sum2.in Junction30 as Connection267
                        connect Clock1.out JL2 as Connection268
                        connect JL2 "Signal switch1.in" as Connection269
                        connect Sum2.in1 JL2 as Connection270
                    }
                    [
                        position = 8512, 8320
                        rotation = left
                        scale = -1, -1
                        size = 48, 48
                    ]

                    component src_constant var_per_tap {
                        execution_rate = "execution_rate"
                        value = "var_per_tap"
                    }
                    [
                        position = 8936, 8328
                    ]

                    component gen_product Product1 {
                    }
                    [
                        position = 9040, 8264
                        hide_name = True
                    ]

                    component gen_probe tap {
                    }
                    [
                        position = 9112, 8184
                        rotation = down
                        scale = -1, -1
                    ]

                    component src_constant regulator_voltage {
                        execution_rate = "execution_rate"
                        value = "Vreg"
                    }
                    [
                        position = 7848, 8264
                        hide_name = True
                    ]

                    component src_constant regulator_voltage1 {
                        execution_rate = "execution_rate"
                        value = "band"
                    }
                    [
                        position = 8152, 8304
                        hide_name = True
                    ]

                    component gen_gain Gain1 {
                        gain = "0.5"
                    }
                    [
                        position = 8216, 8304
                        hide_name = True
                    ]

                    component gen_sum VSum {
                        signs = "-+"
                    }
                    [
                        position = 7960, 8248
                        hide_name = True
                    ]

                    component gen_abs Abs1 {
                    }
                    [
                        position = 8032, 8248
                        hide_name = True
                    ]

                    component gen_sign Sign1 {
                    }
                    [
                        position = 8032, 8208
                        hide_name = True
                    ]

                    component src_constant regulator_voltage2 {
                        execution_rate = "execution_rate"
                        value = "Td"
                    }
                    [
                        position = 8480, 8376
                        hide_name = True
                    ]

                    component gen_rel_op "Relational operator2" {
                        relational_op = ">"
                    }
                    [
                        position = 8560, 8368
                        hide_name = True
                    ]

                    component gen_logic_op "Logical operator1" {
                    }
                    [
                        position = 8672, 8288
                        hide_name = True
                    ]

                    component "core/Edge Detection" "Edge Detection3" {
                    }
                    [
                        position = 8816, 8408
                        hide_name = True
                        scale = -1, 1
                        size = 32, 32
                    ]

                    component gen_logic_op "Logical operator2" {
                    }
                    [
                        position = 8448, 8280
                        hide_name = True
                    ]

                    component gen_logic_op "Logical operator3" {
                        operator = "NOT"
                    }
                    [
                        position = 8728, 8408
                        hide_name = True
                        scale = -1, 1
                    ]

                    component gen_product Product2 {
                    }
                    [
                        position = 8752, 8256
                        hide_name = True
                    ]

                    component "core/Voltage RMS" VLoad_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 9456, 8696
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current RMS" ILrms_A {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9160, 8656
                        size = 64, 32
                    ]

                    component gen_gain ABcomp {
                        gain = "ABcomp"
                    }
                    [
                        position = 8448, 8216
                        rotation = down
                        scale = -1, 1
                    ]

                    component gen_accumulator "Tap Position" {
                        limit_lower = "-min_n_tap"
                        limit_output = "True"
                        limit_upper = "max_n_tap"
                    }
                    [
                        position = 8832, 8256
                    ]

                    component el_voltage_msr Vprim_A {
                        execution_rate = "execution_rate"
                        sig_output = "True"
                    }
                    [
                        position = 8368, 8720
                        rotation = right
                    ]

                    component gen_gain Gain4 {
                        gain = "1/ptratio_auto"
                    }
                    [
                        position = 7880, 8232
                        hide_name = True
                    ]

                    component "core/Signal Controlled Voltage Source" Vsec_ins_A {
                    }
                    [
                        position = 8704, 8656
                        scale = -1, 1
                        size = 64, 32
                    ]

                    component "core/Signal Controlled Current Source" Isp_A {
                    }
                    [
                        position = 8632, 8720
                        rotation = left
                        size = 64, 32
                    ]

                    component gen_product Product11 {
                    }
                    [
                        position = 8312, 8872
                    ]

                    component gen_product Product10 {
                    }
                    [
                        position = 8312, 8968
                    ]

                    component gen_probe per_tap {
                    }
                    [
                        position = 9040, 8328
                        rotation = down
                        scale = -1, -1
                    ]

                    component gen_probe pu_applied {
                    }
                    [
                        position = 9344, 8192
                        rotation = down
                        scale = -1, -1
                    ]

                    component gen_sum VSum1 {
                        signs = "++"
                    }
                    [
                        position = 9256, 8192
                        hide_name = True
                    ]

                    component src_constant regulator_voltage3 {
                        execution_rate = "execution_rate"
                    }
                    [
                        position = 9168, 8184
                        hide_name = True
                    ]

                    component gen_sum VSum2 {
                        signs = "-+"
                    }
                    [
                        position = 9040, 8184
                        hide_name = True
                    ]

                    component src_constant regulator_voltage4 {
                        execution_rate = "execution_rate"
                        value = "tap_difference"
                    }
                    [
                        position = 8936, 8176
                        hide_name = True
                    ]

                    component gen_rel_op "Relational operator1" {
                        relational_op = ">"
                    }
                    [
                        position = 8280, 8256
                        hide_name = True
                    ]

                    component gen_probe diff {
                    }
                    [
                        position = 8208, 8168
                        rotation = down
                        scale = -1, -1
                    ]

                    component pas_resistor Rina {
                        resistance = "1e10"
                    }
                    [
                        position = 8016, 8720
                        rotation = right
                    ]

                    component pas_resistor Rmida {
                        resistance = "Rmid"
                    }
                    [
                        position = 8512, 8720
                        rotation = right
                        hide_name = True
                    ]

                    port P1 {
                        position = left top
                        kind = pe
                    }
                    [
                        position = 7776, 8656
                        hide_name = True
                    ]

                    port P2 {
                        position = left bottom
                        kind = pe
                    }
                    [
                        position = 7776, 8784
                        hide_name = True
                    ]

                    port S1 {
                        position = right top
                        kind = pe
                    }
                    [
                        position = 9616, 8656
                        rotation = down
                        hide_name = True
                    ]

                    port S2 {
                        position = right bottom
                        kind = pe
                    }
                    [
                        position = 9616, 8784
                        rotation = down
                        hide_name = True
                    ]

                    tag Goto2 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9272, 8264
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto3 {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9488, 8744
                        rotation = right
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto6 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9304, 8624
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag1" {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8656
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag2" {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7896, 8784
                        hide_name = True
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET11a {
                        value = "S1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8656
                        size = 60, 20
                    ]

                    tag ET12a {
                        value = "S2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 7968, 8784
                        size = 60, 20
                    ]

                    tag ET21a {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8656
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag ET22a {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 8992, 8784
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag "Electric Tag7" {
                        value = "L1a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8656
                        hide_name = True
                        size = 60, 20
                    ]

                    tag "Electric Tag8" {
                        value = "L2a"
                        scope = local
                        kind = pe
                    }
                    [
                        position = 9064, 8784
                        hide_name = True
                        size = 60, 20
                    ]

                    tag FromVLDC {
                        value = "VLoad_a"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7792, 8232
                        size = 60, 20
                    ]

                    tag From1 {
                        value = "ratio"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8816
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto11 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8432, 8720
                        size = 60, 20
                    ]

                    tag From11 {
                        value = "Iinst_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8976
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From12 {
                        value = "Vprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8176, 8880
                        hide_name = True
                        size = 60, 20
                    ]

                    tag From13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8568, 8720
                        hide_name = True
                        size = 60, 20
                    ]

                    tag Goto12 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8872
                        size = 60, 20
                    ]

                    tag Goto13 {
                        value = "Iprim_A"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8464, 8968
                        size = 60, 20
                    ]

                    tag From14 {
                        value = "Vsec_A"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8640, 8600
                        hide_name = True
                        size = 60, 20
                    ]

                    junction Junction8 pe
                    [
                        position = 8256, 8680
                    ]

                    junction Junction10 pe
                    [
                        position = 8256, 8760
                    ]

                    junction Junction11 pe
                    [
                        position = 8256, 8656
                    ]

                    junction Junction42 sp
                    [
                        position = 8000, 8248
                    ]

                    junction Junction43 sp
                    [
                        position = 8512, 8280
                    ]

                    junction JL2 pe
                    [
                        position = 9456, 8784
                    ]

                    junction JL1 pe
                    [
                        position = 9456, 8656
                    ]

                    junction Junction53 pe
                    [
                        position = 8256, 8784
                    ]

                    junction Junction55 pe
                    [
                        position = 8632, 8784
                    ]

                    junction Junction60 pe
                    [
                        position = 8368, 8656
                    ]

                    junction Junction61 pe
                    [
                        position = 8368, 8784
                    ]

                    junction Junction63 pe
                    [
                        position = 8632, 8656
                    ]

                    junction Junction64 sp
                    [
                        position = 8248, 8864
                    ]

                    junction Junction65 sp
                    [
                        position = 9000, 8328
                    ]

                    junction Junction66 sp
                    [
                        position = 9200, 8264
                    ]

                    junction Junction67 sp
                    [
                        position = 8896, 8256
                    ]

                    junction Junction68 sp
                    [
                        position = 8984, 8256
                    ]

                    junction Junction101 sp
                    [
                        position = 8152, 8248
                    ]

                    junction Junction108 pe
                    [
                        position = 8016, 8656
                    ]

                    junction Junction109 pe
                    [
                        position = 8016, 8784
                    ]

                    junction Junction112 pe
                    [
                        position = 8512, 8656
                    ]

                    junction Junction113 pe
                    [
                        position = 8512, 8784
                    ]

                    comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Tap changer control</p></body></html> ENDCOMMENT
                    [
                        position = 8488, 8168
                    ]

                    connect Lr_A.p_node Rr_A.n_node as Connection144
                    connect Rm_A.p_node Junction8 as Connection148
                    connect Lm_A.p_node Junction8 as Connection150
                    connect Rm_A.n_node Junction10 as Connection154
                    connect Lm_A.n_node Junction10 as Connection156
                    connect Junction8 Junction11 as Connection157
                    connect Rl_A.n_node Ll_A.p_node as Connection172
                    connect Ll_A.n_node Junction11 as Connection173
                    connect Abs1.in Junction42 as Connection431
                    connect Junction42 VSum.out as Connection432
                    connect Sign1.in Junction42 as Connection433
                    connect "Logical operator2.out" Junction43 as Connection434
                    connect Junction43 "Logical operator1.in" as Connection427
                    [
                        position = 0, 0
                        breakpoints = 8512, 8280
                    ]
                    connect "Elapsed Time.In1" Junction43 as Connection435
                    connect "Elapsed Time.Out2" "Relational operator2.in" as Connection436
                    connect regulator_voltage1.out Gain1.in as Connection250
                    connect regulator_voltage.out VSum.in1 as Connection252
                    connect regulator_voltage2.out "Relational operator2.in1" as Connection272
                    connect "Edge Detection3.Out1" "Logical operator3.in" as Connection280
                    connect "Logical operator3.out" "Logical operator2.in1" as Connection281
                    connect "Logical operator1.out" Product2.in1 as Connection295
                    connect VLoad_A.out Goto3 as Connection301
                    connect VLoad_A.n_node JL2 as Connection304
                    connect VLoad_A.p_node JL1 as Connection307
                    connect ILrms_A.n_node Isec_A.p_node as Connection339
                    connect Isec_A.out Goto6 as Connection367
                    connect Sign1.out ABcomp.in as Connection443
                    connect ABcomp.out Product2.in as Connection444
                    connect P1 "Electric Tag1" as Connection453
                    connect Junction53 Junction10 as Connection457
                    [
                        position = 0, 0
                    ]
                    connect Lr_A.n_node ET21a as Connection459
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect "Electric Tag7" ILrms_A.p_node as Connection460
                    connect ET22a Junction55 as Connection466
                    [
                        position = 0, 0
                        hide_name = True
                    ]
                    connect Product2.out "Tap Position.in" as Connection471
                    connect Junction11 Junction60 as Connection494
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.p_node Junction60 as Connection496
                    connect Junction61 Junction53 as Connection498
                    [
                        position = 0, 0
                    ]
                    connect Vprim_A.n_node Junction61 as Connection499
                    connect FromVLDC Gain4.in as Connection500
                    connect Gain4.out VSum.in as Connection501
                    connect Vsec_ins_A.p_node Rr_A.p_node as Connection512
                    connect Junction63 Vsec_ins_A.n_node as Connection524
                    [
                        position = 0, 0
                    ]
                    connect Isp_A.n_node Junction63 as Connection525
                    connect Goto11 Vprim_A.out as Connection529
                    connect From11 Product10.in1 as Connection526
                    connect From1 Junction64 as Connection531
                    connect Junction64 Product11.in as Connection532
                    connect Product10.in Junction64 as Connection533
                    connect From12 Product11.in1 as Connection534
                    connect Isp_A.p_node Junction55 as Connection535
                    [
                        position = 0, 0
                    ]
                    connect From13 Isp_A.in as Connection536
                    connect From14 Vsec_ins_A.in as Connection539
                    connect Product11.out Goto12 as Connection540
                    connect Goto13 Product10.out as Connection541
                    connect var_per_tap.out Junction65 as Connection544
                    connect Junction65 Product1.in1 as Connection545
                    connect per_tap.in Junction65 as Connection546
                    connect pu_applied.in VSum1.out as Connection551
                    connect regulator_voltage3.out VSum1.in as Connection552
                    connect Product1.out Junction66 as Connection553
                    [
                        position = 0, 0
                    ]
                    connect Junction66 Goto2 as Connection554
                    connect VSum1.in1 Junction66 as Connection555
                    connect regulator_voltage4.out VSum2.in as Connection561
                    connect "Tap Position.out" Junction67 as Connection564
                    connect Junction67 "Edge Detection3.In1" as Connection565
                    [
                        position = 0, 0
                    ]
                    connect Product1.in Junction68 as Connection566
                    connect Junction68 VSum2.in1 as Connection567
                    [
                        position = 0, 0
                        breakpoints = 8984, 8256
                    ]
                    connect Junction67 Junction68 as Connection568
                    connect tap.in VSum2.out as Connection569
                    connect Gain1.out "Relational operator1.in1" as Connection725
                    connect "Logical operator1.in1" "Relational operator2.out" as Connection777
                    [
                        position = 0, 0
                        breakpoints = 8632, 8368; 8632, 8368; 8632, 8368; 8592, 8368
                    ]
                    connect diff.in Junction101 as Connection782
                    connect Junction101 "Relational operator1.in" as Connection783
                    [
                        position = 0, 0
                    ]
                    connect Abs1.out Junction101 as Connection784
                    connect "Logical operator2.in" "Relational operator1.out" as Connection785
                    connect JL2 "Electric Tag8" as Connection786
                    [
                        position = 0, 0
                    ]
                    connect JL1 Isec_A.n_node as Connection787
                    [
                        position = 0, 0
                    ]
                    connect "Electric Tag2" P2 as Connection793
                    connect S2 JL2 as Connection797
                    connect ET11a Junction108 as Connection825
                    connect Junction108 Rl_A.p_node as Connection826
                    connect Rina.p_node Junction108 as Connection827
                    connect ET12a Junction109 as Connection828
                    connect Junction109 Junction53 as Connection829
                    connect Rina.n_node Junction109 as Connection830
                    connect Junction60 Junction112 as Connection837
                    [
                        position = 0, 0
                    ]
                    connect Junction112 Junction63 as Connection838
                    [
                        position = 0, 0
                    ]
                    connect Rmida.p_node Junction112 as Connection839
                    connect Junction55 Junction113 as Connection840
                    [
                        position = 0, 0
                    ]
                    connect Junction113 Junction61 as Connection841
                    connect Rmida.n_node Junction113 as Connection842
                    connect JL1 S1 as Connection856
                    [
                        position = 0, 0
                    ]

                    mask {
                        icon = "image(\'trl_ideal_test.svg\')"
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Autotransformer with load tap changer (LTC) and optional line drop compensator (LDC).</p></body></html>"

                        R1 {
                            label = "R1"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General:1"
                        }

                        L1 {
                            label = "L1"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        R2 {
                            label = "R2"
                            widget = edit
                            type = generic
                            default_value = "1e-3"
                            unit = "Ω"
                            group = "General"
                        }

                        L2 {
                            label = "L2"
                            widget = edit
                            type = generic
                            default_value = "10e-6"
                            unit = "H"
                            group = "General"
                        }

                        Rm {
                            label = "Rm"
                            widget = edit
                            type = generic
                            default_value = "1e5"
                            unit = "Ω"
                            group = "General"
                        }

                        Lm {
                            label = "Lm"
                            widget = edit
                            type = generic
                            default_value = "17"
                            unit = "H"
                            group = "General"
                        }

                        n_taps {
                            label = "Number of taps ±"
                            widget = edit
                            type = generic
                            default_value = "16"
                            group = "General"
                        }

                        reg_range {
                            label = "Regualtor range ±"
                            widget = edit
                            type = generic
                            default_value = "10"
                            unit = "%"
                            group = "General"
                            nonvisible
                        }

                        atype {
                            label = "Type"
                            widget = combo
                            combo_values = "Type A", "Type B"
                            type = string
                            default_value = "Type A"
                            group = "Voltage Regulation:2"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                for phase in ['a']:
                                    ET11 = mdl.get_item(f'ET11{phase}', parent=comp_handle, item_type='tag')
                                    ET12 = mdl.get_item(f'ET12{phase}', parent=comp_handle, item_type='tag')
                                    ET21 = mdl.get_item(f'ET21{phase}', parent=comp_handle, item_type='tag')
                                    ET22 = mdl.get_item(f'ET22{phase}', parent=comp_handle, item_type='tag')

                                    if new_value == 'Type A':
                                        mdl.set_tag_properties(ET11, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'S2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'L2{phase}')
                                    else:
                                        mdl.set_tag_properties(ET11, value=f'L1{phase}')
                                        mdl.set_tag_properties(ET12, value=f'L2{phase}')
                                        mdl.set_tag_properties(ET21, value=f'S1{phase}')
                                        mdl.set_tag_properties(ET22, value=f'S2{phase}')

                                    mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        reg_method {
                            label = "Regulation method"
                            widget = combo
                            combo_values = "Line voltage regulator", "Bus voltage regulator", "Line drop compensator"
                            type = string
                            default_value = "Line voltage regulator"
                            group = "Voltage Regulation"
                            no_evaluate

                            CODE property_value_changed
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

                                comp_handle = mdl.get_sub_level_handle(container_handle)

                                if new_value == 'Bus voltage regulator':
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if FromVLDC:
                                        mdl.delete_item(FromVLDC)

                                    Vin = mdl.create_port(
                                                            name='vref',
                                                            parent=comp_handle,
                                                            kind='sp',
                                                            direction='in',
                                                            terminal_position=(-32,-128),
                                                            hide_name=False,
                                                            position=(8672, 8856)
                                                         )
                                    VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                    mdl.create_connection(Vin, mdl.term(VSum,'in'))
                                else:
                                    Vin = mdl.get_item('vref', parent=comp_handle, item_type='port')
                                    if Vin:
                                        mdl.delete_item(Vin)
                                    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
                                    if not FromVLDC:
                                        FromVLDC = mdl.create_tag(
                                                                    value='VLDC',
                                                                    name='FromVLDC',
                                                                    parent=comp_handle,
                                                                    kind='sp',
                                                                    position=(8656, 8880),
                                                                    direction='out',
                                                                    scope='local'
                                                                 )
                                        mdl.hide_name(FromVLDC)

                                        VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
                                        mdl.create_connection(FromVLDC, mdl.term(VSum,'in'))
                                    if new_value == 'Line drop compensator':
                                        ctrl_src = 'VLDC'
                                    else:
                                        ctrl_src = 'VLoad'
                                    #mdl.set_tag_properties(FromVLDC, value=ctrl_src)
                            ENDCODE

                            CODE property_value_edited
                                if new_value == 'Line drop compensator':
                                    mdl.show_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.show_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.show_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
                                else:
                                    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
                                    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
                                    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))
                            ENDCODE
                        }

                        Vreg {
                            label = "Voltage level"
                            widget = edit
                            type = generic
                            default_value = "vreg"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        band {
                            label = "Bandwidth"
                            widget = edit
                            type = generic
                            default_value = "band"
                            unit = "V"
                            group = "Voltage Regulation"
                        }

                        Td {
                            label = "Time delay"
                            widget = edit
                            type = generic
                            default_value = "delay"
                            unit = "s"
                            group = "Voltage Regulation"
                        }

                        ptratio_auto {
                            label = "PT ratio"
                            widget = edit
                            type = generic
                            default_value = "ptratio"
                            unit = "V/V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        CTprim {
                            label = "CT primary rating"
                            widget = edit
                            type = generic
                            default_value = "0.2"
                            unit = "A"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Rp {
                            label = "R"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        Xp {
                            label = "X"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = "V"
                            group = "Voltage Regulation"
                            nonvisible
                        }

                        execution_rate {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "execution_rate"
                            unit = "s"
                            group = "Signal Processing:3"
                        }

                        fc {
                            label = "LPF cutoff frequency"
                            widget = edit
                            type = generic
                            default_value = "10e3"
                            unit = "Hz"
                            group = "Stability:4"
                        }

                        maxtap {
                            label = "maxtap"
                            widget = edit
                            type = generic
                            default_value = "maxtap"
                            nonvisible
                        }

                        mintap {
                            label = "mintap"
                            widget = edit
                            type = generic
                            default_value = "mintap"
                            nonvisible
                        }

                        YorD {
                            label = "YorD"
                            widget = edit
                            type = generic
                            default_value = "Y"
                            nonvisible
                            no_evaluate
                        }

                        CODE pre_compile
                            # HEADER START
                            R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                            L1 = mdl.get_property_value(mdl.prop(item_handle, "L1"))
                            R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
                            L2 = mdl.get_property_value(mdl.prop(item_handle, "L2"))
                            Rm = mdl.get_property_value(mdl.prop(item_handle, "Rm"))
                            Lm = mdl.get_property_value(mdl.prop(item_handle, "Lm"))
                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))
                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))
                            reg_method = mdl.get_property_value(mdl.prop(item_handle, "reg_method"))
                            Vreg = mdl.get_property_value(mdl.prop(item_handle, "Vreg"))
                            band = mdl.get_property_value(mdl.prop(item_handle, "band"))
                            Td = mdl.get_property_value(mdl.prop(item_handle, "Td"))
                            ptratio_auto = mdl.get_property_value(mdl.prop(item_handle, "ptratio_auto"))
                            CTprim = mdl.get_property_value(mdl.prop(item_handle, "CTprim"))
                            Rp = mdl.get_property_value(mdl.prop(item_handle, "Rp"))
                            Xp = mdl.get_property_value(mdl.prop(item_handle, "Xp"))
                            execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                            fc = mdl.get_property_value(mdl.prop(item_handle, "fc"))
                            maxtap = mdl.get_property_value(mdl.prop(item_handle, "maxtap"))
                            mintap = mdl.get_property_value(mdl.prop(item_handle, "mintap"))
                            YorD = mdl.get_property_value(mdl.prop(item_handle, "YorD"))
                            # HEADER STOP
                            from typhoon.api.schematic_editor.const import ITEM_COMPONENT

                            comp_handle = mdl.get_parent(item_handle)

                            Rmid = "1e7"

                            n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
                            reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))

                            maxtap = float(maxtap)
                            mintap = float(mintap)

                            var_per_tap = (maxtap-mintap)/n_taps

                            max_n_tap = int(round(((maxtap - 1) / (maxtap - mintap) * n_taps)))
                            min_n_tap = n_taps - max_n_tap

                            tap_difference = max_n_tap - (n_taps // 2 + n_taps % 2)

                            ptratio_auto = float(ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "ptratio_auto"), ptratio_auto)
                            mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)

                            atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))

                            if atype == 'Type A':
                                ABcomp = 1
                                Rleft = R1
                                Lleft = L1
                                Rright = R2
                                Lright = L2
                            else:
                                ABcomp = -1
                                Rleft = R2
                                Lleft = L2
                                Rright = R1
                                Lright = L1

                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE init
                            def updateMask(mdl):
                                bw_limit = mdl.get_property_disp_value(mdl.prop(item_handle, "bw_limit"))
                                frequency = mdl.prop(item_handle, "frequency")
                                if bw_limit == 'True':
                                    mdl.enable_property(frequency)
                                else:
                                    mdl.disable_property(frequency)
                                return
                        ENDCODE
                    }
                }
                [
                    position = 8152, 8056
                    size = 256, 256
                ]

                port RegB1 {
                    position = left:2
                    kind = pe
                }
                [
                    position = 7968, 8152
                ]

                port RegA2 {
                    position = right:1
                    kind = pe
                }
                [
                    position = 8344, 7960
                    rotation = down
                ]

                port RegA1 {
                    position = left:1
                    kind = pe
                }
                [
                    position = 7968, 7960
                ]

                port RegB2 {
                    position = right:2
                    kind = pe
                }
                [
                    position = 8344, 8152
                    rotation = down
                ]

                connect Auto1.S1 RegA2 as Connection172
                connect Auto1.S2 RegB2 as Connection173
                connect RegA1 Auto1.P1 as Connection174
                connect RegB1 Auto1.P2 as Connection175
            }
            [
                position = 9016, 8144
                size = 168, 232
            ]
        }
        [
            position = 4344, 3880
            size = 48, 48
        ]

        comment Comment1 START Consider using the Category component to better organize your library items in the tree. ENDCOMMENT
        [
            position = 4584, 3792
        ]
    }

    logically_deleted {
        "Load.CPL"
        "Load.TS_module"
    }

    default {
        gen_abs {
            execution_rate = "inherit"
        }

        gen_bus_join {
            inputs = "2"
            execution_rate = "inherit"
        }

        gen_bus_split {
            outputs = "2"
            execution_rate = "inherit"
        }

        gen_c_function {
            input_terminals = "real in;"
            input_terminals_show_labels = "False;"
            input_terminals_feedthrough = "True;"
            input_terminals_dimensions = "inherit;"
            output_terminals = "real out;"
            output_terminals_show_labels = "False;"
            output_terminals_feedthrough = "True;"
            output_terminals_dimensions = "inherit;"
            output_fnc = ""
            update_fnc = ""
            init_fnc = ""
            global_variables = ""
            parameters = ""
            execution_rate = "inherit"
        }

        gen_comparator {
            execution_rate = "inherit"
        }

        gen_data_type_conversion {
            output_type = "real"
            execution_rate = "inherit"
        }

        gen_gain {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        gen_integrator {
            show_reset = "none"
            reset_type = "asynchronous"
            show_init_condition = "internal"
            init_value = "0"
            limit_output = "False"
            limit_upper = "inf"
            limit_lower = "-inf"
            show_state = "False"
            state_port_type = "inherit"
            execution_rate = "inherit"
        }

        gen_limiter {
            upper_limit = "[\'inf\']"
            lower_limit = "[\'-inf\']"
            execution_rate = "inherit"
        }

        gen_logic_op {
            operator = "AND"
            inputs = "2"
            execution_rate = "inherit"
        }

        gen_math_fnc {
            mathematical_fn = "exponential"
            execution_rate = "inherit"
        }

        gen_probe {
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        gen_product {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_rate_limiter {
            rising_limit = "1"
            falling_limit = "-1"
            execution_rate = "inherit"
        }

        gen_rel_op {
            relational_op = "=="
            execution_rate = "inherit"
        }

        gen_sign {
            execution_rate = "inherit"
        }

        gen_sum {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_terminator {
            execution_rate = "inherit"
        }

        gen_trigonometric {
            trigonometric_fn = "sin"
            angle = "Radians"
            execution_rate = "inherit"
        }

        gen_z_domain_transfer {
            domain = "Z-domain"
            method = "Zero-order hold"
            b_coeff = "[1,1]"
            a_coeff = "[1,1]"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        lut_1d {
            in_vec_x = "np.arange(-5,6)"
            out_vec_f_x = "np.arange(-5,6)**2"
            table_impl = "Equidistant"
            ext_mode = "Clip"
            execution_rate = "inherit"
        }

        pas_capacitor {
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        pas_inductor {
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        pas_resistor {
            resistance = "1"
            param_set = ""
        }

        src_clock {
            enb_reset = "False"
            reset_at = "1.0"
            execution_rate = "100e-6"
        }

        src_constant {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        src_current {
            sig_input = "False"
            type = "signal generator"
            param_set = "1phase"
            parent_label = ""
            addr = "0"
            spc_nb = "0"
            execution_rate = "100e-6"
            cpd_visible = "True"
            enable_snb = "False"
            snb_type = "R1"
            R1 = "inf"
            C1 = "1e-06"
            override_signal_name = "False"
            signal_name = ""
            init_source_nature = "Constant"
            init_const_value = "0.0"
            init_rms_value = "0.0"
            init_frequency = "50.0"
            init_phase = "0.0"
        }

        src_step {
            step_time = "1"
            initial_value = "0"
            final_value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
        }

        src_voltage {
            sig_input = "False"
            type = "signal generator"
            param_set = "1phase"
            parent_label = ""
            addr = "0"
            spc_nb = "0"
            execution_rate = "100e-6"
            cpd_visible = "True"
            enable_snb = "False"
            snb_type = "R2"
            R2 = "0.0"
            L1 = "0.1"
            override_signal_name = "False"
            signal_name = ""
            init_source_nature = "Constant"
            init_const_value = "0.0"
            init_rms_value = "0.0"
            init_frequency = "50.0"
            init_phase = "0.0"
        }

        sys_mp_signal_switch {
            number_of_input_terminals = "2"
            execution_rate = "inherit"
        }

        sys_signal_switch {
            criterion = "ctrl >= threshold"
            threshold = "0"
            execution_rate = "inherit"
        }

        tm_delay {
            init_value = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Current Measurement" {
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Edge Detection" {
            edge = "both"
            execution_rate = "inherit"
        }

        "core/Meter Split" {
            van = "True"
            vbn = "True"
            vcn = "True"
            van_rms = "False"
            vbn_rms = "False"
            vcn_rms = "False"
            vln_rms = "False"
            vab = "False"
            vbc = "False"
            vca = "False"
            vab_rms = "False"
            vbc_rms = "False"
            vca_rms = "False"
            vll_rms = "False"
            ia = "False"
            ib = "False"
            ic = "False"
            ia_rms = "False"
            ib_rms = "False"
            ic_rms = "False"
            i_rms = "False"
            freq = "False"
            power_p = "False"
            power_q = "False"
            power_s = "False"
            power_pf = "False"
            enable_extra_in = "No"
            power_pa = "False"
            power_pb = "False"
            power_pc = "False"
            power_qa = "False"
            power_qb = "False"
            power_qc = "False"
            power_sa = "False"
            power_sb = "False"
            power_sc = "False"
            power_pfa = "False"
            power_pfb = "False"
            power_pfc = "False"
        }

        "core/Rate Transition" {
            init_value = "0.0"
            execution_rate = "100e-6"
        }

        "core/Signal Controlled Current Source" {
            execution_rate = "inherit"
        }

        "core/Signal Controlled Voltage Source" {
            execution_rate = "inherit"
        }

        "core/Simple Battery inverter (Average)" {
            Sn = "1.6e6"
            powerRate = "1"
            Ts = "200e-6"
            R = "1e-5"
            L = "100e-6"
            Rf = "150e-3"
            Cf = "1.013e-3"
            Kp = "0.0001"
            Ki = "0.05"
        }

        "core/Single Phase Multi-Winding Transformer" {
            input = "SI"
            num_of_windings = "2"
            Sn = "10e3"
            f = "50.0"
            n_prim = "100.0"
            n_sec = "[100.0]"
            R_prim = "0.1"
            L_prim = "0.001"
            I_prim = "0.0"
            R_sec = "[0.1]"
            L_sec = "[0.001]"
            I_sec = "[0.0]"
            r_prim = ".1"
            l_prim = ".314159265359"
            i_prim = "0.0"
            r_sec = "[.1]"
            l_sec = "[.314159265359]"
            i_sec = "[0.0]"
            core_model = "Linear"
            Rm = "1e5"
            Lm = "5.0"
            flux_vals_SI = "[0.001, 0.005]"
            current_vals_SI = "[1.0, 2.0]"
            rm = "100000.0"
            lm = "1570.79632679"
            flux_vals_pu = "[0.001, 0.005]"
            current_vals_pu = "[1.0, 2.0]"
            import_from_pu = "Import from PU"
            import_from_si = "Import from SI"
            embedded_cpl_12 = "None"
            ratio_type_12 = "Automatic"
            ratio_12 = "0.1"
            embedded_cpl_13 = "None"
            ratio_type_13 = "Automatic"
            ratio_13 = "0.1"
            embedded_cpl_14 = "None"
            ratio_type_14 = "Automatic"
            ratio_14 = "0.1"
            embedded_cpl_15 = "None"
            ratio_type_15 = "Automatic"
            ratio_15 = "0.1"
            embedded_cpl_16 = "None"
            ratio_type_16 = "Automatic"
            ratio_16 = "0.1"
            embedded_cpl_17 = "None"
            ratio_type_17 = "Automatic"
            ratio_17 = "0.1"
            embedded_cpl_18 = "None"
            ratio_type_18 = "Automatic"
            ratio_18 = "0.1"
            embedded_cpl_19 = "None"
            ratio_type_19 = "Automatic"
            ratio_19 = "0.1"
            embedded_cpl_110 = "None"
            ratio_type_110 = "Automatic"
            ratio_110 = "0.1"
        }

        "core/Single phase PLL" {
            scheduling_mode = "Enable"
            offset_Hz = "55"
            delta_Hz_max = "10"
            vd_init = "200"
            angle_init = "0"
            k_SOGI = "0.4"
            kp_PLL_LOW = "4.81e3"
            kp_PLL_HIGH = "527"
            ki_PLL_LOW = "1.84e4"
            ki_PLL_HIGH = "2.22e3"
            kd_PLL_LOW = "-5.19"
            kd_PLL_HIGH = "-0.519"
            Tf_kd_PLL = "0.00108"
            fc_LPF_vd = "20"
            fc_LPF_wPLL = "100"
            fc_LPF_fPLL = "10"
            execution_rate = "inherit"
        }

        "core/Three Phase Two Winding Transformer" {
            input = "SC and OC tests"
            Sn = "160000.0"
            f = "50.0"
            V1 = "10000.0"
            V2 = "400.0"
            usc1 = "4.0"
            Psc1 = "2350.0"
            R1 = "4.58984375"
            L1 = ".0370093710364"
            R2 = ".00734375"
            L2 = "5.92149936583e-05"
            r1 = ".00734375"
            l1 = ".0186029389059"
            r2 = ".00734375"
            l2 = ".0186029389059"
            core_model = "Linear"
            ioc1 = "0.7"
            Poc1 = "460.0"
            Rm = "217391.304348"
            Lm = "311.709196788"
            flux_vals_SI = "[1910.3, 2419.7]"
            current_vals_SI = "[0.66653, 277.72]"
            rm = "347.826086957"
            lm = "156.68213163"
            flux_vals_pu = "[1.2, 1.52]"
            current_vals_pu = "[0.0024, 1]"
            flux_vals_SCOC = "[1.2, 1.52]"
            current_vals_SCOC = "[0.0024, 1]"
            import_from_SI2SCOC = "Import from SI"
            import_from_pu2SCOC = "Import from PU"
            import_from_SCOC2SI = "Import from SC OC"
            import_from_pu2SI = "Import from PU"
            import_from_SCOC2pu = "Import from SC OC"
            import_from_SI2pu = "Import from SI"
            winding_1_connection = "Y"
            winding_2_connection = "Y"
            clock_number = "0"
            embedded_cpl = "None"
            coupling_type = "core"
            ratio_type = "Automatic"
            ratio = "0.1"
            Rshunt = "inf"
        }

        "core/Three-phase Meter" {
            R = "1e5"
            n_cycles = "1"
            Ts = "100e-6"
            enable_probes = "True"
            enable_out = "True"
            remove_snubber = "False"
            VAn = "True"
            VBn = "True"
            VCn = "True"
            VAB = "False"
            VBC = "False"
            VCA = "False"
            IA = "True"
            IB = "True"
            IC = "True"
            freq = "False"
            VLn_rms = "False"
            VLL_rms = "False"
            VLn_avg_rms = "False"
            VLL_avg_rms = "False"
            I_rms = "False"
            I_avg_rms = "False"
            P_method = "alpha-beta"
            enable_extra_out = "False"
            P_meas = "False"
        }

        "core/Transmission Line" {
            model = "RL coupled"
            num_of_phases = "3"
            model_def = "Geometry"
            unit_sys = "imperial"
            Length_metric = "100.0"
            Length_miles = "62.1371"
            Frequency = "60.0"
            Earth_resistivity = "100"
            X_axis_1_metric = "-1.0668"
            Y_axis_1_metric = "8.5344"
            GMR_1_metric = "0.00743712"
            RD_1_metric = "0.009156192"
            Rs_1_metric = "0.19013958482462417"
            X_axis_1_imperial = "-3.5"
            Y_axis_1_imperial = "28.0"
            GMR_1_imperial = "0.0244"
            RD_1_imperial = "0.03004"
            Rs_1_imperial = "0.306"
            X_axis_2_metric = "-0.3048"
            Y_axis_2_metric = "8.5344"
            GMR_2_metric = "0.00743712"
            RD_2_metric = "0.009156192"
            Rs_2_metric = "0.19013958482462417"
            X_axis_2_imperial = "-1.0"
            Y_axis_2_imperial = "28.0"
            GMR_2_imperial = "0.0244"
            RD_2_imperial = "0.03004"
            Rs_2_imperial = "0.306"
            X_axis_3_metric = "1.0668"
            Y_axis_3_metric = "8.5344"
            GMR_3_metric = "0.00743712"
            RD_3_metric = "0.009156192"
            Rs_3_metric = "0.19013958482462417"
            X_axis_3_imperial = "3.5"
            Y_axis_3_imperial = "28.0"
            GMR_3_imperial = "0.0244"
            RD_3_imperial = "0.03004"
            Rs_3_imperial = "0.306"
            X_axis_4_metric = "0.1524"
            Y_axis_4_metric = "7.3152"
            GMR_4_metric = "0.00248"
            RD_4_metric = "0.00714"
            Rs_4_metric = "0.3678"
            X_axis_4_imperial = "0.5"
            Y_axis_4_imperial = "24.0"
            GMR_4_imperial = "0.00814"
            RD_4_imperial = "0.02345"
            Rs_4_imperial = "0.592"
            R_metric = "[[0.2481, 0.0579, 0.0579], [0.0579, 0.2481, 0.0579], [0.0579, 0.0579, 0.2481]]"
            R_imperial = "[[0.4, 0.093, 0.093], [0.093, 0.4, 0.093], [0.093, 0.093, 0.4]]"
            L_metric = "[[0.00233, 0.00140, 0.00140], [0.00140, 0.00233, 0.00140], [0.00140, 0.00140, 0.00233]]"
            L_imperial = "[[0.00374, 0.0022, 0.0022], [0.0022, 0.00374, 0.0022], [0.0022, 0.0022, 0.00374]]"
            C_metric = "[[8.546e-9, 0, 0], [0, 8.546e-9, 0], [0, 0, 8.546e-9]]"
            C_imperial = "[[1.471e-8, 0, 0], [0, 1.530e-8, 0], [0, 0, 1.375e-8]]"
            R_sequence_metric = "[[0.3864, 0, 0],[0, 0.01273, 0], [0, 0, 0.01273]]"
            L_sequence_metric = "[[4.1264e-3, 0, 0],[0, 0.9337e-3, 0], [0, 0, 0.9337e-3]]"
            C_sequence_metric = "[[7.751e-9, 0, 0],[0, 12.74e-9, 0], [0, 0, 12.74e-9]]"
            R_sequence_imperial = "[[0.6218, 0, 0],[0, 0.0204, 0], [0, 0, 0.0204]]"
            L_sequence_imperial = "[[0.00664, 0, 0],[0, 0.00150, 0], [0, 0, 0.00150]]"
            C_sequence_imperial = "[[1.247e-8, 0, 0],[0, 2.0503e-8, 0], [0, 0, 2.0503e-8]]"
            import_from_geometry = "Import from Geometry"
            import_from_RLC = "Import from RLC"
        }

        "core/Triple Pole Single Throw Contactor" {
            ctrl_src = "Digital input"
            Sa = "1"
            Sa_logic = "active high"
            enable_fb_out = "False"
            fb_out_type = "real"
            execution_rate = "inherit"
            initial_state = "off"
            on_delay = "0"
            off_delay = "0"
        }

        "core/Voltage Measurement" {
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "core/Voltage RMS" {
            op_mode = "PLL based"
            frequency = "50"
            sig_output = "False"
            execution_rate = "inherit"
            feed_forward = "False"
            nd_msr_estimation = "false"
        }

        "core/abc to dq" {
            power_form = "variant - Clarke\'s original"
            alignment = "-pi/2"
            disable_filter = "True"
            initial_filter_output = "0"
            wn_LPFdq = "1000"
            execution_rate = "inherit"
            _tunable = "False"
        }

        "core/dq to abc" {
            power_form = "variant - Clarke\'s original"
            alignment = "-pi/2"
            execution_rate = "0"
        }
    }
}
