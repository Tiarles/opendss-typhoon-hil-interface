from typhoon.api.impl.schematic_editor import model as mdl
mdl.create_new_model()

# Configuration.
mdl.set_model_property_value("hil_device", "HIL402")
mdl.set_model_property_value("hil_configuration_id", 1)
mdl.set_model_property_value("simulation_method", "bilinear")
mdl.set_model_property_value("simulation_time_step", 10e-6)
mdl.set_model_property_value("simulation_discret_scaling", "1.0")
mdl.set_model_property_value("dsp_timer_periods", ('100e-6', ' 50e-3'))
mdl.set_model_property_value("ss_calc_method", "systematic elimination")
mdl.set_model_property_value("enb_pole_shift", True)
mdl.set_model_property_value("enb_gds_oversampling", True)
mdl.set_model_property_value("show_modes", False)
mdl.set_model_property_value("device_ao_limit_enable", False)
mdl.set_model_property_value("cpl_stb", False)
mdl.set_model_property_value("enb_dep_sw_detect", False)
mdl.set_model_property_value("code_section", "internal memory")
mdl.set_model_property_value("data_section", "internal memory")
mdl.set_model_property_value("sys_sp_rate_1", 0.0001)
mdl.set_model_property_value("sys_sp_rate_2", 0.05)
mdl.set_model_property_value("sys_real_type_precision", "default")
mdl.set_model_property_value("user_real_type_precision", "default")
mdl.set_model_property_value("sys_cpu_optimization", "high")
mdl.set_model_property_value("user_cpu_optimization", "high")

# Component: Root

# Component: Capacitor Bank
_Capacitor_Bank = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Capacitor Bank",
    rotation="up",
    flip="flip_none",
    position=(4648, 6848),
    hide_name=False,
    size=(96, 64)
)
_Capacitor_Bank_mask = mdl.create_mask(_Capacitor_Bank)
_Capacitor_Bank_mask_tp_connection = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="tp_connection",
    label="Connection",
    widget="combo",
    combo_values=['Y', 'Y-grounded', 'Δ', 'Series'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Capacitor_Bank_mask_tp_connection_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.port_dynamics(mdl, container_handle)
comp_script.redo_connections(mdl, container_handle)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask_tp_connection, "property_value_changed", _Capacitor_Bank_mask_tp_connection_property_value_changed)


_Capacitor_Bank_mask_tp_connection_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask_tp_connection, "property_value_edited", _Capacitor_Bank_mask_tp_connection_property_value_edited)

_Capacitor_Bank_mask_global_basefreq = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Capacitor_Bank_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask_global_basefreq, "property_value_changed", _Capacitor_Bank_mask_global_basefreq_property_value_changed)


_Capacitor_Bank_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask_global_basefreq, "property_value_edited", _Capacitor_Bank_mask_global_basefreq_property_value_edited)

_Capacitor_Bank_mask_BaseFreq = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="BaseFreq",
    label="Base frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit="Hz"
)

_Capacitor_Bank_mask_phases = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="phases",
    label="Phases",
    widget="combo",
    combo_values=['3', '2', '1'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Capacitor_Bank_mask_phases_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.port_dynamics(mdl, container_handle)
comp_script.redo_connections(mdl, container_handle)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask_phases, "property_value_changed", _Capacitor_Bank_mask_phases_property_value_changed)


_Capacitor_Bank_mask_phases_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask_phases, "property_value_edited", _Capacitor_Bank_mask_phases_property_value_edited)

_Capacitor_Bank_mask_Kv = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="Kv",
    label="kV",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kV"
)

_Capacitor_Bank_mask_Kvar = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="Kvar",
    label="kVar",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kVAr"
)

_Capacitor_Bank_mask_C = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="C",
    label="C",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Capacitor_Bank_mask_enable_monitoring = mdl.create_property(
    item_handle=_Capacitor_Bank_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_Capacitor_Bank_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask, "define_icon", _Capacitor_Bank_mask_define_icon)

_Capacitor_Bank_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)
if not gui_scripts_path in sys.path:
    sys.path.append(gui_scripts_path)

import comp_capacitor as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)


"""
mdl.set_handler_code(_Capacitor_Bank_mask, "init", _Capacitor_Bank_mask_init)

_Capacitor_Bank_mask_pre_compile = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.update_frequency_property(mdl, item_handle)
comp_script.calculate_c(mdl, item_handle)

"""
mdl.set_handler_code(_Capacitor_Bank_mask, "pre_compile", _Capacitor_Bank_mask_pre_compile)

_Capacitor_Bank_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br>Three-Phase Capacitor Bank.</br></p></body></html>
'''
mdl.set_description(_Capacitor_Bank_mask, _Capacitor_Bank_mask_desc)


# Component: Capacitor Bank.Ca
_Capacitor_Bank_Ca = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Capacitor_Bank,
    name="Ca",
    rotation="down",
    flip="flip_none",
    position=(8112, 8096),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Capacitor_Bank_Ca, "capacitance"), "C")


# Component: Capacitor Bank.Cb
_Capacitor_Bank_Cb = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Capacitor_Bank,
    name="Cb",
    rotation="down",
    flip="flip_none",
    position=(8112, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Capacitor_Bank_Cb, "capacitance"), "C")


# Component: Capacitor Bank.Cc
_Capacitor_Bank_Cc = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Capacitor_Bank,
    name="Cc",
    rotation="down",
    flip="flip_none",
    position=(8112, 8288),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Capacitor_Bank_Cc, "capacitance"), "C")


# Port: Capacitor Bank.A1
_Capacitor_Bank_A1 = mdl.create_port(
    name="A1",
    parent=_Capacitor_Bank,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32, -32),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8392, 8096)
)

# Port: Capacitor Bank.B1
_Capacitor_Bank_B1 = mdl.create_port(
    name="B1",
    parent=_Capacitor_Bank,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(0, -32),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8392, 8192)
)

# Port: Capacitor Bank.C1
_Capacitor_Bank_C1 = mdl.create_port(
    name="C1",
    parent=_Capacitor_Bank,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32, -32),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8392, 8288)
)

# Junction: Capacitor Bank.j
_Capacitor_Bank_j = mdl.create_junction(
    name="j",
    parent=_Capacitor_Bank,
    kind="pe",
    position=(7992, 8192)
)

# Component: Controlled Switch
_Controlled_Switch = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Controlled Switch",
    rotation="up",
    flip="flip_none",
    position=(5056, 6880),
    hide_name=False,
    size=(64, 96)
)
_Controlled_Switch_mask = mdl.create_mask(_Controlled_Switch)
_Controlled_Switch_mask_enable_fb_out = mdl.create_property(
    item_handle=_Controlled_Switch_mask,
    name="enable_fb_out",
    label="Feedback output",
    widget="combo",
    combo_values=['True', 'False'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General:1",
    unit=""
)


_Controlled_Switch_mask_enable_fb_out_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.port_dynamics(mdl, container_handle)
comp_script.update_inner_property(mdl, container_handle, "enable_fb_out", new_value)
comp_script.update_fb_connection(mdl, container_handle)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Controlled_Switch_mask_enable_fb_out, "property_value_changed", _Controlled_Switch_mask_enable_fb_out_property_value_changed)


_Controlled_Switch_mask_enable_fb_out_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Controlled_Switch_mask_enable_fb_out, "property_value_edited", _Controlled_Switch_mask_enable_fb_out_property_value_edited)

_Controlled_Switch_mask_fb_out_type = mdl.create_property(
    item_handle=_Controlled_Switch_mask,
    name="fb_out_type",
    label="Signal type",
    widget="combo",
    combo_values=['real', 'int', 'uint'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="General:1",
    unit=""
)


_Controlled_Switch_mask_fb_out_type_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_inner_property(mdl, container_handle, "fb_out_type", new_value)

"""
mdl.set_handler_code(_Controlled_Switch_mask_fb_out_type, "property_value_changed", _Controlled_Switch_mask_fb_out_type_property_value_changed)

_Controlled_Switch_mask_execution_rate = mdl.create_property(
    item_handle=_Controlled_Switch_mask,
    name="execution_rate",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)


_Controlled_Switch_mask_execution_rate_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_inner_property(mdl, container_handle, "execution_rate", new_value)

"""
mdl.set_handler_code(_Controlled_Switch_mask_execution_rate, "property_value_changed", _Controlled_Switch_mask_execution_rate_property_value_changed)

_Controlled_Switch_mask_initial_state = mdl.create_property(
    item_handle=_Controlled_Switch_mask,
    name="initial_state",
    label="Initial state",
    widget="combo",
    combo_values=['off', 'on'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Initial state:2",
    unit=""
)


_Controlled_Switch_mask_initial_state_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_inner_property(mdl, container_handle, "initial_state", new_value)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Controlled_Switch_mask_initial_state, "property_value_changed", _Controlled_Switch_mask_initial_state_property_value_changed)

_Controlled_Switch_mask_on_delay = mdl.create_property(
    item_handle=_Controlled_Switch_mask,
    name="on_delay",
    label="On delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Timing:3",
    unit="s"
)


_Controlled_Switch_mask_on_delay_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_inner_property(mdl, container_handle, "on_delay", new_value)

"""
mdl.set_handler_code(_Controlled_Switch_mask_on_delay, "property_value_changed", _Controlled_Switch_mask_on_delay_property_value_changed)

_Controlled_Switch_mask_off_delay = mdl.create_property(
    item_handle=_Controlled_Switch_mask,
    name="off_delay",
    label="Off delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Timing",
    unit="s"
)


_Controlled_Switch_mask_off_delay_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_inner_property(mdl, container_handle, "off_delay", new_value)

"""
mdl.set_handler_code(_Controlled_Switch_mask_off_delay, "property_value_changed", _Controlled_Switch_mask_off_delay_property_value_changed)


_Controlled_Switch_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Controlled_Switch_mask, "define_icon", _Controlled_Switch_mask_define_icon)

_Controlled_Switch_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_ctrlsw as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)


"""
mdl.set_handler_code(_Controlled_Switch_mask, "init", _Controlled_Switch_mask_init)

_Controlled_Switch_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The controlled switch is represented by a Line component in OpenDSS and by a Triple Pole Single Throw Contactor component in the Schematic Editor.<br><br>When simulating in the time domain within Typhoon’s environment, the control signal must be provided by signal processing elements or digital inputs.<br><br>If external control is not needed, a Manual Switch component can be used to allow fast double-click state toggling.</p></body></html>
'''
mdl.set_description(_Controlled_Switch_mask, _Controlled_Switch_mask_desc)


# Component: Controlled Switch.S
_Controlled_Switch_S = mdl.create_component(
    type_name="core/Triple Pole Single Throw Contactor",
    parent=_Controlled_Switch,
    name="S",
    rotation="up",
    flip="flip_none",
    position=(7736, 7952),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Controlled_Switch_S, "ctrl_src"), "Model")
mdl.set_property_value(mdl.prop(_Controlled_Switch_S, "initial_state"), "on")
mdl.set_property_value(mdl.prop(_Controlled_Switch_S, "off_delay"), "0.0")
mdl.set_property_value(mdl.prop(_Controlled_Switch_S, "on_delay"), "0.0")


# Port: Controlled Switch.ctrl
_Controlled_Switch_ctrl = mdl.create_port(
    name="ctrl",
    parent=_Controlled_Switch,
    label="ctrl",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 'center'),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(7688, 7800)
)

# Port: Controlled Switch.A1
_Controlled_Switch_A1 = mdl.create_port(
    name="A1",
    parent=_Controlled_Switch,
    label="A1",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 'top'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7600, 7856)
)

# Port: Controlled Switch.B1
_Controlled_Switch_B1 = mdl.create_port(
    name="B1",
    parent=_Controlled_Switch,
    label="B1",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 'center'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7600, 7952)
)

# Port: Controlled Switch.C1
_Controlled_Switch_C1 = mdl.create_port(
    name="C1",
    parent=_Controlled_Switch,
    label="C1",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 'bottom'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7600, 8048)
)

# Port: Controlled Switch.A2
_Controlled_Switch_A2 = mdl.create_port(
    name="A2",
    parent=_Controlled_Switch,
    label="A2",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 'top'),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(7872, 7856)
)

# Port: Controlled Switch.B2
_Controlled_Switch_B2 = mdl.create_port(
    name="B2",
    parent=_Controlled_Switch,
    label="B2",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 'center'),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(7872, 7952)
)

# Port: Controlled Switch.C2
_Controlled_Switch_C2 = mdl.create_port(
    name="C2",
    parent=_Controlled_Switch,
    label="C2",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 'bottom'),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(7872, 8048)
)

# Component: Fault
_Fault = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Fault",
    rotation="up",
    flip="flip_none",
    position=(5304, 6880),
    hide_name=False,
    size=(64, 96)
)
_Fault_mask = mdl.create_mask(_Fault)
_Fault_mask_type = mdl.create_property(
    item_handle=_Fault_mask,
    name="type",
    label="Fault type",
    widget="combo",
    combo_values=['A-B-C-GND', 'A-B-GND', 'A-C-GND', 'B-C-GND', 'A-GND', 'B-GND', 'C-GND', 'A-B-C', 'A-B', 'A-C', 'B-C', 'None'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Fault_mask_type_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_inner_fault(mdl, container_handle, "fault_type", new_value)
comp_script.update_inner_gnd(mdl, container_handle, created_ports)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Fault_mask_type, "property_value_changed", _Fault_mask_type_property_value_changed)

_Fault_mask_resistance = mdl.create_property(
    item_handle=_Fault_mask,
    name="resistance",
    label="Resistance (phase)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Ω"
)


_Fault_mask_resistance_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_inner_fault(mdl, container_handle, "resistance", new_value)

"""
mdl.set_handler_code(_Fault_mask_resistance, "property_value_changed", _Fault_mask_resistance_property_value_changed)


_Fault_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Fault_mask, "define_icon", _Fault_mask_define_icon)

_Fault_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_fault as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Fault_mask, "init", _Fault_mask_init)

_Fault_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The OpenDSS Fault object is a resistor network, a two-terminal device in which the second terminal defaults to ground.<br><br>Only one Bus must be connected to either side this component.</p></body></html>
'''
mdl.set_description(_Fault_mask, _Fault_mask_desc)


# Component: Fault.F1
_Fault_F1 = mdl.create_component(
    type_name="core/Grid Fault",
    parent=_Fault,
    name="F1",
    rotation="up",
    flip="flip_none",
    position=(7736, 7952),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Fault_F1, "fault_type"), "A-B-C-GND")
mdl.set_property_value(mdl.prop(_Fault_F1, "resistance"), "0.00030000000000000003")


# Port: Fault.A1
_Fault_A1 = mdl.create_port(
    name="A1",
    parent=_Fault,
    label="A1",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 'top'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7600, 7856)
)

# Port: Fault.B1
_Fault_B1 = mdl.create_port(
    name="B1",
    parent=_Fault,
    label="B1",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 'center'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7600, 7952)
)

# Port: Fault.C1
_Fault_C1 = mdl.create_port(
    name="C1",
    parent=_Fault,
    label="C1",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 'bottom'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7600, 8048)
)

# Port: Fault.A2
_Fault_A2 = mdl.create_port(
    name="A2",
    parent=_Fault,
    label="A2",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 'top'),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(7872, 7856)
)

# Port: Fault.B2
_Fault_B2 = mdl.create_port(
    name="B2",
    parent=_Fault,
    label="B2",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 'center'),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(7872, 7952)
)

# Port: Fault.C2
_Fault_C2 = mdl.create_port(
    name="C2",
    parent=_Fault,
    label="C2",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(32.0, 32.0),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(7872, 8048)
)

# Port: Fault.gnd
_Fault_gnd = mdl.create_port(
    name="gnd",
    parent=_Fault,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('bottom', 'center'),
    rotation="left",
    flip="flip_none",
    hide_name=False,
    position=(7736, 8144)
)

# Component: Generator
_Generator = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Generator",
    rotation="up",
    flip="flip_none",
    position=(5592, 6888),
    hide_name=False,
    size=(175, 175)
)
_Generator_mask = mdl.create_mask(_Generator)
_Generator_mask_phases = mdl.create_property(
    item_handle=_Generator_mask,
    name="phases",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_kw = mdl.create_property(
    item_handle=_Generator_mask,
    name="kw",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_kvar = mdl.create_property(
    item_handle=_Generator_mask,
    name="kvar",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_kv = mdl.create_property(
    item_handle=_Generator_mask,
    name="kv",
    label="Nominal line voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General:1",
    unit="kV"
)

_Generator_mask_global_basefreq = mdl.create_property(
    item_handle=_Generator_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)


_Generator_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Generator_mask_global_basefreq, "property_value_changed", _Generator_mask_global_basefreq_property_value_changed)


_Generator_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Generator_mask_global_basefreq, "property_value_edited", _Generator_mask_global_basefreq_property_value_edited)

_Generator_mask_basefreq = mdl.create_property(
    item_handle=_Generator_mask,
    name="basefreq",
    label="Nominal Frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="Hz"
)

_Generator_mask_nom_rpm = mdl.create_property(
    item_handle=_Generator_mask,
    name="nom_rpm",
    label="Nominal RPM",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="rpm"
)

_Generator_mask_kVA = mdl.create_property(
    item_handle=_Generator_mask,
    name="kVA",
    label="Nominal Apparent Power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="kVA"
)

_Generator_mask_pf = mdl.create_property(
    item_handle=_Generator_mask,
    name="pf",
    label="Nominal Power Factor ",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)

_Generator_mask_model = mdl.create_property(
    item_handle=_Generator_mask,
    name="model",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Xd = mdl.create_property(
    item_handle=_Generator_mask,
    name="Xd",
    label="Synchronous Reactance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Circuit Parameters:2",
    unit="pu"
)

_Generator_mask_Xdp = mdl.create_property(
    item_handle=_Generator_mask,
    name="Xdp",
    label="Transient Reactance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Circuit Parameters",
    unit="pu"
)

_Generator_mask_Xdpp = mdl.create_property(
    item_handle=_Generator_mask,
    name="Xdpp",
    label="Sub-Transient Reactance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Circuit Parameters",
    unit="pu"
)

_Generator_mask_XRdp = mdl.create_property(
    item_handle=_Generator_mask,
    name="XRdp",
    label="Transient X/R ratio",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Circuit Parameters",
    unit=""
)

_Generator_mask_H = mdl.create_property(
    item_handle=_Generator_mask,
    name="H",
    label="Mass Constant",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Circuit Parameters",
    unit="s"
)

_Generator_mask_J = mdl.create_property(
    item_handle=_Generator_mask,
    name="J",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_rs = mdl.create_property(
    item_handle=_Generator_mask,
    name="rs",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Lls = mdl.create_property(
    item_handle=_Generator_mask,
    name="Lls",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Lmq = mdl.create_property(
    item_handle=_Generator_mask,
    name="Lmq",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Lmd = mdl.create_property(
    item_handle=_Generator_mask,
    name="Lmd",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Lmzq = mdl.create_property(
    item_handle=_Generator_mask,
    name="Lmzq",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Lmzd = mdl.create_property(
    item_handle=_Generator_mask,
    name="Lmzd",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_rkq = mdl.create_property(
    item_handle=_Generator_mask,
    name="rkq",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_rkq2 = mdl.create_property(
    item_handle=_Generator_mask,
    name="rkq2",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_rkd = mdl.create_property(
    item_handle=_Generator_mask,
    name="rkd",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_rfd = mdl.create_property(
    item_handle=_Generator_mask,
    name="rfd",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Llkq = mdl.create_property(
    item_handle=_Generator_mask,
    name="Llkq",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Llkq2 = mdl.create_property(
    item_handle=_Generator_mask,
    name="Llkq2",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Llkd = mdl.create_property(
    item_handle=_Generator_mask,
    name="Llkd",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Llfd = mdl.create_property(
    item_handle=_Generator_mask,
    name="Llfd",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_PP = mdl.create_property(
    item_handle=_Generator_mask,
    name="PP",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_w_base = mdl.create_property(
    item_handle=_Generator_mask,
    name="w_base",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_T_base = mdl.create_property(
    item_handle=_Generator_mask,
    name="T_base",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_ws = mdl.create_property(
    item_handle=_Generator_mask,
    name="ws",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_ws_inv = mdl.create_property(
    item_handle=_Generator_mask,
    name="ws_inv",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Z_base = mdl.create_property(
    item_handle=_Generator_mask,
    name="Z_base",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_G_mod = mdl.create_property(
    item_handle=_Generator_mask,
    name="G_mod",
    label="Generator model",
    widget="combo",
    combo_values=['Constant kW', 'Constant admittance', 'Constant kW, Constant kV', 'Constant kW, Fixed Q', 'Constant kW, Fixed Q (constant reactance)'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS model setting:3",
    unit=""
)

_Generator_mask_Ts = mdl.create_property(
    item_handle=_Generator_mask,
    name="Ts",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Execution rate:4",
    unit="s"
)

_Generator_mask_dA = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA11 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA11",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA12 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA12",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA13 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA13",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA14 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA14",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA21 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA21",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA22 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA22",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA23 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA23",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA24 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA24",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA31 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA31",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA32 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA32",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA33 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA33",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA34 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA34",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA41 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA41",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA42 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA42",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA43 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA43",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dA44 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dA44",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB11 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB11",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB12 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB12",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB13 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB13",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB21 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB21",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB22 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB22",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB23 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB23",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB31 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB31",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB32 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB32",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB33 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB33",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB41 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB41",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB42 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB42",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_dB43 = mdl.create_property(
    item_handle=_Generator_mask,
    name="dB43",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_Init_En = mdl.create_property(
    item_handle=_Generator_mask,
    name="Init_En",
    label="Initialization",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Initialization:5",
    unit=""
)


_Generator_mask_Init_En_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
comp_script.components_and_connections(mdl, container_handle, created_ports, caller_prop_handle=prop_handle)

"""
mdl.set_handler_code(_Generator_mask_Init_En, "property_value_changed", _Generator_mask_Init_En_property_value_changed)

_Generator_mask_Init_switch = mdl.create_property(
    item_handle=_Generator_mask,
    name="Init_switch",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_mask_V_ph_init = mdl.create_property(
    item_handle=_Generator_mask,
    name="V_ph_init",
    label="Initial phase voltage magnitude",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Initialization",
    unit="kV"
)

_Generator_mask_thet_ph_init = mdl.create_property(
    item_handle=_Generator_mask,
    name="thet_ph_init",
    label="Initial phase voltage angle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Initialization",
    unit="Rad"
)

_Generator_mask_V2M_t = mdl.create_property(
    item_handle=_Generator_mask,
    name="V2M_t",
    label="Transition time from V Source to Machine",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Initialization",
    unit="s"
)

_Generator_mask_Mech_En = mdl.create_property(
    item_handle=_Generator_mask,
    name="Mech_En",
    label="Mechanical system enable time",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Initialization",
    unit="s"
)

_Generator_mask_gen_ts_en = mdl.create_property(
    item_handle=_Generator_mask,
    name="gen_ts_en",
    label="Enable time series (override gen control)",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS model setting",
    unit=""
)


_Generator_mask_gen_ts_en_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
comp_script.components_and_connections(mdl, container_handle, created_ports, caller_prop_handle=prop_handle)

"""
mdl.set_handler_code(_Generator_mask_gen_ts_en, "property_value_changed", _Generator_mask_gen_ts_en_property_value_changed)

_Generator_mask_load_loadshape = mdl.create_property(
    item_handle=_Generator_mask,
    name="load_loadshape",
    label="LoadShape object",
    widget="button",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS model setting",
    button_label="Choose",
    unit=""
)


_Generator_mask_load_loadshape_button_clicked = """
comp_script_load = return_comp_script_load()
comp_script_load.load_loadshape(mdl, container_handle)

"""
mdl.set_handler_code(_Generator_mask_load_loadshape, "button_clicked", _Generator_mask_load_loadshape_button_clicked)

_Generator_mask_loadshape_name = mdl.create_property(
    item_handle=_Generator_mask,
    name="loadshape_name",
    label="LoadShape name",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS model setting",
    unit=""
)


_Generator_mask_loadshape_name_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Generator_mask_loadshape_name, "property_value_edited", _Generator_mask_loadshape_name_property_value_edited)

_Generator_mask_loadshape = mdl.create_property(
    item_handle=_Generator_mask,
    name="loadshape",
    label="LoadShape points",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS model setting",
    unit="pu"
)


_Generator_mask_loadshape_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Generator_mask_loadshape, "property_value_edited", _Generator_mask_loadshape_property_value_edited)

_Generator_mask_loadshape_int = mdl.create_property(
    item_handle=_Generator_mask,
    name="loadshape_int",
    label="LoadShape interval",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS model setting",
    unit="h"
)


_Generator_mask_loadshape_int_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Generator_mask_loadshape_int, "property_value_edited", _Generator_mask_loadshape_int_property_value_edited)

_Generator_mask_gen_ts_en_bit = mdl.create_property(
    item_handle=_Generator_mask,
    name="gen_ts_en_bit",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_T_mode = mdl.create_property(
    item_handle=_Generator_mask,
    name="T_mode",
    label="Loadshape input mode",
    widget="combo",
    combo_values=['Loadshape index', 'Time'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS model setting",
    unit=""
)


_Generator_mask_T_mode_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Generator_mask_T_mode, "property_value_edited", _Generator_mask_T_mode_property_value_edited)

_Generator_mask_S_Ts = mdl.create_property(
    item_handle=_Generator_mask,
    name="S_Ts",
    label="Power profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit="pu"
)

_Generator_mask_Q_Ts = mdl.create_property(
    item_handle=_Generator_mask,
    name="Q_Ts",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_S_Ts_mode = mdl.create_property(
    item_handle=_Generator_mask,
    name="S_Ts_mode",
    label="Power Profile mode",
    widget="combo",
    combo_values=['Manual input'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)


_Generator_mask_S_Ts_mode_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
comp_script.components_and_connections(mdl, container_handle, created_ports, caller_prop_handle=prop_handle)

"""
mdl.set_handler_code(_Generator_mask_S_Ts_mode, "property_value_changed", _Generator_mask_S_Ts_mode_property_value_changed)


_Generator_mask_S_Ts_mode_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Generator_mask_S_Ts_mode, "property_value_edited", _Generator_mask_S_Ts_mode_property_value_edited)

_Generator_mask_T_Ts = mdl.create_property(
    item_handle=_Generator_mask,
    name="T_Ts",
    label="Loadshape time range",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="OpenDSS model setting",
    unit="h"
)

_Generator_mask_timespan = mdl.create_property(
    item_handle=_Generator_mask,
    name="timespan",
    label="Loadshape time span",
    widget="combo",
    combo_values=['Daily', 'Yearly'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_T_Ts_internal = mdl.create_property(
    item_handle=_Generator_mask,
    name="T_Ts_internal",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_dssT = mdl.create_property(
    item_handle=_Generator_mask,
    name="dssT",
    label="OpenDSS time interval",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit="h"
)

_Generator_mask_dssnpts = mdl.create_property(
    item_handle=_Generator_mask,
    name="dssnpts",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_T_Ts_max = mdl.create_property(
    item_handle=_Generator_mask,
    name="T_Ts_max",
    label="Power profile loop cycle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="OpenDSS model setting",
    unit="s"
)

_Generator_mask_del_Ts = mdl.create_property(
    item_handle=_Generator_mask,
    name="del_Ts",
    label="Profile start delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="OpenDSS model setting",
    unit="s"
)

_Generator_mask_Slen = mdl.create_property(
    item_handle=_Generator_mask,
    name="Slen",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_T_lim_low = mdl.create_property(
    item_handle=_Generator_mask,
    name="T_lim_low",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_T_lim_high = mdl.create_property(
    item_handle=_Generator_mask,
    name="T_lim_high",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_Ts_switch = mdl.create_property(
    item_handle=_Generator_mask,
    name="Ts_switch",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="OpenDSS model setting",
    unit=""
)

_Generator_mask_enable_monitoring = mdl.create_property(
    item_handle=_Generator_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_Generator_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Generator_mask, "define_icon", _Generator_mask_define_icon)

_Generator_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_generator as comp_script
importlib.reload(comp_script)
import comp_load as comp_script2
importlib.reload(comp_script2)
def return_comp_script(mdl, item_handle):
    return comp_script

def return_comp_script_load():
    return comp_script2

"""
mdl.set_handler_code(_Generator_mask, "init", _Generator_mask_init)

_Generator_mask_pre_compile = """
# HEADER START
phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
kw = mdl.get_property_value(mdl.prop(item_handle, "kw"))
kvar = mdl.get_property_value(mdl.prop(item_handle, "kvar"))
kv = mdl.get_property_value(mdl.prop(item_handle, "kv"))
global_basefreq = mdl.get_property_value(mdl.prop(item_handle, "global_basefreq"))
basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
nom_rpm = mdl.get_property_value(mdl.prop(item_handle, "nom_rpm"))
kVA = mdl.get_property_value(mdl.prop(item_handle, "kVA"))
pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
model = mdl.get_property_value(mdl.prop(item_handle, "model"))
Xd = mdl.get_property_value(mdl.prop(item_handle, "Xd"))
Xdp = mdl.get_property_value(mdl.prop(item_handle, "Xdp"))
Xdpp = mdl.get_property_value(mdl.prop(item_handle, "Xdpp"))
XRdp = mdl.get_property_value(mdl.prop(item_handle, "XRdp"))
H = mdl.get_property_value(mdl.prop(item_handle, "H"))
J = mdl.get_property_value(mdl.prop(item_handle, "J"))
rs = mdl.get_property_value(mdl.prop(item_handle, "rs"))
Lls = mdl.get_property_value(mdl.prop(item_handle, "Lls"))
Lmq = mdl.get_property_value(mdl.prop(item_handle, "Lmq"))
Lmd = mdl.get_property_value(mdl.prop(item_handle, "Lmd"))
Lmzq = mdl.get_property_value(mdl.prop(item_handle, "Lmzq"))
Lmzd = mdl.get_property_value(mdl.prop(item_handle, "Lmzd"))
rkq = mdl.get_property_value(mdl.prop(item_handle, "rkq"))
rkq2 = mdl.get_property_value(mdl.prop(item_handle, "rkq2"))
rkd = mdl.get_property_value(mdl.prop(item_handle, "rkd"))
rfd = mdl.get_property_value(mdl.prop(item_handle, "rfd"))
Llkq = mdl.get_property_value(mdl.prop(item_handle, "Llkq"))
Llkq2 = mdl.get_property_value(mdl.prop(item_handle, "Llkq2"))
Llkd = mdl.get_property_value(mdl.prop(item_handle, "Llkd"))
Llfd = mdl.get_property_value(mdl.prop(item_handle, "Llfd"))
PP = mdl.get_property_value(mdl.prop(item_handle, "PP"))
w_base = mdl.get_property_value(mdl.prop(item_handle, "w_base"))
T_base = mdl.get_property_value(mdl.prop(item_handle, "T_base"))
ws = mdl.get_property_value(mdl.prop(item_handle, "ws"))
ws_inv = mdl.get_property_value(mdl.prop(item_handle, "ws_inv"))
Z_base = mdl.get_property_value(mdl.prop(item_handle, "Z_base"))
G_mod = mdl.get_property_value(mdl.prop(item_handle, "G_mod"))
Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
dA = mdl.get_property_value(mdl.prop(item_handle, "dA"))
dB = mdl.get_property_value(mdl.prop(item_handle, "dB"))
dA11 = mdl.get_property_value(mdl.prop(item_handle, "dA11"))
dA12 = mdl.get_property_value(mdl.prop(item_handle, "dA12"))
dA13 = mdl.get_property_value(mdl.prop(item_handle, "dA13"))
dA14 = mdl.get_property_value(mdl.prop(item_handle, "dA14"))
dA21 = mdl.get_property_value(mdl.prop(item_handle, "dA21"))
dA22 = mdl.get_property_value(mdl.prop(item_handle, "dA22"))
dA23 = mdl.get_property_value(mdl.prop(item_handle, "dA23"))
dA24 = mdl.get_property_value(mdl.prop(item_handle, "dA24"))
dA31 = mdl.get_property_value(mdl.prop(item_handle, "dA31"))
dA32 = mdl.get_property_value(mdl.prop(item_handle, "dA32"))
dA33 = mdl.get_property_value(mdl.prop(item_handle, "dA33"))
dA34 = mdl.get_property_value(mdl.prop(item_handle, "dA34"))
dA41 = mdl.get_property_value(mdl.prop(item_handle, "dA41"))
dA42 = mdl.get_property_value(mdl.prop(item_handle, "dA42"))
dA43 = mdl.get_property_value(mdl.prop(item_handle, "dA43"))
dA44 = mdl.get_property_value(mdl.prop(item_handle, "dA44"))
dB11 = mdl.get_property_value(mdl.prop(item_handle, "dB11"))
dB12 = mdl.get_property_value(mdl.prop(item_handle, "dB12"))
dB13 = mdl.get_property_value(mdl.prop(item_handle, "dB13"))
dB21 = mdl.get_property_value(mdl.prop(item_handle, "dB21"))
dB22 = mdl.get_property_value(mdl.prop(item_handle, "dB22"))
dB23 = mdl.get_property_value(mdl.prop(item_handle, "dB23"))
dB31 = mdl.get_property_value(mdl.prop(item_handle, "dB31"))
dB32 = mdl.get_property_value(mdl.prop(item_handle, "dB32"))
dB33 = mdl.get_property_value(mdl.prop(item_handle, "dB33"))
dB41 = mdl.get_property_value(mdl.prop(item_handle, "dB41"))
dB42 = mdl.get_property_value(mdl.prop(item_handle, "dB42"))
dB43 = mdl.get_property_value(mdl.prop(item_handle, "dB43"))
Init_En = mdl.get_property_value(mdl.prop(item_handle, "Init_En"))
Init_switch = mdl.get_property_value(mdl.prop(item_handle, "Init_switch"))
V_ph_init = mdl.get_property_value(mdl.prop(item_handle, "V_ph_init"))
thet_ph_init = mdl.get_property_value(mdl.prop(item_handle, "thet_ph_init"))
V2M_t = mdl.get_property_value(mdl.prop(item_handle, "V2M_t"))
Mech_En = mdl.get_property_value(mdl.prop(item_handle, "Mech_En"))
gen_ts_en = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en"))
load_loadshape = mdl.get_property_value(mdl.prop(item_handle, "load_loadshape"))
loadshape_name = mdl.get_property_value(mdl.prop(item_handle, "loadshape_name"))
loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
loadshape_int = mdl.get_property_value(mdl.prop(item_handle, "loadshape_int"))
gen_ts_en_bit = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en_bit"))
T_mode = mdl.get_property_value(mdl.prop(item_handle, "T_mode"))
S_Ts = mdl.get_property_value(mdl.prop(item_handle, "S_Ts"))
Q_Ts = mdl.get_property_value(mdl.prop(item_handle, "Q_Ts"))
S_Ts_mode = mdl.get_property_value(mdl.prop(item_handle, "S_Ts_mode"))
T_Ts = mdl.get_property_value(mdl.prop(item_handle, "T_Ts"))
T_Ts_internal = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_internal"))
dssT = mdl.get_property_value(mdl.prop(item_handle, "dssT"))
dssnpts = mdl.get_property_value(mdl.prop(item_handle, "dssnpts"))
T_Ts_max = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_max"))
del_Ts = mdl.get_property_value(mdl.prop(item_handle, "del_Ts"))
Slen = mdl.get_property_value(mdl.prop(item_handle, "Slen"))
T_lim_low = mdl.get_property_value(mdl.prop(item_handle, "T_lim_low"))
T_lim_high = mdl.get_property_value(mdl.prop(item_handle, "T_lim_high"))
Ts_switch = mdl.get_property_value(mdl.prop(item_handle, "Ts_switch"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy
import math

PP = 60*basefreq/nom_rpm

if Init_En == True:
    Init_switch = 1
else:
    Init_switch = 0

phases = 3

if gen_ts_en:
    gen_ts_en_bit = 1
else:
    gen_ts_en_bit = 0

dssnpts = len(S_Ts)

S_Ts = loadshape
dssT = loadshape_int
Slen = len(S_Ts)

if T_mode == "Loadshape index":
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for S_val in S_vec1:
        T_Ts_internal[idxS] = idxS
        idxS += 1
    T_lim_low = T_Ts_internal[0]
    T_lim_high = T_Ts_internal[Slen-1]
elif T_mode == "Time":
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for T_val in T_Ts:
        T_Ts_internal[idxS] = T_val
        idxS += 1
    T_lim_low = T_Ts[0]
    T_lim_high = T_Ts[len(T_Ts)-1]
else:
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for S_val in S_vec1:
        T_Ts_internal[idxS] = idxS
        idxS += 1
    T_lim_low = T_Ts_internal[0]
    T_lim_high = T_Ts_internal[Slen-1]



if T_mode == "Loadshape index":
    Ts_switch = 0
elif T_mode == "Time":
    Ts_switch = 1
else:
    Ts_switch = 0



if G_mod == "Constant kW":
    model = 1
elif G_mod == "Constant admittance":
    model = 2
elif G_mod == "Constant kW, Constant kV":
    model = 3
elif G_mod == "Constant kW, Fixed Q":
    model = 4
elif G_mod == "Constant kW, Fixed Q (constant reactance)":
    model = 5
else:
    model = 3

kw = pf * kVA
kvar = kVA * ((1-pf**2)**0.5)

ws = basefreq * 2 * numpy.pi
ws_inv = 1/ws
Z_base = (1000*kv)*(1000*kv)/(1000*kVA)

rs = 0.01 * Z_base
Lmd = Xd * Z_base / ws
Lmq = Lmd
Lls = 0.05 * Lmd
Llfd = (((Xdp * Z_base / ws)-Lls)*Lmd)/(Lmd-((Xdp * Z_base / ws)-Lls))
Llkd = (((Xdpp * Z_base / ws)-Lls)*Llfd)/(Llfd-((Xdpp * Z_base / ws)-Lls))

rfd = (Xdp * Z_base)/XRdp
rkd = (Xdpp * Z_base)/(XRdp)

Llkq = Llkd
Llkq2 = Llkq
rkq = rkd
rkq2 = rkq

J = H * 1000 * kVA / (0.5*(ws / PP)*(ws / PP))

w_base = ws / 2
T_base = 1000 * kVA / w_base

Lmzq = 1/(1/Lmq + 1/Llkq + 1/Llkq2)
Lmzd = 1/(1/Lmd + 1/Llkd + 1/Llfd)

A = [[(rkq/Llkq)*((Lmzq/Llkq)-1), rkq*Lmzq/(Llkq*Llkq2), 0, 0],[rkq2*Lmzq/(Llkq*Llkq2), (rkq2/Llkq2)*((Lmzq/Llkq2)-1), 0, 0],[0, 0, (rkd/Llkd)*((Lmzd/Llkd)-1), rkd*Lmzd/(Llkd*Llfd)],[0, 0, rfd*Lmzd/(Llkd*Llfd), (rfd/Llfd)*((Lmzd/Llfd)-1)]]
B = [[rkq*Lmzq/Llkq, 0, 0],[rkq2*Lmzq/Llkq2, 0, 0],[0, rkd*Lmzd/Llkd, 0],[0, rfd*Lmzd/Llfd, 1]]

A = numpy.matrix(A)
B = numpy.matrix(B)

dA = numpy.linalg.inv((numpy.eye(4)-(0.5*Ts)*A)) * ((numpy.eye(4)+(0.5*Ts)*A))
dB = numpy.linalg.inv((numpy.eye(4)-(0.5*Ts)*A)) * (Ts*B)

dA11=dA[0, 0]
dA12=dA[0, 1]
dA13=dA[0, 2]
dA14=dA[0, 3]
dA21=dA[1, 0]
dA22=dA[1, 1]
dA23=dA[1, 2]
dA24=dA[1, 3]
dA31=dA[2, 0]
dA32=dA[2, 1]
dA33=dA[2, 2]
dA34=dA[2, 3]
dA41=dA[3, 0]
dA42=dA[3, 1]
dA43=dA[3, 2]
dA44=dA[3, 3]

dB11=dB[0, 0]
dB12=dB[0, 1]
dB13=dB[0, 2]
dB21=dB[1, 0]
dB22=dB[1, 1]
dB23=dB[1, 2]
dB31=dB[2, 0]
dB32=dB[2, 1]
dB33=dB[2, 2]
dB41=dB[3, 0]
dB42=dB[3, 1]
dB43=dB[3, 2]




mdl.set_property_value(mdl.prop(item_handle, "dA11"), dA11)
mdl.set_property_value(mdl.prop(item_handle, "dA12"), dA12)
mdl.set_property_value(mdl.prop(item_handle, "dA13"), dA13)
mdl.set_property_value(mdl.prop(item_handle, "dA14"), dA14)
mdl.set_property_value(mdl.prop(item_handle, "dA21"), dA21)
mdl.set_property_value(mdl.prop(item_handle, "dA22"), dA22)
mdl.set_property_value(mdl.prop(item_handle, "dA23"), dA23)
mdl.set_property_value(mdl.prop(item_handle, "dA24"), dA24)
mdl.set_property_value(mdl.prop(item_handle, "dA31"), dA31)
mdl.set_property_value(mdl.prop(item_handle, "dA32"), dA32)
mdl.set_property_value(mdl.prop(item_handle, "dA33"), dA33)
mdl.set_property_value(mdl.prop(item_handle, "dA34"), dA34)
mdl.set_property_value(mdl.prop(item_handle, "dA41"), dA41)
mdl.set_property_value(mdl.prop(item_handle, "dA42"), dA42)
mdl.set_property_value(mdl.prop(item_handle, "dA43"), dA43)
mdl.set_property_value(mdl.prop(item_handle, "dA44"), dA44)

mdl.set_property_value(mdl.prop(item_handle, "dB11"), dB11)
mdl.set_property_value(mdl.prop(item_handle, "dB12"), dB12)
mdl.set_property_value(mdl.prop(item_handle, "dB13"), dB13)
mdl.set_property_value(mdl.prop(item_handle, "dB21"), dB21)
mdl.set_property_value(mdl.prop(item_handle, "dB22"), dB22)
mdl.set_property_value(mdl.prop(item_handle, "dB23"), dB23)
mdl.set_property_value(mdl.prop(item_handle, "dB31"), dB31)
mdl.set_property_value(mdl.prop(item_handle, "dB32"), dB32)
mdl.set_property_value(mdl.prop(item_handle, "dB33"), dB33)
mdl.set_property_value(mdl.prop(item_handle, "dB41"), dB41)
mdl.set_property_value(mdl.prop(item_handle, "dB42"), dB42)
mdl.set_property_value(mdl.prop(item_handle, "dB43"), dB43)

mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)
mdl.set_property_value(mdl.prop(item_handle, "ws"), ws)
mdl.set_property_value(mdl.prop(item_handle, "ws_inv"), ws_inv)
mdl.set_property_value(mdl.prop(item_handle, "Z_base"), Z_base)
mdl.set_property_value(mdl.prop(item_handle, "rs"), rs)
mdl.set_property_value(mdl.prop(item_handle, "Lmd"), Lmd)
mdl.set_property_value(mdl.prop(item_handle, "Lmq"), Lmq)
mdl.set_property_value(mdl.prop(item_handle, "Lmzd"), Lmzd)
mdl.set_property_value(mdl.prop(item_handle, "Lmzq"), Lmzq)
mdl.set_property_value(mdl.prop(item_handle, "Lls"), Lls)
mdl.set_property_value(mdl.prop(item_handle, "Llfd"), Llfd)
mdl.set_property_value(mdl.prop(item_handle, "Llkd"), Llkd)
mdl.set_property_value(mdl.prop(item_handle, "Llkq"), Llkq)
mdl.set_property_value(mdl.prop(item_handle, "Llkq2"), Llkq2)
mdl.set_property_value(mdl.prop(item_handle, "rfd"), rfd)
mdl.set_property_value(mdl.prop(item_handle, "rkd"), rkd)
mdl.set_property_value(mdl.prop(item_handle, "rkq"), rkq)
mdl.set_property_value(mdl.prop(item_handle, "rkq2"), rkq2)
mdl.set_property_value(mdl.prop(item_handle, "J"), J)
mdl.set_property_value(mdl.prop(item_handle, "kw"), kw)
mdl.set_property_value(mdl.prop(item_handle, "w_base"), w_base)
mdl.set_property_value(mdl.prop(item_handle, "T_base"), T_base)
mdl.set_property_value(mdl.prop(item_handle, "phases"), phases)
mdl.set_property_value(mdl.prop(item_handle, "PP"), PP)
mdl.set_property_value(mdl.prop(item_handle, "model"), model)
mdl.set_property_value(mdl.prop(item_handle, "G_mod"), G_mod)
mdl.set_property_value(mdl.prop(item_handle, "kvar"), kvar)
mdl.set_property_value(mdl.prop(item_handle, "kv"), kv)

mdl.set_property_value(mdl.prop(item_handle, "Init_switch"), Init_switch)
mdl.set_property_value(mdl.prop(item_handle, "V_ph_init"), V_ph_init)
mdl.set_property_value(mdl.prop(item_handle, "thet_ph_init"), thet_ph_init)
mdl.set_property_value(mdl.prop(item_handle, "V2M_t"), V2M_t)
mdl.set_property_value(mdl.prop(item_handle, "Mech_En"), Mech_En)

mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en"), gen_ts_en)
mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en_bit"), gen_ts_en_bit)
mdl.set_property_value(mdl.prop(item_handle, "S_Ts"), S_Ts)
mdl.set_property_value(mdl.prop(item_handle, "Q_Ts"), Q_Ts)
mdl.set_property_value(mdl.prop(item_handle, "S_Ts_mode"), S_Ts_mode)
mdl.set_property_value(mdl.prop(item_handle, "T_Ts"), T_Ts)
mdl.set_property_value(mdl.prop(item_handle, "dssT"), dssT)
mdl.set_property_value(mdl.prop(item_handle, "dssnpts"), dssnpts)
mdl.set_property_value(mdl.prop(item_handle, "T_Ts_max"), T_Ts_max)
mdl.set_property_value(mdl.prop(item_handle, "del_Ts"), del_Ts)

mdl.set_property_value(mdl.prop(item_handle, "loadshape"), loadshape)
mdl.set_property_value(mdl.prop(item_handle, "loadshape_int"), loadshape_int)

mdl.set_property_value(mdl.prop(item_handle, "T_lim_low"), T_lim_low)
mdl.set_property_value(mdl.prop(item_handle, "T_lim_high"), T_lim_high)
mdl.set_property_value(mdl.prop(item_handle, "Ts_switch"), Ts_switch)
mdl.set_property_value(mdl.prop(item_handle, "Slen"), Slen)
mdl.set_property_value(mdl.prop(item_handle, "T_Ts_internal"), T_Ts_internal)

"""
mdl.set_handler_code(_Generator_mask, "pre_compile", _Generator_mask_pre_compile)

_Generator_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Wound rotor synchronous generator with constant-parameter VBR interface and initialization capability.</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Initialization is done in three steps. </p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Step-1: The machine starts as an ideal voltage source behind sstator impedance while the rotor is rotating at a constant speed. </p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Step-2: The machine electrical circuit is connected and fully enabled, while the rotor is still rotating at a constant speed.</p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Step-3: Full machine model is enabled including both electrical circuit and mechanical model.</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Note: When initializing the machine, two extra outputs (Vfd0 and Tm0) are provided indicating the amount of exciter voltage and mechanical torque which are internally applied to the model for seamless transition between modes. In this case, the external inputs to Vfd and Tm ports are added on top of Vfd0 and Tm0.</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The measurement signal port provides a 8x1 vectorized output including generator three-phase to neutral voltages in volts, three-phase currents in amps, electromagnetic torque in N.m and mechanical speed in rad/s.</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_Generator_mask, _Generator_mask_desc)
mdl.set_property_value(mdl.prop(_Generator_mask, "gen_ts_en"), "False")
mdl.set_property_value(mdl.prop(_Generator_mask, "global_basefreq"), "False")


# Component: Generator.C function2
_Generator_C_function2 = mdl.create_component(
    type_name="core/C function",
    parent=_Generator,
    name="C function2",
    rotation="up",
    flip="flip_none",
    position=(5032, 7624),
    hide_name=False,
    size=(240, 472)
)
mdl.set_property_value(mdl.prop(_Generator_C_function2, "global_variables"), "real thet_r_mem;real wr_k1;real wr_k2;real wm_mem;real psifd_mem;real psikq_mem;real wr_est;real Te_mem;real psikq2_mem;real psikd_mem;real ppsikq;real ppsikq2;real ppsikd;real ppsifd;")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "init_fnc"), "/*Begin code section*/
psifd_mem = 0.0;
psikq_mem = 0.0;
psikq2_mem = 0.0;
psikd_mem = 0.0;
wr_k1 = 0.0;
wr_k2 = 0.0;
wm_mem = 0.0;
thet_r_mem = angle_in-0;
wr_est = 0.0;
Te_mem = 0.0;
/*End code section*/")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "input_terminals"), "real dt;real vfd;real isq;real isd;real Tm;inherit Tm_mem;inherit M_inp;inherit Wm_inp;inherit pisq;inherit eq_init;inherit ed_init;inherit V2S;inherit S2M;inherit angle_in;")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "input_terminals_feedthrough"), "True;True;True;True;True;True;True;True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "input_terminals_show_labels"), "True;True;True;True;True;True;True;True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "output_fnc"), "/*Begin code section*/
if (V2S == 0) {
    psikq = -ed_init*ws_inv;
    psikq2 = -ed_init*ws_inv;
    psikd = eq_init*ws_inv;
    psifd = eq_init*ws_inv + Llfd*(eq_init*ws_inv - isd*Lmd)/Lmd;
}
else {
    psikq = dA11*psikq_mem + dA12*psikq2_mem + dA13*psikd_mem + dA14*psifd_mem + dB11*isq + dB12*isd + dB13*vfd;
    psikq2 = dA21*psikq_mem + dA22*psikq2_mem + dA23*psikd_mem + dA24*psifd_mem + dB21*isq + dB22*isd + dB23*vfd;
    psikd = dA31*psikq_mem + dA32*psikq2_mem + dA33*psikd_mem + dA34*psifd_mem + dB31*isq + dB32*isd + dB33*vfd;
    psifd = dA41*psikq_mem + dA42*psikq2_mem + dA43*psikd_mem + dA44*psifd_mem + dB41*isq + dB42*isd + dB43*vfd;
}

psimd = Lmzd*(isd+psikd/Llkd+psifd/Llfd);
psimq = Lmzq*(isq+psikq/Llkq+psikq2/Llkq2);

ppsikq = (-rkq/Llkq)*(psikq - psimq);
ppsikq2 = (-rkq2/Llkq2)*(psikq2 - psimq);
ppsikd = (-rkd/Llkd)*(psikd - psimd);
ppsifd = (-rfd/Llfd)*(psifd - psimd)+vfd;

wr_est = 2*wr_k1 - 1*wr_k2;

if (V2S == 0) {
    eq = wr_est*psimd - wr_est*Lmzd*isd;
    ed = -wr_est*psimq + wr_est*Lmzd*isq;
}
else {
    eq = wr_est*psimd - wr_est*Lmzd*isd + (Lmzq-Lmzd)*pisq + Lmzq*ppsikq/Llkq + Lmzq*ppsikq2/Llkq2;
    ed = -wr_est*psimq + wr_est*Lmzd*isq + Lmzd*ppsikd/Llkd + Lmzd*ppsifd/Llfd;
}


Te = (1.5*PP)*(isq*psimd-isd*psimq);

if (S2M == 0) {
    wm = Wm_inp;
}
else {
    if (M_inp == 0) {
        wm = wm_mem + (dt/2.0/J)*(Te-Tm + Te_mem - Tm_mem);
    }
    else {
        wm = Wm_inp;
    }
}

wr = PP*wm;

thet_r = 0 + (dt/2)*(wr+wr_k1)+thet_r_mem;
if (thet_r > 2.0*3.1415926535897932384626433832795) {
    thet_r -= 2.0*3.1415926535897932384626433832795;
}

psifd_mem = psifd;
psikq_mem = psikq;
psikd_mem = psikd;
psikq2_mem = psikq2;
wm_mem = wm;
wr_k2 = wr_k1;
wr_k1 = wr;
thet_r_mem = thet_r;
Te_mem = Te;
/*End code section*/")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "output_terminals"), "real psifd;real psikq;real psimd;real psimq;real ed;real eq;real Te;real wr;real thet_r;real wm;real psikq2;real psikd;")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "output_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "output_terminals_feedthrough"), "True;True;True;True;True;True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "output_terminals_show_labels"), "True;True;True;True;True;True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Generator_C_function2, "parameters"), "real dA11;real dA12;real dA13;real dA14;real dB11;real dB12;real dB13;real Llfd;real Lmd;real J;real PP;real rs;real rfd;real rkd;real rkq;real Llkd;real Llkq;real Lls;real Lmq;real ws;real dA21;real dA22;real dA23;real dA24;real dA31;real dA32;real dA33;real dA34;real dA41;real dA42;real dA43;real dA44;real dB21;real dB22;real dB23;real dB31;real dB32;real dB33;real dB41;real dB42;real dB43;real Lmzd;real Lmzq;real rkq2;real Llkq2;real ws_inv;")


# Component: Generator.R1
_Generator_R1 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Generator,
    name="R1",
    rotation="up",
    flip="flip_none",
    position=(5832, 8280),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_R1, "resistance"), "rs")


# Component: Generator.L2
_Generator_L2 = mdl.create_component(
    type_name="core/Inductor",
    parent=_Generator,
    name="L2",
    rotation="up",
    flip="flip_none",
    position=(5736, 8376),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_L2, "inductance"), "Lls+Lmzd")


# Component: Generator.L1
_Generator_L1 = mdl.create_component(
    type_name="core/Inductor",
    parent=_Generator,
    name="L1",
    rotation="up",
    flip="flip_none",
    position=(5736, 8280),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_L1, "inductance"), "Lls+Lmzd")


# Component: Generator.Vc
_Generator_Vc = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Generator,
    name="Vc",
    rotation="right",
    flip="flip_none",
    position=(5664, 8592),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Vc, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Vc, "sig_output"), "True")


# Component: Generator.Vb
_Generator_Vb = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Generator,
    name="Vb",
    rotation="right",
    flip="flip_none",
    position=(5584, 8592),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Vb, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Vb, "sig_output"), "True")


# Component: Generator.R2
_Generator_R2 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Generator,
    name="R2",
    rotation="up",
    flip="flip_none",
    position=(5832, 8376),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_R2, "resistance"), "rs")


# Component: Generator.ec
_Generator_ec = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Generator,
    name="ec",
    rotation="up",
    flip="flip_none",
    position=(5928, 8472),
    hide_name=False,
    size=(64, 32)
)


# Component: Generator.Va
_Generator_Va = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Generator,
    name="Va",
    rotation="right",
    flip="flip_none",
    position=(5496, 8592),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Va, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Va, "sig_output"), "True")


# Component: Generator.R3
_Generator_R3 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Generator,
    name="R3",
    rotation="up",
    flip="flip_none",
    position=(5832, 8472),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_R3, "resistance"), "rs")


# Component: Generator.L3
_Generator_L3 = mdl.create_component(
    type_name="core/Inductor",
    parent=_Generator,
    name="L3",
    rotation="up",
    flip="flip_none",
    position=(5736, 8472),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_L3, "inductance"), "Lls+Lmzd")


# Component: Generator.ea
_Generator_ea = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Generator,
    name="ea",
    rotation="up",
    flip="flip_none",
    position=(5928, 8280),
    hide_name=False,
    size=(64, 32)
)


# Component: Generator.eb
_Generator_eb = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Generator,
    name="eb",
    rotation="up",
    flip="flip_none",
    position=(5928, 8376),
    hide_name=False,
    size=(64, 32)
)


# Component: Generator.Vab
_Generator_Vab = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Generator,
    name="Vab",
    rotation="right",
    flip="flip_none",
    position=(5392, 8328),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Vab, "execution_rate"), "Ts")


# Component: Generator.Vbc
_Generator_Vbc = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Generator,
    name="Vbc",
    rotation="right",
    flip="flip_none",
    position=(5392, 8424),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Vbc, "execution_rate"), "Ts")


# Component: Generator.Ia
_Generator_Ia = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_Generator,
    name="Ia",
    rotation="up",
    flip="flip_none",
    position=(5256, 8280),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Ia, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Ia, "sig_output"), "True")


# Component: Generator.Ib
_Generator_Ib = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_Generator,
    name="Ib",
    rotation="up",
    flip="flip_none",
    position=(5256, 8376),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Ib, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Ib, "sig_output"), "True")


# Component: Generator.Ic
_Generator_Ic = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_Generator,
    name="Ic",
    rotation="up",
    flip="flip_none",
    position=(5256, 8472),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Ic, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Ic, "sig_output"), "True")


# Component: Generator.Constant3
_Generator_Constant3 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant3",
    rotation="up",
    flip="flip_none",
    position=(6104, 7440),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant3, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant3, "value"), "0.0")


# Component: Generator.dq to abc1
_Generator_dq_to_abc1 = mdl.create_component(
    type_name="core/dq to abc",
    parent=_Generator,
    name="dq to abc1",
    rotation="up",
    flip="flip_none",
    position=(6264, 7432),
    hide_name=True,
    size=(48, 80)
)
mdl.set_property_value(mdl.prop(_Generator_dq_to_abc1, "execution_rate"), "inherit")


# Component: Generator.abc to dq1
_Generator_abc_to_dq1 = mdl.create_component(
    type_name="core/abc to dq",
    parent=_Generator,
    name="abc to dq1",
    rotation="up",
    flip="flip_none",
    position=(6264, 7544),
    hide_name=True,
    size=(48, 80)
)


# Component: Generator.Constant4
_Generator_Constant4 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant4",
    rotation="up",
    flip="flip_none",
    position=(4816, 7416),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant4, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant4, "value"), "Ts")


# Component: Generator.Unit Delay2
_Generator_Unit_Delay2 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay2",
    rotation="up",
    flip="flip_none",
    position=(4840, 7576),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Constant5
_Generator_Constant5 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant5",
    rotation="up",
    flip="flip_none",
    position=(4800, 7608),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant5, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant5, "value"), "0")


# Component: Generator.Gain1
_Generator_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(5560, 7920),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Gain1, "gain"), "3")


# Component: Generator.Constant6
_Generator_Constant6 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant6",
    rotation="up",
    flip="flip_none",
    position=(5704, 8120),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant6, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant6, "value"), "0.5/Ts")


# Component: Generator.Unit Delay3
_Generator_Unit_Delay3 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay3",
    rotation="up",
    flip="flip_none",
    position=(5560, 7960),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Gain2
_Generator_Gain2 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator,
    name="Gain2",
    rotation="up",
    flip="flip_none",
    position=(5648, 7960),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Gain2, "gain"), "4")


# Component: Generator.Sum1
_Generator_Sum1 = mdl.create_component(
    type_name="core/Sum",
    parent=_Generator,
    name="Sum1",
    rotation="right",
    flip="flip_none",
    position=(5704, 8048),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Generator_Sum1, "signs"), "+-+")


# Component: Generator.Product1
_Generator_Product1 = mdl.create_component(
    type_name="core/Product",
    parent=_Generator,
    name="Product1",
    rotation="up",
    flip="flip_none",
    position=(5792, 8088),
    hide_name=True,
    size=(0, 0)
)


# Component: Generator.Unit Delay4
_Generator_Unit_Delay4 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay4",
    rotation="up",
    flip="flip_none",
    position=(5648, 8000),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Unit Delay8
_Generator_Unit_Delay8 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay8",
    rotation="up",
    flip="flip_none",
    position=(6336, 7520),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Unit Delay9
_Generator_Unit_Delay9 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay9",
    rotation="up",
    flip="flip_none",
    position=(6392, 7544),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Tm
_Generator_Tm = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="Tm",
    rotation="right",
    flip="flip_none",
    position=(4744, 7584),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Tm, "signal_type"), "torque")


# Component: Generator.Te
_Generator_Te = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="Te",
    rotation="up",
    flip="flip_none",
    position=(5760, 7880),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Te, "signal_type"), "torque")


# Component: Generator.vfd_p
_Generator_vfd_p = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="vfd_p",
    rotation="up",
    flip="flip_none",
    position=(6008, 7592),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_vfd_p, "signal_type"), "voltage")


# Component: Generator.Constant13
_Generator_Constant13 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant13",
    rotation="up",
    flip="flip_none",
    position=(4760, 7640),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant13, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant13, "value"), "ws/PP")


# Component: Generator.psifd
_Generator_psifd = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="psifd",
    rotation="up",
    flip="flip_none",
    position=(5256, 7448),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_psifd, "signal_type"), "flux")


# Component: Generator.Tm_p
_Generator_Tm_p = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="Tm_p",
    rotation="up",
    flip="flip_none",
    position=(5928, 7880),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Tm_p, "signal_type"), "torque")


# Component: Generator.Gain3
_Generator_Gain3 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator,
    name="Gain3",
    rotation="up",
    flip="flip_none",
    position=(5520, 7648),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Gain3, "gain"), "ws_inv")


# Component: Generator.Gain4
_Generator_Gain4 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator,
    name="Gain4",
    rotation="up",
    flip="flip_none",
    position=(5520, 7688),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Gain4, "gain"), "Lmd")


# Component: Generator.Sum2
_Generator_Sum2 = mdl.create_component(
    type_name="core/Sum",
    parent=_Generator,
    name="Sum2",
    rotation="up",
    flip="flip_none",
    position=(5600, 7656),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Generator_Sum2, "signs"), "+-")


# Component: Generator.Gain5
_Generator_Gain5 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator,
    name="Gain5",
    rotation="up",
    flip="flip_none",
    position=(5680, 7656),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Gain5, "gain"), "1/Lmd")


# Component: Generator.w_mech
_Generator_w_mech = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="w_mech",
    rotation="down",
    flip="flip_none",
    position=(6704, 7928),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_w_mech, "signal_type"), "angular speed")


# Component: Generator.psimd
_Generator_psimd = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="psimd",
    rotation="up",
    flip="flip_none",
    position=(5344, 7512),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_psimd, "signal_type"), "flux")


# Component: Generator.Gain6
_Generator_Gain6 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator,
    name="Gain6",
    rotation="up",
    flip="flip_none",
    position=(5744, 7656),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Gain6, "gain"), "rfd")


# Component: Generator.Constant14
_Generator_Constant14 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant14",
    rotation="up",
    flip="flip_none",
    position=(4248, 7664),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant14, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant14, "value"), "0.0")


# Component: Generator.Signal switch1
_Generator_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(5880, 7640),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Signal_switch1, "threshold"), "0.5")


# Component: Generator.Sum3
_Generator_Sum3 = mdl.create_component(
    type_name="core/Sum",
    parent=_Generator,
    name="Sum3",
    rotation="up",
    flip="flip_vertical",
    position=(4584, 7432),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Generator_Sum3, "signs"), "++")


# Component: Generator.Limit1
_Generator_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_Generator,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(5808, 7656),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Limit1, "lower_limit"), "0")


# Component: Generator.Unit Delay10
_Generator_Unit_Delay10 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay10",
    rotation="down",
    flip="flip_none",
    position=(5752, 7568),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Discrete Transfer Function1
_Generator_Discrete_Transfer_Function1 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_Generator,
    name="Discrete Transfer Function1",
    rotation="up",
    flip="flip_none",
    position=(5864, 8088),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Discrete_Transfer_Function1, "a_coeff"), "[0.1,1]")
mdl.set_property_value(mdl.prop(_Generator_Discrete_Transfer_Function1, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_Generator_Discrete_Transfer_Function1, "method"), "Euler")


# Component: Generator.Sum4
_Generator_Sum4 = mdl.create_component(
    type_name="core/Sum",
    parent=_Generator,
    name="Sum4",
    rotation="up",
    flip="flip_vertical",
    position=(4584, 7528),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Generator_Sum4, "signs"), "++")


# Component: Generator.Signal switch2
_Generator_Signal_switch2 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator,
    name="Signal switch2",
    rotation="up",
    flip="flip_none",
    position=(5760, 7824),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Signal_switch2, "threshold"), "0.5")


# Component: Generator.Unit Delay11
_Generator_Unit_Delay11 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay11",
    rotation="down",
    flip="flip_none",
    position=(5648, 7752),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Unit Delay13
_Generator_Unit_Delay13 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Generator,
    name="Unit Delay13",
    rotation="up",
    flip="flip_none",
    position=(5840, 7824),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.psimq
_Generator_psimq = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator,
    name="psimq",
    rotation="up",
    flip="flip_none",
    position=(5288, 7544),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_psimq, "signal_type"), "flux")


# Component: Generator.Signal switch3
_Generator_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(4736, 7448),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Signal_switch3, "threshold"), "0.5")


# Component: Generator.Constant18
_Generator_Constant18 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant18",
    rotation="up",
    flip="flip_none",
    position=(4616, 7376),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant18, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant18, "value"), "Init_switch")


# Component: Generator.Signal switch4
_Generator_Signal_switch4 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator,
    name="Signal switch4",
    rotation="up",
    flip="flip_none",
    position=(4672, 7544),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Signal_switch4, "threshold"), "0.5")


# Component: Generator.Comparator1
_Generator_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Generator,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(5616, 7456),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Comparator2
_Generator_Comparator2 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Generator,
    name="Comparator2",
    rotation="up",
    flip="flip_none",
    position=(5616, 7520),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Constant19
_Generator_Constant19 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant19",
    rotation="up",
    flip="flip_none",
    position=(4152, 7584),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant19, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant19, "value"), "thet_ph_init")


# Component: Generator.Constant20
_Generator_Constant20 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant20",
    rotation="up",
    flip="flip_none",
    position=(4152, 7624),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant20, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant20, "value"), "V_ph_init")


# Component: Generator.Gain7
_Generator_Gain7 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator,
    name="Gain7",
    rotation="up",
    flip="flip_none",
    position=(4224, 7624),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Gain7, "gain"), "1414.2135")


# Component: Generator.Clock1
_Generator_Clock1 = mdl.create_component(
    type_name="core/Clock",
    parent=_Generator,
    name="Clock1",
    rotation="right",
    flip="flip_none",
    position=(5560, 7408),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Clock1, "execution_rate"), "Ts")


# Component: Generator.Constant21
_Generator_Constant21 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant21",
    rotation="up",
    flip="flip_none",
    position=(5520, 7464),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant21, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant21, "value"), "V2M_t")


# Component: Generator.Constant23
_Generator_Constant23 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant23",
    rotation="up",
    flip="flip_none",
    position=(5520, 7528),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant23, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant23, "value"), "Mech_En")


# Component: Generator.Rate Transition1
_Generator_Rate_Transition1 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Generator,
    name="Rate Transition1",
    rotation="up",
    flip="flip_none",
    position=(4240, 7712),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Rate_Transition1, "execution_rate"), "Ts")


# Component: Generator.Rate Transition2
_Generator_Rate_Transition2 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Generator,
    name="Rate Transition2",
    rotation="up",
    flip="flip_none",
    position=(4240, 7768),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Rate_Transition2, "execution_rate"), "Ts")


# Component: Generator.Constant24
_Generator_Constant24 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant24",
    rotation="up",
    flip="flip_none",
    position=(4472, 7872),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant24, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant24, "value"), "Init_switch")


# Component: Generator.Signal switch5
_Generator_Signal_switch5 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator,
    name="Signal switch5",
    rotation="left",
    flip="flip_none",
    position=(4632, 7808),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Signal_switch5, "threshold"), "0.5")


# Component: Generator.Signal switch6
_Generator_Signal_switch6 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator,
    name="Signal switch6",
    rotation="left",
    flip="flip_none",
    position=(4752, 7872),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Signal_switch6, "threshold"), "0.5")


# Component: Generator.Constant25
_Generator_Constant25 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant25",
    rotation="up",
    flip="flip_none",
    position=(4608, 7936),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant25, "execution_rate"), "Ts")


# Component: Generator.Vca
_Generator_Vca = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Generator,
    name="Vca",
    rotation="left",
    flip="flip_none",
    position=(5448, 8424),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Generator_Vca, "execution_rate"), "Ts")


# Component: Generator.Bus Join3
_Generator_Bus_Join3 = mdl.create_component(
    type_name="core/Bus Join",
    parent=_Generator,
    name="Bus Join3",
    rotation="right",
    flip="flip_none",
    position=(6800, 7992),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Generator_Bus_Join3, "inputs"), "8")


# Component: Generator.Constant26
_Generator_Constant26 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant26",
    rotation="up",
    flip="flip_none",
    position=(6696, 8200),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant26, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant26, "value"), "Init_switch")


# Component: Generator.Bus Join4
_Generator_Bus_Join4 = mdl.create_component(
    type_name="core/Bus Join",
    parent=_Generator,
    name="Bus Join4",
    rotation="right",
    flip="flip_none",
    position=(6768, 8568),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Generator_Bus_Join4, "inputs"), "11")


# Component: Generator.Constant27
_Generator_Constant27 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant27",
    rotation="up",
    flip="flip_none",
    position=(6656, 8224),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant27, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant27, "value"), "kw")


# Component: Generator.Constant28
_Generator_Constant28 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant28",
    rotation="up",
    flip="flip_none",
    position=(6696, 8248),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant28, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant28, "value"), "kvar")


# Component: Generator.Constant29
_Generator_Constant29 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant29",
    rotation="up",
    flip="flip_none",
    position=(6656, 8272),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant29, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant29, "value"), "kv")


# Component: Generator.Constant30
_Generator_Constant30 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant30",
    rotation="up",
    flip="flip_none",
    position=(6656, 8320),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant30, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant30, "value"), "PP")


# Component: Generator.Constant31
_Generator_Constant31 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant31",
    rotation="up",
    flip="flip_none",
    position=(6696, 8296),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant31, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant31, "value"), "ws")


# Component: Generator.Termination60
_Generator_Termination60 = mdl.create_component(
    type_name="core/Termination",
    parent=_Generator,
    name="Termination60",
    rotation="up",
    flip="flip_none",
    position=(5280, 7768),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Termination61
_Generator_Termination61 = mdl.create_component(
    type_name="core/Termination",
    parent=_Generator,
    name="Termination61",
    rotation="up",
    flip="flip_none",
    position=(5216, 7800),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Termination62
_Generator_Termination62 = mdl.create_component(
    type_name="core/Termination",
    parent=_Generator,
    name="Termination62",
    rotation="up",
    flip="flip_none",
    position=(5280, 7672),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Termination63
_Generator_Termination63 = mdl.create_component(
    type_name="core/Termination",
    parent=_Generator,
    name="Termination63",
    rotation="right",
    flip="flip_none",
    position=(6344, 7592),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.Termination64
_Generator_Termination64 = mdl.create_component(
    type_name="core/Termination",
    parent=_Generator,
    name="Termination64",
    rotation="up",
    flip="flip_none",
    position=(5216, 7480),
    hide_name=True,
    size=(None, None)
)


# Component: Generator.TS_module
_Generator_TS_module = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Generator,
    name="TS_module",
    rotation="up",
    flip="flip_none",
    position=(6440, 8504),
    hide_name=False,
    size=(112, 72)
)
_Generator_TS_module_mask = mdl.create_mask(_Generator_TS_module)
_Generator_TS_module_mask_P_nom = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="P_nom",
    label="Nominal active power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kW"
)

_Generator_TS_module_mask_Q_nom = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="Q_nom",
    label="Nominal reactive power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kVAR"
)

_Generator_TS_module_mask_S_vec = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="S_vec",
    label="Load profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="pu"
)

_Generator_TS_module_mask_S_vec1 = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="S_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_S_vec2 = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="S_vec2",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_P_vec1 = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="P_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_Plen = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="Plen",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_Q_vec1 = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="Q_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_T_vecP = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="T_vecP",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_T_vecQ = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="T_vecQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_P_mode = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="P_mode",
    label="Power profile mode",
    widget="combo",
    combo_values=['Manual input', 'Loop cycle'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Generator_TS_module_mask_P_mode_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT
comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "Loop cycle":
    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    T_def = mdl.get_item("Constant5", parent=comp_handle, item_type=ITEM_COMPONENT)

    if T_ext:
        mdl.delete_item(T_ext)

    conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not conn_T_int:
        mdl.create_connection(mdl.term(T_inp, "in"), mdl.term(T_def, "out"), "connT")

else:
    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_T_int:
        mdl.delete_item(conn_T_int)

    if not T_ext:
        T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                            terminal_position=("left", 1),
                            position=(7237, 8437))

    mdl.create_connection(mdl.term(T_inp, "in"), T_ext, "connT")

"""
mdl.set_handler_code(_Generator_TS_module_mask_P_mode, "property_value_changed", _Generator_TS_module_mask_P_mode_property_value_changed)


_Generator_TS_module_mask_P_mode_property_value_edited = """
if new_value == "Manual input":
    mdl.disable_property(mdl.prop(container_handle, "Tmax"))
    mdl.disable_property(mdl.prop(container_handle, "Tdel"))
    mdl.enable_property(mdl.prop(container_handle, "T_vec"))
else:
    mdl.enable_property(mdl.prop(container_handle, "Tmax"))
    mdl.enable_property(mdl.prop(container_handle, "Tdel"))
    mdl.disable_property(mdl.prop(container_handle, "T_vec"))

"""
mdl.set_handler_code(_Generator_TS_module_mask_P_mode, "property_value_edited", _Generator_TS_module_mask_P_mode_property_value_edited)

_Generator_TS_module_mask_loop_en = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="loop_en",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Generator_TS_module_mask_T_vec = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="T_vec",
    label="Time profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="h"
)

_Generator_TS_module_mask_Tmax = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="Tmax",
    label="Power profile loop cycle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="",
    unit="s"
)

_Generator_TS_module_mask_Tdel = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="Tdel",
    label="Profile start delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="",
    unit="s"
)

_Generator_TS_module_mask_Texec = mdl.create_property(
    item_handle=_Generator_TS_module_mask,
    name="Texec",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="s"
)


_Generator_TS_module_mask_pre_compile = """
# HEADER START
P_nom = mdl.get_property_value(mdl.prop(item_handle, "P_nom"))
Q_nom = mdl.get_property_value(mdl.prop(item_handle, "Q_nom"))
S_vec = mdl.get_property_value(mdl.prop(item_handle, "S_vec"))
S_vec1 = mdl.get_property_value(mdl.prop(item_handle, "S_vec1"))
S_vec2 = mdl.get_property_value(mdl.prop(item_handle, "S_vec2"))
P_vec1 = mdl.get_property_value(mdl.prop(item_handle, "P_vec1"))
Plen = mdl.get_property_value(mdl.prop(item_handle, "Plen"))
Q_vec1 = mdl.get_property_value(mdl.prop(item_handle, "Q_vec1"))
T_vecP = mdl.get_property_value(mdl.prop(item_handle, "T_vecP"))
T_vecQ = mdl.get_property_value(mdl.prop(item_handle, "T_vecQ"))
P_mode = mdl.get_property_value(mdl.prop(item_handle, "P_mode"))
loop_en = mdl.get_property_value(mdl.prop(item_handle, "loop_en"))
T_vec = mdl.get_property_value(mdl.prop(item_handle, "T_vec"))
Tmax = mdl.get_property_value(mdl.prop(item_handle, "Tmax"))
Tdel = mdl.get_property_value(mdl.prop(item_handle, "Tdel"))
Texec = mdl.get_property_value(mdl.prop(item_handle, "Texec"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy as np
import math

if P_mode == "Manual input":
    loop_en = 0
else:
    loop_en = 1


Plen = len(S_vec)
S_vec2 = S_vec

S_vec1 = [0] * Plen

idxS = 0
for S_val in S_vec:
    S_vec1[idxS] = S_vec[idxS]
    idxS += 1


T_vecP = [0] * Plen
T_vecQ = [0] * Plen

P_vec1 = [P_nom*i for i in S_vec2]
Q_vec1 = [Q_nom*i for i in S_vec2]

TstepP = Tmax/(Plen - 1)
TstepQ = Tmax/(Plen - 1)

idxP = 0
for P_val in S_vec1:

    if loop_en == 1:
        T_vecP[idxP] = idxP * TstepP
    else:
        T_vecP[idxP] = T_vec[idxP]
    idxP += 1

idxQ = 0
for Q_val in S_vec1:

    if loop_en == 1:
        T_vecQ[idxQ] = idxQ * TstepQ
    else:
        T_vecQ[idxQ] = T_vec[idxQ]
    idxQ += 1






mdl.set_property_value(mdl.prop(item_handle, "P_vec1"), P_vec1)
mdl.set_property_value(mdl.prop(item_handle, "Q_vec1"), Q_vec1)
mdl.set_property_value(mdl.prop(item_handle, "T_vecP"), T_vecP)
mdl.set_property_value(mdl.prop(item_handle, "T_vecQ"), T_vecQ)
mdl.set_property_value(mdl.prop(item_handle, "Tdel"), Tdel)
mdl.set_property_value(mdl.prop(item_handle, "Tmax"), Tmax)
mdl.set_property_value(mdl.prop(item_handle, "loop_en"), loop_en)
mdl.set_property_value(mdl.prop(item_handle, "P_nom"), P_nom)
mdl.set_property_value(mdl.prop(item_handle, "Q_nom"), Q_nom)
mdl.set_property_value(mdl.prop(item_handle, "Plen"), Plen)

mdl.set_property_value(mdl.prop(item_handle, "S_vec"), S_vec)
mdl.set_property_value(mdl.prop(item_handle, "S_vec1"), S_vec1)
mdl.set_property_value(mdl.prop(item_handle, "S_vec2"), S_vec2)

mdl.set_property_value(mdl.prop(item_handle, "Texec"), Texec)

"""
mdl.set_handler_code(_Generator_TS_module_mask, "pre_compile", _Generator_TS_module_mask_pre_compile)

_Generator_TS_module_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_Generator_TS_module_mask, _Generator_TS_module_mask_desc)
mdl.set_property_value(mdl.prop(_Generator_TS_module_mask, "P_mode"), "Manual input")
mdl.set_property_value(mdl.prop(_Generator_TS_module_mask, "T_vec"), "T_Ts_internal")


# Component: Generator.TS_module.Constant5
_Generator_TS_module_Constant5 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator_TS_module,
    name="Constant5",
    rotation="up",
    flip="flip_none",
    position=(6840, 8176),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant5, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant5, "value"), "0")


# Component: Generator.TS_module.Signal switch2
_Generator_TS_module_Signal_switch2 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator_TS_module,
    name="Signal switch2",
    rotation="up",
    flip="flip_none",
    position=(7176, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Signal_switch2, "threshold"), "0.5")


# Component: Generator.TS_module.Constant6
_Generator_TS_module_Constant6 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator_TS_module,
    name="Constant6",
    rotation="up",
    flip="flip_none",
    position=(7112, 8048),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant6, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant6, "value"), "loop_en")


# Component: Generator.TS_module.Clock1
_Generator_TS_module_Clock1 = mdl.create_component(
    type_name="core/Clock",
    parent=_Generator_TS_module,
    name="Clock1",
    rotation="up",
    flip="flip_none",
    position=(6824, 8000),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Clock1, "execution_rate"), "Texec")


# Component: Generator.TS_module.Signal switch3
_Generator_TS_module_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator_TS_module,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(7456, 8160),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Signal_switch3, "threshold"), "0.5")


# Component: Generator.TS_module.d_rel
_Generator_TS_module_d_rel = mdl.create_component(
    type_name="core/Probe",
    parent=_Generator_TS_module,
    name="d_rel",
    rotation="up",
    flip="flip_none",
    position=(6928, 7936),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_d_rel, "signal_name"), "Delay release")


# Component: Generator.TS_module.Comparator1
_Generator_TS_module_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Generator_TS_module,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(6928, 8000),
    hide_name=False,
    size=(None, None)
)


# Component: Generator.TS_module.Constant7
_Generator_TS_module_Constant7 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator_TS_module,
    name="Constant7",
    rotation="up",
    flip="flip_none",
    position=(7400, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant7, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant7, "value"), "loop_en")


# Component: Generator.TS_module.Constant1
_Generator_TS_module_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator_TS_module,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(6824, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant1, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant1, "value"), "Tdel")


# Component: Generator.TS_module.Gain1
_Generator_TS_module_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_Generator_TS_module,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(7384, 8352),
    hide_name=False,
    size=(None, None)
)


# Component: Generator.TS_module.Signal switch1
_Generator_TS_module_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator_TS_module,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(7008, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Signal_switch1, "threshold"), "0.5")


# Component: Generator.TS_module.Constant3
_Generator_TS_module_Constant3 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator_TS_module,
    name="Constant3",
    rotation="up",
    flip="flip_none",
    position=(6840, 8128),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant3, "execution_rate"), "Texec")


# Component: Generator.TS_module.Integrator1
_Generator_TS_module_Integrator1 = mdl.create_component(
    type_name="core/Integrator",
    parent=_Generator_TS_module,
    name="Integrator1",
    rotation="up",
    flip="flip_none",
    position=(7352, 8152),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Integrator1, "show_reset"), "rising")
mdl.set_property_value(mdl.prop(_Generator_TS_module_Integrator1, "show_state"), "True")


# Component: Generator.TS_module.Constant4
_Generator_TS_module_Constant4 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator_TS_module,
    name="Constant4",
    rotation="up",
    flip="flip_none",
    position=(7152, 8304),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant4, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Generator_TS_module_Constant4, "value"), "Tmax")


# Component: Generator.TS_module.Comparator2
_Generator_TS_module_Comparator2 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Generator_TS_module,
    name="Comparator2",
    rotation="up",
    flip="flip_none",
    position=(7240, 8296),
    hide_name=False,
    size=(None, None)
)


# Component: Generator.TS_module.1D look-up table1
_Generator_TS_module_1D_look_up_table1 = mdl.create_component(
    type_name="core/1D look-up table",
    parent=_Generator_TS_module,
    name="1D look-up table1",
    rotation="up",
    flip="flip_none",
    position=(7608, 8008),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_1D_look_up_table1, "in_vec_x"), "T_vecP")
mdl.set_property_value(mdl.prop(_Generator_TS_module_1D_look_up_table1, "out_vec_f_x"), "P_vec1")


# Component: Generator.TS_module.1D look-up table2
_Generator_TS_module_1D_look_up_table2 = mdl.create_component(
    type_name="core/1D look-up table",
    parent=_Generator_TS_module,
    name="1D look-up table2",
    rotation="up",
    flip="flip_none",
    position=(7608, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_TS_module_1D_look_up_table2, "in_vec_x"), "T_vecQ")
mdl.set_property_value(mdl.prop(_Generator_TS_module_1D_look_up_table2, "out_vec_f_x"), "Q_vec1")


# Port: Generator.TS_module.P
_Generator_TS_module_P = mdl.create_port(
    name="P",
    parent=_Generator_TS_module,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7976, 8008)
)

# Port: Generator.TS_module.Q
_Generator_TS_module_Q = mdl.create_port(
    name="Q",
    parent=_Generator_TS_module,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7976, 8192)
)

# Port: Generator.TS_module.T
_Generator_TS_module_T = mdl.create_port(
    name="T",
    parent=_Generator_TS_module,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7240, 8440)
)

# Junction: Generator.TS_module.Junction3
_Generator_TS_module_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_Generator_TS_module,
    kind="sp",
    position=(6952, 8176)
)

# Junction: Generator.TS_module.Junction4
_Generator_TS_module_Junction4 = mdl.create_junction(
    name="Junction4",
    parent=_Generator_TS_module,
    kind="sp",
    position=(7496, 8160)
)

# Component: Generator.Constant32
_Generator_Constant32 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant32",
    rotation="up",
    flip="flip_none",
    position=(6656, 8360),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant32, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant32, "value"), "gen_ts_en_bit")


# Component: Generator.Constant33
_Generator_Constant33 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant33",
    rotation="up",
    flip="flip_none",
    position=(6472, 8400),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant33, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant33, "value"), "0")


# Component: Generator.T_switch
_Generator_T_switch = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Generator,
    name="T_switch",
    rotation="up",
    flip="flip_none",
    position=(6320, 8504),
    hide_name=False,
    size=(72, 64)
)


# Component: Generator.T_switch.Signal switch1
_Generator_T_switch_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Generator_T_switch,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(7632, 8056),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_T_switch_Signal_switch1, "threshold"), "0.5")


# Component: Generator.T_switch.Round1
_Generator_T_switch_Round1 = mdl.create_component(
    type_name="core/Round",
    parent=_Generator_T_switch,
    name="Round1",
    rotation="up",
    flip="flip_none",
    position=(7392, 8072),
    hide_name=False,
    size=(None, None)
)


# Component: Generator.T_switch.Limit1
_Generator_T_switch_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_Generator_T_switch,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7808, 8056),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_T_switch_Limit1, "lower_limit"), "T_lim_low")
mdl.set_property_value(mdl.prop(_Generator_T_switch_Limit1, "upper_limit"), "T_lim_high")


# Port: Generator.T_switch.T_out
_Generator_T_switch_T_out = mdl.create_port(
    name="T_out",
    parent=_Generator_T_switch,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8096, 8056)
)

# Port: Generator.T_switch.mode
_Generator_T_switch_mode = mdl.create_port(
    name="mode",
    parent=_Generator_T_switch,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7472, 7920)
)

# Port: Generator.T_switch.T
_Generator_T_switch_T = mdl.create_port(
    name="T",
    parent=_Generator_T_switch,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7176, 8040)
)

# Junction: Generator.T_switch.Junction3
_Generator_T_switch_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_Generator_T_switch,
    kind="sp",
    position=(7880, 8056)
)

# Junction: Generator.T_switch.Junction1
_Generator_T_switch_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Generator_T_switch,
    kind="sp",
    position=(7280, 8040)
)

# Junction: Generator.T_switch.Junction2
_Generator_T_switch_Junction2 = mdl.create_junction(
    name="Junction2",
    parent=_Generator_T_switch,
    kind="sp",
    position=(7712, 8056)
)

# Component: Generator.Constant102
_Generator_Constant102 = mdl.create_component(
    type_name="core/Constant",
    parent=_Generator,
    name="Constant102",
    rotation="up",
    flip="flip_none",
    position=(6200, 8536),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Generator_Constant102, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Generator_Constant102, "value"), "Ts_switch")


# Port: Generator.A1
_Generator_A1 = mdl.create_port(
    name="A1",
    parent=_Generator,
    label="A1",
    kind="pe",
    dimension=(1,),
    terminal_position=(88.0, -32.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(5176, 8280)
)

# Port: Generator.B1
_Generator_B1 = mdl.create_port(
    name="B1",
    parent=_Generator,
    label="B1",
    kind="pe",
    dimension=(1,),
    terminal_position=(88.0, 0.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(5176, 8376)
)

# Port: Generator.C1
_Generator_C1 = mdl.create_port(
    name="C1",
    parent=_Generator,
    label="C1",
    kind="pe",
    dimension=(1,),
    terminal_position=(88.0, 32.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(5176, 8472)
)

# Port: Generator.Vfd_in
_Generator_Vfd_in = mdl.create_port(
    name="Vfd_in",
    parent=_Generator,
    label="Vfd",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=(-88.0, -1.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(4176, 7712)
)

# Port: Generator.Tm_in
_Generator_Tm_in = mdl.create_port(
    name="Tm_in",
    parent=_Generator,
    label="Tm",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=(-36.0, -88.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(4176, 7768)
)

# Port: Generator.meas
_Generator_meas = mdl.create_port(
    name="meas",
    parent=_Generator,
    label="meas",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=(-50.0, -88.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6848, 8040)
)

# Port: Generator.ctrl
_Generator_ctrl = mdl.create_port(
    name="ctrl",
    parent=_Generator,
    label="ctrl",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=(-88.0, -80.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6840, 8624)
)

# Port: Generator.Vfd0
_Generator_Vfd0 = mdl.create_port(
    name="Vfd0",
    parent=_Generator,
    label="Vfd0",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=(-88.0, -51.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(5968, 7640)
)

# Port: Generator.Tm0
_Generator_Tm0 = mdl.create_port(
    name="Tm0",
    parent=_Generator,
    label="Tm0",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=(-88.0, -65.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(5936, 7824)
)

# Tag: Generator.From31
_Generator_From31 = mdl.create_tag(
    value="ea",
    name="From31",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_horizontal",
    position=(5968, 8248)
)

# Tag: Generator.From33
_Generator_From33 = mdl.create_tag(
    value="ec",
    name="From33",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_horizontal",
    position=(5968, 8440)
)

# Tag: Generator.From32
_Generator_From32 = mdl.create_tag(
    value="eb",
    name="From32",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_horizontal",
    position=(5968, 8344)
)

# Tag: Generator.Goto36
_Generator_Goto36 = mdl.create_tag(
    value="va",
    name="Goto36",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="left",
    flip="flip_none",
    position=(5536, 8544)
)

# Tag: Generator.Goto37
_Generator_Goto37 = mdl.create_tag(
    value="vb",
    name="Goto37",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="left",
    flip="flip_none",
    position=(5616, 8544)
)

# Tag: Generator.Goto38
_Generator_Goto38 = mdl.create_tag(
    value="vc",
    name="Goto38",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="left",
    flip="flip_none",
    position=(5704, 8544)
)

# Tag: Generator.Goto64
_Generator_Goto64 = mdl.create_tag(
    value="ia",
    name="Goto64",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5312, 8232)
)

# Tag: Generator.Goto65
_Generator_Goto65 = mdl.create_tag(
    value="ib",
    name="Goto65",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5312, 8328)
)

# Tag: Generator.Goto66
_Generator_Goto66 = mdl.create_tag(
    value="ic",
    name="Goto66",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5312, 8424)
)

# Tag: Generator.Goto20
_Generator_Goto20 = mdl.create_tag(
    value="ea",
    name="Goto20",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6368, 7408)
)

# Tag: Generator.From27
_Generator_From27 = mdl.create_tag(
    value="eq",
    name="From27",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6176, 7424)
)

# Tag: Generator.Goto22
_Generator_Goto22 = mdl.create_tag(
    value="ec",
    name="Goto22",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6368, 7456)
)

# Tag: Generator.From28
_Generator_From28 = mdl.create_tag(
    value="ed",
    name="From28",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6112, 7408)
)

# Tag: Generator.From30
_Generator_From30 = mdl.create_tag(
    value="thetar",
    name="From30",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6176, 7456)
)

# Tag: Generator.Goto21
_Generator_Goto21 = mdl.create_tag(
    value="eb",
    name="Goto21",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6368, 7432)
)

# Tag: Generator.From18
_Generator_From18 = mdl.create_tag(
    value="ib",
    name="From18",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6176, 7536)
)

# Tag: Generator.Goto18
_Generator_Goto18 = mdl.create_tag(
    value="isd",
    name="Goto18",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6480, 7520)
)

# Tag: Generator.From19
_Generator_From19 = mdl.create_tag(
    value="ic",
    name="From19",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6112, 7552)
)

# Tag: Generator.From26
_Generator_From26 = mdl.create_tag(
    value="thetar",
    name="From26",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6176, 7568)
)

# Tag: Generator.Goto19
_Generator_Goto19 = mdl.create_tag(
    value="isq",
    name="Goto19",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6480, 7544)
)

# Tag: Generator.From46
_Generator_From46 = mdl.create_tag(
    value="ia",
    name="From46",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6112, 7520)
)

# Tag: Generator.Goto67
_Generator_Goto67 = mdl.create_tag(
    value="ed",
    name="Goto67",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5224, 7576)
)

# Tag: Generator.Goto68
_Generator_Goto68 = mdl.create_tag(
    value="eq",
    name="Goto68",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5224, 7608)
)

# Tag: Generator.From47
_Generator_From47 = mdl.create_tag(
    value="isd",
    name="From47",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4816, 7512)
)

# Tag: Generator.From48
_Generator_From48 = mdl.create_tag(
    value="isq",
    name="From48",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4816, 7480)
)

# Tag: Generator.From49
_Generator_From49 = mdl.create_tag(
    value="vfd",
    name="From49",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4488, 7440)
)

# Tag: Generator.From50
_Generator_From50 = mdl.create_tag(
    value="Tm",
    name="From50",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4488, 7536)
)

# Tag: Generator.Goto69
_Generator_Goto69 = mdl.create_tag(
    value="thetar",
    name="Goto69",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5224, 7704)
)

# Tag: Generator.From51
_Generator_From51 = mdl.create_tag(
    value="isq",
    name="From51",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(5472, 7920)
)

# Tag: Generator.Goto70
_Generator_Goto70 = mdl.create_tag(
    value="pisq",
    name="Goto70",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5952, 8088)
)

# Tag: Generator.From52
_Generator_From52 = mdl.create_tag(
    value="pisq",
    name="From52",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4824, 7672)
)

# Tag: Generator.Goto71
_Generator_Goto71 = mdl.create_tag(
    value="vfd",
    name="Goto71",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(4328, 7712)
)

# Tag: Generator.Goto72
_Generator_Goto72 = mdl.create_tag(
    value="Tm",
    name="Goto72",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(4328, 7768)
)

# Tag: Generator.From53
_Generator_From53 = mdl.create_tag(
    value="isd",
    name="From53",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(5440, 7688)
)

# Tag: Generator.Goto73
_Generator_Goto73 = mdl.create_tag(
    value="ed_initial",
    name="Goto73",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(4328, 7664)
)

# Tag: Generator.Goto74
_Generator_Goto74 = mdl.create_tag(
    value="eq_initial",
    name="Goto74",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(4328, 7624)
)

# Tag: Generator.From55
_Generator_From55 = mdl.create_tag(
    value="eq_initial",
    name="From55",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4824, 7704)
)

# Tag: Generator.From56
_Generator_From56 = mdl.create_tag(
    value="ed_initial",
    name="From56",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4824, 7736)
)

# Tag: Generator.From57
_Generator_From57 = mdl.create_tag(
    value="eq_initial",
    name="From57",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(5440, 7648)
)

# Tag: Generator.Goto75
_Generator_Goto75 = mdl.create_tag(
    value="vfd_pre",
    name="Goto75",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5968, 7696)
)

# Tag: Generator.Goto76
_Generator_Goto76 = mdl.create_tag(
    value="V2S_switch",
    name="Goto76",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5712, 7456)
)

# Tag: Generator.From58
_Generator_From58 = mdl.create_tag(
    value="V2S_switch",
    name="From58",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(5824, 7592)
)

# Tag: Generator.From59
_Generator_From59 = mdl.create_tag(
    value="V2S_switch",
    name="From59",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4568, 7848)
)

# Tag: Generator.From60
_Generator_From60 = mdl.create_tag(
    value="vfd_pre",
    name="From60",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4488, 7416)
)

# Tag: Generator.Goto77
_Generator_Goto77 = mdl.create_tag(
    value="S2M_switch",
    name="Goto77",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5712, 7520)
)

# Tag: Generator.From63
_Generator_From63 = mdl.create_tag(
    value="S2M_switch",
    name="From63",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4688, 7912)
)

# Tag: Generator.From64
_Generator_From64 = mdl.create_tag(
    value="Tm_pre",
    name="From64",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4488, 7512)
)

# Tag: Generator.Goto78
_Generator_Goto78 = mdl.create_tag(
    value="Te",
    name="Goto78",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5224, 7640)
)

# Tag: Generator.From65
_Generator_From65 = mdl.create_tag(
    value="Te",
    name="From65",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(5664, 7840)
)

# Tag: Generator.From66
_Generator_From66 = mdl.create_tag(
    value="S2M_switch",
    name="From66",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(5704, 7776)
)

# Tag: Generator.Goto79
_Generator_Goto79 = mdl.create_tag(
    value="Tm_pre",
    name="Goto79",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5944, 7784)
)

# Tag: Generator.Goto80
_Generator_Goto80 = mdl.create_tag(
    value="angle_init",
    name="Goto80",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(4328, 7584)
)

# Tag: Generator.From67
_Generator_From67 = mdl.create_tag(
    value="angle_init",
    name="From67",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(4824, 7832)
)

# Tag: Generator.From70
_Generator_From70 = mdl.create_tag(
    value="ia",
    name="From70",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7776)
)

# Tag: Generator.From71
_Generator_From71 = mdl.create_tag(
    value="ib",
    name="From71",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7800)
)

# Tag: Generator.From72
_Generator_From72 = mdl.create_tag(
    value="ic",
    name="From72",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7824)
)

# Tag: Generator.From73
_Generator_From73 = mdl.create_tag(
    value="va",
    name="From73",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7704)
)

# Tag: Generator.From74
_Generator_From74 = mdl.create_tag(
    value="vb",
    name="From74",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7728)
)

# Tag: Generator.From75
_Generator_From75 = mdl.create_tag(
    value="vc",
    name="From75",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7752)
)

# Tag: Generator.From76
_Generator_From76 = mdl.create_tag(
    value="Te",
    name="From76",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7848)
)

# Tag: Generator.From77
_Generator_From77 = mdl.create_tag(
    value="S2M_switch",
    name="From77",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6680, 8168)
)

# Tag: Generator.From78
_Generator_From78 = mdl.create_tag(
    value="V2S_switch",
    name="From78",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6680, 8144)
)

# Tag: Generator.Goto81
_Generator_Goto81 = mdl.create_tag(
    value="w_mech",
    name="Goto81",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(5224, 7736)
)

# Tag: Generator.From79
_Generator_From79 = mdl.create_tag(
    value="w_mech",
    name="From79",
    parent=_Generator,
    scope="masked_subsystem",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6648, 7872)
)

# Junction: Generator.Junction160
_Generator_Junction160 = mdl.create_junction(
    name="Junction160",
    parent=_Generator,
    kind="pe",
    position=(5584, 8656)
)

# Junction: Generator.Junction162
_Generator_Junction162 = mdl.create_junction(
    name="Junction162",
    parent=_Generator,
    kind="sp",
    position=(5520, 7920)
)

# Junction: Generator.Junction163
_Generator_Junction163 = mdl.create_junction(
    name="Junction163",
    parent=_Generator,
    kind="sp",
    position=(5608, 7960)
)

# Junction: Generator.Junction169
_Generator_Junction169 = mdl.create_junction(
    name="Junction169",
    parent=_Generator,
    kind="sp",
    position=(5920, 7592)
)

# Junction: Generator.Junction175
_Generator_Junction175 = mdl.create_junction(
    name="Junction175",
    parent=_Generator,
    kind="sp",
    position=(5800, 7824)
)

# Junction: Generator.Junction176
_Generator_Junction176 = mdl.create_junction(
    name="Junction176",
    parent=_Generator,
    kind="sp",
    position=(5720, 7840)
)

# Junction: Generator.Junction178
_Generator_Junction178 = mdl.create_junction(
    name="Junction178",
    parent=_Generator,
    kind="sp",
    position=(5888, 7824)
)

# Junction: Generator.Junction179
_Generator_Junction179 = mdl.create_junction(
    name="Junction179",
    parent=_Generator,
    kind="sp",
    position=(4536, 7440)
)

# Junction: Generator.Junction181
_Generator_Junction181 = mdl.create_junction(
    name="Junction181",
    parent=_Generator,
    kind="sp",
    position=(4536, 7536)
)

# Junction: Generator.Junction182
_Generator_Junction182 = mdl.create_junction(
    name="Junction182",
    parent=_Generator,
    kind="sp",
    position=(4672, 7376)
)

# Junction: Generator.Junction183
_Generator_Junction183 = mdl.create_junction(
    name="Junction183",
    parent=_Generator,
    kind="sp",
    position=(5560, 7448)
)

# Junction: Generator.Junction184
_Generator_Junction184 = mdl.create_junction(
    name="Junction184",
    parent=_Generator,
    kind="sp",
    position=(5920, 7640)
)

# Junction: Generator.Junction185
_Generator_Junction185 = mdl.create_junction(
    name="Junction185",
    parent=_Generator,
    kind="sp",
    position=(4792, 7544)
)

# Junction: Generator.Junction189
_Generator_Junction189 = mdl.create_junction(
    name="Junction189",
    parent=_Generator,
    kind="sp",
    position=(4648, 7936)
)

# Junction: Generator.Junction201
_Generator_Junction201 = mdl.create_junction(
    name="Junction201",
    parent=_Generator,
    kind="pe",
    position=(5496, 8280)
)

# Junction: Generator.Junction202
_Generator_Junction202 = mdl.create_junction(
    name="Junction202",
    parent=_Generator,
    kind="pe",
    position=(5584, 8376)
)

# Junction: Generator.Junction203
_Generator_Junction203 = mdl.create_junction(
    name="Junction203",
    parent=_Generator,
    kind="pe",
    position=(5664, 8472)
)

# Junction: Generator.Junction204
_Generator_Junction204 = mdl.create_junction(
    name="Junction204",
    parent=_Generator,
    kind="pe",
    position=(5664, 8656)
)

# Junction: Generator.Junction205
_Generator_Junction205 = mdl.create_junction(
    name="Junction205",
    parent=_Generator,
    kind="pe",
    position=(6008, 8472)
)

# Junction: Generator.Junction206
_Generator_Junction206 = mdl.create_junction(
    name="Junction206",
    parent=_Generator,
    kind="pe",
    position=(5392, 8280)
)

# Junction: Generator.Junction207
_Generator_Junction207 = mdl.create_junction(
    name="Junction207",
    parent=_Generator,
    kind="pe",
    position=(5392, 8376)
)

# Junction: Generator.Junction208
_Generator_Junction208 = mdl.create_junction(
    name="Junction208",
    parent=_Generator,
    kind="pe",
    position=(5448, 8472)
)

# Junction: Generator.Junction209
_Generator_Junction209 = mdl.create_junction(
    name="Junction209",
    parent=_Generator,
    kind="pe",
    position=(5448, 8280)
)

# Junction: Generator.Junction210
_Generator_Junction210 = mdl.create_junction(
    name="Junction210",
    parent=_Generator,
    kind="pe",
    position=(5392, 8376)
)

# Junction: Generator.Junction211
_Generator_Junction211 = mdl.create_junction(
    name="Junction211",
    parent=_Generator,
    kind="pe",
    position=(5392, 8472)
)

# Junction: Generator.Junction212
_Generator_Junction212 = mdl.create_junction(
    name="Junction212",
    parent=_Generator,
    kind="pe",
    position=(6008, 8376)
)

# Junction: Generator.Junction213
_Generator_Junction213 = mdl.create_junction(
    name="Junction213",
    parent=_Generator,
    kind="sp",
    position=(6744, 7928)
)

# Junction: Generator.Junction214
_Generator_Junction214 = mdl.create_junction(
    name="Junction214",
    parent=_Generator,
    kind="sp",
    position=(4512, 7872)
)

# Junction: Generator.Junction215
_Generator_Junction215 = mdl.create_junction(
    name="Junction215",
    parent=_Generator,
    kind="sp",
    position=(4744, 7544)
)

# Component: Isource
_Isource = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Isource",
    rotation="up",
    flip="flip_none",
    position=(5944, 6856),
    hide_name=False,
    size=(64, 96)
)
_Isource_mask = mdl.create_mask(_Isource)
_Isource_mask_amps = mdl.create_property(
    item_handle=_Isource_mask,
    name="amps",
    label="Current",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="A"
)


_Isource_mask_amps_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Isource_mask_amps, "property_value_changed", _Isource_mask_amps_property_value_changed)

_Isource_mask_Angle = mdl.create_property(
    item_handle=_Isource_mask,
    name="Angle",
    label="Angle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="°"
)


_Isource_mask_Angle_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Isource_mask_Angle, "property_value_changed", _Isource_mask_Angle_property_value_changed)

_Isource_mask_Frequency = mdl.create_property(
    item_handle=_Isource_mask,
    name="Frequency",
    label="Frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Hz"
)


_Isource_mask_Frequency_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Isource_mask_Frequency, "property_value_changed", _Isource_mask_Frequency_property_value_changed)

_Isource_mask_global_basefreq = mdl.create_property(
    item_handle=_Isource_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Isource_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Isource_mask_global_basefreq, "property_value_changed", _Isource_mask_global_basefreq_property_value_changed)


_Isource_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle)

"""
mdl.set_handler_code(_Isource_mask_global_basefreq, "property_value_edited", _Isource_mask_global_basefreq_property_value_edited)

_Isource_mask_BaseFreq = mdl.create_property(
    item_handle=_Isource_mask,
    name="BaseFreq",
    label="Base frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit="Hz"
)

_Isource_mask_enable_monitoring = mdl.create_property(
    item_handle=_Isource_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_Isource_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Isource_mask, "define_icon", _Isource_mask_define_icon)

_Isource_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_isource as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Isource_mask, "init", _Isource_mask_init)

_Isource_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The most common use of a current source is to represent harmonic sources and to be used in frequency response scans of circuit models.<br>Note that if the device you are trying to model produces or consumes power, it is generally better to model it with a Load or Generator object.</p></body></html>
'''
mdl.set_description(_Isource_mask, _Isource_mask_desc)


# Component: Isource.Ia
_Isource_Ia = mdl.create_component(
    type_name="core/Current Source",
    parent=_Isource,
    name="Ia",
    rotation="down",
    flip="flip_none",
    position=(8112, 8096),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Isource_Ia, "init_frequency"), "60")
mdl.set_property_value(mdl.prop(_Isource_Ia, "init_phase"), "0")
mdl.set_property_value(mdl.prop(_Isource_Ia, "init_rms_value"), "0")
mdl.set_property_value(mdl.prop(_Isource_Ia, "init_source_nature"), "Sine")


# Component: Isource.Ib
_Isource_Ib = mdl.create_component(
    type_name="core/Current Source",
    parent=_Isource,
    name="Ib",
    rotation="down",
    flip="flip_none",
    position=(8112, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Isource_Ib, "init_frequency"), "60")
mdl.set_property_value(mdl.prop(_Isource_Ib, "init_phase"), "-120")
mdl.set_property_value(mdl.prop(_Isource_Ib, "init_rms_value"), "0")
mdl.set_property_value(mdl.prop(_Isource_Ib, "init_source_nature"), "Sine")


# Component: Isource.Ic
_Isource_Ic = mdl.create_component(
    type_name="core/Current Source",
    parent=_Isource,
    name="Ic",
    rotation="down",
    flip="flip_none",
    position=(8112, 8288),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Isource_Ic, "init_frequency"), "60")
mdl.set_property_value(mdl.prop(_Isource_Ic, "init_phase"), "-240")
mdl.set_property_value(mdl.prop(_Isource_Ic, "init_rms_value"), "0")
mdl.set_property_value(mdl.prop(_Isource_Ic, "init_source_nature"), "Sine")


# Component: Isource.gnd1
_Isource_gnd1 = mdl.create_component(
    type_name="core/Ground",
    parent=_Isource,
    name="gnd1",
    rotation="up",
    flip="flip_none",
    position=(8000, 8400),
    hide_name=False,
    size=(None, None)
)


# Port: Isource.A1
_Isource_A1 = mdl.create_port(
    name="A1",
    parent=_Isource,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32.0, -32.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8496, 8096)
)

# Port: Isource.B1
_Isource_B1 = mdl.create_port(
    name="B1",
    parent=_Isource,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32.0, 0.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8496, 8192)
)

# Port: Isource.C1
_Isource_C1 = mdl.create_port(
    name="C1",
    parent=_Isource,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32.0, 32.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8496, 8288)
)

# Component: Line
_Line = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Line",
    rotation="up",
    flip="flip_none",
    position=(6168, 6864),
    hide_name=False,
    size=(64, 112)
)
_Line_mask = mdl.create_mask(_Line)
_Line_mask_input_type = mdl.create_property(
    item_handle=_Line_mask,
    name="input_type",
    label="Parameter input",
    widget="combo",
    combo_values=['Symmetrical', 'Matrix', 'LineCode'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Line Parameters:1",
    unit=""
)


_Line_mask_input_type_property_value_changed = """
if new_value == "Symmetrical":
    mdl.set_property_value(mdl.prop(container_handle, 'phases'), "3")
    mdl.disable_property(mdl.prop(container_handle, "phases"))

if new_value == "Symmetrical":
    mdl.set_property_disp_value(mdl.prop(container_handle, 'phases'), "3")
    mdl.disable_property(mdl.prop(container_handle, "phases"))
else:
    mdl.enable_property(mdl.prop(container_handle, "phases"))

comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.toggle_coupling(mdl, container_handle, created_ports)
mdl.refresh_icon(container_handle)


"""
mdl.set_handler_code(_Line_mask_input_type, "property_value_changed", _Line_mask_input_type_property_value_changed)


_Line_mask_input_type_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle)

"""
mdl.set_handler_code(_Line_mask_input_type, "property_value_edited", _Line_mask_input_type_property_value_edited)

_Line_mask_Load = mdl.create_property(
    item_handle=_Line_mask,
    name="Load",
    label="Load parameters",
    widget="button",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    button_label="Choose",
    unit=""
)


_Line_mask_Load_button_clicked = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.load_line_parameters(mdl, container_handle)

"""
mdl.set_handler_code(_Line_mask_Load, "button_clicked", _Line_mask_Load_button_clicked)

_Line_mask_selected_object = mdl.create_property(
    item_handle=_Line_mask,
    name="selected_object",
    label="Selected",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit=""
)


_Line_mask_selected_object_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_disp_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Line_mask_selected_object, "property_value_edited", _Line_mask_selected_object_property_value_edited)

_Line_mask_Length = mdl.create_property(
    item_handle=_Line_mask,
    name="Length",
    label="Line Length",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Line Parameters:1",
    unit="km"
)

_Line_mask_global_basefreq = mdl.create_property(
    item_handle=_Line_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit=""
)


_Line_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Line_mask_global_basefreq, "property_value_changed", _Line_mask_global_basefreq_property_value_changed)


_Line_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle)

"""
mdl.set_handler_code(_Line_mask_global_basefreq, "property_value_edited", _Line_mask_global_basefreq_property_value_edited)

_Line_mask_BaseFreq = mdl.create_property(
    item_handle=_Line_mask,
    name="BaseFreq",
    label="Base frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Line Parameters",
    unit="Hz"
)

_Line_mask_phases = mdl.create_property(
    item_handle=_Line_mask,
    name="phases",
    label="Phases",
    widget="combo",
    combo_values=['3', '2', '1'],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="Line Parameters",
    unit=""
)


_Line_mask_phases_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
comp_script.toggle_coupling(mdl, container_handle, created_ports)
comp_script.show_hide_param_phases(mdl, container_handle, new_value)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Line_mask_phases, "property_value_changed", _Line_mask_phases_property_value_changed)


_Line_mask_phases_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle)

"""
mdl.set_handler_code(_Line_mask_phases, "property_value_edited", _Line_mask_phases_property_value_edited)

_Line_mask_R1 = mdl.create_property(
    item_handle=_Line_mask,
    name="R1",
    label="R1",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="Ω/km"
)

_Line_mask_R0 = mdl.create_property(
    item_handle=_Line_mask,
    name="R0",
    label="R0",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="Ω/km"
)

_Line_mask_X1 = mdl.create_property(
    item_handle=_Line_mask,
    name="X1",
    label="X1",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="Ω/km"
)

_Line_mask_X0 = mdl.create_property(
    item_handle=_Line_mask,
    name="X0",
    label="X0",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="Ω/km"
)

_Line_mask_dC1 = mdl.create_property(
    item_handle=_Line_mask,
    name="dC1",
    label="C1",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="nF/km"
)


_Line_mask_dC1_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.toggle_coupling(mdl, container_handle, created_ports)


"""
mdl.set_handler_code(_Line_mask_dC1, "property_value_changed", _Line_mask_dC1_property_value_changed)

_Line_mask_dC0 = mdl.create_property(
    item_handle=_Line_mask,
    name="dC0",
    label="C0",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="nF/km"
)


_Line_mask_dC0_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.toggle_coupling(mdl, container_handle, created_ports)


"""
mdl.set_handler_code(_Line_mask_dC0, "property_value_changed", _Line_mask_dC0_property_value_changed)

_Line_mask_rmatrix = mdl.create_property(
    item_handle=_Line_mask,
    name="rmatrix",
    label="Rmatrix",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="Ω/km"
)

_Line_mask_xmatrix = mdl.create_property(
    item_handle=_Line_mask,
    name="xmatrix",
    label="Xmatrix",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="Ω/km"
)

_Line_mask_cmatrix = mdl.create_property(
    item_handle=_Line_mask,
    name="cmatrix",
    label="Cmatrix",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Line Parameters",
    unit="nF/km"
)


_Line_mask_cmatrix_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.toggle_coupling(mdl, container_handle,created_ports)


"""
mdl.set_handler_code(_Line_mask_cmatrix, "property_value_changed", _Line_mask_cmatrix_property_value_changed)

_Line_mask_obj_mode = mdl.create_property(
    item_handle=_Line_mask,
    name="obj_mode",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_Len = mdl.create_property(
    item_handle=_Line_mask,
    name="Len",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_Fr = mdl.create_property(
    item_handle=_Line_mask,
    name="Fr",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_d_R = mdl.create_property(
    item_handle=_Line_mask,
    name="d_R",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_d_L = mdl.create_property(
    item_handle=_Line_mask,
    name="d_L",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_d_C = mdl.create_property(
    item_handle=_Line_mask,
    name="d_C",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_d_X = mdl.create_property(
    item_handle=_Line_mask,
    name="d_X",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_C1 = mdl.create_property(
    item_handle=_Line_mask,
    name="C1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_C0 = mdl.create_property(
    item_handle=_Line_mask,
    name="C0",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_L1 = mdl.create_property(
    item_handle=_Line_mask,
    name="L1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_L0 = mdl.create_property(
    item_handle=_Line_mask,
    name="L0",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_R1_one = mdl.create_property(
    item_handle=_Line_mask,
    name="R1_one",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_L1_one = mdl.create_property(
    item_handle=_Line_mask,
    name="L1_one",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_C1_one = mdl.create_property(
    item_handle=_Line_mask,
    name="C1_one",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Line_mask_coupling = mdl.create_property(
    item_handle=_Line_mask,
    name="coupling",
    label="Enable coupling",
    widget="combo",
    combo_values=['None', 'Core coupling', 'Device coupling'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Coupling:2",
    unit=""
)


_Line_mask_coupling_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.toggle_coupling(mdl, container_handle, created_ports)


"""
mdl.set_handler_code(_Line_mask_coupling, "property_value_changed", _Line_mask_coupling_property_value_changed)

_Line_mask_enable_monitoring = mdl.create_property(
    item_handle=_Line_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_Line_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Line_mask, "define_icon", _Line_mask_define_icon)

_Line_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)
if not gui_scripts_path in sys.path:
    sys.path.append(gui_scripts_path)

import comp_line as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)


"""
mdl.set_handler_code(_Line_mask, "init", _Line_mask_init)

_Line_mask_pre_compile = """
# HEADER START
Length = mdl.get_property_value(mdl.prop(item_handle, "Length"))
R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
dC1 = mdl.get_property_value(mdl.prop(item_handle, "dC1"))
dC0 = mdl.get_property_value(mdl.prop(item_handle, "dC0"))
Len = mdl.get_property_value(mdl.prop(item_handle, "Len"))
Fr = mdl.get_property_value(mdl.prop(item_handle, "Fr"))
d_R = mdl.get_property_value(mdl.prop(item_handle, "d_R"))
d_L = mdl.get_property_value(mdl.prop(item_handle, "d_L"))
d_C = mdl.get_property_value(mdl.prop(item_handle, "d_C"))
X1 = mdl.get_property_value(mdl.prop(item_handle, "X1"))
X0 = mdl.get_property_value(mdl.prop(item_handle, "X0"))
C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
C0 = mdl.get_property_value(mdl.prop(item_handle, "C0"))
R1_one = mdl.get_property_value(mdl.prop(item_handle, "R1_one"))
L1_one = mdl.get_property_value(mdl.prop(item_handle, "L1_one"))
C1_one = mdl.get_property_value(mdl.prop(item_handle, "C1_one"))
coupling = mdl.get_property_value(mdl.prop(item_handle, "coupling"))
# HEADER STOP

comp_script = return_comp_script(mdl, item_handle)
comp_script.update_frequency_property(mdl, item_handle)
comp_script.configure_cable(mdl, item_handle)

L0_prop = mdl.prop(item_handle, "L0")
L1_prop = mdl.prop(item_handle, "L1")
L0 = mdl.get_property_value(L0_prop)
L1 = mdl.get_property_value(L1_prop)

if L0 == 99999:
    # For old definition support workaround
    mdl.set_property_value(L0_prop, 0)
    mdl.set_property_value(L1_prop, 0)


"""
mdl.set_handler_code(_Line_mask, "pre_compile", _Line_mask_pre_compile)

_Line_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Line component.</p></body></html>
'''
mdl.set_description(_Line_mask, _Line_mask_desc)


# Component: Line.TL
_Line_TL = mdl.create_component(
    type_name="core/Transmission Line",
    parent=_Line,
    name="TL",
    rotation="up",
    flip="flip_none",
    position=(7744, 8032),
    hide_name=False,
    size=(256, 72)
)
mdl.set_property_value(mdl.prop(_Line_TL, "C_metric"), "d_C")
mdl.set_property_value(mdl.prop(_Line_TL, "C_sequence_metric"), "d_C")
mdl.set_property_value(mdl.prop(_Line_TL, "Frequency"), "Fr")
mdl.set_property_value(mdl.prop(_Line_TL, "L_metric"), "d_L")
mdl.set_property_value(mdl.prop(_Line_TL, "L_sequence_metric"), "d_L")
mdl.set_property_value(mdl.prop(_Line_TL, "Length_metric"), "Len")
mdl.set_property_value(mdl.prop(_Line_TL, "R_metric"), "d_R")
mdl.set_property_value(mdl.prop(_Line_TL, "R_sequence_metric"), "d_R")
mdl.set_property_value(mdl.prop(_Line_TL, "model"), "PI")
mdl.set_property_value(mdl.prop(_Line_TL, "model_def"), "Sequence")
mdl.set_property_value(mdl.prop(_Line_TL, "unit_sys"), "metric")


# Component: Line.pisec
_Line_pisec = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Line,
    name="pisec",
    rotation="up",
    flip="flip_none",
    position=(7744, 7880),
    hide_name=False,
    size=(112, 56)
)
_Line_pisec_mask = mdl.create_mask(_Line_pisec)
_Line_pisec_mask_R = mdl.create_property(
    item_handle=_Line_pisec_mask,
    name="R",
    label="Resistance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Ω"
)

_Line_pisec_mask_L = mdl.create_property(
    item_handle=_Line_pisec_mask,
    name="L",
    label="Inductance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="H"
)

_Line_pisec_mask_C = mdl.create_property(
    item_handle=_Line_pisec_mask,
    name="C",
    label="Capacitance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="F"
)


_Line_pisec_mask_pre_compile = """
# HEADER START
R = mdl.get_property_value(mdl.prop(item_handle, "R"))
L = mdl.get_property_value(mdl.prop(item_handle, "L"))
C = mdl.get_property_value(mdl.prop(item_handle, "C"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy
import math

mdl.set_property_value(mdl.prop(item_handle, "R"), R)
mdl.set_property_value(mdl.prop(item_handle, "L"), L)
mdl.set_property_value(mdl.prop(item_handle, "C"), C)

"""
mdl.set_handler_code(_Line_pisec_mask, "pre_compile", _Line_pisec_mask_pre_compile)

_Line_pisec_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_Line_pisec_mask, _Line_pisec_mask_desc)
mdl.set_property_value(mdl.prop(_Line_pisec_mask, "C"), "0.1e-6")
mdl.set_property_value(mdl.prop(_Line_pisec_mask, "L"), "0.1e-4")
mdl.set_property_value(mdl.prop(_Line_pisec_mask, "R"), "0.01")


# Component: Line.pisec.R1
_Line_pisec_R1 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Line_pisec,
    name="R1",
    rotation="up",
    flip="flip_none",
    position=(7776, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Line_pisec_R1, "resistance"), "R")


# Component: Line.pisec.L1
_Line_pisec_L1 = mdl.create_component(
    type_name="core/Inductor",
    parent=_Line_pisec,
    name="L1",
    rotation="up",
    flip="flip_none",
    position=(7960, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Line_pisec_L1, "inductance"), "L")


# Component: Line.pisec.C1
_Line_pisec_C1 = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Line_pisec,
    name="C1",
    rotation="right",
    flip="flip_none",
    position=(7664, 8168),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Line_pisec_C1, "capacitance"), "C/2")


# Component: Line.pisec.C2
_Line_pisec_C2 = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Line_pisec,
    name="C2",
    rotation="right",
    flip="flip_none",
    position=(8104, 8168),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Line_pisec_C2, "capacitance"), "C/2")


# Port: Line.pisec.A2
_Line_pisec_A2 = mdl.create_port(
    name="A2",
    parent=_Line_pisec,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 'auto'),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(8240, 8064)
)

# Port: Line.pisec.N
_Line_pisec_N = mdl.create_port(
    name="N",
    parent=_Line_pisec,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('bottom', 'auto'),
    rotation="left",
    flip="flip_none",
    hide_name=False,
    position=(7904, 8336)
)

# Port: Line.pisec.A1
_Line_pisec_A1 = mdl.create_port(
    name="A1",
    parent=_Line_pisec,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7520, 8064)
)

# Junction: Line.pisec.Junction1
_Line_pisec_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Line_pisec,
    kind="pe",
    position=(7664, 8064)
)

# Junction: Line.pisec.Junction2
_Line_pisec_Junction2 = mdl.create_junction(
    name="Junction2",
    parent=_Line_pisec,
    kind="pe",
    position=(8104, 8064)
)

# Junction: Line.pisec.Junction3
_Line_pisec_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_Line_pisec,
    kind="pe",
    position=(7904, 8312)
)

# Port: Line.A1
_Line_A1 = mdl.create_port(
    name="A1",
    parent=_Line,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32, -32),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7512, 7976)
)

# Port: Line.B1
_Line_B1 = mdl.create_port(
    name="B1",
    parent=_Line,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32, 0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7512, 8032)
)

# Port: Line.C1
_Line_C1 = mdl.create_port(
    name="C1",
    parent=_Line,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32, 32),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7512, 8088)
)

# Port: Line.A2
_Line_A2 = mdl.create_port(
    name="A2",
    parent=_Line,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32, -32),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8008, 7936)
)

# Port: Line.B2
_Line_B2 = mdl.create_port(
    name="B2",
    parent=_Line,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32, 0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8008, 8032)
)

# Port: Line.C2
_Line_C2 = mdl.create_port(
    name="C2",
    parent=_Line,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32, 32),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8008, 8128)
)

# Port: Line.N
_Line_N = mdl.create_port(
    name="N",
    parent=_Line,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('bottom', 'left'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7728, 8144)
)

# Component: Load
_Load = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Load",
    rotation="up",
    flip="flip_horizontal",
    position=(6432, 6864),
    hide_name=False,
    size=(96, 64)
)
_Load_mask = mdl.create_mask(_Load)
_Load_mask_global_basefreq = mdl.create_property(
    item_handle=_Load_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General:1",
    unit=""
)


_Load_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Load_mask_global_basefreq, "property_value_changed", _Load_mask_global_basefreq_property_value_changed)


_Load_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_frequency_prop(mdl, container_handle)

"""
mdl.set_handler_code(_Load_mask_global_basefreq, "property_value_edited", _Load_mask_global_basefreq_property_value_edited)

_Load_mask_fn = mdl.create_property(
    item_handle=_Load_mask,
    name="fn",
    label="Nominal frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General:1",
    unit="Hz"
)

_Load_mask_conn_type = mdl.create_property(
    item_handle=_Load_mask,
    name="conn_type",
    label="Connection type",
    widget="combo",
    combo_values=['Y', 'Δ'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)


_Load_mask_conn_type_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

ports = comp_script.port_dynamics(mdl, container_handle)
comp_script.connections_dynamics(mdl, container_handle, ports)

mdl.refresh_icon(container_handle)


"""
mdl.set_handler_code(_Load_mask_conn_type, "property_value_changed", _Load_mask_conn_type_property_value_changed)


_Load_mask_conn_type_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_Load_mask_conn_type, "property_value_edited", _Load_mask_conn_type_property_value_edited)

_Load_mask_ground_connected = mdl.create_property(
    item_handle=_Load_mask,
    name="ground_connected",
    label="Ground-connected",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)


_Load_mask_ground_connected_property_value_changed = """
mdl.refresh_icon(container_handle)

comp_script = return_comp_script(mdl, container_handle)
ports = comp_script.port_dynamics(mdl, container_handle)
comp_script.connections_gnd_dynamics(mdl, container_handle, ports)

"""
mdl.set_handler_code(_Load_mask_ground_connected, "property_value_changed", _Load_mask_ground_connected_property_value_changed)

_Load_mask_phases = mdl.create_property(
    item_handle=_Load_mask,
    name="phases",
    label="Number of Phases",
    widget="combo",
    combo_values=['3', '1'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)


_Load_mask_phases_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)

comp_script.phase_value_edited_fnc(mdl, container_handle, new_value)

ports = comp_script.port_dynamics(mdl, container_handle)
comp_script.connections_phases_dynamics(mdl, container_handle, ports)


mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Load_mask_phases, "property_value_changed", _Load_mask_phases_property_value_changed)


_Load_mask_phases_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.phase_value_edited_fnc(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_Load_mask_phases, "property_value_edited", _Load_mask_phases_property_value_edited)

_Load_mask_Vn_3ph = mdl.create_property(
    item_handle=_Load_mask,
    name="Vn_3ph",
    label="Nominal line voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters:2",
    unit="kV"
)

_Load_mask_Sn_3ph = mdl.create_property(
    item_handle=_Load_mask,
    name="Sn_3ph",
    label="Total Nominal power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit="kVA"
)

_Load_mask_pf_mode_3ph = mdl.create_property(
    item_handle=_Load_mask,
    name="pf_mode_3ph",
    label="Power factor mode",
    widget="combo",
    combo_values=['Lag', 'Lead', 'Unit'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)


_Load_mask_pf_mode_3ph_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

if new_value == "Unit":
    mdl.disable_property(mdl.prop(container_handle, "pf_3ph"))
else:
    mdl.enable_property(mdl.prop(container_handle, "pf_3ph"))

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "Unit":
    CIL1 = mdl.get_item("CIL", parent=comp_handle, item_type=ITEM_COMPONENT)
    mdl.set_property_value(mdl.prop(CIL1, "pf_mode_3ph"), "Unit")
elif new_value == "Lead":
    CIL1 = mdl.get_item("CIL", parent=comp_handle, item_type=ITEM_COMPONENT)
    mdl.set_property_value(mdl.prop(CIL1, "pf_mode_3ph"), "Lead")
elif new_value == "Lag":
    CIL1 = mdl.get_item("CIL", parent=comp_handle, item_type=ITEM_COMPONENT)
    mdl.set_property_value(mdl.prop(CIL1, "pf_mode_3ph"), "Lag")

"""
mdl.set_handler_code(_Load_mask_pf_mode_3ph, "property_value_changed", _Load_mask_pf_mode_3ph_property_value_changed)


_Load_mask_pf_mode_3ph_property_value_edited = """
if new_value == "Unit":
    mdl.disable_property(mdl.prop(container_handle, "pf_3ph"))
else:
    mdl.enable_property(mdl.prop(container_handle, "pf_3ph"))

"""
mdl.set_handler_code(_Load_mask_pf_mode_3ph, "property_value_edited", _Load_mask_pf_mode_3ph_property_value_edited)

_Load_mask_pf_3ph = mdl.create_property(
    item_handle=_Load_mask,
    name="pf_3ph",
    label="Power factor",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)

_Load_mask_pf_3ph_set = mdl.create_property(
    item_handle=_Load_mask,
    name="pf_3ph_set",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_load_model = mdl.create_property(
    item_handle=_Load_mask,
    name="load_model",
    label="Load Model",
    widget="combo",
    combo_values=['Constant Impedance', 'Constant Power'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)


_Load_mask_load_model_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

if new_value == "Constant Power":
    mdl.info("Warning: Load Constant Power mode demands grounding for correct HIL simulation.")

comp_script = return_comp_script(mdl, container_handle)
comp_script.load_model_value_edited_fnc(mdl, container_handle, new_value)


CPL_ref = mdl.get_property_disp_value(mdl.prop(container_handle, "Pow_ref_s"))
connt = mdl.get_property_disp_value(mdl.prop(container_handle, "conn_type"))
gndc = mdl.get_property_disp_value(mdl.prop(container_handle, "ground_connected"))
comp_handle = mdl.get_sub_level_handle(container_handle)
phss = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))

if new_value == "Constant Impedance":
    mdl.set_property_disp_value(mdl.prop(container_handle, 'Pow_ref_s'), "Fixed")
    CPL1 = mdl.get_item("CPL", parent=comp_handle, item_type=ITEM_COMPONENT)
    CIL1 = mdl.get_item("CIL", parent=comp_handle, item_type=ITEM_COMPONENT)

    mdl.enable_items(CIL1)
    if phss == "3":
        mdl.set_property_value(mdl.prop(CIL1, "phases"), "3")
    else:
        mdl.set_property_value(mdl.prop(CIL1, "phases"), "1")

    tagACIL = mdl.get_item("TagA2", parent=comp_handle, item_type="tag")
    if not tagACIL:
        tagACIL = mdl.create_tag("A1", name="TagA2", parent=comp_handle, scope="local",
                               kind="pe", rotation="right", position=(7694, 8088))
        mdl.create_connection(mdl.term(CIL1, "A1"), tagACIL, name="ConnA1CIL")
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
    connN0CIL = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connN0CIL:
        if connt == "Y":
            mdl.create_connection(mdl.term(CIL1, "N"), junN, name="Conn_AN")

    if phss == "3":
        tagBCIL = mdl.get_item("TagB2", parent=comp_handle, item_type="tag")
        if not tagBCIL:
            tagBCIL = mdl.create_tag("B1", name="TagB2", parent=comp_handle, scope="local",
                                   kind="pe", rotation="right", position=(7758, 8088))
            mdl.create_connection(mdl.term(CIL1, "B1"), tagBCIL, name="ConnB1CIL")
        tagCCIL = mdl.get_item("TagC2", parent=comp_handle, item_type="tag")
        if not tagCCIL:
            tagCCIL = mdl.create_tag("C1", name="TagC2", parent=comp_handle, scope="local",
                                   kind="pe", rotation="right", position=(7823, 8088))
            mdl.create_connection(mdl.term(CIL1, "C1"), tagCCIL, name="ConnC1CIL")

    tagACPL = mdl.get_item("TagA3", parent=comp_handle, item_type="tag")
    if tagACPL:
        mdl.delete_item(tagACPL)
    tagBCPL = mdl.get_item("TagB3", parent=comp_handle, item_type="tag")
    if tagBCPL:
        mdl.delete_item(tagBCPL)
    tagCCPL = mdl.get_item("TagC3", parent=comp_handle, item_type="tag")
    if tagCCPL:
        mdl.delete_item(tagCCPL)
    connN0CPL = mdl.get_item("Conn_AN_CPL", parent=comp_handle, item_type=ITEM_CONNECTION)
    if connN0CPL:
        mdl.delete_item(connN0CPL)
    mdl.disable_items(CPL1)

else:
    CPL1 = mdl.get_item("CPL", parent=comp_handle, item_type=ITEM_COMPONENT)
    CIL1 = mdl.get_item("CIL", parent=comp_handle, item_type=ITEM_COMPONENT)
    mdl.enable_items(CPL1)
    if phss == "3":
        mdl.set_property_value(mdl.prop(CPL1, "phases"), "1")
        mdl.set_property_value(mdl.prop(CPL1, "phases"), "3")
    else:
        mdl.set_property_value(mdl.prop(CPL1, "phases"), "3")
        mdl.set_property_value(mdl.prop(CPL1, "phases"), "1")
    tagACPL = mdl.get_item("TagA3", parent=comp_handle, item_type="tag")
    if not tagACPL:
        tagACPL = mdl.create_tag("A1", name="TagA3", parent=comp_handle, scope="local",
                               kind="pe", rotation="right", position=(8000, 8088))
        mdl.create_connection(mdl.term(CPL1, "A1"), tagACPL, name="ConnA1CPL")
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
    connN0CPL = mdl.get_item("Conn_AN_CPL", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connN0CPL:
        mdl.create_connection(mdl.term(CPL1, "N"), junN, name="Conn_AN_CPL")

    if phss == "3":
        tagBCPL = mdl.get_item("TagB3", parent=comp_handle, item_type="tag")
        connBCPL = mdl.get_item("ConnB1CPL", parent=comp_handle, item_type=ITEM_CONNECTION)
        if not tagBCPL:
            tagBCPL = mdl.create_tag("B1", name="TagB3", parent=comp_handle, scope="local",
                                   kind="pe", rotation="right", position=(8063, 8088))
        if not connBCPL:
            mdl.create_connection(mdl.term(CPL1, "B1"), tagBCPL, name="ConnB1CPL")
        tagCCPL = mdl.get_item("TagC3", parent=comp_handle, item_type="tag")
        connCCPL = mdl.get_item("ConnC1CPL", parent=comp_handle, item_type=ITEM_CONNECTION)
        if not tagCCPL:
            tagCCPL = mdl.create_tag("C1", name="TagC3", parent=comp_handle, scope="local",
                                   kind="pe", rotation="right", position=(8127, 8088))
        if not connCCPL:
            mdl.create_connection(mdl.term(CPL1, "C1"), tagCCPL, name="ConnC1CPL")

    tagACIL = mdl.get_item("TagA2", parent=comp_handle, item_type="tag")
    if tagACIL:
        mdl.delete_item(tagACIL)
    tagBCIL = mdl.get_item("TagB2", parent=comp_handle, item_type="tag")
    if tagBCIL:
        mdl.delete_item(tagBCIL)
    tagCCIL = mdl.get_item("TagC2", parent=comp_handle, item_type="tag")
    if tagCCIL:
        mdl.delete_item(tagCCIL)
    connN0CIL = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if connN0CIL:
        mdl.delete_item(connN0CIL)
    mdl.disable_items(CIL1)


mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Load_mask_load_model, "property_value_changed", _Load_mask_load_model_property_value_changed)


_Load_mask_load_model_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.load_model_value_edited_fnc(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_Load_mask_load_model, "property_value_edited", _Load_mask_load_model_property_value_edited)

_Load_mask_model = mdl.create_property(
    item_handle=_Load_mask,
    name="model",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_Pow_ref_s = mdl.create_property(
    item_handle=_Load_mask,
    name="Pow_ref_s",
    label="CPL Power reference source",
    widget="combo",
    combo_values=['Fixed', 'External input', 'Time Series'],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="CPL Parameters:3",
    unit=""
)


_Load_mask_Pow_ref_s_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
ports = comp_script.port_dynamics(mdl, container_handle)
comp_script.connections_pow_ref_dynamics(mdl, container_handle, ports)

"""
mdl.set_handler_code(_Load_mask_Pow_ref_s, "property_value_changed", _Load_mask_Pow_ref_s_property_value_changed)

_Load_mask_Ts = mdl.create_property(
    item_handle=_Load_mask,
    name="Ts",
    label="CPL Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="CPL Parameters",
    unit="s"
)

_Load_mask_Tfast = mdl.create_property(
    item_handle=_Load_mask,
    name="Tfast",
    label="CPL Fast Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="CPL Parameters",
    unit="s"
)

_Load_mask_CPL_LMT = mdl.create_property(
    item_handle=_Load_mask,
    name="CPL_LMT",
    label="CPL Current limit",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="CPL Parameters",
    unit="pu"
)

_Load_mask_Vn_3ph_CPL = mdl.create_property(
    item_handle=_Load_mask,
    name="Vn_3ph_CPL",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_P_CPL = mdl.create_property(
    item_handle=_Load_mask,
    name="P_CPL",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_Q_CPL = mdl.create_property(
    item_handle=_Load_mask,
    name="Q_CPL",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_kV = mdl.create_property(
    item_handle=_Load_mask,
    name="kV",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_pf = mdl.create_property(
    item_handle=_Load_mask,
    name="pf",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_conn = mdl.create_property(
    item_handle=_Load_mask,
    name="conn",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_kVA = mdl.create_property(
    item_handle=_Load_mask,
    name="kVA",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_basefreq = mdl.create_property(
    item_handle=_Load_mask,
    name="basefreq",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_mask_load_loadshape = mdl.create_property(
    item_handle=_Load_mask,
    name="load_loadshape",
    label="LoadShape object",
    widget="button",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series Settings:4",
    button_label="Choose",
    unit=""
)


_Load_mask_load_loadshape_button_clicked = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.load_loadshape(mdl, container_handle)

"""
mdl.set_handler_code(_Load_mask_load_loadshape, "button_clicked", _Load_mask_load_loadshape_button_clicked)

_Load_mask_loadshape_name = mdl.create_property(
    item_handle=_Load_mask,
    name="loadshape_name",
    label="LoadShape name",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series Settings:4",
    unit=""
)


_Load_mask_loadshape_name_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Load_mask_loadshape_name, "property_value_edited", _Load_mask_loadshape_name_property_value_edited)

_Load_mask_loadshape_from_file = mdl.create_property(
    item_handle=_Load_mask,
    name="loadshape_from_file",
    label="From CSV file",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series Settings:4",
    unit=""
)


_Load_mask_loadshape_from_file_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Load_mask_loadshape_from_file, "property_value_edited", _Load_mask_loadshape_from_file_property_value_edited)

_Load_mask_useactual = mdl.create_property(
    item_handle=_Load_mask,
    name="useactual",
    label="Actual load value",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series Settings:4",
    unit=""
)


_Load_mask_useactual_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Load_mask_useactual, "property_value_edited", _Load_mask_useactual_property_value_edited)

_Load_mask_loadshape_from_file_path = mdl.create_property(
    item_handle=_Load_mask,
    name="loadshape_from_file_path",
    label="LoadShape from file - path",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings:4",
    unit=""
)

_Load_mask_loadshape_from_file_column = mdl.create_property(
    item_handle=_Load_mask,
    name="loadshape_from_file_column",
    label="LoadShape from file - column",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings:4",
    unit=""
)

_Load_mask_loadshape_from_file_header = mdl.create_property(
    item_handle=_Load_mask,
    name="loadshape_from_file_header",
    label="LoadShape from file - header",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings:4",
    unit=""
)

_Load_mask_loadshape = mdl.create_property(
    item_handle=_Load_mask,
    name="loadshape",
    label="LoadShape points",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series Settings:4",
    unit=""
)


_Load_mask_loadshape_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Load_mask_loadshape, "property_value_edited", _Load_mask_loadshape_property_value_edited)

_Load_mask_loadshape_int = mdl.create_property(
    item_handle=_Load_mask,
    name="loadshape_int",
    label="LoadShape interval",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series Settings:4",
    unit=""
)


_Load_mask_loadshape_int_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Load_mask_loadshape_int, "property_value_edited", _Load_mask_loadshape_int_property_value_edited)

_Load_mask_S_Ts = mdl.create_property(
    item_handle=_Load_mask,
    name="S_Ts",
    label="Power profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings:4",
    unit="pu"
)

_Load_mask_Q_Ts = mdl.create_property(
    item_handle=_Load_mask,
    name="Q_Ts",
    label="Reactive power profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit="kVAR"
)

_Load_mask_T_mode = mdl.create_property(
    item_handle=_Load_mask,
    name="T_mode",
    label="Loadshape input mode",
    widget="combo",
    combo_values=['Loadshape index', 'Time'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series Settings",
    unit=""
)


_Load_mask_T_mode_property_value_edited = """
if new_value == "Time":
    mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
else:
    mdl.disable_property(mdl.prop(container_handle, "T_Ts"))

"""
mdl.set_handler_code(_Load_mask_T_mode, "property_value_edited", _Load_mask_T_mode_property_value_edited)

_Load_mask_S_Ts_mode = mdl.create_property(
    item_handle=_Load_mask,
    name="S_Ts_mode",
    label="Power Profile mode",
    widget="combo",
    combo_values=['Manual input'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)


_Load_mask_S_Ts_mode_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
ports = comp_script.port_dynamics(mdl, container_handle)
comp_script.connections_ts_mode_dynamics(mdl, container_handle, ports)

"""
mdl.set_handler_code(_Load_mask_S_Ts_mode, "property_value_changed", _Load_mask_S_Ts_mode_property_value_changed)


_Load_mask_S_Ts_mode_property_value_edited = """
if new_value == "Manual input":
    mdl.disable_property(mdl.prop(container_handle, "T_Ts_max"))
    mdl.disable_property(mdl.prop(container_handle, "del_Ts"))
    mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
else:
    mdl.enable_property(mdl.prop(container_handle, "T_Ts_max"))
    mdl.enable_property(mdl.prop(container_handle, "del_Ts"))
    mdl.disable_property(mdl.prop(container_handle, "T_Ts"))

"""
mdl.set_handler_code(_Load_mask_S_Ts_mode, "property_value_edited", _Load_mask_S_Ts_mode_property_value_edited)

_Load_mask_T_Ts = mdl.create_property(
    item_handle=_Load_mask,
    name="T_Ts",
    label="Loadshape time range",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="Time Series Settings",
    unit="h"
)

_Load_mask_timespan = mdl.create_property(
    item_handle=_Load_mask,
    name="timespan",
    label="Loadshape time span",
    widget="combo",
    combo_values=['Daily', 'Yearly'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)

_Load_mask_T_Ts_internal = mdl.create_property(
    item_handle=_Load_mask,
    name="T_Ts_internal",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)

_Load_mask_dssT = mdl.create_property(
    item_handle=_Load_mask,
    name="dssT",
    label="OpenDSS time interval",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit="h"
)

_Load_mask_dssnpts = mdl.create_property(
    item_handle=_Load_mask,
    name="dssnpts",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)

_Load_mask_T_Ts_max = mdl.create_property(
    item_handle=_Load_mask,
    name="T_Ts_max",
    label="Power profile loop cycle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Time Series Settings",
    unit="s"
)

_Load_mask_del_Ts = mdl.create_property(
    item_handle=_Load_mask,
    name="del_Ts",
    label="Profile start delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Time Series Settings",
    unit="s"
)

_Load_mask_Slen = mdl.create_property(
    item_handle=_Load_mask,
    name="Slen",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)

_Load_mask_T_lim_low = mdl.create_property(
    item_handle=_Load_mask,
    name="T_lim_low",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)

_Load_mask_T_lim_high = mdl.create_property(
    item_handle=_Load_mask,
    name="T_lim_high",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)

_Load_mask_Ts_switch = mdl.create_property(
    item_handle=_Load_mask,
    name="Ts_switch",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series Settings",
    unit=""
)

_Load_mask_enable_monitoring = mdl.create_property(
    item_handle=_Load_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_Load_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Load_mask, "define_icon", _Load_mask_define_icon)

_Load_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_load as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

"""
mdl.set_handler_code(_Load_mask, "init", _Load_mask_init)

_Load_mask_pre_compile = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.restore_all_loads_points(mdl, item_handle)

# HEADER START
global_basefreq = mdl.get_property_value(mdl.prop(item_handle, "global_basefreq"))
fn = mdl.get_property_value(mdl.prop(item_handle, "fn"))
conn_type = mdl.get_property_value(mdl.prop(item_handle, "conn_type"))
ground_connected = mdl.get_property_value(mdl.prop(item_handle, "ground_connected"))
phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
Vn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Vn_3ph"))
Sn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Sn_3ph"))
pf_mode_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_mode_3ph"))
pf_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_3ph"))
pf_3ph_set = mdl.get_property_value(mdl.prop(item_handle, "pf_3ph_set"))
load_model = mdl.get_property_value(mdl.prop(item_handle, "load_model"))
model = mdl.get_property_value(mdl.prop(item_handle, "model"))
Pow_ref_s = mdl.get_property_value(mdl.prop(item_handle, "Pow_ref_s"))
Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
Tfast = mdl.get_property_value(mdl.prop(item_handle, "Tfast"))
CPL_LMT = mdl.get_property_value(mdl.prop(item_handle, "CPL_LMT"))
Vn_3ph_CPL = mdl.get_property_value(mdl.prop(item_handle, "Vn_3ph_CPL"))
P_CPL = mdl.get_property_value(mdl.prop(item_handle, "P_CPL"))
Q_CPL = mdl.get_property_value(mdl.prop(item_handle, "Q_CPL"))
kV = mdl.get_property_value(mdl.prop(item_handle, "kV"))
pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
conn = mdl.get_property_value(mdl.prop(item_handle, "conn"))
kVA = mdl.get_property_value(mdl.prop(item_handle, "kVA"))
basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
load_loadshape = mdl.get_property_value(mdl.prop(item_handle, "load_loadshape"))
loadshape_name = mdl.get_property_value(mdl.prop(item_handle, "loadshape_name"))
loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
loadshape_int = mdl.get_property_value(mdl.prop(item_handle, "loadshape_int"))
S_Ts = mdl.get_property_value(mdl.prop(item_handle, "S_Ts"))
Q_Ts = mdl.get_property_value(mdl.prop(item_handle, "Q_Ts"))
T_mode = mdl.get_property_value(mdl.prop(item_handle, "T_mode"))
S_Ts_mode = mdl.get_property_value(mdl.prop(item_handle, "S_Ts_mode"))
T_Ts = mdl.get_property_value(mdl.prop(item_handle, "T_Ts"))
T_Ts_internal = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_internal"))
dssT = mdl.get_property_value(mdl.prop(item_handle, "dssT"))
dssnpts = mdl.get_property_value(mdl.prop(item_handle, "dssnpts"))
T_Ts_max = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_max"))
del_Ts = mdl.get_property_value(mdl.prop(item_handle, "del_Ts"))
Slen = mdl.get_property_value(mdl.prop(item_handle, "Slen"))
T_lim_low = mdl.get_property_value(mdl.prop(item_handle, "T_lim_low"))
T_lim_high = mdl.get_property_value(mdl.prop(item_handle, "T_lim_high"))
Ts_switch = mdl.get_property_value(mdl.prop(item_handle, "Ts_switch"))
enable_monitoring = mdl.get_property_value(mdl.prop(item_handle, "enable_monitoring"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy
import math

basefreq = fn
kVA = Sn_3ph

if (conn_type == 'Δ'):
    conn = "delta"
else:
    conn = "wye"


if pf_mode_3ph == "Unit":
    pf = 1.0
    P_CPL = Sn_3ph
    Q_CPL = 0
    pf_3ph_set = 0.99
elif pf_mode_3ph == "Lag":
    pf = pf_3ph
    P_CPL = Sn_3ph * pf
    Q_CPL = Sn_3ph * ((1 - pf*pf)**0.5)
    pf_3ph_set = pf_3ph
else:
    pf = -1 * pf_3ph
    P_CPL = Sn_3ph * pf
    Q_CPL = -Sn_3ph * ((1 - pf*pf)**0.5)
    pf_3ph_set = pf_3ph



if phases == "1":
    if ground_connected:
        kV = (Vn_3ph/(1))/1
        Vn_3ph_CPL = kV/(3**0.5)
    else:
        kV = Vn_3ph
        Vn_3ph_CPL = kV
else:
    kV = Vn_3ph
    Vn_3ph_CPL = kV

dssnpts = len(S_Ts)





if load_model == "Constant Impedance":
    model = 2
elif load_model == "Constant Power":
    model = 1
else:
    model = 2


S_Ts = loadshape
dssT = loadshape_int
Slen = len(S_Ts)

if T_mode == "Loadshape index":
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for S_val in S_vec1:
        T_Ts_internal[idxS] = idxS
        idxS += 1
    T_lim_low = T_Ts_internal[0]
    T_lim_high = T_Ts_internal[Slen-1]
elif T_mode == "Time":
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for T_val in T_Ts:
        T_Ts_internal[idxS] = T_val
        idxS += 1
    T_lim_low = T_Ts[0]
    T_lim_high = T_Ts[len(T_Ts)-1]
else:
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for S_val in S_vec1:
        T_Ts_internal[idxS] = idxS
        idxS += 1
    T_lim_low = T_Ts_internal[0]
    T_lim_high = T_Ts_internal[Slen-1]



if T_mode == "Loadshape index":
    Ts_switch = 0
elif T_mode == "Time":
    Ts_switch = 1
else:
    Ts_switch = 0


mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)
mdl.set_property_value(mdl.prop(item_handle, "fn"), fn)
mdl.set_property_value(mdl.prop(item_handle, "ground_connected"), ground_connected)
mdl.set_property_value(mdl.prop(item_handle, "kVA"), kVA)
mdl.set_property_value(mdl.prop(item_handle, "Vn_3ph"), Vn_3ph)
mdl.set_property_value(mdl.prop(item_handle, "Vn_3ph_CPL"), Vn_3ph_CPL)
mdl.set_property_value(mdl.prop(item_handle, "P_CPL"), P_CPL)
mdl.set_property_value(mdl.prop(item_handle, "Q_CPL"), Q_CPL)
mdl.set_property_value(mdl.prop(item_handle, "conn"), conn)
mdl.set_property_value(mdl.prop(item_handle, "pf"), pf)
mdl.set_property_value(mdl.prop(item_handle, "pf_mode_3ph"), pf_mode_3ph)
mdl.set_property_value(mdl.prop(item_handle, "pf_3ph"), pf_3ph)
mdl.set_property_value(mdl.prop(item_handle, "pf_3ph_set"), pf_3ph_set)
mdl.set_property_value(mdl.prop(item_handle, "phases"), phases)
mdl.set_property_value(mdl.prop(item_handle, "kV"), kV)
mdl.set_property_value(mdl.prop(item_handle, "load_model"), load_model)
mdl.set_property_value(mdl.prop(item_handle, "model"), model)
mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
mdl.set_property_value(mdl.prop(item_handle, "Sn_3ph"), Sn_3ph)

mdl.set_property_value(mdl.prop(item_handle, "Tfast"), Tfast)
mdl.set_property_value(mdl.prop(item_handle, "CPL_LMT"), CPL_LMT)
mdl.set_property_value(mdl.prop(item_handle, "S_Ts"), S_Ts)
mdl.set_property_value(mdl.prop(item_handle, "T_Ts_internal"), T_Ts_internal)
mdl.set_property_value(mdl.prop(item_handle, "Slen"), Slen)
mdl.set_property_value(mdl.prop(item_handle, "dssnpts"), dssnpts)
mdl.set_property_value(mdl.prop(item_handle, "T_lim_low"), T_lim_low)
mdl.set_property_value(mdl.prop(item_handle, "T_lim_high"), T_lim_high)
mdl.set_property_value(mdl.prop(item_handle, "Ts_switch"), Ts_switch)

mdl.set_property_value(mdl.prop(item_handle, "loadshape"), loadshape)
mdl.set_property_value(mdl.prop(item_handle, "loadshape_int"), loadshape_int)
mdl.set_property_value(mdl.prop(item_handle, "Sn_3ph"), Sn_3ph)

"""
mdl.set_handler_code(_Load_mask, "pre_compile", _Load_mask_pre_compile)

_Load_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Three-phase/Single-phase constant-impedance/constant-power Load component.</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_Load_mask, _Load_mask_desc)
mdl.set_property_value(mdl.prop(_Load_mask, "Sn_3ph"), "3500")
mdl.set_property_value(mdl.prop(_Load_mask, "T_mode"), "Loadshape index")
mdl.set_property_value(mdl.prop(_Load_mask, "Vn_3ph"), "4.16")
mdl.set_property_value(mdl.prop(_Load_mask, "global_basefreq"), "False")
mdl.set_property_value(mdl.prop(_Load_mask, "loadshape"), "[0.5, 0.7, 1, 0.4, 0.5]")
mdl.set_property_value(mdl.prop(_Load_mask, "loadshape_name"), "loadsh01")
mdl.set_property_value(mdl.prop(_Load_mask, "pf_mode_3ph"), "Lag")


# Component: Load.CPL
_Load_CPL = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Load,
    name="CPL",
    rotation="right",
    flip="flip_horizontal",
    position=(8064, 8208),
    hide_name=False,
    size=(104, 112)
)
_Load_CPL_mask = mdl.create_mask(_Load_CPL)
_Load_CPL_mask_kVLine = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kVLine",
    label="Nominal line voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters:1",
    unit="kV"
)

_Load_CPL_mask_VLL = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="VLL",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_kVLL = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kVLL",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_kP_inp = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kP_inp",
    label="Active power input",
    widget="combo",
    combo_values=['Fixed', 'Variable input'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)


_Load_CPL_mask_kP_inp_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "Variable input":
    P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
    P_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
    P_int = mdl.get_item("From1", parent=comp_handle, item_type=ITEM_TAG)
    conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_P_int:
        mdl.delete_item(conn_P_int)

    if not term_P:
        term_P = mdl.create_component("Termination", parent=comp_handle, name="Termination1", position=(7509,7452), hide_name=True)
        mdl.create_connection(mdl.term(term_P, "in"), P_int)

    if not P_ext:
        P_ext = mdl.create_port(parent=comp_handle, name="P_set", direction="in", kind = "sp",
                            terminal_position=("top", 1),
                            position=(7613, 7452))
        mdl.create_connection(mdl.term(P_inp, "in"), P_ext)
elif new_value == "Fixed":
    P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
    term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
    P_int = mdl.get_item("From1", parent=comp_handle, item_type=ITEM_TAG)
    P_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
    if P_ext:
        mdl.delete_item(P_ext)
    if term_P:
        mdl.delete_item(term_P)
    if conn_P_int:
        mdl.delete_item(conn_P_int)
    mdl.create_connection(mdl.term(P_inp, "in"), P_int, name="connP")

"""
mdl.set_handler_code(_Load_CPL_mask_kP_inp, "property_value_changed", _Load_CPL_mask_kP_inp_property_value_changed)

_Load_CPL_mask_kP_tot = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kP_tot",
    label="Active power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit="kW"
)

_Load_CPL_mask_kP = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kP",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_P = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="P",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_SS = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="SS",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Rsnb = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Rsnb",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_kQ_inp = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kQ_inp",
    label="Reactive power input",
    widget="combo",
    combo_values=['Fixed', 'Variable input'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)


_Load_CPL_mask_kQ_inp_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "Variable input":
    Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
    Q_inp = mdl.get_item("Gain2", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
    Q_int = mdl.get_item("From2", parent=comp_handle, item_type=ITEM_TAG)
    conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_Q_int:
        mdl.delete_item(conn_Q_int)

    if not term_Q:
        term_Q = mdl.create_component("Termination", parent=comp_handle, name="Termination2", position=(7423,7582), hide_name=True)
        mdl.create_connection(mdl.term(term_Q, "in"), Q_int)

    if not Q_ext:
        Q_ext = mdl.create_port(parent=comp_handle, name="Q_set", direction="in", kind = "sp",
                            terminal_position=("top", 2),
                            position=(7502, 7582))
        mdl.create_connection(mdl.term(Q_inp, "in"), Q_ext)
elif new_value == "Fixed":
    Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
    term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
    Q_int = mdl.get_item("From2", parent=comp_handle, item_type=ITEM_TAG)
    Q_inp = mdl.get_item("Gain2", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
    if Q_ext:
        mdl.delete_item(Q_ext)
    if term_Q:
        mdl.delete_item(term_Q)
    if conn_Q_int:
        mdl.delete_item(conn_Q_int)
    mdl.create_connection(mdl.term(Q_inp, "in"), Q_int, name="connQ")

"""
mdl.set_handler_code(_Load_CPL_mask_kQ_inp, "property_value_changed", _Load_CPL_mask_kQ_inp_property_value_changed)

_Load_CPL_mask_kQ_tot = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kQ_tot",
    label="Reactive power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit="kVAR"
)

_Load_CPL_mask_kQ = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="kQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Q = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Q",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Ts = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Ts",
    label="Execution Rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Execution rate:2",
    unit="s"
)

_Load_CPL_mask_Fast_con = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Fast_con",
    label="Fast execution rate output conditioning",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Execution rate",
    unit=""
)

_Load_CPL_mask_Tfst = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Tfst",
    label="Fast execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Execution rate",
    unit="s"
)

_Load_CPL_mask_Tfast_en = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Tfast_en",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_pQc_P = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="pQc_P",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_nQc_P = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="nQc_P",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_pQc_T = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="pQc_T",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_nQc_T = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="nQc_T",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_pQc_Q = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="pQc_Q",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_nQc_Q = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="nQc_Q",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Pc_pQ = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Pc_pQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Pc_nQ = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Pc_nQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Pc_T_pQ = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Pc_T_pQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Pc_T_nQ = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Pc_T_nQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Pc_T = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Pc_T",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_Fc = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Fc",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_phases = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="phases",
    label="Number pf phases",
    widget="combo",
    combo_values=['3', '1'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)


_Load_CPL_mask_phases_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "3":
    pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
    pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
    pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
    CPLA = mdl.get_item("CPL1", parent=comp_handle, item_type=ITEM_COMPONENT)
    CPLB = mdl.get_item("CPL2", parent=comp_handle, item_type=ITEM_COMPONENT)
    CPLC = mdl.get_item("CPL3", parent=comp_handle, item_type=ITEM_COMPONENT)
    mdl.enable_items(CPLB)
    mdl.enable_items(CPLC)
    if not pB:
        pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                            terminal_position=("left", 2),
                            position=(7662, 8094), rotation="up")
        mdl.create_connection(mdl.term(CPLB, "P3"), pB, name="ConnB")
    if not pC:
        pC = mdl.create_port(parent=comp_handle, name="C1", direction="out", kind = "pe",
                            terminal_position=("left", 3),
                            position=(7662, 8175), rotation="up")
        mdl.create_connection(mdl.term(CPLC, "P3"), pC, name="ConnC")

    jun14 = mdl.get_item("Junction14", parent=comp_handle, item_type="junction")
    conn1164 = mdl.get_item("Connection1164", parent=comp_handle, item_type="connection")
    if not conn1164:
        mdl.create_connection(mdl.term(CPLB, "Q"), jun14, name="Connection1164")
    jun13 = mdl.get_item("Junction13", parent=comp_handle, item_type="junction")
    conn1161 = mdl.get_item("Connection1161", parent=comp_handle, item_type="connection")
    if not conn1161:
        mdl.create_connection(mdl.term(CPLB, "P"), jun13, name="Connection1161")
    jun16 = mdl.get_item("Junction16", parent=comp_handle, item_type="junction")
    conn1170 = mdl.get_item("Connection1170", parent=comp_handle, item_type="connection")
    if not conn1170:
        mdl.create_connection(mdl.term(CPLC, "Q"), jun16, name="Connection1170")
    jun15 = mdl.get_item("Junction15", parent=comp_handle, item_type="junction")
    conn1167 = mdl.get_item("Connection1167", parent=comp_handle, item_type="connection")
    if not conn1167:
        mdl.create_connection(mdl.term(CPLC, "P"), jun15, name="Connection1167")

    jun12 = mdl.get_item("Junction12", parent=comp_handle, item_type="junction")
    conn1154 = mdl.get_item("Connection1154", parent=comp_handle, item_type="connection")
    if not conn1154:
        mdl.create_connection(mdl.term(CPLB, "P2"), jun12, name="Connection1154")
    conn1156 = mdl.get_item("Connection1156", parent=comp_handle, item_type="connection")
    if not conn1156:
        mdl.create_connection(mdl.term(CPLC, "P2"), jun12, name="Connection1156")

if new_value == "1":
    pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
    pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
    pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
    CPLA = mdl.get_item("CPL1", parent=comp_handle, item_type=ITEM_COMPONENT)
    CPLB = mdl.get_item("CPL2", parent=comp_handle, item_type=ITEM_COMPONENT)
    CPLC = mdl.get_item("CPL3", parent=comp_handle, item_type=ITEM_COMPONENT)

    if pB:
        mdl.delete_item(pB)
    if pC:
        mdl.delete_item(pC)

    conn1164 = mdl.get_item("Connection1164", parent=comp_handle, item_type="connection")
    if conn1164:
        mdl.delete_item(conn1164)
    conn1161 = mdl.get_item("Connection1161", parent=comp_handle, item_type="connection")
    if conn1161:
        mdl.delete_item(conn1161)
    conn1170 = mdl.get_item("Connection1170", parent=comp_handle, item_type="connection")
    if conn1170:
        mdl.delete_item(conn1170)
    conn1167 = mdl.get_item("Connection1167", parent=comp_handle, item_type="connection")
    if conn1167:
        mdl.delete_item(conn1167)
    conn1154 = mdl.get_item("Connection1154", parent=comp_handle, item_type="connection")
    if conn1154:
        mdl.delete_item(conn1154)
    conn1156 = mdl.get_item("Connection1156", parent=comp_handle, item_type="connection")
    if conn1156:
        mdl.delete_item(conn1156)

    mdl.disable_items(CPLB)
    mdl.disable_items(CPLC)

"""
mdl.set_handler_code(_Load_CPL_mask_phases, "property_value_changed", _Load_CPL_mask_phases_property_value_changed)

_Load_CPL_mask_Freq = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="Freq",
    label="Nominal frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit="Hz"
)

_Load_CPL_mask_inv_ph = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="inv_ph",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CPL_mask_CPL_curr = mdl.create_property(
    item_handle=_Load_CPL_mask,
    name="CPL_curr",
    label="Current limit ",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit="pu"
)


_Load_CPL_mask_pre_compile = """
# HEADER START
kVLine = mdl.get_property_value(mdl.prop(item_handle, "kVLine"))
VLL = mdl.get_property_value(mdl.prop(item_handle, "VLL"))
kVLL = mdl.get_property_value(mdl.prop(item_handle, "kVLL"))
kP_inp = mdl.get_property_value(mdl.prop(item_handle, "kP_inp"))
kP_tot = mdl.get_property_value(mdl.prop(item_handle, "kP_tot"))
kP = mdl.get_property_value(mdl.prop(item_handle, "kP"))
P = mdl.get_property_value(mdl.prop(item_handle, "P"))
SS = mdl.get_property_value(mdl.prop(item_handle, "SS"))
Rsnb = mdl.get_property_value(mdl.prop(item_handle, "Rsnb"))
kQ_inp = mdl.get_property_value(mdl.prop(item_handle, "kQ_inp"))
kQ_tot = mdl.get_property_value(mdl.prop(item_handle, "kQ_tot"))
kQ = mdl.get_property_value(mdl.prop(item_handle, "kQ"))
Q = mdl.get_property_value(mdl.prop(item_handle, "Q"))
Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
Fast_con = mdl.get_property_value(mdl.prop(item_handle, "Fast_con"))
Tfst = mdl.get_property_value(mdl.prop(item_handle, "Tfst"))
Tfast_en = mdl.get_property_value(mdl.prop(item_handle, "Tfast_en"))
pQc_P = mdl.get_property_value(mdl.prop(item_handle, "pQc_P"))
nQc_P = mdl.get_property_value(mdl.prop(item_handle, "nQc_P"))
pQc_T = mdl.get_property_value(mdl.prop(item_handle, "pQc_T"))
nQc_T = mdl.get_property_value(mdl.prop(item_handle, "nQc_T"))
pQc_Q = mdl.get_property_value(mdl.prop(item_handle, "pQc_Q"))
nQc_Q = mdl.get_property_value(mdl.prop(item_handle, "nQc_Q"))
Pc_pQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_pQ"))
Pc_nQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_nQ"))
Pc_T_pQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_T_pQ"))
Pc_T_nQ = mdl.get_property_value(mdl.prop(item_handle, "Pc_T_nQ"))
Pc_T = mdl.get_property_value(mdl.prop(item_handle, "Pc_T"))
Fc = mdl.get_property_value(mdl.prop(item_handle, "Fc"))
phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
Freq = mdl.get_property_value(mdl.prop(item_handle, "Freq"))
inv_ph = mdl.get_property_value(mdl.prop(item_handle, "inv_ph"))
CPL_curr = mdl.get_property_value(mdl.prop(item_handle, "CPL_curr"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy
import math

kVLL = kVLine/(3**0.5)
VLL = kVLL * 1000
kP = kP_tot / 3
kQ = kQ_tot / 3
P = kP * 1000
Q = kQ * 1000
SS = (P*P + Q*Q)**0.5

if SS==0:
    Rsnb = 100000
else:
    Rsnb = 30 * (VLL*VLL/(SS))

if Fast_con:
    Tfast_en = 1
else:
    Tfast_en = 0

pQc_P = -1/9.7
nQc_P = -0.097

pQc_T = -0.015*(Ts-600e-6)/Ts
nQc_T = -0.012*(Ts-600e-6)/Ts

pQc_Q = 0.0266
nQc_Q = 0.014

Pc_pQ = 0.095
Pc_nQ = 0.0933

Pc_T = 0.005*(Ts-600e-6)/Ts

Pc_T_pQ = 0.0075*(Ts-600e-6)/Ts
Pc_T_nQ = 0.01*(Ts-600e-6)/Ts

Fc = -0*1/15

if phases == "3":
    inv_ph = 1/3
else:
    inv_ph = 1


mdl.set_property_value(mdl.prop(item_handle, "kVLine"), kVLine)
mdl.set_property_value(mdl.prop(item_handle, "kVLL"), kVLL)
mdl.set_property_value(mdl.prop(item_handle, "kP"), kP)
mdl.set_property_value(mdl.prop(item_handle, "VLL"), VLL)
mdl.set_property_value(mdl.prop(item_handle, "P"), P)
mdl.set_property_value(mdl.prop(item_handle, "Rsnb"), Rsnb)
mdl.set_property_value(mdl.prop(item_handle, "kQ"), kQ)
mdl.set_property_value(mdl.prop(item_handle, "Q"), Q)
mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
mdl.set_property_value(mdl.prop(item_handle, "kP_tot"), kP_tot)
mdl.set_property_value(mdl.prop(item_handle, "kQ_tot"), kQ_tot)
mdl.set_property_value(mdl.prop(item_handle, "Tfast_en"), Tfast_en)

mdl.set_property_value(mdl.prop(item_handle, "pQc_P"), pQc_P)
mdl.set_property_value(mdl.prop(item_handle, "nQc_P"), nQc_P)

mdl.set_property_value(mdl.prop(item_handle, "pQc_T"), pQc_T)
mdl.set_property_value(mdl.prop(item_handle, "nQc_T"), nQc_T)

mdl.set_property_value(mdl.prop(item_handle, "pQc_Q"), pQc_Q)
mdl.set_property_value(mdl.prop(item_handle, "nQc_Q"), nQc_Q)

mdl.set_property_value(mdl.prop(item_handle, "Pc_pQ"), Pc_pQ)
mdl.set_property_value(mdl.prop(item_handle, "Pc_nQ"), Pc_nQ)

mdl.set_property_value(mdl.prop(item_handle, "Pc_T"), Pc_T)

mdl.set_property_value(mdl.prop(item_handle, "Pc_T_pQ"), Pc_T_pQ)
mdl.set_property_value(mdl.prop(item_handle, "Pc_T_nQ"), Pc_T_nQ)

mdl.set_property_value(mdl.prop(item_handle, "Fc"), Fc)
mdl.set_property_value(mdl.prop(item_handle, "inv_ph"), inv_ph)

mdl.set_property_value(mdl.prop(item_handle, "Freq"), Freq)
mdl.set_property_value(mdl.prop(item_handle, "SS"), SS)
mdl.set_property_value(mdl.prop(item_handle, "Tfst"), Tfst)

mdl.set_property_value(mdl.prop(item_handle, "CPL_curr"), CPL_curr)

"""
mdl.set_handler_code(_Load_CPL_mask, "pre_compile", _Load_CPL_mask_pre_compile)

_Load_CPL_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_Load_CPL_mask, _Load_CPL_mask_desc)


# Component: Load.CPL.CPL3
_Load_CPL_CPL3 = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Load_CPL,
    name="CPL3",
    rotation="up",
    flip="flip_none",
    position=(7832, 8176),
    hide_name=False,
    size=(48, 48)
)


# Component: Load.CPL.CPL3.Limit1
_Load_CPL_CPL3_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL3,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7576, 8520),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Limit1, "lower_limit"), "0.1")


# Component: Load.CPL.CPL3.Product1
_Load_CPL_CPL3_Product1 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product1",
    rotation="up",
    flip="flip_none",
    position=(8040, 8504),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Product1, "signs"), "*/")


# Component: Load.CPL.CPL3.Product2
_Load_CPL_CPL3_Product2 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product2",
    rotation="up",
    flip="flip_none",
    position=(7656, 8528),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Product3
_Load_CPL_CPL3_Product3 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product3",
    rotation="up",
    flip="flip_vertical",
    position=(8504, 8496),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Discrete Transfer Function1
_Load_CPL_CPL3_Discrete_Transfer_Function1 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_Load_CPL_CPL3,
    name="Discrete Transfer Function1",
    rotation="up",
    flip="flip_none",
    position=(8408, 8488),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function1, "a_coeff"), "[0.01,1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function1, "b_coeff"), "[1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function1, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function1, "method"), "Euler")


# Component: Load.CPL.CPL3.R1
_Load_CPL_CPL3_R1 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Load_CPL_CPL3,
    name="R1",
    rotation="up",
    flip="flip_none",
    position=(8088, 9240),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_R1, "resistance"), "Rsnb")


# Component: Load.CPL.CPL3.Isp1
_Load_CPL_CPL3_Isp1 = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Load_CPL_CPL3,
    name="Isp1",
    rotation="up",
    flip="flip_horizontal",
    position=(8080, 9136),
    hide_name=False,
    size=(64, 32)
)


# Component: Load.CPL.CPL3.Varms
_Load_CPL_CPL3_Varms = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Load_CPL_CPL3,
    name="Varms",
    rotation="up",
    flip="flip_none",
    position=(8080, 9440),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Varms, "sig_output"), "True")


# Component: Load.CPL.CPL3.Va
_Load_CPL_CPL3_Va = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Load_CPL_CPL3,
    name="Va",
    rotation="up",
    flip="flip_none",
    position=(8080, 9552),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Va, "execution_rate"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Va, "sig_output"), "True")


# Component: Load.CPL.CPL3.Limit2
_Load_CPL_CPL3_Limit2 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL3,
    name="Limit2",
    rotation="up",
    flip="flip_none",
    position=(8128, 8504),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Signal switch20
_Load_CPL_CPL3_Signal_switch20 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch20",
    rotation="up",
    flip="flip_none",
    position=(8312, 8488),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Signal_switch20, "threshold"), "0.5")


# Component: Load.CPL.CPL3.Gain2
_Load_CPL_CPL3_Gain2 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain2",
    rotation="up",
    flip="flip_none",
    position=(7928, 8472),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain2, "gain"), "1000")


# Component: Load.CPL.CPL3.Comparator1
_Load_CPL_CPL3_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_CPL_CPL3,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(8280, 8336),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Constant2
_Load_CPL_CPL3_Constant2 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant2",
    rotation="up",
    flip="flip_none",
    position=(7880, 8400),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant2, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant2, "value"), "CPL_curr/(VLL*kVLL)")


# Component: Load.CPL.CPL3.Product4
_Load_CPL_CPL3_Product4 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product4",
    rotation="up",
    flip="flip_vertical",
    position=(7968, 8424),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Gain16
_Load_CPL_CPL3_Gain16 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain16",
    rotation="up",
    flip="flip_none",
    position=(8336, 8264),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain16, "gain"), "-1")


# Component: Load.CPL.CPL3.Limit10
_Load_CPL_CPL3_Limit10 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL3,
    name="Limit10",
    rotation="up",
    flip="flip_none",
    position=(8256, 8264),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Limit10, "upper_limit"), "0")


# Component: Load.CPL.CPL3.Sign1
_Load_CPL_CPL3_Sign1 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL3,
    name="Sign1",
    rotation="up",
    flip="flip_none",
    position=(8400, 8264),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Product19
_Load_CPL_CPL3_Product19 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product19",
    rotation="up",
    flip="flip_none",
    position=(8688, 8016),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Product19, "signs"), "3")


# Component: Load.CPL.CPL3.Limit11
_Load_CPL_CPL3_Limit11 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL3,
    name="Limit11",
    rotation="up",
    flip="flip_none",
    position=(7824, 8032),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Limit11, "lower_limit"), "0")


# Component: Load.CPL.CPL3.Sign2
_Load_CPL_CPL3_Sign2 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL3,
    name="Sign2",
    rotation="up",
    flip="flip_none",
    position=(7888, 8032),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Product14
_Load_CPL_CPL3_Product14 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product14",
    rotation="up",
    flip="flip_none",
    position=(8104, 8184),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Product14, "signs"), "*/")


# Component: Load.CPL.CPL3.Gain15
_Load_CPL_CPL3_Gain15 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain15",
    rotation="up",
    flip="flip_none",
    position=(8000, 8176),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain15, "gain"), "1000")


# Component: Load.CPL.CPL3.Limit7
_Load_CPL_CPL3_Limit7 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL3,
    name="Limit7",
    rotation="up",
    flip="flip_none",
    position=(8176, 8184),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Limit7, "lower_limit"), "0")


# Component: Load.CPL.CPL3.Signal switch23
_Load_CPL_CPL3_Signal_switch23 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch23",
    rotation="up",
    flip="flip_none",
    position=(8384, 8168),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Signal_switch23, "threshold"), "0.5")


# Component: Load.CPL.CPL3.Comparator4
_Load_CPL_CPL3_Comparator4 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_CPL_CPL3,
    name="Comparator4",
    rotation="up",
    flip="flip_vertical",
    position=(8320, 8096),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Product15
_Load_CPL_CPL3_Product15 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product15",
    rotation="up",
    flip="flip_none",
    position=(8104, 8088),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Constant8
_Load_CPL_CPL3_Constant8 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant8",
    rotation="up",
    flip="flip_none",
    position=(8008, 8112),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant8, "execution_rate"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant8, "value"), "CPL_curr/(VLL*kVLL)")


# Component: Load.CPL.CPL3.Discrete Transfer Function4
_Load_CPL_CPL3_Discrete_Transfer_Function4 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_Load_CPL_CPL3,
    name="Discrete Transfer Function4",
    rotation="up",
    flip="flip_none",
    position=(8448, 8168),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function4, "a_coeff"), "[0.01,1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function4, "b_coeff"), "[1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function4, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Discrete_Transfer_Function4, "method"), "Euler")


# Component: Load.CPL.CPL3.Gain25
_Load_CPL_CPL3_Gain25 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain25",
    rotation="up",
    flip="flip_none",
    position=(8304, 8616),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain25, "gain"), "1.41421356")


# Component: Load.CPL.CPL3.Product25
_Load_CPL_CPL3_Product25 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product25",
    rotation="up",
    flip="flip_vertical",
    position=(8416, 8584),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.C1
_Load_CPL_CPL3_C1 = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Load_CPL_CPL3,
    name="C1",
    rotation="up",
    flip="flip_none",
    position=(8088, 9336),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C1, "capacitance"), "1/(Rsnb*2*np.pi*Freq)")


# Component: Load.CPL.CPL3.Trigonometric function2
_Load_CPL_CPL3_Trigonometric_function2 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL3,
    name="Trigonometric function2",
    rotation="up",
    flip="flip_none",
    position=(8304, 8696),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Sum16
_Load_CPL_CPL3_Sum16 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL3,
    name="Sum16",
    rotation="up",
    flip="flip_none",
    position=(8224, 8696),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Sum16, "signs"), "++")


# Component: Load.CPL.CPL3.Constant26
_Load_CPL_CPL3_Constant26 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant26",
    rotation="up",
    flip="flip_none",
    position=(8128, 8712),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant26, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant26, "value"), "-np.pi/2")


# Component: Load.CPL.CPL3.Constant28
_Load_CPL_CPL3_Constant28 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant28",
    rotation="up",
    flip="flip_none",
    position=(9152, 8824),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant28, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant28, "value"), "Tfst")


# Component: Load.CPL.CPL3.Product26
_Load_CPL_CPL3_Product26 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product26",
    rotation="up",
    flip="flip_none",
    position=(8520, 8704),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Product26, "signs"), "**")


# Component: Load.CPL.CPL3.Sum17
_Load_CPL_CPL3_Sum17 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL3,
    name="Sum17",
    rotation="up",
    flip="flip_none",
    position=(8224, 8784),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Sum17, "signs"), "++")


# Component: Load.CPL.CPL3.Constant27
_Load_CPL_CPL3_Constant27 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant27",
    rotation="up",
    flip="flip_none",
    position=(8112, 8808),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant27, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant27, "value"), "np.pi/2")


# Component: Load.CPL.CPL3.Trigonometric function3
_Load_CPL_CPL3_Trigonometric_function3 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL3,
    name="Trigonometric function3",
    rotation="up",
    flip="flip_none",
    position=(8304, 8784),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Product27
_Load_CPL_CPL3_Product27 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product27",
    rotation="up",
    flip="flip_vertical",
    position=(8416, 8776),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Product27, "signs"), "**")


# Component: Load.CPL.CPL3.Product17
_Load_CPL_CPL3_Product17 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product17",
    rotation="up",
    flip="flip_none",
    position=(8672, 8264),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Product17, "signs"), "3")


# Component: Load.CPL.CPL3.Sum5
_Load_CPL_CPL3_Sum5 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL3,
    name="Sum5",
    rotation="right",
    flip="flip_none",
    position=(8880, 8560),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Sum5, "signs"), "+++")


# Component: Load.CPL.CPL3.Abs1
_Load_CPL_CPL3_Abs1 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL3,
    name="Abs1",
    rotation="up",
    flip="flip_none",
    position=(7824, 8080),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Product20
_Load_CPL_CPL3_Product20 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product20",
    rotation="up",
    flip="flip_none",
    position=(6976, 8048),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Gain18
_Load_CPL_CPL3_Gain18 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain18",
    rotation="up",
    flip="flip_none",
    position=(7088, 8048),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain18, "gain"), "Pc_pQ")


# Component: Load.CPL.CPL3.Sum8
_Load_CPL_CPL3_Sum8 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL3,
    name="Sum8",
    rotation="right",
    flip="flip_none",
    position=(7472, 8328),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Sum8, "signs"), "+++-")


# Component: Load.CPL.CPL3.Sign3
_Load_CPL_CPL3_Sign3 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL3,
    name="Sign3",
    rotation="up",
    flip="flip_none",
    position=(6944, 7992),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Signal switch24
_Load_CPL_CPL3_Signal_switch24 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch24",
    rotation="up",
    flip="flip_none",
    position=(7200, 8064),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Gain19
_Load_CPL_CPL3_Gain19 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain19",
    rotation="up",
    flip="flip_none",
    position=(7088, 8080),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain19, "gain"), "Pc_nQ")


# Component: Load.CPL.CPL3.Gain20
_Load_CPL_CPL3_Gain20 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain20",
    rotation="up",
    flip="flip_none",
    position=(7480, 7904),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain20, "gain"), "1/(1000*Rsnb)")


# Component: Load.CPL.CPL3.Product21
_Load_CPL_CPL3_Product21 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product21",
    rotation="up",
    flip="flip_vertical",
    position=(7224, 7720),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Gain21
_Load_CPL_CPL3_Gain21 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain21",
    rotation="up",
    flip="flip_none",
    position=(7320, 7720),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain21, "gain"), "nQc_P")


# Component: Load.CPL.CPL3.Sum9
_Load_CPL_CPL3_Sum9 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL3,
    name="Sum9",
    rotation="right",
    flip="flip_none",
    position=(7608, 7952),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Sum9, "signs"), "+++++")


# Component: Load.CPL.CPL3.Limit12
_Load_CPL_CPL3_Limit12 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL3,
    name="Limit12",
    rotation="up",
    flip="flip_none",
    position=(7120, 7768),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Limit12, "lower_limit"), "0")


# Component: Load.CPL.CPL3.Signal switch25
_Load_CPL_CPL3_Signal_switch25 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch25",
    rotation="up",
    flip="flip_vertical",
    position=(7480, 7736),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Gain22
_Load_CPL_CPL3_Gain22 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain22",
    rotation="up",
    flip="flip_none",
    position=(7320, 7752),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain22, "gain"), "pQc_P")


# Component: Load.CPL.CPL3.Constant14
_Load_CPL_CPL3_Constant14 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant14",
    rotation="up",
    flip="flip_none",
    position=(6976, 8168),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant14, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant14, "value"), "Pc_T_pQ")


# Component: Load.CPL.CPL3.Signal switch26
_Load_CPL_CPL3_Signal_switch26 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch26",
    rotation="up",
    flip="flip_none",
    position=(7088, 8192),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Constant15
_Load_CPL_CPL3_Constant15 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant15",
    rotation="up",
    flip="flip_none",
    position=(6976, 8208),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant15, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant15, "value"), "Pc_T_nQ")


# Component: Load.CPL.CPL3.Constant17
_Load_CPL_CPL3_Constant17 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant17",
    rotation="up",
    flip="flip_none",
    position=(7032, 7848),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant17, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant17, "value"), "pQc_T")


# Component: Load.CPL.CPL3.Signal switch27
_Load_CPL_CPL3_Signal_switch27 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch27",
    rotation="up",
    flip="flip_none",
    position=(7120, 7872),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Constant18
_Load_CPL_CPL3_Constant18 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant18",
    rotation="up",
    flip="flip_none",
    position=(7032, 7888),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant18, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant18, "value"), "nQc_T")


# Component: Load.CPL.CPL3.Abs2
_Load_CPL_CPL3_Abs2 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL3,
    name="Abs2",
    rotation="up",
    flip="flip_none",
    position=(8192, 8328),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Abs3
_Load_CPL_CPL3_Abs3 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL3,
    name="Abs3",
    rotation="left",
    flip="flip_none",
    position=(8232, 8384),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Sum14
_Load_CPL_CPL3_Sum14 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL3,
    name="Sum14",
    rotation="up",
    flip="flip_none",
    position=(6528, 7768),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Sum14, "signs"), "+-")


# Component: Load.CPL.CPL3.Constant19
_Load_CPL_CPL3_Constant19 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant19",
    rotation="up",
    flip="flip_none",
    position=(6432, 7808),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant19, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant19, "value"), "60")


# Component: Load.CPL.CPL3.Sum15
_Load_CPL_CPL3_Sum15 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL3,
    name="Sum15",
    rotation="up",
    flip="flip_none",
    position=(6680, 7712),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Sum15, "signs"), "+-")


# Component: Load.CPL.CPL3.Constant20
_Load_CPL_CPL3_Constant20 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant20",
    rotation="up",
    flip="flip_none",
    position=(6600, 7704),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant20, "execution_rate"), "Ts")


# Component: Load.CPL.CPL3.Gain24
_Load_CPL_CPL3_Gain24 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain24",
    rotation="up",
    flip="flip_none",
    position=(6600, 7768),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain24, "gain"), "Fc")


# Component: Load.CPL.CPL3.Edge Detection1
_Load_CPL_CPL3_Edge_Detection1 = mdl.create_component(
    type_name="core/Edge Detection",
    parent=_Load_CPL_CPL3,
    name="Edge Detection1",
    rotation="right",
    flip="flip_none",
    position=(9328, 8680),
    hide_name=True,
    size=(32, 32)
)


# Component: Load.CPL.CPL3.Rate Transition1
_Load_CPL_CPL3_Rate_Transition1 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL3,
    name="Rate Transition1",
    rotation="up",
    flip="flip_none",
    position=(8960, 8632),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Rate_Transition1, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL3.C function1
_Load_CPL_CPL3_C_function1 = mdl.create_component(
    type_name="core/C function",
    parent=_Load_CPL_CPL3,
    name="C function1",
    rotation="right",
    flip="flip_none",
    position=(9256, 8888),
    hide_name=True,
    size=(48, 128)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "global_variables"), "real counter;real m0;real m1;real m2;real corr;")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "init_fnc"), "/*Begin code section*/
counter=0;
/*End code section*/")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "input_terminals"), "real sync;real z;real zi;real zii;real Ts;real Ts_fast;")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "input_terminals_feedthrough"), "True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "input_terminals_show_labels"), "True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "output_fnc"), "/*Begin code section*/
counter = counter + Ts_fast;
if (sync > 0 ) {
    out = z;
    counter = 0;

}
else {
    corr = 1 - 0.11 * (Ts - Ts_fast)/Ts;
    m2 = (zi - zii)/Ts;
    m1 = (z - zi)/Ts;
    m0 = m1 + (m1-m2);

    out = z + counter * corr * m0;
}

if (counter >= Ts) {
    counter = 0;
}
/*End code section*/")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "output_terminals_dimensions"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "output_terminals_feedthrough"), "True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_C_function1, "output_terminals_show_labels"), "True")


# Component: Load.CPL.CPL3.Unit Delay9
_Load_CPL_CPL3_Unit_Delay9 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Load_CPL_CPL3,
    name="Unit Delay9",
    rotation="up",
    flip="flip_none",
    position=(8960, 8696),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Unit Delay10
_Load_CPL_CPL3_Unit_Delay10 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Load_CPL_CPL3,
    name="Unit Delay10",
    rotation="up",
    flip="flip_none",
    position=(9064, 8752),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Constant21
_Load_CPL_CPL3_Constant21 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant21",
    rotation="up",
    flip="flip_none",
    position=(9192, 8800),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant21, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant21, "value"), "Ts")


# Component: Load.CPL.CPL3.Rate Transition2
_Load_CPL_CPL3_Rate_Transition2 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL3,
    name="Rate Transition2",
    rotation="up",
    flip="flip_none",
    position=(9064, 8696),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Rate_Transition2, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL3.Rate Transition3
_Load_CPL_CPL3_Rate_Transition3 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL3,
    name="Rate Transition3",
    rotation="up",
    flip="flip_none",
    position=(9144, 8752),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Rate_Transition3, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL3.Signal switch28
_Load_CPL_CPL3_Signal_switch28 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch28",
    rotation="up",
    flip="flip_vertical",
    position=(9408, 9000),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Signal_switch28, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Signal_switch28, "threshold"), "Tfst")


# Component: Load.CPL.CPL3.Constant22
_Load_CPL_CPL3_Constant22 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant22",
    rotation="up",
    flip="flip_none",
    position=(9360, 9056),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant22, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant22, "value"), "Ts")


# Component: Load.CPL.CPL3.Signal switch29
_Load_CPL_CPL3_Signal_switch29 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch29",
    rotation="up",
    flip="flip_vertical",
    position=(9504, 8960),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Signal_switch29, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Signal_switch29, "threshold"), "0.5")


# Component: Load.CPL.CPL3.Constant23
_Load_CPL_CPL3_Constant23 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant23",
    rotation="up",
    flip="flip_none",
    position=(9448, 9048),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant23, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant23, "value"), "Tfast_en")


# Component: Load.CPL.CPL3.Product22
_Load_CPL_CPL3_Product22 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product22",
    rotation="up",
    flip="flip_none",
    position=(7232, 7864),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Product23
_Load_CPL_CPL3_Product23 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product23",
    rotation="up",
    flip="flip_none",
    position=(7200, 8200),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Constant24
_Load_CPL_CPL3_Constant24 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant24",
    rotation="up",
    flip="flip_none",
    position=(7224, 7616),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant24, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant24, "value"), "pQc_Q")


# Component: Load.CPL.CPL3.Constant25
_Load_CPL_CPL3_Constant25 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL3,
    name="Constant25",
    rotation="up",
    flip="flip_none",
    position=(7224, 7568),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant25, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Constant25, "value"), "nQc_Q")


# Component: Load.CPL.CPL3.Signal switch30
_Load_CPL_CPL3_Signal_switch30 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL3,
    name="Signal switch30",
    rotation="up",
    flip="flip_vertical",
    position=(7296, 7600),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Product24
_Load_CPL_CPL3_Product24 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL3,
    name="Product24",
    rotation="up",
    flip="flip_none",
    position=(7448, 7608),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL3.Termination70
_Load_CPL_CPL3_Termination70 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL3,
    name="Termination70",
    rotation="left",
    flip="flip_none",
    position=(7896, 8576),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Termination71
_Load_CPL_CPL3_Termination71 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL3,
    name="Termination71",
    rotation="left",
    flip="flip_none",
    position=(7928, 8616),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Termination72
_Load_CPL_CPL3_Termination72 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL3,
    name="Termination72",
    rotation="right",
    flip="flip_none",
    position=(7904, 8760),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL3.Gain26
_Load_CPL_CPL3_Gain26 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL3,
    name="Gain26",
    rotation="up",
    flip="flip_none",
    position=(7384, 8280),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Gain26, "gain"), "1/(1000*Rsnb)")


# Component: Load.CPL.CPL3.Single phase PLL1
_Load_CPL_CPL3_Single_phase_PLL1 = mdl.create_component(
    type_name="core/Single phase PLL",
    parent=_Load_CPL_CPL3,
    name="Single phase PLL1",
    rotation="up",
    flip="flip_none",
    position=(7840, 8672),
    hide_name=True,
    size=(64, 98)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Single_phase_PLL1, "k_SOGI"), "0.6")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Single_phase_PLL1, "kd_PLL_HIGH"), "0")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Single_phase_PLL1, "kd_PLL_LOW"), "0")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Single_phase_PLL1, "kp_PLL_HIGH"), "65.7")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Single_phase_PLL1, "kp_PLL_LOW"), "5.81e2")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL3_Single_phase_PLL1, "offset_Hz"), "Freq")


# Component: Load.CPL.CPL3.Trigonometric function1
_Load_CPL_CPL3_Trigonometric_function1 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL3,
    name="Trigonometric function1",
    rotation="up",
    flip="flip_none",
    position=(8136, 8576),
    hide_name=True,
    size=(0, 0)
)


# Port: Load.CPL.CPL3.P2
_Load_CPL_CPL3_P2 = mdl.create_port(
    name="P2",
    parent=_Load_CPL_CPL3,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8256, 9136)
)

# Port: Load.CPL.CPL3.P3
_Load_CPL_CPL3_P3 = mdl.create_port(
    name="P3",
    parent=_Load_CPL_CPL3,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7888, 9136)
)

# Port: Load.CPL.CPL3.P
_Load_CPL_CPL3_P = mdl.create_port(
    name="P",
    parent=_Load_CPL_CPL3,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6400, 7944)
)

# Port: Load.CPL.CPL3.Q
_Load_CPL_CPL3_Q = mdl.create_port(
    name="Q",
    parent=_Load_CPL_CPL3,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6400, 8016)
)

# Tag: Load.CPL.CPL3.Goto1
_Load_CPL_CPL3_Goto1 = mdl.create_tag(
    value="ws",
    name="Goto1",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8000, 8672)
)

# Tag: Load.CPL.CPL3.From1
_Load_CPL_CPL3_From1 = mdl.create_tag(
    value="ws",
    name="From1",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6432, 7760)
)

# Tag: Load.CPL.CPL3.Goto2
_Load_CPL_CPL3_Goto2 = mdl.create_tag(
    value="kP",
    name="Goto2",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6480, 7944)
)

# Tag: Load.CPL.CPL3.Goto3
_Load_CPL_CPL3_Goto3 = mdl.create_tag(
    value="kQ",
    name="Goto3",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6480, 8016)
)

# Tag: Load.CPL.CPL3.From2
_Load_CPL_CPL3_From2 = mdl.create_tag(
    value="kP",
    name="From2",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7400, 8240)
)

# Tag: Load.CPL.CPL3.From3
_Load_CPL_CPL3_From3 = mdl.create_tag(
    value="kP",
    name="From3",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7032, 7768)
)

# Tag: Load.CPL.CPL3.From4
_Load_CPL_CPL3_From4 = mdl.create_tag(
    value="kQ",
    name="From4",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7544, 7792)
)

# Tag: Load.CPL.CPL3.From5
_Load_CPL_CPL3_From5 = mdl.create_tag(
    value="kQ",
    name="From5",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6824, 7992)
)

# Tag: Load.CPL.CPL3.From6
_Load_CPL_CPL3_From6 = mdl.create_tag(
    value="kQ",
    name="From6",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7112, 8248)
)

# Tag: Load.CPL.CPL3.From7
_Load_CPL_CPL3_From7 = mdl.create_tag(
    value="kQ",
    name="From7",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7360, 7616)
)

# Tag: Load.CPL.CPL3.Goto4
_Load_CPL_CPL3_Goto4 = mdl.create_tag(
    value="Va",
    name="Goto4",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="down",
    flip="flip_none",
    position=(8024, 9504)
)

# Tag: Load.CPL.CPL3.From8
_Load_CPL_CPL3_From8 = mdl.create_tag(
    value="Va",
    name="From8",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7728, 8672)
)

# Tag: Load.CPL.CPL3.From9
_Load_CPL_CPL3_From9 = mdl.create_tag(
    value="Va_rms",
    name="From9",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8216, 8616)
)

# Tag: Load.CPL.CPL3.From10
_Load_CPL_CPL3_From10 = mdl.create_tag(
    value="Va_rms",
    name="From10",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7488, 8520)
)

# Tag: Load.CPL.CPL3.Goto5
_Load_CPL_CPL3_Goto5 = mdl.create_tag(
    value="Va_rms",
    name="Goto5",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="down",
    flip="flip_none",
    position=(8024, 9400)
)

# Tag: Load.CPL.CPL3.Goto6
_Load_CPL_CPL3_Goto6 = mdl.create_tag(
    value="Va_rms_squared",
    name="Goto6",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7792, 8528)
)

# Tag: Load.CPL.CPL3.From11
_Load_CPL_CPL3_From11 = mdl.create_tag(
    value="Va_rms_squared",
    name="From11",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7928, 8528)
)

# Tag: Load.CPL.CPL3.From12
_Load_CPL_CPL3_From12 = mdl.create_tag(
    value="Va_rms_squared",
    name="From12",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7360, 7904)
)

# Tag: Load.CPL.CPL3.From13
_Load_CPL_CPL3_From13 = mdl.create_tag(
    value="Va_rms_squared",
    name="From13",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7272, 8280)
)

# Tag: Load.CPL.CPL3.From14
_Load_CPL_CPL3_From14 = mdl.create_tag(
    value="Va_rms_squared",
    name="From14",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7984, 8208)
)

# Tag: Load.CPL.CPL3.Goto7
_Load_CPL_CPL3_Goto7 = mdl.create_tag(
    value="Q_sign",
    name="Goto7",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7024, 7992)
)

# Tag: Load.CPL.CPL3.From15
_Load_CPL_CPL3_From15 = mdl.create_tag(
    value="Q_sign",
    name="From15",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7424, 7792)
)

# Tag: Load.CPL.CPL3.From16
_Load_CPL_CPL3_From16 = mdl.create_tag(
    value="Q_sign",
    name="From16",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7232, 7664)
)

# Tag: Load.CPL.CPL3.From17
_Load_CPL_CPL3_From17 = mdl.create_tag(
    value="Q_sign",
    name="From17",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7064, 7800)
)

# Tag: Load.CPL.CPL3.From18
_Load_CPL_CPL3_From18 = mdl.create_tag(
    value="Q_sign",
    name="From18",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7040, 8120)
)

# Tag: Load.CPL.CPL3.From19
_Load_CPL_CPL3_From19 = mdl.create_tag(
    value="Q_sign",
    name="From19",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7144, 8016)
)

# Tag: Load.CPL.CPL3.Goto8
_Load_CPL_CPL3_Goto8 = mdl.create_tag(
    value="Ia_load",
    name="Goto8",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9640, 8960)
)

# Tag: Load.CPL.CPL3.From20
_Load_CPL_CPL3_From20 = mdl.create_tag(
    value="Ia_load",
    name="From20",
    parent=_Load_CPL_CPL3,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8008, 9096)
)

# Junction: Load.CPL.CPL3.Junction1
_Load_CPL_CPL3_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7608, 8520)
)

# Junction: Load.CPL.CPL3.Junction10
_Load_CPL_CPL3_Junction10 = mdl.create_junction(
    name="Junction10",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8160, 8504)
)

# Junction: Load.CPL.CPL3.Junction11
_Load_CPL_CPL3_Junction11 = mdl.create_junction(
    name="Junction11",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8232, 8424)
)

# Junction: Load.CPL.CPL3.Junction62
_Load_CPL_CPL3_Junction62 = mdl.create_junction(
    name="Junction62",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7608, 8080)
)

# Junction: Load.CPL.CPL3.Junction50
_Load_CPL_CPL3_Junction50 = mdl.create_junction(
    name="Junction50",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8256, 8184)
)

# Junction: Load.CPL.CPL3.Junction51
_Load_CPL_CPL3_Junction51 = mdl.create_junction(
    name="Junction51",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8224, 8088)
)

# Junction: Load.CPL.CPL3.Junction74
_Load_CPL_CPL3_Junction74 = mdl.create_junction(
    name="Junction74",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7968, 8080)
)

# Junction: Load.CPL.CPL3.Junction78
_Load_CPL_CPL3_Junction78 = mdl.create_junction(
    name="Junction78",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7040, 8048)
)

# Junction: Load.CPL.CPL3.Junction82
_Load_CPL_CPL3_Junction82 = mdl.create_junction(
    name="Junction82",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7608, 8032)
)

# Junction: Load.CPL.CPL3.Junction84
_Load_CPL_CPL3_Junction84 = mdl.create_junction(
    name="Junction84",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7272, 7720)
)

# Junction: Load.CPL.CPL3.Junction92
_Load_CPL_CPL3_Junction92 = mdl.create_junction(
    name="Junction92",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7872, 8472)
)

# Junction: Load.CPL.CPL3.Junction95
_Load_CPL_CPL3_Junction95 = mdl.create_junction(
    name="Junction95",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(6768, 7712)
)

# Junction: Load.CPL.CPL3.Junction96
_Load_CPL_CPL3_Junction96 = mdl.create_junction(
    name="Junction96",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(6896, 7992)
)

# Junction: Load.CPL.CPL3.Junction101
_Load_CPL_CPL3_Junction101 = mdl.create_junction(
    name="Junction101",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(9280, 8632)
)

# Junction: Load.CPL.CPL3.Junction102
_Load_CPL_CPL3_Junction102 = mdl.create_junction(
    name="Junction102",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8880, 8632)
)

# Junction: Load.CPL.CPL3.Junction109
_Load_CPL_CPL3_Junction109 = mdl.create_junction(
    name="Junction109",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(9024, 8696)
)

# Junction: Load.CPL.CPL3.Junction112
_Load_CPL_CPL3_Junction112 = mdl.create_junction(
    name="Junction112",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(7168, 7768)
)

# Junction: Load.CPL.CPL3.Junction130
_Load_CPL_CPL3_Junction130 = mdl.create_junction(
    name="Junction130",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(7968, 9240)
)

# Junction: Load.CPL.CPL3.Junction131
_Load_CPL_CPL3_Junction131 = mdl.create_junction(
    name="Junction131",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(8192, 9240)
)

# Junction: Load.CPL.CPL3.Junction133
_Load_CPL_CPL3_Junction133 = mdl.create_junction(
    name="Junction133",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8488, 8168)
)

# Junction: Load.CPL.CPL3.Junction121
_Load_CPL_CPL3_Junction121 = mdl.create_junction(
    name="Junction121",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8360, 8616)
)

# Junction: Load.CPL.CPL3.Junction127
_Load_CPL_CPL3_Junction127 = mdl.create_junction(
    name="Junction127",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8360, 8712)
)

# Junction: Load.CPL.CPL3.Junction129
_Load_CPL_CPL3_Junction129 = mdl.create_junction(
    name="Junction129",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8072, 8688)
)

# Junction: Load.CPL.CPL3.Junction137
_Load_CPL_CPL3_Junction137 = mdl.create_junction(
    name="Junction137",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(8192, 9336)
)

# Junction: Load.CPL.CPL3.Junction138
_Load_CPL_CPL3_Junction138 = mdl.create_junction(
    name="Junction138",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(7968, 9336)
)

# Junction: Load.CPL.CPL3.Junction139
_Load_CPL_CPL3_Junction139 = mdl.create_junction(
    name="Junction139",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(8192, 9440)
)

# Junction: Load.CPL.CPL3.Junction140
_Load_CPL_CPL3_Junction140 = mdl.create_junction(
    name="Junction140",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(7968, 9440)
)

# Junction: Load.CPL.CPL3.Junction141
_Load_CPL_CPL3_Junction141 = mdl.create_junction(
    name="Junction141",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(8072, 8688)
)

# Junction: Load.CPL.CPL3.Junction142
_Load_CPL_CPL3_Junction142 = mdl.create_junction(
    name="Junction142",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(9360, 8944)
)

# Junction: Load.CPL.CPL3.Junction143
_Load_CPL_CPL3_Junction143 = mdl.create_junction(
    name="Junction143",
    parent=_Load_CPL_CPL3,
    kind="sp",
    position=(9328, 8632)
)

# Junction: Load.CPL.CPL3.Junction144
_Load_CPL_CPL3_Junction144 = mdl.create_junction(
    name="Junction144",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(8192, 9136)
)

# Junction: Load.CPL.CPL3.Junction145
_Load_CPL_CPL3_Junction145 = mdl.create_junction(
    name="Junction145",
    parent=_Load_CPL_CPL3,
    kind="pe",
    position=(7968, 9136)
)

# Component: Load.CPL.Constant1
_Load_CPL_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(7120, 7496),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Constant1, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_Constant1, "value"), "kP_tot")


# Component: Load.CPL.Constant11
_Load_CPL_Constant11 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL,
    name="Constant11",
    rotation="up",
    flip="flip_none",
    position=(7120, 7584),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Constant11, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_Constant11, "value"), "kQ_tot")


# Component: Load.CPL.Gain1
_Load_CPL_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(7704, 7456),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Gain1, "gain"), "inv_ph")


# Component: Load.CPL.Gain2
_Load_CPL_Gain2 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL,
    name="Gain2",
    rotation="up",
    flip="flip_none",
    position=(7576, 7584),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Gain2, "gain"), "inv_ph")


# Component: Load.CPL.Rate Transition1
_Load_CPL_Rate_Transition1 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL,
    name="Rate Transition1",
    rotation="up",
    flip="flip_none",
    position=(7792, 7456),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Rate_Transition1, "execution_rate"), "Ts")


# Component: Load.CPL.Rate Transition2
_Load_CPL_Rate_Transition2 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL,
    name="Rate Transition2",
    rotation="up",
    flip="flip_none",
    position=(7680, 7584),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Rate_Transition2, "execution_rate"), "Ts")


# Component: Load.CPL.Rate Limiter1
_Load_CPL_Rate_Limiter1 = mdl.create_component(
    type_name="core/Rate Limiter",
    parent=_Load_CPL,
    name="Rate Limiter1",
    rotation="up",
    flip="flip_none",
    position=(7880, 7456),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Rate_Limiter1, "falling_limit"), "-SS/Freq")
mdl.set_property_value(mdl.prop(_Load_CPL_Rate_Limiter1, "rising_limit"), "SS/Freq")


# Component: Load.CPL.Rate Limiter2
_Load_CPL_Rate_Limiter2 = mdl.create_component(
    type_name="core/Rate Limiter",
    parent=_Load_CPL,
    name="Rate Limiter2",
    rotation="up",
    flip="flip_none",
    position=(7760, 7584),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Rate_Limiter2, "falling_limit"), "-SS/Freq")
mdl.set_property_value(mdl.prop(_Load_CPL_Rate_Limiter2, "rising_limit"), "SS/Freq")


# Component: Load.CPL.CPL2
_Load_CPL_CPL2 = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Load_CPL,
    name="CPL2",
    rotation="up",
    flip="flip_none",
    position=(7936, 8096),
    hide_name=False,
    size=(48, 48)
)


# Component: Load.CPL.CPL2.Limit1
_Load_CPL_CPL2_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL2,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7296, 8584),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Limit1, "lower_limit"), "0.1")


# Component: Load.CPL.CPL2.Product1
_Load_CPL_CPL2_Product1 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product1",
    rotation="up",
    flip="flip_none",
    position=(7760, 8568),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Product1, "signs"), "*/")


# Component: Load.CPL.CPL2.Product2
_Load_CPL_CPL2_Product2 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product2",
    rotation="up",
    flip="flip_none",
    position=(7376, 8592),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Product3
_Load_CPL_CPL2_Product3 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product3",
    rotation="up",
    flip="flip_vertical",
    position=(8224, 8560),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Discrete Transfer Function1
_Load_CPL_CPL2_Discrete_Transfer_Function1 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_Load_CPL_CPL2,
    name="Discrete Transfer Function1",
    rotation="up",
    flip="flip_none",
    position=(8128, 8552),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function1, "a_coeff"), "[0.01,1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function1, "b_coeff"), "[1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function1, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function1, "method"), "Euler")


# Component: Load.CPL.CPL2.R1
_Load_CPL_CPL2_R1 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Load_CPL_CPL2,
    name="R1",
    rotation="up",
    flip="flip_none",
    position=(7808, 9304),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_R1, "resistance"), "Rsnb")


# Component: Load.CPL.CPL2.Isp1
_Load_CPL_CPL2_Isp1 = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Load_CPL_CPL2,
    name="Isp1",
    rotation="up",
    flip="flip_horizontal",
    position=(7800, 9200),
    hide_name=False,
    size=(64, 32)
)


# Component: Load.CPL.CPL2.Varms
_Load_CPL_CPL2_Varms = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Load_CPL_CPL2,
    name="Varms",
    rotation="up",
    flip="flip_none",
    position=(7800, 9504),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Varms, "sig_output"), "True")


# Component: Load.CPL.CPL2.Va
_Load_CPL_CPL2_Va = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Load_CPL_CPL2,
    name="Va",
    rotation="up",
    flip="flip_none",
    position=(7800, 9616),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Va, "execution_rate"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Va, "sig_output"), "True")


# Component: Load.CPL.CPL2.Limit2
_Load_CPL_CPL2_Limit2 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL2,
    name="Limit2",
    rotation="up",
    flip="flip_none",
    position=(7848, 8568),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Signal switch20
_Load_CPL_CPL2_Signal_switch20 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch20",
    rotation="up",
    flip="flip_none",
    position=(8032, 8552),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Signal_switch20, "threshold"), "0.5")


# Component: Load.CPL.CPL2.Gain2
_Load_CPL_CPL2_Gain2 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain2",
    rotation="up",
    flip="flip_none",
    position=(7648, 8536),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain2, "gain"), "1000")


# Component: Load.CPL.CPL2.Comparator1
_Load_CPL_CPL2_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_CPL_CPL2,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(8000, 8400),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Constant2
_Load_CPL_CPL2_Constant2 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant2",
    rotation="up",
    flip="flip_none",
    position=(7600, 8464),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant2, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant2, "value"), "CPL_curr/(VLL*kVLL)")


# Component: Load.CPL.CPL2.Product4
_Load_CPL_CPL2_Product4 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product4",
    rotation="up",
    flip="flip_vertical",
    position=(7688, 8488),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Product22
_Load_CPL_CPL2_Product22 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product22",
    rotation="up",
    flip="flip_none",
    position=(6952, 7928),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Product23
_Load_CPL_CPL2_Product23 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product23",
    rotation="up",
    flip="flip_none",
    position=(6920, 8264),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Constant24
_Load_CPL_CPL2_Constant24 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant24",
    rotation="up",
    flip="flip_none",
    position=(6944, 7680),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant24, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant24, "value"), "pQc_Q")


# Component: Load.CPL.CPL2.Constant25
_Load_CPL_CPL2_Constant25 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant25",
    rotation="up",
    flip="flip_none",
    position=(6944, 7632),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant25, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant25, "value"), "nQc_Q")


# Component: Load.CPL.CPL2.Signal switch30
_Load_CPL_CPL2_Signal_switch30 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch30",
    rotation="up",
    flip="flip_vertical",
    position=(7016, 7664),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Product24
_Load_CPL_CPL2_Product24 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product24",
    rotation="up",
    flip="flip_none",
    position=(7168, 7672),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Termination70
_Load_CPL_CPL2_Termination70 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL2,
    name="Termination70",
    rotation="left",
    flip="flip_none",
    position=(7616, 8640),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Termination71
_Load_CPL_CPL2_Termination71 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL2,
    name="Termination71",
    rotation="left",
    flip="flip_none",
    position=(7648, 8680),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Termination72
_Load_CPL_CPL2_Termination72 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL2,
    name="Termination72",
    rotation="right",
    flip="flip_none",
    position=(7624, 8824),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Gain26
_Load_CPL_CPL2_Gain26 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain26",
    rotation="up",
    flip="flip_none",
    position=(7104, 8344),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain26, "gain"), "1/(1000*Rsnb)")


# Component: Load.CPL.CPL2.Single phase PLL1
_Load_CPL_CPL2_Single_phase_PLL1 = mdl.create_component(
    type_name="core/Single phase PLL",
    parent=_Load_CPL_CPL2,
    name="Single phase PLL1",
    rotation="up",
    flip="flip_none",
    position=(7560, 8736),
    hide_name=True,
    size=(64, 98)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Single_phase_PLL1, "k_SOGI"), "0.6")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Single_phase_PLL1, "kd_PLL_HIGH"), "0")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Single_phase_PLL1, "kd_PLL_LOW"), "0")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Single_phase_PLL1, "kp_PLL_HIGH"), "65.7")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Single_phase_PLL1, "kp_PLL_LOW"), "5.81e2")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Single_phase_PLL1, "offset_Hz"), "Freq")


# Component: Load.CPL.CPL2.Trigonometric function1
_Load_CPL_CPL2_Trigonometric_function1 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL2,
    name="Trigonometric function1",
    rotation="up",
    flip="flip_none",
    position=(7856, 8640),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Gain25
_Load_CPL_CPL2_Gain25 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain25",
    rotation="up",
    flip="flip_none",
    position=(8024, 8680),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain25, "gain"), "1.41421356")


# Component: Load.CPL.CPL2.Product25
_Load_CPL_CPL2_Product25 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product25",
    rotation="up",
    flip="flip_vertical",
    position=(8136, 8648),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.C1
_Load_CPL_CPL2_C1 = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Load_CPL_CPL2,
    name="C1",
    rotation="up",
    flip="flip_none",
    position=(7808, 9400),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C1, "capacitance"), "1/(Rsnb*2*np.pi*Freq)")


# Component: Load.CPL.CPL2.Trigonometric function2
_Load_CPL_CPL2_Trigonometric_function2 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL2,
    name="Trigonometric function2",
    rotation="up",
    flip="flip_none",
    position=(8024, 8760),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Sum16
_Load_CPL_CPL2_Sum16 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL2,
    name="Sum16",
    rotation="up",
    flip="flip_none",
    position=(7944, 8760),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Sum16, "signs"), "++")


# Component: Load.CPL.CPL2.Constant26
_Load_CPL_CPL2_Constant26 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant26",
    rotation="up",
    flip="flip_none",
    position=(7848, 8776),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant26, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant26, "value"), "-np.pi/2")


# Component: Load.CPL.CPL2.Constant28
_Load_CPL_CPL2_Constant28 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant28",
    rotation="up",
    flip="flip_none",
    position=(8872, 8888),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant28, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant28, "value"), "Tfst")


# Component: Load.CPL.CPL2.Product26
_Load_CPL_CPL2_Product26 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product26",
    rotation="up",
    flip="flip_none",
    position=(8240, 8768),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Product26, "signs"), "**")


# Component: Load.CPL.CPL2.Sum17
_Load_CPL_CPL2_Sum17 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL2,
    name="Sum17",
    rotation="up",
    flip="flip_none",
    position=(7944, 8848),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Sum17, "signs"), "++")


# Component: Load.CPL.CPL2.Constant27
_Load_CPL_CPL2_Constant27 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant27",
    rotation="up",
    flip="flip_none",
    position=(7832, 8872),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant27, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant27, "value"), "np.pi/2")


# Component: Load.CPL.CPL2.Trigonometric function3
_Load_CPL_CPL2_Trigonometric_function3 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL2,
    name="Trigonometric function3",
    rotation="up",
    flip="flip_none",
    position=(8024, 8848),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Product27
_Load_CPL_CPL2_Product27 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product27",
    rotation="up",
    flip="flip_vertical",
    position=(8136, 8840),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Product27, "signs"), "**")


# Component: Load.CPL.CPL2.Gain16
_Load_CPL_CPL2_Gain16 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain16",
    rotation="up",
    flip="flip_none",
    position=(8056, 8328),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain16, "gain"), "-1")


# Component: Load.CPL.CPL2.Limit10
_Load_CPL_CPL2_Limit10 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL2,
    name="Limit10",
    rotation="up",
    flip="flip_none",
    position=(7976, 8328),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Limit10, "upper_limit"), "0")


# Component: Load.CPL.CPL2.Sign1
_Load_CPL_CPL2_Sign1 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL2,
    name="Sign1",
    rotation="up",
    flip="flip_none",
    position=(8120, 8328),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Product19
_Load_CPL_CPL2_Product19 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product19",
    rotation="up",
    flip="flip_none",
    position=(8408, 8080),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Product19, "signs"), "3")


# Component: Load.CPL.CPL2.Limit11
_Load_CPL_CPL2_Limit11 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL2,
    name="Limit11",
    rotation="up",
    flip="flip_none",
    position=(7544, 8096),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Limit11, "lower_limit"), "0")


# Component: Load.CPL.CPL2.Sign2
_Load_CPL_CPL2_Sign2 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL2,
    name="Sign2",
    rotation="up",
    flip="flip_none",
    position=(7608, 8096),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Product14
_Load_CPL_CPL2_Product14 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product14",
    rotation="up",
    flip="flip_none",
    position=(7824, 8248),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Product14, "signs"), "*/")


# Component: Load.CPL.CPL2.Gain15
_Load_CPL_CPL2_Gain15 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain15",
    rotation="up",
    flip="flip_none",
    position=(7720, 8240),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain15, "gain"), "1000")


# Component: Load.CPL.CPL2.Limit7
_Load_CPL_CPL2_Limit7 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL2,
    name="Limit7",
    rotation="up",
    flip="flip_none",
    position=(7896, 8248),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Limit7, "lower_limit"), "0")


# Component: Load.CPL.CPL2.Signal switch23
_Load_CPL_CPL2_Signal_switch23 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch23",
    rotation="up",
    flip="flip_none",
    position=(8104, 8232),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Signal_switch23, "threshold"), "0.5")


# Component: Load.CPL.CPL2.Comparator4
_Load_CPL_CPL2_Comparator4 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_CPL_CPL2,
    name="Comparator4",
    rotation="up",
    flip="flip_vertical",
    position=(8040, 8160),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Product15
_Load_CPL_CPL2_Product15 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product15",
    rotation="up",
    flip="flip_none",
    position=(7824, 8152),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Constant8
_Load_CPL_CPL2_Constant8 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant8",
    rotation="up",
    flip="flip_none",
    position=(7728, 8176),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant8, "execution_rate"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant8, "value"), "CPL_curr/(VLL*kVLL)")


# Component: Load.CPL.CPL2.Discrete Transfer Function4
_Load_CPL_CPL2_Discrete_Transfer_Function4 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_Load_CPL_CPL2,
    name="Discrete Transfer Function4",
    rotation="up",
    flip="flip_none",
    position=(8168, 8232),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function4, "a_coeff"), "[0.01,1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function4, "b_coeff"), "[1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function4, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Discrete_Transfer_Function4, "method"), "Euler")


# Component: Load.CPL.CPL2.Product17
_Load_CPL_CPL2_Product17 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product17",
    rotation="up",
    flip="flip_none",
    position=(8392, 8328),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Product17, "signs"), "3")


# Component: Load.CPL.CPL2.Sum5
_Load_CPL_CPL2_Sum5 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL2,
    name="Sum5",
    rotation="right",
    flip="flip_none",
    position=(8600, 8624),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Sum5, "signs"), "+++")


# Component: Load.CPL.CPL2.Abs1
_Load_CPL_CPL2_Abs1 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL2,
    name="Abs1",
    rotation="up",
    flip="flip_none",
    position=(7544, 8144),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Product20
_Load_CPL_CPL2_Product20 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product20",
    rotation="up",
    flip="flip_none",
    position=(6696, 8112),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Gain18
_Load_CPL_CPL2_Gain18 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain18",
    rotation="up",
    flip="flip_none",
    position=(6808, 8112),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain18, "gain"), "Pc_pQ")


# Component: Load.CPL.CPL2.Sum8
_Load_CPL_CPL2_Sum8 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL2,
    name="Sum8",
    rotation="right",
    flip="flip_none",
    position=(7192, 8392),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Sum8, "signs"), "+++-")


# Component: Load.CPL.CPL2.Sign3
_Load_CPL_CPL2_Sign3 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL2,
    name="Sign3",
    rotation="up",
    flip="flip_none",
    position=(6664, 8056),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Signal switch24
_Load_CPL_CPL2_Signal_switch24 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch24",
    rotation="up",
    flip="flip_none",
    position=(6920, 8128),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Gain19
_Load_CPL_CPL2_Gain19 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain19",
    rotation="up",
    flip="flip_none",
    position=(6808, 8144),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain19, "gain"), "Pc_nQ")


# Component: Load.CPL.CPL2.Gain20
_Load_CPL_CPL2_Gain20 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain20",
    rotation="up",
    flip="flip_none",
    position=(7200, 7968),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain20, "gain"), "1/(1000*Rsnb)")


# Component: Load.CPL.CPL2.Product21
_Load_CPL_CPL2_Product21 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL2,
    name="Product21",
    rotation="up",
    flip="flip_vertical",
    position=(6944, 7784),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL2.Gain21
_Load_CPL_CPL2_Gain21 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain21",
    rotation="up",
    flip="flip_none",
    position=(7040, 7784),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain21, "gain"), "nQc_P")


# Component: Load.CPL.CPL2.Sum9
_Load_CPL_CPL2_Sum9 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL2,
    name="Sum9",
    rotation="right",
    flip="flip_none",
    position=(7328, 8016),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Sum9, "signs"), "+++++")


# Component: Load.CPL.CPL2.Limit12
_Load_CPL_CPL2_Limit12 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL2,
    name="Limit12",
    rotation="up",
    flip="flip_none",
    position=(6840, 7832),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Limit12, "lower_limit"), "0")


# Component: Load.CPL.CPL2.Signal switch25
_Load_CPL_CPL2_Signal_switch25 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch25",
    rotation="up",
    flip="flip_vertical",
    position=(7200, 7800),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Gain22
_Load_CPL_CPL2_Gain22 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain22",
    rotation="up",
    flip="flip_none",
    position=(7040, 7816),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain22, "gain"), "pQc_P")


# Component: Load.CPL.CPL2.Constant14
_Load_CPL_CPL2_Constant14 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant14",
    rotation="up",
    flip="flip_none",
    position=(6696, 8232),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant14, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant14, "value"), "Pc_T_pQ")


# Component: Load.CPL.CPL2.Signal switch26
_Load_CPL_CPL2_Signal_switch26 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch26",
    rotation="up",
    flip="flip_none",
    position=(6808, 8256),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Constant15
_Load_CPL_CPL2_Constant15 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant15",
    rotation="up",
    flip="flip_none",
    position=(6696, 8272),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant15, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant15, "value"), "Pc_T_nQ")


# Component: Load.CPL.CPL2.Constant17
_Load_CPL_CPL2_Constant17 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant17",
    rotation="up",
    flip="flip_none",
    position=(6752, 7912),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant17, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant17, "value"), "pQc_T")


# Component: Load.CPL.CPL2.Signal switch27
_Load_CPL_CPL2_Signal_switch27 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch27",
    rotation="up",
    flip="flip_none",
    position=(6840, 7936),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Constant18
_Load_CPL_CPL2_Constant18 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant18",
    rotation="up",
    flip="flip_none",
    position=(6752, 7952),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant18, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant18, "value"), "nQc_T")


# Component: Load.CPL.CPL2.Abs2
_Load_CPL_CPL2_Abs2 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL2,
    name="Abs2",
    rotation="up",
    flip="flip_none",
    position=(7912, 8392),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Abs3
_Load_CPL_CPL2_Abs3 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL2,
    name="Abs3",
    rotation="left",
    flip="flip_none",
    position=(7952, 8448),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Sum14
_Load_CPL_CPL2_Sum14 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL2,
    name="Sum14",
    rotation="up",
    flip="flip_none",
    position=(6248, 7832),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Sum14, "signs"), "+-")


# Component: Load.CPL.CPL2.Constant19
_Load_CPL_CPL2_Constant19 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant19",
    rotation="up",
    flip="flip_none",
    position=(6152, 7872),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant19, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant19, "value"), "60")


# Component: Load.CPL.CPL2.Sum15
_Load_CPL_CPL2_Sum15 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL2,
    name="Sum15",
    rotation="up",
    flip="flip_none",
    position=(6400, 7776),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Sum15, "signs"), "+-")


# Component: Load.CPL.CPL2.Constant20
_Load_CPL_CPL2_Constant20 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant20",
    rotation="up",
    flip="flip_none",
    position=(6320, 7768),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant20, "execution_rate"), "Ts")


# Component: Load.CPL.CPL2.Gain24
_Load_CPL_CPL2_Gain24 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL2,
    name="Gain24",
    rotation="up",
    flip="flip_none",
    position=(6320, 7832),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Gain24, "gain"), "Fc")


# Component: Load.CPL.CPL2.Edge Detection1
_Load_CPL_CPL2_Edge_Detection1 = mdl.create_component(
    type_name="core/Edge Detection",
    parent=_Load_CPL_CPL2,
    name="Edge Detection1",
    rotation="right",
    flip="flip_none",
    position=(9048, 8744),
    hide_name=True,
    size=(32, 32)
)


# Component: Load.CPL.CPL2.Rate Transition1
_Load_CPL_CPL2_Rate_Transition1 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL2,
    name="Rate Transition1",
    rotation="up",
    flip="flip_none",
    position=(8680, 8696),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Rate_Transition1, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL2.C function1
_Load_CPL_CPL2_C_function1 = mdl.create_component(
    type_name="core/C function",
    parent=_Load_CPL_CPL2,
    name="C function1",
    rotation="right",
    flip="flip_none",
    position=(8976, 8952),
    hide_name=True,
    size=(48, 128)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "global_variables"), "real counter;real m0;real m1;real m2;real corr;")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "init_fnc"), "/*Begin code section*/
counter=0;
/*End code section*/")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "input_terminals"), "real sync;real z;real zi;real zii;real Ts;real Ts_fast;")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "input_terminals_feedthrough"), "True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "input_terminals_show_labels"), "True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "output_fnc"), "/*Begin code section*/
counter = counter + Ts_fast;
if (sync > 0 ) {
    out = z;
    counter = 0;

}
else {
    corr = 1 - 0.11 * (Ts - Ts_fast)/Ts;
    m2 = (zi - zii)/Ts;
    m1 = (z - zi)/Ts;
    m0 = m1 + (m1-m2);

    out = z + counter * corr * m0;
}

if (counter >= Ts) {
    counter = 0;
}
/*End code section*/")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "output_terminals_dimensions"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "output_terminals_feedthrough"), "True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_C_function1, "output_terminals_show_labels"), "True")


# Component: Load.CPL.CPL2.Unit Delay9
_Load_CPL_CPL2_Unit_Delay9 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Load_CPL_CPL2,
    name="Unit Delay9",
    rotation="up",
    flip="flip_none",
    position=(8680, 8760),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Unit Delay10
_Load_CPL_CPL2_Unit_Delay10 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Load_CPL_CPL2,
    name="Unit Delay10",
    rotation="up",
    flip="flip_none",
    position=(8784, 8816),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL2.Constant21
_Load_CPL_CPL2_Constant21 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant21",
    rotation="up",
    flip="flip_none",
    position=(8912, 8864),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant21, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant21, "value"), "Ts")


# Component: Load.CPL.CPL2.Rate Transition2
_Load_CPL_CPL2_Rate_Transition2 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL2,
    name="Rate Transition2",
    rotation="up",
    flip="flip_none",
    position=(8784, 8760),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Rate_Transition2, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL2.Rate Transition3
_Load_CPL_CPL2_Rate_Transition3 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL2,
    name="Rate Transition3",
    rotation="up",
    flip="flip_none",
    position=(8864, 8816),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Rate_Transition3, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL2.Signal switch28
_Load_CPL_CPL2_Signal_switch28 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch28",
    rotation="up",
    flip="flip_vertical",
    position=(9128, 9064),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Signal_switch28, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Signal_switch28, "threshold"), "Tfst")


# Component: Load.CPL.CPL2.Constant22
_Load_CPL_CPL2_Constant22 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant22",
    rotation="up",
    flip="flip_none",
    position=(9080, 9120),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant22, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant22, "value"), "Ts")


# Component: Load.CPL.CPL2.Signal switch29
_Load_CPL_CPL2_Signal_switch29 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL2,
    name="Signal switch29",
    rotation="up",
    flip="flip_vertical",
    position=(9224, 9024),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Signal_switch29, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Signal_switch29, "threshold"), "0.5")


# Component: Load.CPL.CPL2.Constant23
_Load_CPL_CPL2_Constant23 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL2,
    name="Constant23",
    rotation="up",
    flip="flip_none",
    position=(9168, 9112),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant23, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL2_Constant23, "value"), "Tfast_en")


# Port: Load.CPL.CPL2.P2
_Load_CPL_CPL2_P2 = mdl.create_port(
    name="P2",
    parent=_Load_CPL_CPL2,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8000, 9200)
)

# Port: Load.CPL.CPL2.P3
_Load_CPL_CPL2_P3 = mdl.create_port(
    name="P3",
    parent=_Load_CPL_CPL2,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7584, 9200)
)

# Port: Load.CPL.CPL2.P
_Load_CPL_CPL2_P = mdl.create_port(
    name="P",
    parent=_Load_CPL_CPL2,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6120, 8008)
)

# Port: Load.CPL.CPL2.Q
_Load_CPL_CPL2_Q = mdl.create_port(
    name="Q",
    parent=_Load_CPL_CPL2,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6120, 8080)
)

# Tag: Load.CPL.CPL2.Goto1
_Load_CPL_CPL2_Goto1 = mdl.create_tag(
    value="ws",
    name="Goto1",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7720, 8736)
)

# Tag: Load.CPL.CPL2.From1
_Load_CPL_CPL2_From1 = mdl.create_tag(
    value="ws",
    name="From1",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6152, 7824)
)

# Tag: Load.CPL.CPL2.Goto2
_Load_CPL_CPL2_Goto2 = mdl.create_tag(
    value="kP",
    name="Goto2",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6200, 8008)
)

# Tag: Load.CPL.CPL2.Goto3
_Load_CPL_CPL2_Goto3 = mdl.create_tag(
    value="kQ",
    name="Goto3",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6200, 8080)
)

# Tag: Load.CPL.CPL2.From2
_Load_CPL_CPL2_From2 = mdl.create_tag(
    value="kP",
    name="From2",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7120, 8304)
)

# Tag: Load.CPL.CPL2.From3
_Load_CPL_CPL2_From3 = mdl.create_tag(
    value="kP",
    name="From3",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6752, 7832)
)

# Tag: Load.CPL.CPL2.From4
_Load_CPL_CPL2_From4 = mdl.create_tag(
    value="kQ",
    name="From4",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7264, 7856)
)

# Tag: Load.CPL.CPL2.From5
_Load_CPL_CPL2_From5 = mdl.create_tag(
    value="kQ",
    name="From5",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6544, 8056)
)

# Tag: Load.CPL.CPL2.From6
_Load_CPL_CPL2_From6 = mdl.create_tag(
    value="kQ",
    name="From6",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6832, 8312)
)

# Tag: Load.CPL.CPL2.From7
_Load_CPL_CPL2_From7 = mdl.create_tag(
    value="kQ",
    name="From7",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7080, 7680)
)

# Tag: Load.CPL.CPL2.Goto4
_Load_CPL_CPL2_Goto4 = mdl.create_tag(
    value="Va",
    name="Goto4",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="down",
    flip="flip_none",
    position=(7744, 9568)
)

# Tag: Load.CPL.CPL2.From8
_Load_CPL_CPL2_From8 = mdl.create_tag(
    value="Va",
    name="From8",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7448, 8736)
)

# Tag: Load.CPL.CPL2.From9
_Load_CPL_CPL2_From9 = mdl.create_tag(
    value="Va_rms",
    name="From9",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7936, 8680)
)

# Tag: Load.CPL.CPL2.From10
_Load_CPL_CPL2_From10 = mdl.create_tag(
    value="Va_rms",
    name="From10",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7208, 8584)
)

# Tag: Load.CPL.CPL2.Goto5
_Load_CPL_CPL2_Goto5 = mdl.create_tag(
    value="Va_rms",
    name="Goto5",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="down",
    flip="flip_none",
    position=(7744, 9464)
)

# Tag: Load.CPL.CPL2.Goto6
_Load_CPL_CPL2_Goto6 = mdl.create_tag(
    value="Va_rms_squared",
    name="Goto6",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7512, 8592)
)

# Tag: Load.CPL.CPL2.From11
_Load_CPL_CPL2_From11 = mdl.create_tag(
    value="Va_rms_squared",
    name="From11",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7648, 8592)
)

# Tag: Load.CPL.CPL2.From12
_Load_CPL_CPL2_From12 = mdl.create_tag(
    value="Va_rms_squared",
    name="From12",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7080, 7968)
)

# Tag: Load.CPL.CPL2.From13
_Load_CPL_CPL2_From13 = mdl.create_tag(
    value="Va_rms_squared",
    name="From13",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6992, 8344)
)

# Tag: Load.CPL.CPL2.From14
_Load_CPL_CPL2_From14 = mdl.create_tag(
    value="Va_rms_squared",
    name="From14",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7704, 8272)
)

# Tag: Load.CPL.CPL2.Goto7
_Load_CPL_CPL2_Goto7 = mdl.create_tag(
    value="Q_sign",
    name="Goto7",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6744, 8056)
)

# Tag: Load.CPL.CPL2.From15
_Load_CPL_CPL2_From15 = mdl.create_tag(
    value="Q_sign",
    name="From15",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7144, 7856)
)

# Tag: Load.CPL.CPL2.From16
_Load_CPL_CPL2_From16 = mdl.create_tag(
    value="Q_sign",
    name="From16",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6952, 7728)
)

# Tag: Load.CPL.CPL2.From17
_Load_CPL_CPL2_From17 = mdl.create_tag(
    value="Q_sign",
    name="From17",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6784, 7864)
)

# Tag: Load.CPL.CPL2.From18
_Load_CPL_CPL2_From18 = mdl.create_tag(
    value="Q_sign",
    name="From18",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6760, 8184)
)

# Tag: Load.CPL.CPL2.From19
_Load_CPL_CPL2_From19 = mdl.create_tag(
    value="Q_sign",
    name="From19",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6864, 8080)
)

# Tag: Load.CPL.CPL2.Goto8
_Load_CPL_CPL2_Goto8 = mdl.create_tag(
    value="Ia_load",
    name="Goto8",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9360, 9024)
)

# Tag: Load.CPL.CPL2.From20
_Load_CPL_CPL2_From20 = mdl.create_tag(
    value="Ia_load",
    name="From20",
    parent=_Load_CPL_CPL2,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7728, 9160)
)

# Junction: Load.CPL.CPL2.Junction102
_Load_CPL_CPL2_Junction102 = mdl.create_junction(
    name="Junction102",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(8600, 8696)
)

# Junction: Load.CPL.CPL2.Junction109
_Load_CPL_CPL2_Junction109 = mdl.create_junction(
    name="Junction109",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(8744, 8760)
)

# Junction: Load.CPL.CPL2.Junction112
_Load_CPL_CPL2_Junction112 = mdl.create_junction(
    name="Junction112",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(6888, 7832)
)

# Junction: Load.CPL.CPL2.Junction130
_Load_CPL_CPL2_Junction130 = mdl.create_junction(
    name="Junction130",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7688, 9304)
)

# Junction: Load.CPL.CPL2.Junction131
_Load_CPL_CPL2_Junction131 = mdl.create_junction(
    name="Junction131",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7912, 9304)
)

# Junction: Load.CPL.CPL2.Junction133
_Load_CPL_CPL2_Junction133 = mdl.create_junction(
    name="Junction133",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(8208, 8232)
)

# Junction: Load.CPL.CPL2.Junction121
_Load_CPL_CPL2_Junction121 = mdl.create_junction(
    name="Junction121",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(8080, 8680)
)

# Junction: Load.CPL.CPL2.Junction127
_Load_CPL_CPL2_Junction127 = mdl.create_junction(
    name="Junction127",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(8080, 8776)
)

# Junction: Load.CPL.CPL2.Junction129
_Load_CPL_CPL2_Junction129 = mdl.create_junction(
    name="Junction129",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7792, 8752)
)

# Junction: Load.CPL.CPL2.Junction137
_Load_CPL_CPL2_Junction137 = mdl.create_junction(
    name="Junction137",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7912, 9400)
)

# Junction: Load.CPL.CPL2.Junction138
_Load_CPL_CPL2_Junction138 = mdl.create_junction(
    name="Junction138",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7688, 9400)
)

# Junction: Load.CPL.CPL2.Junction139
_Load_CPL_CPL2_Junction139 = mdl.create_junction(
    name="Junction139",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7912, 9504)
)

# Junction: Load.CPL.CPL2.Junction140
_Load_CPL_CPL2_Junction140 = mdl.create_junction(
    name="Junction140",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7688, 9504)
)

# Junction: Load.CPL.CPL2.Junction141
_Load_CPL_CPL2_Junction141 = mdl.create_junction(
    name="Junction141",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7792, 8752)
)

# Junction: Load.CPL.CPL2.Junction142
_Load_CPL_CPL2_Junction142 = mdl.create_junction(
    name="Junction142",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(9080, 9008)
)

# Junction: Load.CPL.CPL2.Junction143
_Load_CPL_CPL2_Junction143 = mdl.create_junction(
    name="Junction143",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(9048, 8696)
)

# Junction: Load.CPL.CPL2.Junction144
_Load_CPL_CPL2_Junction144 = mdl.create_junction(
    name="Junction144",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7912, 9200)
)

# Junction: Load.CPL.CPL2.Junction145
_Load_CPL_CPL2_Junction145 = mdl.create_junction(
    name="Junction145",
    parent=_Load_CPL_CPL2,
    kind="pe",
    position=(7688, 9200)
)

# Junction: Load.CPL.CPL2.Junction1
_Load_CPL_CPL2_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7328, 8584)
)

# Junction: Load.CPL.CPL2.Junction10
_Load_CPL_CPL2_Junction10 = mdl.create_junction(
    name="Junction10",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7880, 8568)
)

# Junction: Load.CPL.CPL2.Junction11
_Load_CPL_CPL2_Junction11 = mdl.create_junction(
    name="Junction11",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7952, 8488)
)

# Junction: Load.CPL.CPL2.Junction62
_Load_CPL_CPL2_Junction62 = mdl.create_junction(
    name="Junction62",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7328, 8144)
)

# Junction: Load.CPL.CPL2.Junction50
_Load_CPL_CPL2_Junction50 = mdl.create_junction(
    name="Junction50",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7976, 8248)
)

# Junction: Load.CPL.CPL2.Junction51
_Load_CPL_CPL2_Junction51 = mdl.create_junction(
    name="Junction51",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7944, 8152)
)

# Junction: Load.CPL.CPL2.Junction74
_Load_CPL_CPL2_Junction74 = mdl.create_junction(
    name="Junction74",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7688, 8144)
)

# Junction: Load.CPL.CPL2.Junction78
_Load_CPL_CPL2_Junction78 = mdl.create_junction(
    name="Junction78",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(6760, 8112)
)

# Junction: Load.CPL.CPL2.Junction82
_Load_CPL_CPL2_Junction82 = mdl.create_junction(
    name="Junction82",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7328, 8096)
)

# Junction: Load.CPL.CPL2.Junction84
_Load_CPL_CPL2_Junction84 = mdl.create_junction(
    name="Junction84",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(6992, 7784)
)

# Junction: Load.CPL.CPL2.Junction92
_Load_CPL_CPL2_Junction92 = mdl.create_junction(
    name="Junction92",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(7592, 8536)
)

# Junction: Load.CPL.CPL2.Junction95
_Load_CPL_CPL2_Junction95 = mdl.create_junction(
    name="Junction95",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(6488, 7776)
)

# Junction: Load.CPL.CPL2.Junction96
_Load_CPL_CPL2_Junction96 = mdl.create_junction(
    name="Junction96",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(6616, 8056)
)

# Junction: Load.CPL.CPL2.Junction101
_Load_CPL_CPL2_Junction101 = mdl.create_junction(
    name="Junction101",
    parent=_Load_CPL_CPL2,
    kind="sp",
    position=(9000, 8696)
)

# Component: Load.CPL.Constant14
_Load_CPL_Constant14 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL,
    name="Constant14",
    rotation="up",
    flip="flip_none",
    position=(7920, 7520),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Constant14, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_Constant14, "value"), "Pc_T")


# Component: Load.CPL.Product23
_Load_CPL_Product23 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL,
    name="Product23",
    rotation="up",
    flip="flip_none",
    position=(8016, 7512),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.Sum10
_Load_CPL_Sum10 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL,
    name="Sum10",
    rotation="up",
    flip="flip_none",
    position=(8096, 7464),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Sum10, "signs"), "++")


# Component: Load.CPL.Constant17
_Load_CPL_Constant17 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL,
    name="Constant17",
    rotation="up",
    flip="flip_none",
    position=(7808, 7672),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Constant17, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_Constant17, "value"), "0.01*(Ts-600e-6)/Ts")


# Component: Load.CPL.Signal switch27
_Load_CPL_Signal_switch27 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL,
    name="Signal switch27",
    rotation="up",
    flip="flip_none",
    position=(7896, 7688),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.Constant18
_Load_CPL_Constant18 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL,
    name="Constant18",
    rotation="up",
    flip="flip_none",
    position=(7808, 7736),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Constant18, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_Constant18, "value"), "0.005*(Ts-600e-6)/Ts")


# Component: Load.CPL.Sum14
_Load_CPL_Sum14 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL,
    name="Sum14",
    rotation="up",
    flip="flip_none",
    position=(8096, 7592),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_Sum14, "signs"), "++")


# Component: Load.CPL.Sign3
_Load_CPL_Sign3 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL,
    name="Sign3",
    rotation="up",
    flip="flip_none",
    position=(7856, 7616),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.Product24
_Load_CPL_Product24 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL,
    name="Product24",
    rotation="up",
    flip="flip_none",
    position=(8008, 7680),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1
_Load_CPL_CPL1 = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Load_CPL,
    name="CPL1",
    rotation="up",
    flip="flip_none",
    position=(8040, 8024),
    hide_name=False,
    size=(48, 48)
)


# Component: Load.CPL.CPL1.Rate Transition1
_Load_CPL_CPL1_Rate_Transition1 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL1,
    name="Rate Transition1",
    rotation="up",
    flip="flip_none",
    position=(8848, 8280),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Rate_Transition1, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL1.C function1
_Load_CPL_CPL1_C_function1 = mdl.create_component(
    type_name="core/C function",
    parent=_Load_CPL_CPL1,
    name="C function1",
    rotation="right",
    flip="flip_none",
    position=(9144, 8536),
    hide_name=True,
    size=(48, 128)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "global_variables"), "real counter;real m0;real m1;real m2;real corr;")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "init_fnc"), "/*Begin code section*/
counter=0;
/*End code section*/")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "input_terminals"), "real sync;real z;real zi;real zii;real Ts;real Ts_fast;")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "input_terminals_feedthrough"), "True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "input_terminals_show_labels"), "True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "output_fnc"), "/*Begin code section*/
counter = counter + Ts_fast;
if (sync > 0 ) {
    out = z;
    counter = 0;

}
else {
    corr = 1 - 0.11 * (Ts - Ts_fast)/Ts;
    m2 = (zi - zii)/Ts;
    m1 = (z - zi)/Ts;
    m0 = m1 + (m1-m2);

    out = z + counter * corr * m0;
}

if (counter >= Ts) {
    counter = 0;
}
/*End code section*/")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "output_terminals_dimensions"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "output_terminals_feedthrough"), "True")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C_function1, "output_terminals_show_labels"), "True")


# Component: Load.CPL.CPL1.Unit Delay9
_Load_CPL_CPL1_Unit_Delay9 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Load_CPL_CPL1,
    name="Unit Delay9",
    rotation="up",
    flip="flip_none",
    position=(8848, 8344),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Unit Delay10
_Load_CPL_CPL1_Unit_Delay10 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Load_CPL_CPL1,
    name="Unit Delay10",
    rotation="up",
    flip="flip_none",
    position=(8952, 8400),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Constant21
_Load_CPL_CPL1_Constant21 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant21",
    rotation="up",
    flip="flip_none",
    position=(9080, 8448),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant21, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant21, "value"), "Ts")


# Component: Load.CPL.CPL1.Rate Transition2
_Load_CPL_CPL1_Rate_Transition2 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL1,
    name="Rate Transition2",
    rotation="up",
    flip="flip_none",
    position=(8952, 8344),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Rate_Transition2, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL1.Rate Transition3
_Load_CPL_CPL1_Rate_Transition3 = mdl.create_component(
    type_name="core/Rate Transition",
    parent=_Load_CPL_CPL1,
    name="Rate Transition3",
    rotation="up",
    flip="flip_none",
    position=(9032, 8400),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Rate_Transition3, "execution_rate"), "Tfst")


# Component: Load.CPL.CPL1.Signal switch28
_Load_CPL_CPL1_Signal_switch28 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch28",
    rotation="up",
    flip="flip_vertical",
    position=(9296, 8648),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Signal_switch28, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Signal_switch28, "threshold"), "Tfst")


# Component: Load.CPL.CPL1.Constant22
_Load_CPL_CPL1_Constant22 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant22",
    rotation="up",
    flip="flip_none",
    position=(9248, 8704),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant22, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant22, "value"), "Ts")


# Component: Load.CPL.CPL1.Signal switch29
_Load_CPL_CPL1_Signal_switch29 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch29",
    rotation="up",
    flip="flip_vertical",
    position=(9392, 8608),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Signal_switch29, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Signal_switch29, "threshold"), "0.5")


# Component: Load.CPL.CPL1.Constant23
_Load_CPL_CPL1_Constant23 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant23",
    rotation="up",
    flip="flip_none",
    position=(9336, 8696),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant23, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant23, "value"), "Tfast_en")


# Component: Load.CPL.CPL1.Product22
_Load_CPL_CPL1_Product22 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product22",
    rotation="up",
    flip="flip_none",
    position=(7120, 7512),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Product23
_Load_CPL_CPL1_Product23 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product23",
    rotation="up",
    flip="flip_none",
    position=(7088, 7848),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Constant24
_Load_CPL_CPL1_Constant24 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant24",
    rotation="up",
    flip="flip_none",
    position=(7112, 7264),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant24, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant24, "value"), "pQc_Q")


# Component: Load.CPL.CPL1.Constant25
_Load_CPL_CPL1_Constant25 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant25",
    rotation="up",
    flip="flip_none",
    position=(7112, 7216),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant25, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant25, "value"), "nQc_Q")


# Component: Load.CPL.CPL1.Signal switch30
_Load_CPL_CPL1_Signal_switch30 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch30",
    rotation="up",
    flip="flip_vertical",
    position=(7184, 7248),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Product24
_Load_CPL_CPL1_Product24 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product24",
    rotation="up",
    flip="flip_none",
    position=(7336, 7256),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Termination70
_Load_CPL_CPL1_Termination70 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL1,
    name="Termination70",
    rotation="left",
    flip="flip_none",
    position=(7784, 8224),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Termination71
_Load_CPL_CPL1_Termination71 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL1,
    name="Termination71",
    rotation="left",
    flip="flip_none",
    position=(7816, 8264),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Termination72
_Load_CPL_CPL1_Termination72 = mdl.create_component(
    type_name="core/Termination",
    parent=_Load_CPL_CPL1,
    name="Termination72",
    rotation="right",
    flip="flip_none",
    position=(7792, 8408),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Gain26
_Load_CPL_CPL1_Gain26 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain26",
    rotation="up",
    flip="flip_none",
    position=(7272, 7928),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain26, "gain"), "1/(1000*Rsnb)")


# Component: Load.CPL.CPL1.Single phase PLL1
_Load_CPL_CPL1_Single_phase_PLL1 = mdl.create_component(
    type_name="core/Single phase PLL",
    parent=_Load_CPL_CPL1,
    name="Single phase PLL1",
    rotation="up",
    flip="flip_none",
    position=(7728, 8320),
    hide_name=True,
    size=(64, 98)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Single_phase_PLL1, "k_SOGI"), "0.6")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Single_phase_PLL1, "kd_PLL_HIGH"), "0")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Single_phase_PLL1, "kd_PLL_LOW"), "0")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Single_phase_PLL1, "kp_PLL_HIGH"), "65.7")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Single_phase_PLL1, "kp_PLL_LOW"), "5.81e2")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Single_phase_PLL1, "offset_Hz"), "Freq")


# Component: Load.CPL.CPL1.Trigonometric function1
_Load_CPL_CPL1_Trigonometric_function1 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL1,
    name="Trigonometric function1",
    rotation="up",
    flip="flip_none",
    position=(8024, 8224),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Gain25
_Load_CPL_CPL1_Gain25 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain25",
    rotation="up",
    flip="flip_none",
    position=(8192, 8264),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain25, "gain"), "1.41421356")


# Component: Load.CPL.CPL1.Product25
_Load_CPL_CPL1_Product25 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product25",
    rotation="up",
    flip="flip_vertical",
    position=(8304, 8232),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Product1
_Load_CPL_CPL1_Product1 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product1",
    rotation="up",
    flip="flip_none",
    position=(7928, 8152),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Product1, "signs"), "*/")


# Component: Load.CPL.CPL1.Product2
_Load_CPL_CPL1_Product2 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product2",
    rotation="up",
    flip="flip_none",
    position=(7544, 8176),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Product3
_Load_CPL_CPL1_Product3 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product3",
    rotation="up",
    flip="flip_vertical",
    position=(8392, 8144),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Discrete Transfer Function1
_Load_CPL_CPL1_Discrete_Transfer_Function1 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_Load_CPL_CPL1,
    name="Discrete Transfer Function1",
    rotation="up",
    flip="flip_none",
    position=(8296, 8136),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function1, "a_coeff"), "[0.01,1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function1, "b_coeff"), "[1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function1, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function1, "method"), "Euler")


# Component: Load.CPL.CPL1.R1
_Load_CPL_CPL1_R1 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Load_CPL_CPL1,
    name="R1",
    rotation="up",
    flip="flip_none",
    position=(7976, 8888),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_R1, "resistance"), "Rsnb")


# Component: Load.CPL.CPL1.Isp1
_Load_CPL_CPL1_Isp1 = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Load_CPL_CPL1,
    name="Isp1",
    rotation="up",
    flip="flip_horizontal",
    position=(7968, 8784),
    hide_name=False,
    size=(64, 32)
)


# Component: Load.CPL.CPL1.Varms
_Load_CPL_CPL1_Varms = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Load_CPL_CPL1,
    name="Varms",
    rotation="up",
    flip="flip_none",
    position=(7968, 9088),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Varms, "sig_output"), "True")


# Component: Load.CPL.CPL1.Va
_Load_CPL_CPL1_Va = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Load_CPL_CPL1,
    name="Va",
    rotation="up",
    flip="flip_none",
    position=(7968, 9200),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Va, "execution_rate"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Va, "sig_output"), "True")


# Component: Load.CPL.CPL1.Limit2
_Load_CPL_CPL1_Limit2 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL1,
    name="Limit2",
    rotation="up",
    flip="flip_none",
    position=(8016, 8152),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Signal switch20
_Load_CPL_CPL1_Signal_switch20 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch20",
    rotation="up",
    flip="flip_none",
    position=(8200, 8136),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Signal_switch20, "threshold"), "0.5")


# Component: Load.CPL.CPL1.Gain2
_Load_CPL_CPL1_Gain2 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain2",
    rotation="up",
    flip="flip_none",
    position=(7816, 8120),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain2, "gain"), "1000")


# Component: Load.CPL.CPL1.Comparator1
_Load_CPL_CPL1_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_CPL_CPL1,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(8168, 7984),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Constant2
_Load_CPL_CPL1_Constant2 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant2",
    rotation="up",
    flip="flip_none",
    position=(7768, 8048),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant2, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant2, "value"), "CPL_curr/(VLL*kVLL)")


# Component: Load.CPL.CPL1.Product4
_Load_CPL_CPL1_Product4 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product4",
    rotation="up",
    flip="flip_vertical",
    position=(7856, 8072),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Gain16
_Load_CPL_CPL1_Gain16 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain16",
    rotation="up",
    flip="flip_none",
    position=(8224, 7912),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain16, "gain"), "-1")


# Component: Load.CPL.CPL1.Limit10
_Load_CPL_CPL1_Limit10 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL1,
    name="Limit10",
    rotation="up",
    flip="flip_none",
    position=(8144, 7912),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Limit10, "upper_limit"), "0")


# Component: Load.CPL.CPL1.Sign1
_Load_CPL_CPL1_Sign1 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL1,
    name="Sign1",
    rotation="up",
    flip="flip_none",
    position=(8288, 7912),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Product19
_Load_CPL_CPL1_Product19 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product19",
    rotation="up",
    flip="flip_none",
    position=(8576, 7664),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Product19, "signs"), "3")


# Component: Load.CPL.CPL1.Limit11
_Load_CPL_CPL1_Limit11 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL1,
    name="Limit11",
    rotation="up",
    flip="flip_none",
    position=(7712, 7680),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Limit11, "lower_limit"), "0")


# Component: Load.CPL.CPL1.Sign2
_Load_CPL_CPL1_Sign2 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL1,
    name="Sign2",
    rotation="up",
    flip="flip_none",
    position=(7776, 7680),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Product14
_Load_CPL_CPL1_Product14 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product14",
    rotation="up",
    flip="flip_none",
    position=(7992, 7832),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Product14, "signs"), "*/")


# Component: Load.CPL.CPL1.Gain15
_Load_CPL_CPL1_Gain15 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain15",
    rotation="up",
    flip="flip_none",
    position=(7888, 7824),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain15, "gain"), "1000")


# Component: Load.CPL.CPL1.Limit7
_Load_CPL_CPL1_Limit7 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL1,
    name="Limit7",
    rotation="up",
    flip="flip_none",
    position=(8064, 7832),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Limit7, "lower_limit"), "0")


# Component: Load.CPL.CPL1.Signal switch23
_Load_CPL_CPL1_Signal_switch23 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch23",
    rotation="up",
    flip="flip_none",
    position=(8272, 7816),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Signal_switch23, "threshold"), "0.5")


# Component: Load.CPL.CPL1.Comparator4
_Load_CPL_CPL1_Comparator4 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_CPL_CPL1,
    name="Comparator4",
    rotation="up",
    flip="flip_vertical",
    position=(8208, 7744),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Product15
_Load_CPL_CPL1_Product15 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product15",
    rotation="up",
    flip="flip_none",
    position=(7992, 7736),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Constant8
_Load_CPL_CPL1_Constant8 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant8",
    rotation="up",
    flip="flip_none",
    position=(7896, 7760),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant8, "execution_rate"), "inherit")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant8, "value"), "CPL_curr/(VLL*kVLL)")


# Component: Load.CPL.CPL1.Discrete Transfer Function4
_Load_CPL_CPL1_Discrete_Transfer_Function4 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_Load_CPL_CPL1,
    name="Discrete Transfer Function4",
    rotation="up",
    flip="flip_none",
    position=(8336, 7816),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function4, "a_coeff"), "[0.01,1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function4, "b_coeff"), "[1]")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function4, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Discrete_Transfer_Function4, "method"), "Euler")


# Component: Load.CPL.CPL1.Product17
_Load_CPL_CPL1_Product17 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product17",
    rotation="up",
    flip="flip_none",
    position=(8560, 7912),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Product17, "signs"), "3")


# Component: Load.CPL.CPL1.C1
_Load_CPL_CPL1_C1 = mdl.create_component(
    type_name="core/Capacitor",
    parent=_Load_CPL_CPL1,
    name="C1",
    rotation="up",
    flip="flip_none",
    position=(7976, 8984),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_C1, "capacitance"), "1/(Rsnb*2*np.pi*Freq)")


# Component: Load.CPL.CPL1.Trigonometric function2
_Load_CPL_CPL1_Trigonometric_function2 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL1,
    name="Trigonometric function2",
    rotation="up",
    flip="flip_none",
    position=(8192, 8344),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Sum16
_Load_CPL_CPL1_Sum16 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL1,
    name="Sum16",
    rotation="up",
    flip="flip_none",
    position=(8112, 8344),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Sum16, "signs"), "++")


# Component: Load.CPL.CPL1.Constant26
_Load_CPL_CPL1_Constant26 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant26",
    rotation="up",
    flip="flip_none",
    position=(8016, 8360),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant26, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant26, "value"), "-np.pi/2")


# Component: Load.CPL.CPL1.Constant28
_Load_CPL_CPL1_Constant28 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant28",
    rotation="up",
    flip="flip_none",
    position=(9040, 8472),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant28, "execution_rate"), "Tfst")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant28, "value"), "Tfst")


# Component: Load.CPL.CPL1.Product26
_Load_CPL_CPL1_Product26 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product26",
    rotation="up",
    flip="flip_none",
    position=(8408, 8352),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Product26, "signs"), "**")


# Component: Load.CPL.CPL1.Sum17
_Load_CPL_CPL1_Sum17 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL1,
    name="Sum17",
    rotation="up",
    flip="flip_none",
    position=(8112, 8432),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Sum17, "signs"), "++")


# Component: Load.CPL.CPL1.Constant27
_Load_CPL_CPL1_Constant27 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant27",
    rotation="up",
    flip="flip_none",
    position=(8000, 8456),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant27, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant27, "value"), "np.pi/2")


# Component: Load.CPL.CPL1.Trigonometric function3
_Load_CPL_CPL1_Trigonometric_function3 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_Load_CPL_CPL1,
    name="Trigonometric function3",
    rotation="up",
    flip="flip_none",
    position=(8192, 8432),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Product27
_Load_CPL_CPL1_Product27 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product27",
    rotation="up",
    flip="flip_vertical",
    position=(8304, 8424),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Product27, "signs"), "**")


# Component: Load.CPL.CPL1.Sum5
_Load_CPL_CPL1_Sum5 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL1,
    name="Sum5",
    rotation="right",
    flip="flip_none",
    position=(8768, 8208),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Sum5, "signs"), "+++")


# Component: Load.CPL.CPL1.Abs1
_Load_CPL_CPL1_Abs1 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL1,
    name="Abs1",
    rotation="up",
    flip="flip_none",
    position=(7712, 7728),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Product20
_Load_CPL_CPL1_Product20 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product20",
    rotation="up",
    flip="flip_none",
    position=(6864, 7696),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Gain18
_Load_CPL_CPL1_Gain18 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain18",
    rotation="up",
    flip="flip_none",
    position=(6976, 7696),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain18, "gain"), "Pc_pQ")


# Component: Load.CPL.CPL1.Sum8
_Load_CPL_CPL1_Sum8 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL1,
    name="Sum8",
    rotation="right",
    flip="flip_none",
    position=(7360, 7976),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Sum8, "signs"), "+++-")


# Component: Load.CPL.CPL1.Sign3
_Load_CPL_CPL1_Sign3 = mdl.create_component(
    type_name="core/Sign",
    parent=_Load_CPL_CPL1,
    name="Sign3",
    rotation="up",
    flip="flip_none",
    position=(6832, 7640),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Signal switch24
_Load_CPL_CPL1_Signal_switch24 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch24",
    rotation="up",
    flip="flip_none",
    position=(7088, 7712),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Gain19
_Load_CPL_CPL1_Gain19 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain19",
    rotation="up",
    flip="flip_none",
    position=(6976, 7728),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain19, "gain"), "Pc_nQ")


# Component: Load.CPL.CPL1.Gain20
_Load_CPL_CPL1_Gain20 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain20",
    rotation="up",
    flip="flip_none",
    position=(7368, 7552),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain20, "gain"), "1/(1000*Rsnb)")


# Component: Load.CPL.CPL1.Product21
_Load_CPL_CPL1_Product21 = mdl.create_component(
    type_name="core/Product",
    parent=_Load_CPL_CPL1,
    name="Product21",
    rotation="up",
    flip="flip_vertical",
    position=(7112, 7368),
    hide_name=True,
    size=(0, 0)
)


# Component: Load.CPL.CPL1.Gain21
_Load_CPL_CPL1_Gain21 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain21",
    rotation="up",
    flip="flip_none",
    position=(7208, 7368),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain21, "gain"), "nQc_P")


# Component: Load.CPL.CPL1.Sum9
_Load_CPL_CPL1_Sum9 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL1,
    name="Sum9",
    rotation="right",
    flip="flip_none",
    position=(7496, 7600),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Sum9, "signs"), "+++++")


# Component: Load.CPL.CPL1.Limit12
_Load_CPL_CPL1_Limit12 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL1,
    name="Limit12",
    rotation="up",
    flip="flip_none",
    position=(7008, 7416),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Limit12, "lower_limit"), "0")


# Component: Load.CPL.CPL1.Signal switch25
_Load_CPL_CPL1_Signal_switch25 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch25",
    rotation="up",
    flip="flip_vertical",
    position=(7368, 7384),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Gain22
_Load_CPL_CPL1_Gain22 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain22",
    rotation="up",
    flip="flip_none",
    position=(7208, 7400),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain22, "gain"), "pQc_P")


# Component: Load.CPL.CPL1.Constant14
_Load_CPL_CPL1_Constant14 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant14",
    rotation="up",
    flip="flip_none",
    position=(6864, 7816),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant14, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant14, "value"), "Pc_T_pQ")


# Component: Load.CPL.CPL1.Signal switch26
_Load_CPL_CPL1_Signal_switch26 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch26",
    rotation="up",
    flip="flip_none",
    position=(6976, 7840),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Constant15
_Load_CPL_CPL1_Constant15 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant15",
    rotation="up",
    flip="flip_none",
    position=(6864, 7856),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant15, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant15, "value"), "Pc_T_nQ")


# Component: Load.CPL.CPL1.Constant17
_Load_CPL_CPL1_Constant17 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant17",
    rotation="up",
    flip="flip_none",
    position=(6920, 7496),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant17, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant17, "value"), "pQc_T")


# Component: Load.CPL.CPL1.Signal switch27
_Load_CPL_CPL1_Signal_switch27 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_CPL_CPL1,
    name="Signal switch27",
    rotation="up",
    flip="flip_none",
    position=(7008, 7520),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Constant18
_Load_CPL_CPL1_Constant18 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant18",
    rotation="up",
    flip="flip_none",
    position=(6920, 7536),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant18, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant18, "value"), "nQc_T")


# Component: Load.CPL.CPL1.Abs2
_Load_CPL_CPL1_Abs2 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL1,
    name="Abs2",
    rotation="up",
    flip="flip_none",
    position=(8080, 7976),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Abs3
_Load_CPL_CPL1_Abs3 = mdl.create_component(
    type_name="core/Abs",
    parent=_Load_CPL_CPL1,
    name="Abs3",
    rotation="left",
    flip="flip_none",
    position=(8120, 8032),
    hide_name=True,
    size=(None, None)
)


# Component: Load.CPL.CPL1.Sum14
_Load_CPL_CPL1_Sum14 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL1,
    name="Sum14",
    rotation="up",
    flip="flip_none",
    position=(6416, 7416),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Sum14, "signs"), "+-")


# Component: Load.CPL.CPL1.Constant19
_Load_CPL_CPL1_Constant19 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant19",
    rotation="up",
    flip="flip_none",
    position=(6320, 7456),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant19, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant19, "value"), "60")


# Component: Load.CPL.CPL1.Sum15
_Load_CPL_CPL1_Sum15 = mdl.create_component(
    type_name="core/Sum",
    parent=_Load_CPL_CPL1,
    name="Sum15",
    rotation="up",
    flip="flip_none",
    position=(6568, 7360),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Sum15, "signs"), "+-")


# Component: Load.CPL.CPL1.Constant20
_Load_CPL_CPL1_Constant20 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_CPL_CPL1,
    name="Constant20",
    rotation="up",
    flip="flip_none",
    position=(6488, 7352),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Constant20, "execution_rate"), "Ts")


# Component: Load.CPL.CPL1.Gain24
_Load_CPL_CPL1_Gain24 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_CPL_CPL1,
    name="Gain24",
    rotation="up",
    flip="flip_none",
    position=(6488, 7416),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Gain24, "gain"), "Fc")


# Component: Load.CPL.CPL1.Edge Detection1
_Load_CPL_CPL1_Edge_Detection1 = mdl.create_component(
    type_name="core/Edge Detection",
    parent=_Load_CPL_CPL1,
    name="Edge Detection1",
    rotation="right",
    flip="flip_none",
    position=(9216, 8328),
    hide_name=True,
    size=(32, 32)
)


# Component: Load.CPL.CPL1.Limit1
_Load_CPL_CPL1_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_CPL_CPL1,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7464, 8168),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CPL_CPL1_Limit1, "lower_limit"), "0.1")


# Port: Load.CPL.CPL1.P2
_Load_CPL_CPL1_P2 = mdl.create_port(
    name="P2",
    parent=_Load_CPL_CPL1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8192, 8784)
)

# Port: Load.CPL.CPL1.P3
_Load_CPL_CPL1_P3 = mdl.create_port(
    name="P3",
    parent=_Load_CPL_CPL1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7760, 8784)
)

# Port: Load.CPL.CPL1.P
_Load_CPL_CPL1_P = mdl.create_port(
    name="P",
    parent=_Load_CPL_CPL1,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6288, 7592)
)

# Port: Load.CPL.CPL1.Q
_Load_CPL_CPL1_Q = mdl.create_port(
    name="Q",
    parent=_Load_CPL_CPL1,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6288, 7664)
)

# Tag: Load.CPL.CPL1.From16
_Load_CPL_CPL1_From16 = mdl.create_tag(
    value="Q_sign",
    name="From16",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7120, 7312)
)

# Tag: Load.CPL.CPL1.From17
_Load_CPL_CPL1_From17 = mdl.create_tag(
    value="Q_sign",
    name="From17",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6952, 7448)
)

# Tag: Load.CPL.CPL1.From18
_Load_CPL_CPL1_From18 = mdl.create_tag(
    value="Q_sign",
    name="From18",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6928, 7768)
)

# Tag: Load.CPL.CPL1.From19
_Load_CPL_CPL1_From19 = mdl.create_tag(
    value="Q_sign",
    name="From19",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7032, 7664)
)

# Tag: Load.CPL.CPL1.Goto8
_Load_CPL_CPL1_Goto8 = mdl.create_tag(
    value="Ia_load",
    name="Goto8",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9528, 8608)
)

# Tag: Load.CPL.CPL1.From20
_Load_CPL_CPL1_From20 = mdl.create_tag(
    value="Ia_load",
    name="From20",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7896, 8744)
)

# Tag: Load.CPL.CPL1.Goto1
_Load_CPL_CPL1_Goto1 = mdl.create_tag(
    value="ws",
    name="Goto1",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7888, 8320)
)

# Tag: Load.CPL.CPL1.From1
_Load_CPL_CPL1_From1 = mdl.create_tag(
    value="ws",
    name="From1",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6320, 7408)
)

# Tag: Load.CPL.CPL1.Goto2
_Load_CPL_CPL1_Goto2 = mdl.create_tag(
    value="kP",
    name="Goto2",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6368, 7592)
)

# Tag: Load.CPL.CPL1.Goto3
_Load_CPL_CPL1_Goto3 = mdl.create_tag(
    value="kQ",
    name="Goto3",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6368, 7664)
)

# Tag: Load.CPL.CPL1.From2
_Load_CPL_CPL1_From2 = mdl.create_tag(
    value="kP",
    name="From2",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7288, 7888)
)

# Tag: Load.CPL.CPL1.From3
_Load_CPL_CPL1_From3 = mdl.create_tag(
    value="kP",
    name="From3",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6920, 7416)
)

# Tag: Load.CPL.CPL1.From4
_Load_CPL_CPL1_From4 = mdl.create_tag(
    value="kQ",
    name="From4",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7432, 7440)
)

# Tag: Load.CPL.CPL1.From5
_Load_CPL_CPL1_From5 = mdl.create_tag(
    value="kQ",
    name="From5",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6712, 7640)
)

# Tag: Load.CPL.CPL1.From6
_Load_CPL_CPL1_From6 = mdl.create_tag(
    value="kQ",
    name="From6",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7000, 7896)
)

# Tag: Load.CPL.CPL1.From7
_Load_CPL_CPL1_From7 = mdl.create_tag(
    value="kQ",
    name="From7",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7248, 7264)
)

# Tag: Load.CPL.CPL1.Goto4
_Load_CPL_CPL1_Goto4 = mdl.create_tag(
    value="Va",
    name="Goto4",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="down",
    flip="flip_none",
    position=(7912, 9152)
)

# Tag: Load.CPL.CPL1.From8
_Load_CPL_CPL1_From8 = mdl.create_tag(
    value="Va",
    name="From8",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7616, 8320)
)

# Tag: Load.CPL.CPL1.From9
_Load_CPL_CPL1_From9 = mdl.create_tag(
    value="Va_rms",
    name="From9",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8104, 8264)
)

# Tag: Load.CPL.CPL1.From10
_Load_CPL_CPL1_From10 = mdl.create_tag(
    value="Va_rms",
    name="From10",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7376, 8168)
)

# Tag: Load.CPL.CPL1.Goto5
_Load_CPL_CPL1_Goto5 = mdl.create_tag(
    value="Va_rms",
    name="Goto5",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="down",
    flip="flip_none",
    position=(7912, 9048)
)

# Tag: Load.CPL.CPL1.Goto6
_Load_CPL_CPL1_Goto6 = mdl.create_tag(
    value="Va_rms_squared",
    name="Goto6",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7680, 8176)
)

# Tag: Load.CPL.CPL1.From11
_Load_CPL_CPL1_From11 = mdl.create_tag(
    value="Va_rms_squared",
    name="From11",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7816, 8176)
)

# Tag: Load.CPL.CPL1.From12
_Load_CPL_CPL1_From12 = mdl.create_tag(
    value="Va_rms_squared",
    name="From12",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7248, 7552)
)

# Tag: Load.CPL.CPL1.From13
_Load_CPL_CPL1_From13 = mdl.create_tag(
    value="Va_rms_squared",
    name="From13",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7160, 7928)
)

# Tag: Load.CPL.CPL1.From14
_Load_CPL_CPL1_From14 = mdl.create_tag(
    value="Va_rms_squared",
    name="From14",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7872, 7856)
)

# Tag: Load.CPL.CPL1.Goto7
_Load_CPL_CPL1_Goto7 = mdl.create_tag(
    value="Q_sign",
    name="Goto7",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6912, 7640)
)

# Tag: Load.CPL.CPL1.From15
_Load_CPL_CPL1_From15 = mdl.create_tag(
    value="Q_sign",
    name="From15",
    parent=_Load_CPL_CPL1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7312, 7440)
)

# Junction: Load.CPL.CPL1.Junction1
_Load_CPL_CPL1_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7496, 8168)
)

# Junction: Load.CPL.CPL1.Junction2
_Load_CPL_CPL1_Junction2 = mdl.create_junction(
    name="Junction2",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(8080, 8784)
)

# Junction: Load.CPL.CPL1.Junction10
_Load_CPL_CPL1_Junction10 = mdl.create_junction(
    name="Junction10",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8048, 8152)
)

# Junction: Load.CPL.CPL1.Junction11
_Load_CPL_CPL1_Junction11 = mdl.create_junction(
    name="Junction11",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8120, 8072)
)

# Junction: Load.CPL.CPL1.Junction62
_Load_CPL_CPL1_Junction62 = mdl.create_junction(
    name="Junction62",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7496, 7728)
)

# Junction: Load.CPL.CPL1.Junction50
_Load_CPL_CPL1_Junction50 = mdl.create_junction(
    name="Junction50",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8144, 7832)
)

# Junction: Load.CPL.CPL1.Junction51
_Load_CPL_CPL1_Junction51 = mdl.create_junction(
    name="Junction51",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8112, 7736)
)

# Junction: Load.CPL.CPL1.Junction74
_Load_CPL_CPL1_Junction74 = mdl.create_junction(
    name="Junction74",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7856, 7728)
)

# Junction: Load.CPL.CPL1.Junction78
_Load_CPL_CPL1_Junction78 = mdl.create_junction(
    name="Junction78",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(6928, 7696)
)

# Junction: Load.CPL.CPL1.Junction82
_Load_CPL_CPL1_Junction82 = mdl.create_junction(
    name="Junction82",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7496, 7680)
)

# Junction: Load.CPL.CPL1.Junction84
_Load_CPL_CPL1_Junction84 = mdl.create_junction(
    name="Junction84",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7160, 7368)
)

# Junction: Load.CPL.CPL1.Junction92
_Load_CPL_CPL1_Junction92 = mdl.create_junction(
    name="Junction92",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7760, 8120)
)

# Junction: Load.CPL.CPL1.Junction95
_Load_CPL_CPL1_Junction95 = mdl.create_junction(
    name="Junction95",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(6656, 7360)
)

# Junction: Load.CPL.CPL1.Junction96
_Load_CPL_CPL1_Junction96 = mdl.create_junction(
    name="Junction96",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(6784, 7640)
)

# Junction: Load.CPL.CPL1.Junction97
_Load_CPL_CPL1_Junction97 = mdl.create_junction(
    name="Junction97",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(7856, 8784)
)

# Junction: Load.CPL.CPL1.Junction101
_Load_CPL_CPL1_Junction101 = mdl.create_junction(
    name="Junction101",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(9168, 8280)
)

# Junction: Load.CPL.CPL1.Junction102
_Load_CPL_CPL1_Junction102 = mdl.create_junction(
    name="Junction102",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8768, 8280)
)

# Junction: Load.CPL.CPL1.Junction109
_Load_CPL_CPL1_Junction109 = mdl.create_junction(
    name="Junction109",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8912, 8344)
)

# Junction: Load.CPL.CPL1.Junction112
_Load_CPL_CPL1_Junction112 = mdl.create_junction(
    name="Junction112",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7056, 7416)
)

# Junction: Load.CPL.CPL1.Junction130
_Load_CPL_CPL1_Junction130 = mdl.create_junction(
    name="Junction130",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(7856, 8888)
)

# Junction: Load.CPL.CPL1.Junction131
_Load_CPL_CPL1_Junction131 = mdl.create_junction(
    name="Junction131",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(8080, 8888)
)

# Junction: Load.CPL.CPL1.Junction133
_Load_CPL_CPL1_Junction133 = mdl.create_junction(
    name="Junction133",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8376, 7816)
)

# Junction: Load.CPL.CPL1.Junction121
_Load_CPL_CPL1_Junction121 = mdl.create_junction(
    name="Junction121",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8248, 8264)
)

# Junction: Load.CPL.CPL1.Junction127
_Load_CPL_CPL1_Junction127 = mdl.create_junction(
    name="Junction127",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(8248, 8360)
)

# Junction: Load.CPL.CPL1.Junction129
_Load_CPL_CPL1_Junction129 = mdl.create_junction(
    name="Junction129",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7960, 8336)
)

# Junction: Load.CPL.CPL1.Junction137
_Load_CPL_CPL1_Junction137 = mdl.create_junction(
    name="Junction137",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(8080, 8984)
)

# Junction: Load.CPL.CPL1.Junction138
_Load_CPL_CPL1_Junction138 = mdl.create_junction(
    name="Junction138",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(7856, 8984)
)

# Junction: Load.CPL.CPL1.Junction139
_Load_CPL_CPL1_Junction139 = mdl.create_junction(
    name="Junction139",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(8080, 9088)
)

# Junction: Load.CPL.CPL1.Junction140
_Load_CPL_CPL1_Junction140 = mdl.create_junction(
    name="Junction140",
    parent=_Load_CPL_CPL1,
    kind="pe",
    position=(7856, 9088)
)

# Junction: Load.CPL.CPL1.Junction141
_Load_CPL_CPL1_Junction141 = mdl.create_junction(
    name="Junction141",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(7960, 8336)
)

# Junction: Load.CPL.CPL1.Junction142
_Load_CPL_CPL1_Junction142 = mdl.create_junction(
    name="Junction142",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(9248, 8592)
)

# Junction: Load.CPL.CPL1.Junction143
_Load_CPL_CPL1_Junction143 = mdl.create_junction(
    name="Junction143",
    parent=_Load_CPL_CPL1,
    kind="sp",
    position=(9216, 8280)
)

# Port: Load.CPL.A1
_Load_CPL_A1 = mdl.create_port(
    name="A1",
    parent=_Load_CPL,
    label="A1",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7664, 8024)
)

# Port: Load.CPL.N
_Load_CPL_N = mdl.create_port(
    name="N",
    parent=_Load_CPL,
    label="N",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8320, 8096)
)

# Port: Load.CPL.B1
_Load_CPL_B1 = mdl.create_port(
    name="B1",
    parent=_Load_CPL,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7664, 8096)
)

# Port: Load.CPL.C1
_Load_CPL_C1 = mdl.create_port(
    name="C1",
    parent=_Load_CPL,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=('left', 3),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7664, 8176)
)

# Tag: Load.CPL.Goto1
_Load_CPL_Goto1 = mdl.create_tag(
    value="kP_ref",
    name="Goto1",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8200, 7464)
)

# Tag: Load.CPL.Goto2
_Load_CPL_Goto2 = mdl.create_tag(
    value="kQ_ref",
    name="Goto2",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8208, 7592)
)

# Tag: Load.CPL.Goto3
_Load_CPL_Goto3 = mdl.create_tag(
    value="kP_int",
    name="Goto3",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7216, 7496)
)

# Tag: Load.CPL.Goto4
_Load_CPL_Goto4 = mdl.create_tag(
    value="kQ_int",
    name="Goto4",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7216, 7584)
)

# Tag: Load.CPL.From1
_Load_CPL_From1 = mdl.create_tag(
    value="kP_int",
    name="From1",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7424, 7456)
)

# Tag: Load.CPL.From2
_Load_CPL_From2 = mdl.create_tag(
    value="kQ_int",
    name="From2",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7336, 7584)
)

# Tag: Load.CPL.From3
_Load_CPL_From3 = mdl.create_tag(
    value="kP_ref",
    name="From3",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7640, 7904)
)

# Tag: Load.CPL.From4
_Load_CPL_From4 = mdl.create_tag(
    value="kQ_ref",
    name="From4",
    parent=_Load_CPL,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7640, 7944)
)

# Junction: Load.CPL.Junction7
_Load_CPL_Junction7 = mdl.create_junction(
    name="Junction7",
    parent=_Load_CPL,
    kind="sp",
    position=(7960, 7456)
)

# Junction: Load.CPL.Junction8
_Load_CPL_Junction8 = mdl.create_junction(
    name="Junction8",
    parent=_Load_CPL,
    kind="sp",
    position=(7808, 7584)
)

# Junction: Load.CPL.Junction10
_Load_CPL_Junction10 = mdl.create_junction(
    name="Junction10",
    parent=_Load_CPL,
    kind="sp",
    position=(7952, 7584)
)

# Junction: Load.CPL.Junction11
_Load_CPL_Junction11 = mdl.create_junction(
    name="Junction11",
    parent=_Load_CPL,
    kind="pe",
    position=(8264, 8096)
)

# Junction: Load.CPL.Junction12
_Load_CPL_Junction12 = mdl.create_junction(
    name="Junction12",
    parent=_Load_CPL,
    kind="pe",
    position=(8264, 8096)
)

# Junction: Load.CPL.Junction13
_Load_CPL_Junction13 = mdl.create_junction(
    name="Junction13",
    parent=_Load_CPL,
    kind="sp",
    position=(7928, 7904)
)

# Junction: Load.CPL.Junction14
_Load_CPL_Junction14 = mdl.create_junction(
    name="Junction14",
    parent=_Load_CPL,
    kind="sp",
    position=(7944, 7944)
)

# Junction: Load.CPL.Junction15
_Load_CPL_Junction15 = mdl.create_junction(
    name="Junction15",
    parent=_Load_CPL,
    kind="sp",
    position=(7824, 7904)
)

# Junction: Load.CPL.Junction16
_Load_CPL_Junction16 = mdl.create_junction(
    name="Junction16",
    parent=_Load_CPL,
    kind="sp",
    position=(7840, 7944)
)

# Component: Load.CIL
_Load_CIL = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Load,
    name="CIL",
    rotation="up",
    flip="flip_none",
    position=(7760, 8208),
    hide_name=False,
    size=(96, 64)
)
_Load_CIL_mask = mdl.create_mask(_Load_CIL)
_Load_CIL_mask_fn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="fn",
    label="Nominal frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General:1",
    unit="Hz"
)

_Load_CIL_mask_conn_type = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="conn_type",
    label="Connection type",
    widget="combo",
    combo_values=['Y', 'Δ'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)


_Load_CIL_mask_conn_type_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT

comp_script = return_comp_script(mdl, container_handle)

comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

comp_handle = mdl.get_sub_level_handle(container_handle)
mdl.refresh_icon(container_handle)

if new_value == "Δ":
    junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)

    connAB = mdl.get_item("Conn_AB", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connAB:
        mdl.create_connection(junA1, junB0, name="Conn_AB")
    connBC = mdl.get_item("Conn_BC", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connBC:
        mdl.create_connection(junB1, junC0, name="Conn_BC")
    connCA = mdl.get_item("Conn_CA", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connCA:
        mdl.create_connection(junC1, junA0, name="Conn_CA")

    if junN:
        mdl.delete_item(junN)

    portN = mdl.get_item("N", parent=comp_handle, item_type=ITEM_PORT)
    if portN:
        mdl.delete_item(portN)

else:
    junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)

    if not junN:
        junN = mdl.create_junction(name='JN', parent=comp_handle, kind='pe',
                                   position=(8192, 8328))

    connAN = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connAN:
        mdl.create_connection(junA1, junN, name="Conn_AN")
    connBN = mdl.get_item("Conn_BN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connBN:
        mdl.create_connection(junB1, junN, name="Conn_BN")
    connCN = mdl.get_item("Conn_CN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connCN:
        mdl.create_connection(junC1, junN, name="Conn_CN")

    connAB = mdl.get_item("Conn_AB", parent=comp_handle, item_type=ITEM_CONNECTION)
    if connAB:
        mdl.delete_item(connAB)
    connBC = mdl.get_item("Conn_BC", parent=comp_handle, item_type=ITEM_CONNECTION)
    if connBC:
        mdl.delete_item(connBC)
    connCA = mdl.get_item("Conn_CA", parent=comp_handle, item_type=ITEM_CONNECTION)
    if connCA:
        mdl.delete_item(connCA)

"""
mdl.set_handler_code(_Load_CIL_mask_conn_type, "property_value_changed", _Load_CIL_mask_conn_type_property_value_changed)


_Load_CIL_mask_conn_type_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.conn_type_value_edited_fnc(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_conn_type, "property_value_edited", _Load_CIL_mask_conn_type_property_value_edited)

_Load_CIL_mask_ground_connected = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="ground_connected",
    label="Ground-connected",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)


_Load_CIL_mask_ground_connected_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

comp_handle = mdl.get_sub_level_handle(container_handle)
mdl.refresh_icon(container_handle)

if not new_value:
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
    gnd1 = mdl.get_item("gndc", parent=comp_handle, item_type=ITEM_COMPONENT)
    if gnd1:
        mdl.delete_item(gnd1)
    if junN:
        portN = mdl.get_item("N", parent=comp_handle, item_type = ITEM_PORT)
        if not portN:
            portN = mdl.create_port(parent=comp_handle, name="N", direction="out", kind = "pe",
                            terminal_position=(0, 30),
                            position=(8192, 8378), rotation="left")
        connN = mdl.get_item("Conn_N", parent=comp_handle, item_type=ITEM_CONNECTION)
        if not connN:
            mdl.create_connection(junN, portN, name="Conn_N")
else:
    portN = mdl.get_item("N", parent=comp_handle, item_type=ITEM_PORT)
    gnd1 = mdl.get_item("gndc", parent=comp_handle, item_type=ITEM_COMPONENT)
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
    if portN:
        mdl.delete_item(portN)
    if junN:
        if not gnd1:
            gnd1 = mdl.create_component("src_ground", parent=comp_handle, name="gndc", position=(8192, 8378))
        connG = mdl.get_item("Conn_G", parent=comp_handle, item_type=ITEM_CONNECTION)
        if not connG:
            mdl.create_connection(mdl.term(gnd1, "node"), junN, name="ConnG")

"""
mdl.set_handler_code(_Load_CIL_mask_ground_connected, "property_value_changed", _Load_CIL_mask_ground_connected_property_value_changed)

_Load_CIL_mask_set_balanced = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="set_balanced",
    label="Set balanced 3ph power",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="General",
    unit=""
)


_Load_CIL_mask_set_balanced_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.set_balanced_fcn(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_set_balanced, "property_value_changed", _Load_CIL_mask_set_balanced_property_value_changed)


_Load_CIL_mask_set_balanced_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.set_balanced_fcn(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_set_balanced, "property_value_edited", _Load_CIL_mask_set_balanced_property_value_edited)

_Load_CIL_mask_Vn_3ph = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="Vn_3ph",
    label="Nominal line voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters:2",
    unit="kV"
)


_Load_CIL_mask_Vn_3ph_property_value_changed = """
mdl.set_property_value(mdl.prop(container_handle, 'VAn'), str(new_value) + '*1000/(3**0.5)')
mdl.set_property_value(mdl.prop(container_handle, 'VBn'), str(new_value) + '*1000/(3**0.5)')
mdl.set_property_value(mdl.prop(container_handle, 'VCn'), str(new_value) + '*1000/(3**0.5)')
mdl.set_property_value(mdl.prop(container_handle, 'VAB'), str(new_value) + '*1000')
mdl.set_property_value(mdl.prop(container_handle, 'VBC'), str(new_value) + '*1000')
mdl.set_property_value(mdl.prop(container_handle, 'VCA'), str(new_value) + '*1000')

"""
mdl.set_handler_code(_Load_CIL_mask_Vn_3ph, "property_value_changed", _Load_CIL_mask_Vn_3ph_property_value_changed)


_Load_CIL_mask_Vn_3ph_property_value_edited = """
mdl.set_property_disp_value(mdl.prop(container_handle, 'VAn'), new_value + '*1000/(3**0.5)')
mdl.set_property_disp_value(mdl.prop(container_handle, 'VBn'), new_value + '*1000/(3**0.5)')
mdl.set_property_disp_value(mdl.prop(container_handle, 'VCn'), new_value + '*1000/(3**0.5)')
mdl.set_property_disp_value(mdl.prop(container_handle, 'VAB'), new_value + '*1000')
mdl.set_property_disp_value(mdl.prop(container_handle, 'VBC'), new_value + '*1000')
mdl.set_property_disp_value(mdl.prop(container_handle, 'VCA'), new_value + '*1000')

"""
mdl.set_handler_code(_Load_CIL_mask_Vn_3ph, "property_value_edited", _Load_CIL_mask_Vn_3ph_property_value_edited)

_Load_CIL_mask_Sn_3ph = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="Sn_3ph",
    label="Total Nominal power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit="kVA"
)


_Load_CIL_mask_Sn_3ph_property_value_changed = """
phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
mdl.set_property_value(mdl.prop(container_handle, 'SAn'), str(new_value) + '*1000/' + str(phases))
mdl.set_property_value(mdl.prop(container_handle, 'SBn'), str(new_value) + '*1000/' + str(phases))
mdl.set_property_value(mdl.prop(container_handle, 'SCn'), str(new_value) + '*1000/' + str(phases))
mdl.set_property_value(mdl.prop(container_handle, 'SAB'), str(new_value) + '*1000/' + str(phases))
mdl.set_property_value(mdl.prop(container_handle, 'SBC'), str(new_value) + '*1000/' + str(phases))
mdl.set_property_value(mdl.prop(container_handle, 'SCA'), str(new_value) + '*1000/' + str(phases))

"""
mdl.set_handler_code(_Load_CIL_mask_Sn_3ph, "property_value_changed", _Load_CIL_mask_Sn_3ph_property_value_changed)


_Load_CIL_mask_Sn_3ph_property_value_edited = """
phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
mdl.set_property_disp_value(mdl.prop(container_handle, 'SAn'), new_value + '*1000/' + str(phases))
mdl.set_property_disp_value(mdl.prop(container_handle, 'SBn'), new_value + '*1000/' + str(phases))
mdl.set_property_disp_value(mdl.prop(container_handle, 'SCn'), new_value + '*1000/' + str(phases))
mdl.set_property_disp_value(mdl.prop(container_handle, 'SAB'), new_value + '*1000/' + str(phases))
mdl.set_property_disp_value(mdl.prop(container_handle, 'SBC'), new_value + '*1000/' + str(phases))
mdl.set_property_disp_value(mdl.prop(container_handle, 'SCA'), new_value + '*1000/' + str(phases))

"""
mdl.set_handler_code(_Load_CIL_mask_Sn_3ph, "property_value_edited", _Load_CIL_mask_Sn_3ph_property_value_edited)

_Load_CIL_mask_pf_mode_3ph = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pf_mode_3ph",
    label="Power factor mode",
    widget="combo",
    combo_values=['Lag', 'Lead', 'Unit'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)


_Load_CIL_mask_pf_mode_3ph_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
if set_balanced is True:
    comp_script.lock_prop(mdl, container_handle, "pf_3ph", new_value, "Unit")

mdl.set_property_value(mdl.prop(container_handle, 'pf_modeA'), new_value)
mdl.set_property_value(mdl.prop(container_handle, 'pf_modeB'), new_value)
mdl.set_property_value(mdl.prop(container_handle, 'pf_modeC'), new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_pf_mode_3ph, "property_value_changed", _Load_CIL_mask_pf_mode_3ph_property_value_changed)


_Load_CIL_mask_pf_mode_3ph_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
if set_balanced is True:
    comp_script.lock_prop(mdl, container_handle, "pf_3ph", new_value, "Unit")

mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeA'), new_value)
mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeB'), new_value)
mdl.set_property_disp_value(mdl.prop(container_handle, 'pf_modeC'), new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_pf_mode_3ph, "property_value_edited", _Load_CIL_mask_pf_mode_3ph_property_value_edited)

_Load_CIL_mask_pf_3ph = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pf_3ph",
    label="Power factor",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Load Parameters",
    unit=""
)


_Load_CIL_mask_pf_3ph_property_value_changed = """
mdl.set_property_value(mdl.prop(container_handle, 'pfA'), new_value)
mdl.set_property_value(mdl.prop(container_handle, 'pfB'), new_value)
mdl.set_property_value(mdl.prop(container_handle, 'pfC'), new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_pf_3ph, "property_value_changed", _Load_CIL_mask_pf_3ph_property_value_changed)


_Load_CIL_mask_pf_3ph_property_value_edited = """
mdl.set_property_disp_value(mdl.prop(container_handle, 'pfA'), new_value)
mdl.set_property_disp_value(mdl.prop(container_handle, 'pfB'), new_value)
mdl.set_property_disp_value(mdl.prop(container_handle, 'pfC'), new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_pf_3ph, "property_value_edited", _Load_CIL_mask_pf_3ph_property_value_edited)

_Load_CIL_mask_VAn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="VAn",
    label="Nominal phase voltage (VAn)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase A:3",
    unit="V"
)

_Load_CIL_mask_VAB = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="VAB",
    label="Nominal line voltage (VAB)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase A",
    unit="V"
)

_Load_CIL_mask_SAn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="SAn",
    label="Nominal phase power (SAn)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase A",
    unit="VA"
)

_Load_CIL_mask_SAB = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="SAB",
    label="Nominal line power (SAB)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase A",
    unit="VA"
)

_Load_CIL_mask_pf_modeA = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pf_modeA",
    label="Power factor mode",
    widget="combo",
    combo_values=['Lag', 'Lead', 'Unit'],
    evaluate=False,
    enabled=False,
    visible=False,
    tab_name="Phase A",
    unit=""
)


_Load_CIL_mask_pf_modeA_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
if set_balanced is False:
    comp_script.lock_prop(mdl, container_handle, "pfA", new_value, "Unit")


comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'A', (8112, 8232), (8112, 8288))

"""
mdl.set_handler_code(_Load_CIL_mask_pf_modeA, "property_value_changed", _Load_CIL_mask_pf_modeA_property_value_changed)


_Load_CIL_mask_pf_modeA_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
if set_balanced is False:
    comp_script.lock_prop(mdl, container_handle, "pfA", new_value, "Unit")

"""
mdl.set_handler_code(_Load_CIL_mask_pf_modeA, "property_value_edited", _Load_CIL_mask_pf_modeA_property_value_edited)

_Load_CIL_mask_pfA = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pfA",
    label="Power factor (A)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase A",
    unit=""
)

_Load_CIL_mask_VBn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="VBn",
    label="Nominal phase voltage (VBn)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase B:4",
    unit="V"
)

_Load_CIL_mask_VBC = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="VBC",
    label="Nominal line voltage (VBC)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase B",
    unit="V"
)

_Load_CIL_mask_SBn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="SBn",
    label="Nominal phase power (SBn)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase B",
    unit="VA"
)

_Load_CIL_mask_SBC = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="SBC",
    label="Nominal line power (SBC)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase B",
    unit="VA"
)

_Load_CIL_mask_pf_modeB = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pf_modeB",
    label="Power factor mode",
    widget="combo",
    combo_values=['Lag', 'Lead', 'Unit'],
    evaluate=False,
    enabled=False,
    visible=False,
    tab_name="Phase B",
    unit=""
)


_Load_CIL_mask_pf_modeB_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
if set_balanced is False:
    comp_script.lock_prop(mdl, container_handle, "pfB", new_value, "Unit")

if phases=="3" or phases=="2":
    comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'B', (8192, 8232), (8192, 8288))

"""
mdl.set_handler_code(_Load_CIL_mask_pf_modeB, "property_value_changed", _Load_CIL_mask_pf_modeB_property_value_changed)


_Load_CIL_mask_pf_modeB_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
if set_balanced is False:
    comp_script.lock_prop(mdl, container_handle, "pfB", new_value, "Unit")

"""
mdl.set_handler_code(_Load_CIL_mask_pf_modeB, "property_value_edited", _Load_CIL_mask_pf_modeB_property_value_edited)

_Load_CIL_mask_pfB = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pfB",
    label="Power factor (B)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase B",
    unit=""
)

_Load_CIL_mask_VCn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="VCn",
    label="Nominal phase voltage (VCn)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase C:5",
    unit="V"
)

_Load_CIL_mask_VCA = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="VCA",
    label="Nominal line voltage (VCA)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase C",
    unit="V"
)

_Load_CIL_mask_SCn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="SCn",
    label="Nominal phase power (SCn)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase C:5",
    unit="VA"
)

_Load_CIL_mask_SCA = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="SCA",
    label="Nominal line power (SCA)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase C",
    unit="VA"
)

_Load_CIL_mask_pf_modeC = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pf_modeC",
    label="Power factor mode",
    widget="combo",
    combo_values=['Lag', 'Lead', 'Unit'],
    evaluate=False,
    enabled=False,
    visible=False,
    tab_name="Phase C",
    unit=""
)


_Load_CIL_mask_pf_modeC_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
phases = mdl.get_property_disp_value(mdl.prop(container_handle, "phases"))
if set_balanced is False:
    comp_script.lock_prop(mdl, container_handle, "pfC", new_value, "Unit")

if phases=="3":
    comp_script.pf_mode_fcn(mdl, container_handle, new_value, 'C', (8272, 8232), (8272, 8288))

"""
mdl.set_handler_code(_Load_CIL_mask_pf_modeC, "property_value_changed", _Load_CIL_mask_pf_modeC_property_value_changed)


_Load_CIL_mask_pf_modeC_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)

set_balanced = mdl.get_property_disp_value(mdl.prop(container_handle, "set_balanced"))
if set_balanced is False:
    comp_script.lock_prop(mdl, container_handle, "pfC", new_value, "Unit")

"""
mdl.set_handler_code(_Load_CIL_mask_pf_modeC, "property_value_edited", _Load_CIL_mask_pf_modeC_property_value_edited)

_Load_CIL_mask_pfC = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pfC",
    label="Power factor (C)",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Phase C",
    unit=""
)

_Load_CIL_mask_kV = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="kV",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_model = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="model",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_phases = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="phases",
    label="Number of Phases",
    widget="combo",
    combo_values=['1', '3'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Load_CIL_mask_phases_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT

comp_script = return_comp_script(mdl, container_handle)

comp_script.phase_value_changed_fnc(mdl, container_handle, new_value)

pf_mode_3ph = mdl.get_property_disp_value(mdl.prop(container_handle, "pf_mode_3ph"))
comp_handle = mdl.get_sub_level_handle(container_handle)

mdl.refresh_icon(container_handle)

if new_value == "3":
    mdl.enable_property(mdl.prop(container_handle, "ground_connected"))
    mdl.enable_property(mdl.prop(container_handle, "conn_type"))
    junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
    pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
    pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
    pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
    connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
    connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
    connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
    Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
    La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
    Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)

    if not pA:
        pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                            terminal_position=(-30, -30),
                            position=(8112, 8024), rotation="right")
        mdl.create_connection(junA0, pA, name="ConnAA0")
    else:
        mdl.set_port_properties(pA, terminal_position=(-30, -30))
    if not Ra:
        Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
        mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
        mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn17")
        mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
        comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))

    if not pB:
        pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                            terminal_position=(0, -30),
                            position=(8192, 8024), rotation="right")
        mdl.create_connection(junB0, pB, name="ConnBB0")
    if not Rb:
        Rb = mdl.create_component("pas_resistor", parent=comp_handle, name="Rb", position=(8192,8128), rotation="right")
        mdl.set_property_value(mdl.prop(Rb, "resistance"), "Rb")
        mdl.create_connection(mdl.term(Rb, "p_node"), junB0, name="Conn19")
        mdl.create_connection(mdl.term(Rb, "n_node"), junB1, name="Conn_B")
        comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'B', (8192, 8232), (8192, 8288))
    if not pC:
        pC = mdl.create_port(parent=comp_handle, name="C1", direction="out", kind = "pe",
                            terminal_position=(30, -30),
                            position=(8272, 8024), rotation="right")
        mdl.create_connection(junC0, pC, name="ConnCC0")
    if not Rc:
        Rc = mdl.create_component("pas_resistor", parent=comp_handle, name="Rc", position=(8272,8128), rotation="right")
        mdl.set_property_value(mdl.prop(Rc, "resistance"), "Rc")
        mdl.create_connection(mdl.term(Rc, "p_node"), junC0, name="Conn21")
        mdl.create_connection(mdl.term(Rc, "n_node"), junC1, name="Conn_C")
        comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'C', (8272, 8232), (8272, 8288))





elif new_value == "2":
    junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
    pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
    pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
    pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
    connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
    connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
    connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
    Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
    La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
    Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
    if not pA:
        pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                            terminal_position=("top", 1),
                            position=(8112, 8024), rotation="right")
        mdl.create_connection(junA0, pA, name="ConnAA0")
    if not Ra:
        Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
        mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
        mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn21")
        mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
        comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))
    if not pB:
        pB = mdl.create_port(parent=comp_handle, name="B1", direction="out", kind = "pe",
                            terminal_position=("top", 2),
                            position=(8192, 8024), rotation="right")
        mdl.create_connection(junB0, pB, name="ConnBB0")
    if not Rb:
        Rb = mdl.create_component("pas_resistor", parent=comp_handle, name="Rb", position=(8192,8128), rotation="right")
        mdl.set_property_value(mdl.prop(Rb, "resistance"), "Rb")
        mdl.create_connection(mdl.term(Rb, "p_node"), junB0, name="Conn19")
        mdl.create_connection(mdl.term(Rb, "n_node"), junB1, name="Conn_B")
        comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'B', (8192, 8232), (8192, 8288))
    if pC:
        comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'C', (8272, 8232), (8272, 8288))
        mdl.delete_item(pC)
        mdl.delete_item(Rc)



elif new_value == "1":
    junA0 = mdl.get_item("JA0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB0 = mdl.get_item("JB0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC0 = mdl.get_item("JC0", parent=comp_handle, item_type=ITEM_JUNCTION)
    junA1 = mdl.get_item("JA1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junB1 = mdl.get_item("JB1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junC1 = mdl.get_item("JC1", parent=comp_handle, item_type=ITEM_JUNCTION)
    junN = mdl.get_item("JN", parent=comp_handle, item_type=ITEM_JUNCTION)
    pA = mdl.get_item("A1", parent=comp_handle, item_type=ITEM_PORT)
    pB = mdl.get_item("B1", parent=comp_handle, item_type=ITEM_PORT)
    pC = mdl.get_item("C1", parent=comp_handle, item_type=ITEM_PORT)
    connAA0 = mdl.get_item("Conn_AA0", parent=comp_handle, item_type=ITEM_CONNECTION)
    connBB0 = mdl.get_item("Conn_BB0", parent=comp_handle, item_type=ITEM_CONNECTION)
    connCC0 = mdl.get_item("Conn_CC0", parent=comp_handle, item_type=ITEM_CONNECTION)
    Ra = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Rb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Rc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
    La = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Lb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Lc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)
    Ca = mdl.get_item("Ra", parent=comp_handle, item_type=ITEM_COMPONENT)
    Cb = mdl.get_item("Rb", parent=comp_handle, item_type=ITEM_COMPONENT)
    Cc = mdl.get_item("Rc", parent=comp_handle, item_type=ITEM_COMPONENT)

    if not junN:
        junN = mdl.create_junction(name='JN', parent=comp_handle, kind='pe',
                                   position=(8192, 8328))

    connAN = mdl.get_item("Conn_AN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connAN:
        mdl.create_connection(junA1, junN, name="Conn_AN")
    connBN = mdl.get_item("Conn_BN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connBN:
        mdl.create_connection(junB1, junN, name="Conn_BN")
    connCN = mdl.get_item("Conn_CN", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not connCN:
        mdl.create_connection(junC1, junN, name="Conn_CN")

    if not pA:
        pA = mdl.create_port(parent=comp_handle, name="A1", direction="out", kind = "pe",
                            terminal_position=(0, -30),
                            position=(8112, 8024), rotation="right")
        mdl.create_connection(junA0, pA, name="ConnAA0")
    else:
        mdl.set_port_properties(pA, terminal_position=(0, -30))

    if not Ra:
        Ra = mdl.create_component("pas_resistor", parent=comp_handle, name="Ra", position=(8112,8128), rotation="right")
        mdl.set_property_value(mdl.prop(Ra, "resistance"), "Ra")
        mdl.create_connection(mdl.term(Ra, "p_node"), junA0, name="Conn21")
        mdl.create_connection(mdl.term(Ra, "n_node"), junA1, name="Conn_A")
        comp_script.pf_mode_fcn(mdl, container_handle, pf_mode_3ph, 'A', (8112, 8232), (8112, 8288))
    if pB:
        comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'B', (8192, 8232), (8192, 8288))
        mdl.delete_item(pB)
        mdl.delete_item(Rb)

    if pC:
        comp_script.pf_mode_fcn(mdl, container_handle, "Unit", 'C', (8272, 8232), (8272, 8288))
        mdl.delete_item(pC)
        mdl.delete_item(Rc)

"""
mdl.set_handler_code(_Load_CIL_mask_phases, "property_value_changed", _Load_CIL_mask_phases_property_value_changed)


_Load_CIL_mask_phases_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.phase_value_changed_fnc(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_Load_CIL_mask_phases, "property_value_edited", _Load_CIL_mask_phases_property_value_edited)

_Load_CIL_mask_phs = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="phs",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_ph_num = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="ph_num",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_pf = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="pf",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_conn = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="conn",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_kVA = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="kVA",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_basefreq = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="basefreq",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_CIL_mask_dss_mod = mdl.create_property(
    item_handle=_Load_CIL_mask,
    name="dss_mod",
    label="OpenDSS load type",
    widget="combo",
    combo_values=['Constant P, Q', 'Constant Impedance', 'Constant Current Mag.', 'Constant P, Fixed Q', 'Constant P, Fixed Impedance Q'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="OpenDSS:6",
    unit=""
)


_Load_CIL_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Load_CIL_mask, "define_icon", _Load_CIL_mask_define_icon)

_Load_CIL_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)
if not gui_scripts_path in sys.path:
    sys.path.append(gui_scripts_path)

import comp_load as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)


"""
mdl.set_handler_code(_Load_CIL_mask, "init", _Load_CIL_mask_init)

_Load_CIL_mask_pre_compile = """
# HEADER START
fn = mdl.get_property_value(mdl.prop(item_handle, "fn"))
conn_type = mdl.get_property_value(mdl.prop(item_handle, "conn_type"))
ground_connected = mdl.get_property_value(mdl.prop(item_handle, "ground_connected"))
set_balanced = mdl.get_property_value(mdl.prop(item_handle, "set_balanced"))
Vn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Vn_3ph"))
Sn_3ph = mdl.get_property_value(mdl.prop(item_handle, "Sn_3ph"))
pf_mode_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_mode_3ph"))
pf_3ph = mdl.get_property_value(mdl.prop(item_handle, "pf_3ph"))
VAn = mdl.get_property_value(mdl.prop(item_handle, "VAn"))
VAB = mdl.get_property_value(mdl.prop(item_handle, "VAB"))
SAn = mdl.get_property_value(mdl.prop(item_handle, "SAn"))
SAB = mdl.get_property_value(mdl.prop(item_handle, "SAB"))
pf_modeA = mdl.get_property_value(mdl.prop(item_handle, "pf_modeA"))
pfA = mdl.get_property_value(mdl.prop(item_handle, "pfA"))
VBn = mdl.get_property_value(mdl.prop(item_handle, "VBn"))
VBC = mdl.get_property_value(mdl.prop(item_handle, "VBC"))
SBn = mdl.get_property_value(mdl.prop(item_handle, "SBn"))
SBC = mdl.get_property_value(mdl.prop(item_handle, "SBC"))
pf_modeB = mdl.get_property_value(mdl.prop(item_handle, "pf_modeB"))
pfB = mdl.get_property_value(mdl.prop(item_handle, "pfB"))
VCn = mdl.get_property_value(mdl.prop(item_handle, "VCn"))
VCA = mdl.get_property_value(mdl.prop(item_handle, "VCA"))
SCn = mdl.get_property_value(mdl.prop(item_handle, "SCn"))
SCA = mdl.get_property_value(mdl.prop(item_handle, "SCA"))
pf_modeC = mdl.get_property_value(mdl.prop(item_handle, "pf_modeC"))
pfC = mdl.get_property_value(mdl.prop(item_handle, "pfC"))
kV = mdl.get_property_value(mdl.prop(item_handle, "kV"))
model = mdl.get_property_value(mdl.prop(item_handle, "model"))
phases = mdl.get_property_value(mdl.prop(item_handle, "phases"))
phs = mdl.get_property_value(mdl.prop(item_handle, "phs"))
ph_num = mdl.get_property_value(mdl.prop(item_handle, "ph_num"))
pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
conn = mdl.get_property_value(mdl.prop(item_handle, "conn"))
kVA = mdl.get_property_value(mdl.prop(item_handle, "kVA"))
basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
dss_mod = mdl.get_property_value(mdl.prop(item_handle, "dss_mod"))
# HEADER STOP
def calc_impedance(mdl, power_1ph, voltage, pf_mode, power_factor,
                       frequency, phase_id):

    if power_1ph <= 0:
        mdl.error("Power set is negative or zero.", kind="General error",
                    context=mdl.prop(item_handle, "S" + phase_id))
        return float('nan'), float('nan'), float('nan')
    if voltage <= 0:
        mdl.error("Voltage set is negative or zero.", kind="General error",
                    context=mdl.prop(item_handle, "V" + phase_id))
        return float('nan'), float('nan'), float('nan')
    if pf_mode != "Unit":
        if power_factor < 0.01:
            mdl.warning("Power factor set is less than 0.01. Clipping it to 0.01",
                        kind="General error",
                        context=mdl.prop(item_handle, "pf" + phase_id[0]))
            power_factor = 0.01
        elif power_factor > 0.99:
            mdl.warning("Power factor set is greater than 0.99. Clipping it to 0.99",
                        kind="General error",
                        context=mdl.prop(item_handle, "pf" + phase_id[0]))
            power_factor = 0.99


    if pf_mode == "Unit":
        R = (voltage**2)/power_1ph
        L = float('nan')
        C = float('nan')
    elif pf_mode == "Lag":
        Z = (voltage**2)/power_1ph
        R = power_factor*Z
        L = Z*((1-power_factor**2)**0.5)/(2*np.pi*frequency)
        C = float('nan')
    else:
        Z = (voltage**2)/power_1ph
        R = power_factor*Z
        L = float('nan')
        C = 1/(Z*2*np.pi*frequency*((1-power_factor**2)**0.5))
    return R, L, C

if fn <= 0:
    mdl.error("Frequency set is negative or zero.", kind="General error",
                context=mdl.prop(item_handle, "fn"))
    fn = float('nan')

VAn = Vn_3ph*1000/(3**0.5)
VBn = Vn_3ph*1000/(3**0.5)
VCn = Vn_3ph*1000/(3**0.5)
VAB = Vn_3ph*1000
VBC = Vn_3ph*1000
VCA = Vn_3ph*1000

if phases == "3":
    phs = 3
else:
    phs = 1

SAn = Sn_3ph*1000/phs
SBn = Sn_3ph*1000/phs
SCn = Sn_3ph*1000/phs
SAB = Sn_3ph*1000/phs
SBC = Sn_3ph*1000/phs
SCA = Sn_3ph*1000/phs

if pf_mode_3ph == "Unit":
    pfA = 1.0
    pfB = 1.0
    pfC = 1.0
else:
    pfA = pf_3ph
    pfB = pf_3ph
    pfC = pf_3ph



if (conn_type == 'Δ'):
    Ra, La, Ca = calc_impedance(mdl, SAB, VAB, pf_mode_3ph, pfA, fn, "AB")
    Rb, Lb, Cb = calc_impedance(mdl, SBC, VBC, pf_mode_3ph, pfB, fn, "BC")
    Rc, Lc, Cc = calc_impedance(mdl, SCA, VCA, pf_mode_3ph, pfC, fn, "CA")
else:
    if phases == "1":
        if ground_connected:
            Ra, La, Ca = calc_impedance(mdl, SAn, VAn, pf_mode_3ph, pfA, fn, "An")
            Rb, Lb, Cb = calc_impedance(mdl, SBn, VBn, pf_mode_3ph, pfB, fn, "Bn")
            Rc, Lc, Cc = calc_impedance(mdl, SCn, VCn, pf_mode_3ph, pfC, fn, "Cn")
        else:
            Ra, La, Ca = calc_impedance(mdl, SAB, VAB, pf_mode_3ph, pfA, fn, "AB")
            Rb, Lb, Cb = calc_impedance(mdl, SBC, VBC, pf_mode_3ph, pfB, fn, "BC")
            Rc, Lc, Cc = calc_impedance(mdl, SCA, VCA, pf_mode_3ph, pfC, fn, "CA")
    else:
        Ra, La, Ca = calc_impedance(mdl, SAn, VAn, pf_mode_3ph, pfA, fn, "An")
        Rb, Lb, Cb = calc_impedance(mdl, SBn, VBn, pf_mode_3ph, pfB, fn, "Bn")
        Rc, Lc, Cc = calc_impedance(mdl, SCn, VCn, pf_mode_3ph, pfC, fn, "Cn")

from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy
import math

basefreq = fn
kVA = Sn_3ph
if (conn_type == 'Δ'):
    conn = "delta"
else:
    conn = "wye"

if pf_mode_3ph == "Unit":
    pf = 1.0
elif pf_mode_3ph == "Lag":
    pf = pf_3ph
else:
    pf = -1 * pf_3ph

if phases == "1":
    if ground_connected:
        kV = (Vn_3ph/(1))/1
    else:
        kV = Vn_3ph
else:
    kV = Vn_3ph

if dss_mod == "Constant P, Q":
    model = 1
elif dss_mod == "Constant Impedance":
    model = 2
elif dss_mod == "Constant Current Mag.":
    model = 5
elif dss_mod == "Constant P, Fixed Q":
    model = 6
elif dss_mod == "Constant P, Fixed Impedance Q":
    model = 7
else:
    model = 2

mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)
mdl.set_property_value(mdl.prop(item_handle, "kVA"), kVA)
mdl.set_property_value(mdl.prop(item_handle, "conn"), conn)
mdl.set_property_value(mdl.prop(item_handle, "pf"), pf)
mdl.set_property_value(mdl.prop(item_handle, "phases"), phases)
mdl.set_property_value(mdl.prop(item_handle, "kV"), kV)
mdl.set_property_value(mdl.prop(item_handle, "dss_mod"), dss_mod)
mdl.set_property_value(mdl.prop(item_handle, "model"), model)

"""
mdl.set_handler_code(_Load_CIL_mask, "pre_compile", _Load_CIL_mask_pre_compile)

_Load_CIL_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">A three-phase balanced or unbalanced constant impedance load. The impedance is set in series. The combinations possible for each phase individually are R, RL and RC.</p></body></html>
'''
mdl.set_description(_Load_CIL_mask, _Load_CIL_mask_desc)


# Component: Load.CIL.Ra
_Load_CIL_Ra = mdl.create_component(
    type_name="core/Resistor",
    parent=_Load_CIL,
    name="Ra",
    rotation="right",
    flip="flip_none",
    position=(8112, 8120),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CIL_Ra, "resistance"), "Ra")


# Component: Load.CIL.Rb
_Load_CIL_Rb = mdl.create_component(
    type_name="core/Resistor",
    parent=_Load_CIL,
    name="Rb",
    rotation="right",
    flip="flip_none",
    position=(8192, 8128),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CIL_Rb, "resistance"), "Rb")


# Component: Load.CIL.Rc
_Load_CIL_Rc = mdl.create_component(
    type_name="core/Resistor",
    parent=_Load_CIL,
    name="Rc",
    rotation="right",
    flip="flip_none",
    position=(8272, 8128),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CIL_Rc, "resistance"), "Rc")


# Component: Load.CIL.La
_Load_CIL_La = mdl.create_component(
    type_name="core/Inductor",
    parent=_Load_CIL,
    name="La",
    rotation="right",
    flip="flip_none",
    position=(8112, 8232),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CIL_La, "inductance"), "La")


# Component: Load.CIL.Lb
_Load_CIL_Lb = mdl.create_component(
    type_name="core/Inductor",
    parent=_Load_CIL,
    name="Lb",
    rotation="right",
    flip="flip_none",
    position=(8192, 8232),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CIL_Lb, "inductance"), "Lb")


# Component: Load.CIL.Lc
_Load_CIL_Lc = mdl.create_component(
    type_name="core/Inductor",
    parent=_Load_CIL,
    name="Lc",
    rotation="right",
    flip="flip_none",
    position=(8272, 8232),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_CIL_Lc, "inductance"), "Lc")


# Port: Load.CIL.A1
_Load_CIL_A1 = mdl.create_port(
    name="A1",
    parent=_Load_CIL,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(-30, -30),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(8112, 8024)
)

# Port: Load.CIL.B1
_Load_CIL_B1 = mdl.create_port(
    name="B1",
    parent=_Load_CIL,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(0.0, -30.0),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(8192, 8024)
)

# Port: Load.CIL.C1
_Load_CIL_C1 = mdl.create_port(
    name="C1",
    parent=_Load_CIL,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(30.0, -30.0),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(8272, 8024)
)

# Port: Load.CIL.N
_Load_CIL_N = mdl.create_port(
    name="N",
    parent=_Load_CIL,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(0, 30),
    rotation="left",
    flip="flip_none",
    hide_name=False,
    position=(8192, 8376)
)

# Junction: Load.CIL.JC1
_Load_CIL_JC1 = mdl.create_junction(
    name="JC1",
    parent=_Load_CIL,
    kind="pe",
    position=(8272, 8280)
)

# Junction: Load.CIL.JN
_Load_CIL_JN = mdl.create_junction(
    name="JN",
    parent=_Load_CIL,
    kind="pe",
    position=(8192, 8328)
)

# Junction: Load.CIL.JA0
_Load_CIL_JA0 = mdl.create_junction(
    name="JA0",
    parent=_Load_CIL,
    kind="pe",
    position=(8112, 8072)
)

# Junction: Load.CIL.JA1
_Load_CIL_JA1 = mdl.create_junction(
    name="JA1",
    parent=_Load_CIL,
    kind="pe",
    position=(8112, 8280)
)

# Junction: Load.CIL.JB0
_Load_CIL_JB0 = mdl.create_junction(
    name="JB0",
    parent=_Load_CIL,
    kind="pe",
    position=(8192, 8072)
)

# Junction: Load.CIL.JB1
_Load_CIL_JB1 = mdl.create_junction(
    name="JB1",
    parent=_Load_CIL,
    kind="pe",
    position=(8192, 8280)
)

# Junction: Load.CIL.JC0
_Load_CIL_JC0 = mdl.create_junction(
    name="JC0",
    parent=_Load_CIL,
    kind="pe",
    position=(8272, 8072)
)

# Component: Load.TS_module
_Load_TS_module = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Load,
    name="TS_module",
    rotation="up",
    flip="flip_none",
    position=(7904, 8208),
    hide_name=False,
    size=(112, 72)
)
_Load_TS_module_mask = mdl.create_mask(_Load_TS_module)
_Load_TS_module_mask_P_nom = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="P_nom",
    label="Nominal active power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kW"
)

_Load_TS_module_mask_Q_nom = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="Q_nom",
    label="Nominal reactive power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kVAR"
)

_Load_TS_module_mask_S_vec = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="S_vec",
    label="Load profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="pu"
)

_Load_TS_module_mask_S_vec1 = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="S_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_S_vec2 = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="S_vec2",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_P_vec1 = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="P_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_Plen = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="Plen",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_Q_vec1 = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="Q_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_T_vecP = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="T_vecP",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_T_vecQ = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="T_vecQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_P_mode = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="P_mode",
    label="Power profile mode",
    widget="combo",
    combo_values=['Manual input', 'Loop cycle'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Load_TS_module_mask_P_mode_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT
comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "Loop cycle":
    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    T_def = mdl.get_item("Constant5", parent=comp_handle, item_type=ITEM_COMPONENT)

    if T_ext:
        mdl.delete_item(T_ext)

    conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not conn_T_int:
        mdl.create_connection(mdl.term(T_inp, "in"), mdl.term(T_def, "out"), "connT")

else:
    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_T_int:
        mdl.delete_item(conn_T_int)

    if not T_ext:
        T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                            terminal_position=("left", 1),
                            position=(7237, 8437))

    mdl.create_connection(mdl.term(T_inp, "in"), T_ext, "connT")

"""
mdl.set_handler_code(_Load_TS_module_mask_P_mode, "property_value_changed", _Load_TS_module_mask_P_mode_property_value_changed)


_Load_TS_module_mask_P_mode_property_value_edited = """
if new_value == "Manual input":
    mdl.disable_property(mdl.prop(container_handle, "Tmax"))
    mdl.disable_property(mdl.prop(container_handle, "Tdel"))
    mdl.enable_property(mdl.prop(container_handle, "T_vec"))
else:
    mdl.enable_property(mdl.prop(container_handle, "Tmax"))
    mdl.enable_property(mdl.prop(container_handle, "Tdel"))
    mdl.disable_property(mdl.prop(container_handle, "T_vec"))

"""
mdl.set_handler_code(_Load_TS_module_mask_P_mode, "property_value_edited", _Load_TS_module_mask_P_mode_property_value_edited)

_Load_TS_module_mask_loop_en = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="loop_en",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Load_TS_module_mask_T_vec = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="T_vec",
    label="Time profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="h"
)

_Load_TS_module_mask_Tmax = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="Tmax",
    label="Power profile loop cycle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="",
    unit="s"
)

_Load_TS_module_mask_Tdel = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="Tdel",
    label="Profile start delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="",
    unit="s"
)

_Load_TS_module_mask_Texec = mdl.create_property(
    item_handle=_Load_TS_module_mask,
    name="Texec",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="s"
)


_Load_TS_module_mask_pre_compile = """
# HEADER START
P_nom = mdl.get_property_value(mdl.prop(item_handle, "P_nom"))
Q_nom = mdl.get_property_value(mdl.prop(item_handle, "Q_nom"))
S_vec = mdl.get_property_value(mdl.prop(item_handle, "S_vec"))
S_vec1 = mdl.get_property_value(mdl.prop(item_handle, "S_vec1"))
S_vec2 = mdl.get_property_value(mdl.prop(item_handle, "S_vec2"))
P_vec1 = mdl.get_property_value(mdl.prop(item_handle, "P_vec1"))
Plen = mdl.get_property_value(mdl.prop(item_handle, "Plen"))
Q_vec1 = mdl.get_property_value(mdl.prop(item_handle, "Q_vec1"))
T_vecP = mdl.get_property_value(mdl.prop(item_handle, "T_vecP"))
T_vecQ = mdl.get_property_value(mdl.prop(item_handle, "T_vecQ"))
P_mode = mdl.get_property_value(mdl.prop(item_handle, "P_mode"))
loop_en = mdl.get_property_value(mdl.prop(item_handle, "loop_en"))
T_vec = mdl.get_property_value(mdl.prop(item_handle, "T_vec"))
Tmax = mdl.get_property_value(mdl.prop(item_handle, "Tmax"))
Tdel = mdl.get_property_value(mdl.prop(item_handle, "Tdel"))
Texec = mdl.get_property_value(mdl.prop(item_handle, "Texec"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy as np
import math

if P_mode == "Manual input":
    loop_en = 0
else:
    loop_en = 1


Plen = len(S_vec)
S_vec2 = S_vec

S_vec1 = [0] * Plen

idxS = 0
for S_val in S_vec:
    S_vec1[idxS] = S_vec[idxS]
    idxS += 1


T_vecP = [0] * Plen
T_vecQ = [0] * Plen

P_vec1 = [P_nom*i for i in S_vec2]
Q_vec1 = [Q_nom*i for i in S_vec2]

TstepP = Tmax/(Plen - 1)
TstepQ = Tmax/(Plen - 1)

idxP = 0
for P_val in S_vec1:

    if loop_en == 1:
        T_vecP[idxP] = idxP * TstepP
    else:
        T_vecP[idxP] = T_vec[idxP]
    idxP += 1

idxQ = 0
for Q_val in S_vec1:

    if loop_en == 1:
        T_vecQ[idxQ] = idxQ * TstepQ
    else:
        T_vecQ[idxQ] = T_vec[idxQ]
    idxQ += 1






mdl.set_property_value(mdl.prop(item_handle, "P_vec1"), P_vec1)
mdl.set_property_value(mdl.prop(item_handle, "Q_vec1"), Q_vec1)
mdl.set_property_value(mdl.prop(item_handle, "T_vecP"), T_vecP)
mdl.set_property_value(mdl.prop(item_handle, "T_vecQ"), T_vecQ)
mdl.set_property_value(mdl.prop(item_handle, "Tdel"), Tdel)
mdl.set_property_value(mdl.prop(item_handle, "Tmax"), Tmax)
mdl.set_property_value(mdl.prop(item_handle, "loop_en"), loop_en)
mdl.set_property_value(mdl.prop(item_handle, "P_nom"), P_nom)
mdl.set_property_value(mdl.prop(item_handle, "Q_nom"), Q_nom)
mdl.set_property_value(mdl.prop(item_handle, "Plen"), Plen)

mdl.set_property_value(mdl.prop(item_handle, "S_vec"), S_vec)
mdl.set_property_value(mdl.prop(item_handle, "S_vec1"), S_vec1)
mdl.set_property_value(mdl.prop(item_handle, "S_vec2"), S_vec2)

mdl.set_property_value(mdl.prop(item_handle, "Texec"), Texec)

"""
mdl.set_handler_code(_Load_TS_module_mask, "pre_compile", _Load_TS_module_mask_pre_compile)

_Load_TS_module_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_Load_TS_module_mask, _Load_TS_module_mask_desc)
mdl.set_property_value(mdl.prop(_Load_TS_module_mask, "P_mode"), "Manual input")
mdl.set_property_value(mdl.prop(_Load_TS_module_mask, "T_vec"), "T_Ts_internal")


# Component: Load.TS_module.Signal switch2
_Load_TS_module_Signal_switch2 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_TS_module,
    name="Signal switch2",
    rotation="up",
    flip="flip_none",
    position=(7176, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Signal_switch2, "threshold"), "0.5")


# Component: Load.TS_module.Constant6
_Load_TS_module_Constant6 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_TS_module,
    name="Constant6",
    rotation="up",
    flip="flip_none",
    position=(7112, 8048),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant6, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant6, "value"), "loop_en")


# Component: Load.TS_module.Clock1
_Load_TS_module_Clock1 = mdl.create_component(
    type_name="core/Clock",
    parent=_Load_TS_module,
    name="Clock1",
    rotation="up",
    flip="flip_none",
    position=(6824, 8000),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Clock1, "execution_rate"), "Texec")


# Component: Load.TS_module.d_rel
_Load_TS_module_d_rel = mdl.create_component(
    type_name="core/Probe",
    parent=_Load_TS_module,
    name="d_rel",
    rotation="up",
    flip="flip_none",
    position=(6928, 7936),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_d_rel, "signal_name"), "Delay release")


# Component: Load.TS_module.Signal switch3
_Load_TS_module_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_TS_module,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(7456, 8160),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Signal_switch3, "threshold"), "0.5")


# Component: Load.TS_module.Comparator1
_Load_TS_module_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_TS_module,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(6928, 8000),
    hide_name=False,
    size=(None, None)
)


# Component: Load.TS_module.Constant7
_Load_TS_module_Constant7 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_TS_module,
    name="Constant7",
    rotation="up",
    flip="flip_none",
    position=(7400, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant7, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant7, "value"), "loop_en")


# Component: Load.TS_module.Constant1
_Load_TS_module_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_TS_module,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(6824, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant1, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant1, "value"), "Tdel")


# Component: Load.TS_module.Signal switch1
_Load_TS_module_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_TS_module,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(7008, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Signal_switch1, "threshold"), "0.5")


# Component: Load.TS_module.Gain1
_Load_TS_module_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_Load_TS_module,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(7384, 8352),
    hide_name=False,
    size=(None, None)
)


# Component: Load.TS_module.Constant3
_Load_TS_module_Constant3 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_TS_module,
    name="Constant3",
    rotation="up",
    flip="flip_none",
    position=(6840, 8128),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant3, "execution_rate"), "Texec")


# Component: Load.TS_module.Integrator1
_Load_TS_module_Integrator1 = mdl.create_component(
    type_name="core/Integrator",
    parent=_Load_TS_module,
    name="Integrator1",
    rotation="up",
    flip="flip_none",
    position=(7352, 8152),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Integrator1, "show_reset"), "rising")
mdl.set_property_value(mdl.prop(_Load_TS_module_Integrator1, "show_state"), "True")


# Component: Load.TS_module.Constant4
_Load_TS_module_Constant4 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_TS_module,
    name="Constant4",
    rotation="up",
    flip="flip_none",
    position=(7152, 8304),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant4, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant4, "value"), "Tmax")


# Component: Load.TS_module.Comparator2
_Load_TS_module_Comparator2 = mdl.create_component(
    type_name="core/Comparator",
    parent=_Load_TS_module,
    name="Comparator2",
    rotation="up",
    flip="flip_none",
    position=(7240, 8296),
    hide_name=False,
    size=(None, None)
)


# Component: Load.TS_module.1D look-up table1
_Load_TS_module_1D_look_up_table1 = mdl.create_component(
    type_name="core/1D look-up table",
    parent=_Load_TS_module,
    name="1D look-up table1",
    rotation="up",
    flip="flip_none",
    position=(7608, 8008),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_1D_look_up_table1, "in_vec_x"), "T_vecP")
mdl.set_property_value(mdl.prop(_Load_TS_module_1D_look_up_table1, "out_vec_f_x"), "P_vec1")


# Component: Load.TS_module.1D look-up table2
_Load_TS_module_1D_look_up_table2 = mdl.create_component(
    type_name="core/1D look-up table",
    parent=_Load_TS_module,
    name="1D look-up table2",
    rotation="up",
    flip="flip_none",
    position=(7608, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_1D_look_up_table2, "in_vec_x"), "T_vecQ")
mdl.set_property_value(mdl.prop(_Load_TS_module_1D_look_up_table2, "out_vec_f_x"), "Q_vec1")


# Component: Load.TS_module.Constant5
_Load_TS_module_Constant5 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load_TS_module,
    name="Constant5",
    rotation="up",
    flip="flip_none",
    position=(6840, 8176),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant5, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_Load_TS_module_Constant5, "value"), "0")


# Port: Load.TS_module.P
_Load_TS_module_P = mdl.create_port(
    name="P",
    parent=_Load_TS_module,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7976, 8008)
)

# Port: Load.TS_module.Q
_Load_TS_module_Q = mdl.create_port(
    name="Q",
    parent=_Load_TS_module,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7976, 8192)
)

# Port: Load.TS_module.T
_Load_TS_module_T = mdl.create_port(
    name="T",
    parent=_Load_TS_module,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7240, 8440)
)

# Junction: Load.TS_module.Junction3
_Load_TS_module_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_Load_TS_module,
    kind="sp",
    position=(6952, 8176)
)

# Junction: Load.TS_module.Junction4
_Load_TS_module_Junction4 = mdl.create_junction(
    name="Junction4",
    parent=_Load_TS_module,
    kind="sp",
    position=(7496, 8160)
)

# Component: Load.T_switch
_Load_T_switch = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Load,
    name="T_switch",
    rotation="up",
    flip="flip_none",
    position=(7648, 8416),
    hide_name=False,
    size=(72, 64)
)


# Component: Load.T_switch.Signal switch1
_Load_T_switch_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Load_T_switch,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(7632, 8056),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_T_switch_Signal_switch1, "threshold"), "0.5")


# Component: Load.T_switch.Round1
_Load_T_switch_Round1 = mdl.create_component(
    type_name="core/Round",
    parent=_Load_T_switch,
    name="Round1",
    rotation="up",
    flip="flip_none",
    position=(7392, 8072),
    hide_name=False,
    size=(None, None)
)


# Component: Load.T_switch.Limit1
_Load_T_switch_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_Load_T_switch,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7808, 8056),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_T_switch_Limit1, "lower_limit"), "T_lim_low")
mdl.set_property_value(mdl.prop(_Load_T_switch_Limit1, "upper_limit"), "T_lim_high")


# Port: Load.T_switch.T_out
_Load_T_switch_T_out = mdl.create_port(
    name="T_out",
    parent=_Load_T_switch,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8096, 8056)
)

# Port: Load.T_switch.mode
_Load_T_switch_mode = mdl.create_port(
    name="mode",
    parent=_Load_T_switch,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7472, 7920)
)

# Port: Load.T_switch.T
_Load_T_switch_T = mdl.create_port(
    name="T",
    parent=_Load_T_switch,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7176, 8040)
)

# Junction: Load.T_switch.Junction3
_Load_T_switch_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_Load_T_switch,
    kind="sp",
    position=(7880, 8056)
)

# Junction: Load.T_switch.Junction1
_Load_T_switch_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Load_T_switch,
    kind="sp",
    position=(7280, 8040)
)

# Junction: Load.T_switch.Junction2
_Load_T_switch_Junction2 = mdl.create_junction(
    name="Junction2",
    parent=_Load_T_switch,
    kind="sp",
    position=(7712, 8056)
)

# Component: Load.Constant1
_Load_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Load,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(7408, 8472),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Load_Constant1, "execution_rate"), "Tfast")
mdl.set_property_value(mdl.prop(_Load_Constant1, "value"), "Ts_switch")


# Port: Load.A1
_Load_A1 = mdl.create_port(
    name="A1",
    parent=_Load,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(-30, -32),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(7800, 7864)
)

# Port: Load.B1
_Load_B1 = mdl.create_port(
    name="B1",
    parent=_Load,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(0.0, -32),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(7920, 7864)
)

# Port: Load.C1
_Load_C1 = mdl.create_port(
    name="C1",
    parent=_Load,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(30.0, -32.0),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(8056, 7864)
)

# Port: Load.N1
_Load_N1 = mdl.create_port(
    name="N1",
    parent=_Load,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(0.0, 30.0),
    rotation="left",
    flip="flip_none",
    hide_name=False,
    position=(7920, 8384)
)

# Tag: Load.TagA1
_Load_TagA1 = mdl.create_tag(
    value="A1",
    name="TagA1",
    parent=_Load,
    scope="local",
    kind="pe",
    rotation="left",
    flip="flip_none",
    position=(7800, 7944)
)

# Tag: Load.TagB1
_Load_TagB1 = mdl.create_tag(
    value="B1",
    name="TagB1",
    parent=_Load,
    scope="local",
    kind="pe",
    rotation="left",
    flip="flip_none",
    position=(7920, 7944)
)

# Tag: Load.TagC1
_Load_TagC1 = mdl.create_tag(
    value="C1",
    name="TagC1",
    parent=_Load,
    scope="local",
    kind="pe",
    rotation="left",
    flip="flip_none",
    position=(8056, 7944)
)

# Tag: Load.TagA2
_Load_TagA2 = mdl.create_tag(
    value="A1",
    name="TagA2",
    parent=_Load,
    scope="local",
    kind="pe",
    rotation="right",
    flip="flip_none",
    position=(7696, 8088)
)

# Tag: Load.TagB2
_Load_TagB2 = mdl.create_tag(
    value="B1",
    name="TagB2",
    parent=_Load,
    scope="local",
    kind="pe",
    rotation="right",
    flip="flip_none",
    position=(7760, 8088)
)

# Tag: Load.TagC2
_Load_TagC2 = mdl.create_tag(
    value="C1",
    name="TagC2",
    parent=_Load,
    scope="local",
    kind="pe",
    rotation="right",
    flip="flip_none",
    position=(7824, 8088)
)

# Junction: Load.JN
_Load_JN = mdl.create_junction(
    name="JN",
    parent=_Load,
    kind="pe",
    position=(7920, 8328)
)

# Component: Single-Phase Transformer
_Single_Phase_Transformer = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Single-Phase Transformer",
    rotation="up",
    flip="flip_none",
    position=(4728, 7376),
    hide_name=False,
    size=(64, 64)
)
_Single_Phase_Transformer_mask = mdl.create_mask(_Single_Phase_Transformer)
_Single_Phase_Transformer_mask_num_windings = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="num_windings",
    label="Number of windings",
    widget="combo",
    combo_values=['2', '3', '4', '5', '6', '7', '8', '9', '10'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Single_Phase_Transformer_mask_num_windings_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_subsystem_components(mdl, container_handle, created_ports)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_num_windings, "property_value_changed", _Single_Phase_Transformer_mask_num_windings_property_value_changed)


_Single_Phase_Transformer_mask_num_windings_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.show_hide_couplings(mdl, container_handle)
comp_script.update_regctrl_combo(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_num_windings, "property_value_edited", _Single_Phase_Transformer_mask_num_windings_property_value_edited)

_Single_Phase_Transformer_mask_embedded_cpl_12 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_12",
    label="Embedded coupling 1-2",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_12_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_12, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_12_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_13 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_13",
    label="Embedded coupling 1-3",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_13_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_13, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_13_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_14 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_14",
    label="Embedded coupling 1-4",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_14_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_14, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_14_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_15 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_15",
    label="Embedded coupling 1-5",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_15_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_15, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_15_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_16 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_16",
    label="Embedded coupling 1-6",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_16_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_16, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_16_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_17 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_17",
    label="Embedded coupling 1-7",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_17_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_17, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_17_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_18 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_18",
    label="Embedded coupling 1-8",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_18_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_18, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_18_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_19 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_19",
    label="Embedded coupling 1-9",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_19_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_19, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_19_property_value_changed)

_Single_Phase_Transformer_mask_embedded_cpl_110 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="embedded_cpl_110",
    label="Embedded coupling 1-10",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Single_Phase_Transformer_mask_embedded_cpl_110_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
prop_name = mdl.get_name(prop_handle)
inner_prop_handle = mdl.prop(T_handle, prop_name)
mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_embedded_cpl_110, "property_value_changed", _Single_Phase_Transformer_mask_embedded_cpl_110_property_value_changed)

_Single_Phase_Transformer_mask_KVs = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="KVs",
    label="Array of rated winding phase voltages",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kV"
)

_Single_Phase_Transformer_mask_KVAs = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="KVAs",
    label="Array of winding kVA ratings",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kVA"
)

_Single_Phase_Transformer_mask_percentRs = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="percentRs",
    label="Array of winding percent resistances",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Single_Phase_Transformer_mask_XArray = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="XArray",
    label="Winding reactances",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)


_Single_Phase_Transformer_mask_XArray_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.convert_all_properties(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_XArray, "property_value_changed", _Single_Phase_Transformer_mask_XArray_property_value_changed)

_Single_Phase_Transformer_mask_XscArray = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="XscArray",
    label="Array of short-circuit reactances",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit="%"
)

_Single_Phase_Transformer_mask_global_basefreq = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Single_Phase_Transformer_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_global_basefreq, "property_value_changed", _Single_Phase_Transformer_mask_global_basefreq_property_value_changed)


_Single_Phase_Transformer_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_frequency_prop(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_global_basefreq, "property_value_edited", _Single_Phase_Transformer_mask_global_basefreq_property_value_edited)

_Single_Phase_Transformer_mask_Basefreq = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="Basefreq",
    label="Base frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit="Hz"
)

_Single_Phase_Transformer_mask_percentNoloadloss = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="percentNoloadloss",
    label="No-load losses",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Single_Phase_Transformer_mask_percentimag = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="percentimag",
    label="Magnetizing current",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Single_Phase_Transformer_mask_regcontrol_on = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="regcontrol_on",
    label="Activate RegControl",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="RegControl:4",
    unit=""
)


_Single_Phase_Transformer_mask_regcontrol_on_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_regcontrol_props(mdl, container_handle)
comp_script.vreg_connection(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_regcontrol_on, "property_value_changed", _Single_Phase_Transformer_mask_regcontrol_on_property_value_changed)


_Single_Phase_Transformer_mask_regcontrol_on_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_regcontrol_props(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_regcontrol_on, "property_value_edited", _Single_Phase_Transformer_mask_regcontrol_on_property_value_edited)

_Single_Phase_Transformer_mask_maxtap = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="maxtap",
    label="Maximum tap voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="pu"
)

_Single_Phase_Transformer_mask_mintap = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="mintap",
    label="Minimum tap voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="pu"
)

_Single_Phase_Transformer_mask_numtaps = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="numtaps",
    label="Number of taps",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit=""
)

_Single_Phase_Transformer_mask_ctrl_winding = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="ctrl_winding",
    label="Monitored winding",
    widget="combo",
    combo_values=['Winding 1', 'Winding 2'],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit=""
)


_Single_Phase_Transformer_mask_ctrl_winding_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.vreg_connection(mdl, container_handle)
comp_script.update_regctrl_combo(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_ctrl_winding, "property_value_changed", _Single_Phase_Transformer_mask_ctrl_winding_property_value_changed)

_Single_Phase_Transformer_mask_vreg = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="vreg",
    label="Vreg",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)


_Single_Phase_Transformer_mask_vreg_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.calculate_winding_voltage(mdl, container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_vreg, "property_value_edited", _Single_Phase_Transformer_mask_vreg_property_value_edited)

_Single_Phase_Transformer_mask_ptratio = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="ptratio",
    label="PT ratio",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)


_Single_Phase_Transformer_mask_ptratio_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_ptratio, "property_value_edited", _Single_Phase_Transformer_mask_ptratio_property_value_edited)

_Single_Phase_Transformer_mask_winding_voltage = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="winding_voltage",
    label="Voltage result",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)


_Single_Phase_Transformer_mask_winding_voltage_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask_winding_voltage, "property_value_edited", _Single_Phase_Transformer_mask_winding_voltage_property_value_edited)

_Single_Phase_Transformer_mask_band = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="band",
    label="Bandwidth",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)

_Single_Phase_Transformer_mask_delay = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="delay",
    label="Delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="s"
)

_Single_Phase_Transformer_mask_execution_rate = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="execution_rate",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="s"
)

_Single_Phase_Transformer_mask_enable_monitoring = mdl.create_property(
    item_handle=_Single_Phase_Transformer_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring:5",
    unit=""
)


_Single_Phase_Transformer_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_mask, "define_icon", _Single_Phase_Transformer_mask_define_icon)

_Single_Phase_Transformer_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_sptransf as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)


"""
mdl.set_handler_code(_Single_Phase_Transformer_mask, "init", _Single_Phase_Transformer_mask_init)

_Single_Phase_Transformer_mask_pre_compile = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.update_frequency_property(mdl, item_handle)
# HEADER START
num_windings = mdl.get_property_value(mdl.prop(item_handle, "num_windings"))
KVs = mdl.get_property_value(mdl.prop(item_handle, "KVs"))
KVAs = mdl.get_property_value(mdl.prop(item_handle, "KVAs"))
percentRs = mdl.get_property_value(mdl.prop(item_handle, "percentRs"))
XscArray = mdl.get_property_value(mdl.prop(item_handle, "XscArray"))
Basefreq = mdl.get_property_value(mdl.prop(item_handle, "Basefreq"))
percentNoloadloss = mdl.get_property_value(mdl.prop(item_handle, "percentNoloadloss"))
percentimag = mdl.get_property_value(mdl.prop(item_handle, "percentimag"))
# HEADER STOP
comp_script.validate_properties(mdl, item_handle)
comp_script.convert_all_properties(mdl, item_handle)


"""
mdl.set_handler_code(_Single_Phase_Transformer_mask, "pre_compile", _Single_Phase_Transformer_mask_pre_compile)

_Single_Phase_Transformer_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The Single-Phase Transfomer is implemented as a multi-terminal power delivery element and consists of two or more windings.<br></br><br></br>Note that contrary to OpenDSS, individual reactances are defined in the mask. Reactances between windings will be calculated.</p></body></html>
'''
mdl.set_description(_Single_Phase_Transformer_mask, _Single_Phase_Transformer_mask_desc)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_mask, "KVAs"), "[1000, 1000]")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_mask, "KVs"), "[12.47, 12.47]")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_mask, "XscArray"), "[2]")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_mask, "percentNoloadloss"), "2")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_mask, "percentRs"), "[1, 1]")


# Component: Single-Phase Transformer.T1
_Single_Phase_Transformer_T1 = mdl.create_component(
    type_name="core/Single Phase Multi-Winding Transformer",
    parent=_Single_Phase_Transformer,
    name="T1",
    rotation="up",
    flip="flip_none",
    position=(8400, 8200),
    hide_name=False,
    size=(124, 256)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "I_prim"), "0")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "I_sec"), "[0]")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "L_prim"), "0.004124789481706419")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "L_sec"), "[0.004124789481706419]")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "Lm"), "inf")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "R_prim"), "1.5550090000000003")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "R_sec"), "[1.5550090000000003]")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "Rm"), "7775.045")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "Sn"), "1000000")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "f"), "60")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "n_prim"), "12470.0")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_T1, "n_sec"), "[12470.0]")


# Component: Single-Phase Transformer.Vreg
_Single_Phase_Transformer_Vreg = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Single_Phase_Transformer,
    name="Vreg",
    rotation="up",
    flip="flip_none",
    position=(8880, 8200),
    hide_name=False,
    size=(168, 232)
)


# Component: Single-Phase Transformer.Vreg.Auto1
_Single_Phase_Transformer_Vreg_Auto1 = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Single_Phase_Transformer_Vreg,
    name="Auto1",
    rotation="up",
    flip="flip_none",
    position=(8152, 8056),
    hide_name=False,
    size=(256, 256)
)
_Single_Phase_Transformer_Vreg_Auto1_mask = mdl.create_mask(_Single_Phase_Transformer_Vreg_Auto1)
_Single_Phase_Transformer_Vreg_Auto1_mask_R1 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="R1",
    label="R1",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General:1",
    unit="Ω"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_L1 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="L1",
    label="L1",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="H"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_R2 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="R2",
    label="R2",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="Ω"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_L2 = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="L2",
    label="L2",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="H"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_Rm = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="Rm",
    label="Rm",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="Ω"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_Lm = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="Lm",
    label="Lm",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="H"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_n_taps = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="n_taps",
    label="Number of taps ±",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)

_Single_Phase_Transformer_Vreg_Auto1_mask_reg_range = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="reg_range",
    label="Regualtor range ±",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="General",
    unit="%"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_atype = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="atype",
    label="Type",
    widget="combo",
    combo_values=['Type A', 'Type B'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation:2",
    unit=""
)


_Single_Phase_Transformer_Vreg_Auto1_mask_atype_property_value_changed = """
comp_handle = mdl.get_sub_level_handle(container_handle)

for phase in ['a']:
    ET11 = mdl.get_item(f'ET11{phase}', parent=comp_handle, item_type='tag')
    ET12 = mdl.get_item(f'ET12{phase}', parent=comp_handle, item_type='tag')
    ET21 = mdl.get_item(f'ET21{phase}', parent=comp_handle, item_type='tag')
    ET22 = mdl.get_item(f'ET22{phase}', parent=comp_handle, item_type='tag')

    if new_value == 'Type A':
        mdl.set_tag_properties(ET11, value=f'S1{phase}')
        mdl.set_tag_properties(ET12, value=f'S2{phase}')
        mdl.set_tag_properties(ET21, value=f'L1{phase}')
        mdl.set_tag_properties(ET22, value=f'L2{phase}')
    else:
        mdl.set_tag_properties(ET11, value=f'L1{phase}')
        mdl.set_tag_properties(ET12, value=f'L2{phase}')
        mdl.set_tag_properties(ET21, value=f'S1{phase}')
        mdl.set_tag_properties(ET22, value=f'S2{phase}')

    mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Single_Phase_Transformer_Vreg_Auto1_mask_atype, "property_value_changed", _Single_Phase_Transformer_Vreg_Auto1_mask_atype_property_value_changed)

_Single_Phase_Transformer_Vreg_Auto1_mask_reg_method = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="reg_method",
    label="Regulation method",
    widget="combo",
    combo_values=['Line voltage regulator', 'Bus voltage regulator', 'Line drop compensator'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit=""
)


_Single_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_changed = """
if new_value == 'Line drop compensator':
    mdl.show_property(mdl.prop(container_handle, 'Rp'))
    mdl.show_property(mdl.prop(container_handle, 'Xp'))
    mdl.show_property(mdl.prop(container_handle, 'ptratio'))
    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
else:
    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == 'Bus voltage regulator':
    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
    if FromVLDC:
        mdl.delete_item(FromVLDC)

    Vin = mdl.create_port(
                            name='vref',
                            parent=comp_handle,
                            kind='sp',
                            direction='in',
                            terminal_position=(-32,-128),
                            hide_name=False,
                            position=(8672, 8856)
                         )
    VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
    mdl.create_connection(Vin, mdl.term(VSum,'in'))
else:
    Vin = mdl.get_item('vref', parent=comp_handle, item_type='port')
    if Vin:
        mdl.delete_item(Vin)
    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
    if not FromVLDC:
        FromVLDC = mdl.create_tag(
                                    value='VLDC',
                                    name='FromVLDC',
                                    parent=comp_handle,
                                    kind='sp',
                                    position=(8656, 8880),
                                    direction='out',
                                    scope='local'
                                 )
        mdl.hide_name(FromVLDC)

        VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
        mdl.create_connection(FromVLDC, mdl.term(VSum,'in'))
    if new_value == 'Line drop compensator':
        ctrl_src = 'VLDC'
    else:
        ctrl_src = 'VLoad'
    #mdl.set_tag_properties(FromVLDC, value=ctrl_src)

"""
mdl.set_handler_code(_Single_Phase_Transformer_Vreg_Auto1_mask_reg_method, "property_value_changed", _Single_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_changed)


_Single_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_edited = """
if new_value == 'Line drop compensator':
    mdl.show_property(mdl.prop(container_handle, 'Rp'))
    mdl.show_property(mdl.prop(container_handle, 'Xp'))
    mdl.show_property(mdl.prop(container_handle, 'ptratio_auto'))
    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
else:
    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

"""
mdl.set_handler_code(_Single_Phase_Transformer_Vreg_Auto1_mask_reg_method, "property_value_edited", _Single_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_edited)

_Single_Phase_Transformer_Vreg_Auto1_mask_Vreg = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="Vreg",
    label="Voltage level",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit="V"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_band = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="band",
    label="Bandwidth",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit="V"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_Td = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="Td",
    label="Time delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit="s"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_ptratio_auto = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="ptratio_auto",
    label="PT ratio",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="V/V"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_CTprim = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="CTprim",
    label="CT primary rating",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="A"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_Rp = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="Rp",
    label="R",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="V"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_Xp = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="Xp",
    label="X",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="V"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_execution_rate = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="execution_rate",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Signal Processing:3",
    unit="s"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_fc = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="fc",
    label="LPF cutoff frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Stability:4",
    unit="Hz"
)

_Single_Phase_Transformer_Vreg_Auto1_mask_maxtap = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="maxtap",
    label="maxtap",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Single_Phase_Transformer_Vreg_Auto1_mask_mintap = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="mintap",
    label="mintap",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Single_Phase_Transformer_Vreg_Auto1_mask_YorD = mdl.create_property(
    item_handle=_Single_Phase_Transformer_Vreg_Auto1_mask,
    name="YorD",
    label="YorD",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)


_Single_Phase_Transformer_Vreg_Auto1_mask_init = """
def updateMask(mdl):
    bw_limit = mdl.get_property_disp_value(mdl.prop(item_handle, "bw_limit"))
    frequency = mdl.prop(item_handle, "frequency")
    if bw_limit == 'True':
        mdl.enable_property(frequency)
    else:
        mdl.disable_property(frequency)
    return

"""
mdl.set_handler_code(_Single_Phase_Transformer_Vreg_Auto1_mask, "init", _Single_Phase_Transformer_Vreg_Auto1_mask_init)

_Single_Phase_Transformer_Vreg_Auto1_mask_pre_compile = """
# HEADER START
R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
L1 = mdl.get_property_value(mdl.prop(item_handle, "L1"))
R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
L2 = mdl.get_property_value(mdl.prop(item_handle, "L2"))
Rm = mdl.get_property_value(mdl.prop(item_handle, "Rm"))
Lm = mdl.get_property_value(mdl.prop(item_handle, "Lm"))
n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))
atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))
reg_method = mdl.get_property_value(mdl.prop(item_handle, "reg_method"))
Vreg = mdl.get_property_value(mdl.prop(item_handle, "Vreg"))
band = mdl.get_property_value(mdl.prop(item_handle, "band"))
Td = mdl.get_property_value(mdl.prop(item_handle, "Td"))
ptratio_auto = mdl.get_property_value(mdl.prop(item_handle, "ptratio_auto"))
CTprim = mdl.get_property_value(mdl.prop(item_handle, "CTprim"))
Rp = mdl.get_property_value(mdl.prop(item_handle, "Rp"))
Xp = mdl.get_property_value(mdl.prop(item_handle, "Xp"))
execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
fc = mdl.get_property_value(mdl.prop(item_handle, "fc"))
maxtap = mdl.get_property_value(mdl.prop(item_handle, "maxtap"))
mintap = mdl.get_property_value(mdl.prop(item_handle, "mintap"))
YorD = mdl.get_property_value(mdl.prop(item_handle, "YorD"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT

comp_handle = mdl.get_parent(item_handle)

Rmid = "1e7"

n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))

maxtap = float(maxtap)
mintap = float(mintap)

var_per_tap = (maxtap-mintap)/n_taps

max_n_tap = int(round(((maxtap - 1) / (maxtap - mintap) * n_taps)))
min_n_tap = n_taps - max_n_tap

tap_difference = max_n_tap - (n_taps // 2 + n_taps % 2)

ptratio_auto = float(ptratio_auto)
mdl.set_property_value(mdl.prop(item_handle, "ptratio_auto"), ptratio_auto)
mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)

atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))

if atype == 'Type A':
    ABcomp = 1
    Rleft = R1
    Lleft = L1
    Rright = R2
    Lright = L2
else:
    ABcomp = -1
    Rleft = R2
    Lleft = L2
    Rright = R1
    Lright = L1


"""
mdl.set_handler_code(_Single_Phase_Transformer_Vreg_Auto1_mask, "pre_compile", _Single_Phase_Transformer_Vreg_Auto1_mask_pre_compile)

_Single_Phase_Transformer_Vreg_Auto1_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Autotransformer with load tap changer (LTC) and optional line drop compensator (LDC).</p></body></html>
'''
mdl.set_description(_Single_Phase_Transformer_Vreg_Auto1_mask, _Single_Phase_Transformer_Vreg_Auto1_mask_desc)


# Component: Single-Phase Transformer.Vreg.Auto1.Product1
_Single_Phase_Transformer_Vreg_Auto1_Product1 = mdl.create_component(
    type_name="core/Product",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Product1",
    rotation="up",
    flip="flip_none",
    position=(9040, 8264),
    hide_name=True,
    size=(0, 0)
)


# Component: Single-Phase Transformer.Vreg.Auto1.tap
_Single_Phase_Transformer_Vreg_Auto1_tap = mdl.create_component(
    type_name="core/Probe",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="tap",
    rotation="down",
    flip="flip_both",
    position=(9112, 8184),
    hide_name=False,
    size=(None, None)
)


# Component: Single-Phase Transformer.Vreg.Auto1.regulator_voltage
_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage = mdl.create_component(
    type_name="core/Constant",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage",
    rotation="up",
    flip="flip_none",
    position=(7848, 8264),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage, "value"), "Vreg")


# Component: Single-Phase Transformer.Vreg.Auto1.regulator_voltage1
_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage1",
    rotation="up",
    flip="flip_none",
    position=(8152, 8304),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage1, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage1, "value"), "band")


# Component: Single-Phase Transformer.Vreg.Auto1.Gain1
_Single_Phase_Transformer_Vreg_Auto1_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(8216, 8304),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Gain1, "gain"), "0.5")


# Component: Single-Phase Transformer.Vreg.Auto1.VSum
_Single_Phase_Transformer_Vreg_Auto1_VSum = mdl.create_component(
    type_name="core/Sum",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="VSum",
    rotation="up",
    flip="flip_none",
    position=(7960, 8248),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_VSum, "signs"), "-+")


# Component: Single-Phase Transformer.Vreg.Auto1.Abs1
_Single_Phase_Transformer_Vreg_Auto1_Abs1 = mdl.create_component(
    type_name="core/Abs",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Abs1",
    rotation="up",
    flip="flip_none",
    position=(8032, 8248),
    hide_name=True,
    size=(None, None)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Sign1
_Single_Phase_Transformer_Vreg_Auto1_Sign1 = mdl.create_component(
    type_name="core/Sign",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Sign1",
    rotation="up",
    flip="flip_none",
    position=(8032, 8208),
    hide_name=True,
    size=(None, None)
)


# Component: Single-Phase Transformer.Vreg.Auto1.regulator_voltage2
_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage2 = mdl.create_component(
    type_name="core/Constant",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage2",
    rotation="up",
    flip="flip_none",
    position=(8480, 8376),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage2, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage2, "value"), "Td")


# Component: Single-Phase Transformer.Vreg.Auto1.Relational operator2
_Single_Phase_Transformer_Vreg_Auto1_Relational_operator2 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Relational operator2",
    rotation="up",
    flip="flip_none",
    position=(8560, 8368),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator2, "relational_op"), ">")


# Component: Single-Phase Transformer.Vreg.Auto1.Logical operator1
_Single_Phase_Transformer_Vreg_Auto1_Logical_operator1 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Logical operator1",
    rotation="up",
    flip="flip_none",
    position=(8672, 8288),
    hide_name=True,
    size=(0, 0)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Edge Detection3
_Single_Phase_Transformer_Vreg_Auto1_Edge_Detection3 = mdl.create_component(
    type_name="core/Edge Detection",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Edge Detection3",
    rotation="up",
    flip="flip_horizontal",
    position=(8816, 8408),
    hide_name=True,
    size=(32, 32)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Logical operator2
_Single_Phase_Transformer_Vreg_Auto1_Logical_operator2 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Logical operator2",
    rotation="up",
    flip="flip_none",
    position=(8448, 8280),
    hide_name=True,
    size=(0, 0)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Logical operator3
_Single_Phase_Transformer_Vreg_Auto1_Logical_operator3 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Logical operator3",
    rotation="up",
    flip="flip_horizontal",
    position=(8728, 8408),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator3, "operator"), "NOT")


# Component: Single-Phase Transformer.Vreg.Auto1.Product2
_Single_Phase_Transformer_Vreg_Auto1_Product2 = mdl.create_component(
    type_name="core/Product",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Product2",
    rotation="up",
    flip="flip_none",
    position=(8752, 8256),
    hide_name=True,
    size=(0, 0)
)


# Component: Single-Phase Transformer.Vreg.Auto1.VLoad_A
_Single_Phase_Transformer_Vreg_Auto1_VLoad_A = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="VLoad_A",
    rotation="right",
    flip="flip_none",
    position=(9456, 8696),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_VLoad_A, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_VLoad_A, "sig_output"), "True")


# Component: Single-Phase Transformer.Vreg.Auto1.ILrms_A
_Single_Phase_Transformer_Vreg_Auto1_ILrms_A = mdl.create_component(
    type_name="core/Current RMS",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="ILrms_A",
    rotation="up",
    flip="flip_none",
    position=(9160, 8656),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_ILrms_A, "execution_rate"), "execution_rate")


# Component: Single-Phase Transformer.Vreg.Auto1.ABcomp
_Single_Phase_Transformer_Vreg_Auto1_ABcomp = mdl.create_component(
    type_name="core/Gain",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="ABcomp",
    rotation="down",
    flip="flip_horizontal",
    position=(8448, 8216),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_ABcomp, "gain"), "ABcomp")


# Component: Single-Phase Transformer.Vreg.Auto1.Tap Position
_Single_Phase_Transformer_Vreg_Auto1_Tap_Position = mdl.create_component(
    type_name="core/Accumulator",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Tap Position",
    rotation="up",
    flip="flip_none",
    position=(8832, 8256),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Tap_Position, "limit_lower"), "-min_n_tap")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Tap_Position, "limit_output"), "True")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Tap_Position, "limit_upper"), "max_n_tap")


# Component: Single-Phase Transformer.Vreg.Auto1.Vprim_A
_Single_Phase_Transformer_Vreg_Auto1_Vprim_A = mdl.create_component(
    type_name="core/el_voltage_msr",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Vprim_A",
    rotation="right",
    flip="flip_none",
    position=(8368, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Vprim_A, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Vprim_A, "sig_output"), "True")


# Component: Single-Phase Transformer.Vreg.Auto1.Gain4
_Single_Phase_Transformer_Vreg_Auto1_Gain4 = mdl.create_component(
    type_name="core/Gain",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Gain4",
    rotation="up",
    flip="flip_none",
    position=(7880, 8232),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Gain4, "gain"), "1/ptratio_auto")


# Component: Single-Phase Transformer.Vreg.Auto1.Vsec_ins_A
_Single_Phase_Transformer_Vreg_Auto1_Vsec_ins_A = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Vsec_ins_A",
    rotation="up",
    flip="flip_horizontal",
    position=(8704, 8656),
    hide_name=False,
    size=(64, 32)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Isp_A
_Single_Phase_Transformer_Vreg_Auto1_Isp_A = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Isp_A",
    rotation="left",
    flip="flip_none",
    position=(8632, 8720),
    hide_name=False,
    size=(64, 32)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Product11
_Single_Phase_Transformer_Vreg_Auto1_Product11 = mdl.create_component(
    type_name="core/Product",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Product11",
    rotation="up",
    flip="flip_none",
    position=(8312, 8872),
    hide_name=False,
    size=(0, 0)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Product10
_Single_Phase_Transformer_Vreg_Auto1_Product10 = mdl.create_component(
    type_name="core/Product",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Product10",
    rotation="up",
    flip="flip_none",
    position=(8312, 8968),
    hide_name=False,
    size=(0, 0)
)


# Component: Single-Phase Transformer.Vreg.Auto1.per_tap
_Single_Phase_Transformer_Vreg_Auto1_per_tap = mdl.create_component(
    type_name="core/Probe",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="per_tap",
    rotation="down",
    flip="flip_both",
    position=(9040, 8328),
    hide_name=False,
    size=(None, None)
)


# Component: Single-Phase Transformer.Vreg.Auto1.pu_applied
_Single_Phase_Transformer_Vreg_Auto1_pu_applied = mdl.create_component(
    type_name="core/Probe",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="pu_applied",
    rotation="down",
    flip="flip_both",
    position=(9344, 8192),
    hide_name=False,
    size=(None, None)
)


# Component: Single-Phase Transformer.Vreg.Auto1.VSum1
_Single_Phase_Transformer_Vreg_Auto1_VSum1 = mdl.create_component(
    type_name="core/Sum",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="VSum1",
    rotation="up",
    flip="flip_none",
    position=(9256, 8192),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_VSum1, "signs"), "++")


# Component: Single-Phase Transformer.Vreg.Auto1.regulator_voltage3
_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage3 = mdl.create_component(
    type_name="core/Constant",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage3",
    rotation="up",
    flip="flip_none",
    position=(9168, 8184),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage3, "execution_rate"), "execution_rate")


# Component: Single-Phase Transformer.Vreg.Auto1.VSum2
_Single_Phase_Transformer_Vreg_Auto1_VSum2 = mdl.create_component(
    type_name="core/Sum",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="VSum2",
    rotation="up",
    flip="flip_none",
    position=(9040, 8184),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_VSum2, "signs"), "-+")


# Component: Single-Phase Transformer.Vreg.Auto1.Lr_A
_Single_Phase_Transformer_Vreg_Auto1_Lr_A = mdl.create_component(
    type_name="core/Inductor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Lr_A",
    rotation="up",
    flip="flip_none",
    position=(8896, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Lr_A, "inductance"), "Lright")


# Component: Single-Phase Transformer.Vreg.Auto1.regulator_voltage4
_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage4 = mdl.create_component(
    type_name="core/Constant",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage4",
    rotation="up",
    flip="flip_none",
    position=(8936, 8176),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage4, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage4, "value"), "tap_difference")


# Component: Single-Phase Transformer.Vreg.Auto1.Relational operator1
_Single_Phase_Transformer_Vreg_Auto1_Relational_operator1 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Relational operator1",
    rotation="up",
    flip="flip_none",
    position=(8280, 8256),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator1, "relational_op"), ">")


# Component: Single-Phase Transformer.Vreg.Auto1.diff
_Single_Phase_Transformer_Vreg_Auto1_diff = mdl.create_component(
    type_name="core/Probe",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="diff",
    rotation="down",
    flip="flip_both",
    position=(8208, 8168),
    hide_name=False,
    size=(None, None)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Rina
_Single_Phase_Transformer_Vreg_Auto1_Rina = mdl.create_component(
    type_name="core/Resistor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Rina",
    rotation="right",
    flip="flip_none",
    position=(8016, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Rina, "resistance"), "1e10")


# Component: Single-Phase Transformer.Vreg.Auto1.Rmida
_Single_Phase_Transformer_Vreg_Auto1_Rmida = mdl.create_component(
    type_name="core/Resistor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Rmida",
    rotation="right",
    flip="flip_none",
    position=(8512, 8720),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Rmida, "resistance"), "Rmid")


# Component: Single-Phase Transformer.Vreg.Auto1.Isec_A
_Single_Phase_Transformer_Vreg_Auto1_Isec_A = mdl.create_component(
    type_name="core/el_current_msr",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Isec_A",
    rotation="up",
    flip="flip_none",
    position=(9256, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Isec_A, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Isec_A, "sig_output"), "True")


# Component: Single-Phase Transformer.Vreg.Auto1.Rr_A
_Single_Phase_Transformer_Vreg_Auto1_Rr_A = mdl.create_component(
    type_name="core/Resistor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Rr_A",
    rotation="up",
    flip="flip_none",
    position=(8800, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Rr_A, "resistance"), "Rright")


# Component: Single-Phase Transformer.Vreg.Auto1.Lm_A
_Single_Phase_Transformer_Vreg_Auto1_Lm_A = mdl.create_component(
    type_name="core/Inductor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Lm_A",
    rotation="right",
    flip="flip_none",
    position=(8288, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Lm_A, "inductance"), "Lm")


# Component: Single-Phase Transformer.Vreg.Auto1.Rm_A
_Single_Phase_Transformer_Vreg_Auto1_Rm_A = mdl.create_component(
    type_name="core/Resistor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Rm_A",
    rotation="right",
    flip="flip_none",
    position=(8224, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Rm_A, "resistance"), "Rm")


# Component: Single-Phase Transformer.Vreg.Auto1.Ll_A
_Single_Phase_Transformer_Vreg_Auto1_Ll_A = mdl.create_component(
    type_name="core/Inductor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Ll_A",
    rotation="up",
    flip="flip_none",
    position=(8160, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Ll_A, "inductance"), "Lleft")


# Component: Single-Phase Transformer.Vreg.Auto1.Rl_A
_Single_Phase_Transformer_Vreg_Auto1_Rl_A = mdl.create_component(
    type_name="core/Resistor",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Rl_A",
    rotation="up",
    flip="flip_none",
    position=(8064, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Rl_A, "resistance"), "Rleft")


# Component: Single-Phase Transformer.Vreg.Auto1.Elapsed Time
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="Elapsed Time",
    rotation="left",
    flip="flip_both",
    position=(8512, 8320),
    hide_name=False,
    size=(48, 48)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.Unit Delay1
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Unit_Delay1 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Unit Delay1",
    rotation="up",
    flip="flip_horizontal",
    position=(8200, 8240),
    hide_name=True,
    size=(None, None)
)


# Component: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.Edge Detection1
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1 = mdl.create_component(
    type_name="core/Edge Detection",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Edge Detection1",
    rotation="right",
    flip="flip_none",
    position=(8200, 8120),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1, "edge"), "rising")


# Component: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.Sum2
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2 = mdl.create_component(
    type_name="core/Sum",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Sum2",
    rotation="up",
    flip="flip_none",
    position=(8272, 8264),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "signs"), "-+")


# Component: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.Clock1
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Clock1 = mdl.create_component(
    type_name="core/Clock",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Clock1",
    rotation="up",
    flip="flip_none",
    position=(8112, 8168),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Clock1, "execution_rate"), "execution_rate")


# Component: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.Signal switch1
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(8200, 8184),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "threshold"), "0.5")


# Port: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.In1
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_In1 = mdl.create_port(
    name="In1",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(8112, 8080)
)

# Port: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.Out2
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Out2 = mdl.create_port(
    name="Out2",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(8344, 8264)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.Junction30
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30 = mdl.create_junction(
    name="Junction30",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    kind="sp",
    position=(8232, 8240)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Elapsed Time.JL2
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2 = mdl.create_junction(
    name="JL2",
    parent=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    kind="sp",
    position=(8152, 8168)
)

# Component: Single-Phase Transformer.Vreg.Auto1.var_per_tap
_Single_Phase_Transformer_Vreg_Auto1_var_per_tap = mdl.create_component(
    type_name="core/Constant",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    name="var_per_tap",
    rotation="up",
    flip="flip_none",
    position=(8936, 8328),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_var_per_tap, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Single_Phase_Transformer_Vreg_Auto1_var_per_tap, "value"), "var_per_tap")


# Port: Single-Phase Transformer.Vreg.Auto1.P1
_Single_Phase_Transformer_Vreg_Auto1_P1 = mdl.create_port(
    name="P1",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 'top'),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(7776, 8656)
)

# Port: Single-Phase Transformer.Vreg.Auto1.P2
_Single_Phase_Transformer_Vreg_Auto1_P2 = mdl.create_port(
    name="P2",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 'bottom'),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(7776, 8784)
)

# Port: Single-Phase Transformer.Vreg.Auto1.S1
_Single_Phase_Transformer_Vreg_Auto1_S1 = mdl.create_port(
    name="S1",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 'top'),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9616, 8656)
)

# Port: Single-Phase Transformer.Vreg.Auto1.S2
_Single_Phase_Transformer_Vreg_Auto1_S2 = mdl.create_port(
    name="S2",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 'bottom'),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9616, 8784)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.From12
_Single_Phase_Transformer_Vreg_Auto1_From12 = mdl.create_tag(
    value="Vprim_A",
    name="From12",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 8880)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.From13
_Single_Phase_Transformer_Vreg_Auto1_From13 = mdl.create_tag(
    value="Iprim_A",
    name="From13",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8568, 8720)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Goto12
_Single_Phase_Transformer_Vreg_Auto1_Goto12 = mdl.create_tag(
    value="Vsec_A",
    name="Goto12",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 8872)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Goto13
_Single_Phase_Transformer_Vreg_Auto1_Goto13 = mdl.create_tag(
    value="Iprim_A",
    name="Goto13",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 8968)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.From14
_Single_Phase_Transformer_Vreg_Auto1_From14 = mdl.create_tag(
    value="Vsec_A",
    name="From14",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8640, 8600)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Goto2
_Single_Phase_Transformer_Vreg_Auto1_Goto2 = mdl.create_tag(
    value="ratio",
    name="Goto2",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9272, 8264)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Goto3
_Single_Phase_Transformer_Vreg_Auto1_Goto3 = mdl.create_tag(
    value="VLoad_a",
    name="Goto3",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="right",
    flip="flip_none",
    position=(9488, 8744)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Goto6
_Single_Phase_Transformer_Vreg_Auto1_Goto6 = mdl.create_tag(
    value="Iinst_A",
    name="Goto6",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9304, 8624)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Electric Tag1
_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag1 = mdl.create_tag(
    value="S1a",
    name="Electric Tag1",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7896, 8656)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Electric Tag2
_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag2 = mdl.create_tag(
    value="S2a",
    name="Electric Tag2",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7896, 8784)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.ET11a
_Single_Phase_Transformer_Vreg_Auto1_ET11a = mdl.create_tag(
    value="S1a",
    name="ET11a",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7968, 8656)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.ET12a
_Single_Phase_Transformer_Vreg_Auto1_ET12a = mdl.create_tag(
    value="S2a",
    name="ET12a",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7968, 8784)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.ET21a
_Single_Phase_Transformer_Vreg_Auto1_ET21a = mdl.create_tag(
    value="L1a",
    name="ET21a",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8992, 8656)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.ET22a
_Single_Phase_Transformer_Vreg_Auto1_ET22a = mdl.create_tag(
    value="L2a",
    name="ET22a",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8992, 8784)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Electric Tag7
_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag7 = mdl.create_tag(
    value="L1a",
    name="Electric Tag7",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9064, 8656)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Electric Tag8
_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag8 = mdl.create_tag(
    value="L2a",
    name="Electric Tag8",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9064, 8784)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.FromVLDC
_Single_Phase_Transformer_Vreg_Auto1_FromVLDC = mdl.create_tag(
    value="VLoad_a",
    name="FromVLDC",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7792, 8232)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.From1
_Single_Phase_Transformer_Vreg_Auto1_From1 = mdl.create_tag(
    value="ratio",
    name="From1",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 8816)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.Goto11
_Single_Phase_Transformer_Vreg_Auto1_Goto11 = mdl.create_tag(
    value="Vprim_A",
    name="Goto11",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8432, 8720)
)

# Tag: Single-Phase Transformer.Vreg.Auto1.From11
_Single_Phase_Transformer_Vreg_Auto1_From11 = mdl.create_tag(
    value="Iinst_A",
    name="From11",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 8976)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction8
_Single_Phase_Transformer_Vreg_Auto1_Junction8 = mdl.create_junction(
    name="Junction8",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8680)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction10
_Single_Phase_Transformer_Vreg_Auto1_Junction10 = mdl.create_junction(
    name="Junction10",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8760)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction11
_Single_Phase_Transformer_Vreg_Auto1_Junction11 = mdl.create_junction(
    name="Junction11",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8656)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction42
_Single_Phase_Transformer_Vreg_Auto1_Junction42 = mdl.create_junction(
    name="Junction42",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8000, 8248)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction43
_Single_Phase_Transformer_Vreg_Auto1_Junction43 = mdl.create_junction(
    name="Junction43",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8512, 8280)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.JL2
_Single_Phase_Transformer_Vreg_Auto1_JL2 = mdl.create_junction(
    name="JL2",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9456, 8784)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.JL1
_Single_Phase_Transformer_Vreg_Auto1_JL1 = mdl.create_junction(
    name="JL1",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9456, 8656)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction53
_Single_Phase_Transformer_Vreg_Auto1_Junction53 = mdl.create_junction(
    name="Junction53",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8784)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction55
_Single_Phase_Transformer_Vreg_Auto1_Junction55 = mdl.create_junction(
    name="Junction55",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8632, 8784)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction60
_Single_Phase_Transformer_Vreg_Auto1_Junction60 = mdl.create_junction(
    name="Junction60",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8368, 8656)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction61
_Single_Phase_Transformer_Vreg_Auto1_Junction61 = mdl.create_junction(
    name="Junction61",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8368, 8784)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction63
_Single_Phase_Transformer_Vreg_Auto1_Junction63 = mdl.create_junction(
    name="Junction63",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8632, 8656)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction64
_Single_Phase_Transformer_Vreg_Auto1_Junction64 = mdl.create_junction(
    name="Junction64",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8248, 8864)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction65
_Single_Phase_Transformer_Vreg_Auto1_Junction65 = mdl.create_junction(
    name="Junction65",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(9000, 8328)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction66
_Single_Phase_Transformer_Vreg_Auto1_Junction66 = mdl.create_junction(
    name="Junction66",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(9200, 8264)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction67
_Single_Phase_Transformer_Vreg_Auto1_Junction67 = mdl.create_junction(
    name="Junction67",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8896, 8256)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction68
_Single_Phase_Transformer_Vreg_Auto1_Junction68 = mdl.create_junction(
    name="Junction68",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8984, 8256)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction101
_Single_Phase_Transformer_Vreg_Auto1_Junction101 = mdl.create_junction(
    name="Junction101",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8152, 8248)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction108
_Single_Phase_Transformer_Vreg_Auto1_Junction108 = mdl.create_junction(
    name="Junction108",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8016, 8656)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction109
_Single_Phase_Transformer_Vreg_Auto1_Junction109 = mdl.create_junction(
    name="Junction109",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8016, 8784)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction112
_Single_Phase_Transformer_Vreg_Auto1_Junction112 = mdl.create_junction(
    name="Junction112",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 8656)
)

# Junction: Single-Phase Transformer.Vreg.Auto1.Junction113
_Single_Phase_Transformer_Vreg_Auto1_Junction113 = mdl.create_junction(
    name="Junction113",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 8784)
)

# Comment: Single-Phase Transformer.Vreg.Auto1.Comment2
_Single_Phase_Transformer_Vreg_Auto1_Comment2 = mdl.create_comment(
    text="<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\"><html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\" font-family:\'Arial\'; font-size:12pt; font-weight:400; font-style:normal;\"><p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Tap changer control</p></body></html> ",
    parent=_Single_Phase_Transformer_Vreg_Auto1,
    position=(8488, 8168)
)

# Port: Single-Phase Transformer.Vreg.RegA1
_Single_Phase_Transformer_Vreg_RegA1 = mdl.create_port(
    name="RegA1",
    parent=_Single_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7968, 7960)
)

# Port: Single-Phase Transformer.Vreg.RegA2
_Single_Phase_Transformer_Vreg_RegA2 = mdl.create_port(
    name="RegA2",
    parent=_Single_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8344, 7960)
)

# Port: Single-Phase Transformer.Vreg.RegB2
_Single_Phase_Transformer_Vreg_RegB2 = mdl.create_port(
    name="RegB2",
    parent=_Single_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8344, 8152)
)

# Port: Single-Phase Transformer.Vreg.RegB1
_Single_Phase_Transformer_Vreg_RegB1 = mdl.create_port(
    name="RegB1",
    parent=_Single_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7968, 8152)
)

# Port: Single-Phase Transformer.A1
_Single_Phase_Transformer_A1 = mdl.create_port(
    name="A1",
    parent=_Single_Phase_Transformer,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, -16.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7992, 8104)
)

# Port: Single-Phase Transformer.B1
_Single_Phase_Transformer_B1 = mdl.create_port(
    name="B1",
    parent=_Single_Phase_Transformer,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, 16.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7992, 8296)
)

# Port: Single-Phase Transformer.A2
_Single_Phase_Transformer_A2 = mdl.create_port(
    name="A2",
    parent=_Single_Phase_Transformer,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(32, -16),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(9376, 8192)
)

# Port: Single-Phase Transformer.B2
_Single_Phase_Transformer_B2 = mdl.create_port(
    name="B2",
    parent=_Single_Phase_Transformer,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(32, 16),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(9376, 8288)
)

# Tag: Single-Phase Transformer.TagRegA1
_Single_Phase_Transformer_TagRegA1 = mdl.create_tag(
    value="not_used",
    name="TagRegA1",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8696, 8104)
)

# Tag: Single-Phase Transformer.TagRegB1
_Single_Phase_Transformer_TagRegB1 = mdl.create_tag(
    value="not_used",
    name="TagRegB1",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8696, 8296)
)

# Tag: Single-Phase Transformer.TagRegA2
_Single_Phase_Transformer_TagRegA2 = mdl.create_tag(
    value="not_used",
    name="TagRegA2",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9064, 8104)
)

# Tag: Single-Phase Transformer.TagRegB2
_Single_Phase_Transformer_TagRegB2 = mdl.create_tag(
    value="not_used",
    name="TagRegB2",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9064, 8296)
)

# Tag: Single-Phase Transformer.TagA1
_Single_Phase_Transformer_TagA1 = mdl.create_tag(
    value="TA_1",
    name="TagA1",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8104, 8104)
)

# Tag: Single-Phase Transformer.TagB1
_Single_Phase_Transformer_TagB1 = mdl.create_tag(
    value="TB_1",
    name="TagB1",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8096, 8296)
)

# Tag: Single-Phase Transformer.TagTA1
_Single_Phase_Transformer_TagTA1 = mdl.create_tag(
    value="TA_1",
    name="TagTA1",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8240, 8104)
)

# Tag: Single-Phase Transformer.TagTB1
_Single_Phase_Transformer_TagTB1 = mdl.create_tag(
    value="TB_1",
    name="TagTB1",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8240, 8296)
)

# Tag: Single-Phase Transformer.TagTA2
_Single_Phase_Transformer_TagTA2 = mdl.create_tag(
    value="TA_2",
    name="TagTA2",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8560, 8160)
)

# Tag: Single-Phase Transformer.TagTB2
_Single_Phase_Transformer_TagTB2 = mdl.create_tag(
    value="TB_2",
    name="TagTB2",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8560, 8240)
)

# Tag: Single-Phase Transformer.TagA2
_Single_Phase_Transformer_TagA2 = mdl.create_tag(
    value="TA_2",
    name="TagA2",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9272, 8192)
)

# Tag: Single-Phase Transformer.TagB2
_Single_Phase_Transformer_TagB2 = mdl.create_tag(
    value="TB_2",
    name="TagB2",
    parent=_Single_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9272, 8288)
)

# Component: Three-Phase Transformer
_Three_Phase_Transformer = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Three-Phase Transformer",
    rotation="up",
    flip="flip_none",
    position=(5096, 7376),
    hide_name=False,
    size=(64, 96)
)
_Three_Phase_Transformer_mask = mdl.create_mask(_Three_Phase_Transformer)
_Three_Phase_Transformer_mask_num_windings = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="num_windings",
    label="Number of windings",
    widget="combo",
    combo_values=['2', '3', '4'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Three_Phase_Transformer_mask_num_windings_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
comp_script.update_subsystem_components(mdl, container_handle, created_ports)
comp_script.update_all_windings(mdl, container_handle, created_ports)
comp_script.show_hide_conn(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_num_windings, "property_value_changed", _Three_Phase_Transformer_mask_num_windings_property_value_changed)


_Three_Phase_Transformer_mask_num_windings_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.show_hide_conn(mdl, container_handle)
comp_script.show_hide_couplings(mdl, container_handle)
comp_script.enable_disable_grounds(mdl, container_handle)
comp_script.update_regctrl_combo(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_num_windings, "property_value_edited", _Three_Phase_Transformer_mask_num_windings_property_value_edited)

_Three_Phase_Transformer_mask_embedded_cpl = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="embedded_cpl",
    label="Embedded coupling",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling:3",
    unit=""
)


_Three_Phase_Transformer_mask_embedded_cpl_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
T_type = mdl.get_component_type_name(T_handle)
if "Two Winding" in T_type:
    prop_name = mdl.get_name(prop_handle)
    inner_prop_handle = mdl.prop(T_handle, prop_name)
    mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl, "property_value_changed", _Three_Phase_Transformer_mask_embedded_cpl_property_value_changed)


_Three_Phase_Transformer_mask_embedded_cpl_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.enable_disable_grounds(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl, "property_value_edited", _Three_Phase_Transformer_mask_embedded_cpl_property_value_edited)

_Three_Phase_Transformer_mask_embedded_cpl_12 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="embedded_cpl_12",
    label="Embedded coupling 1-2",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling",
    unit=""
)


_Three_Phase_Transformer_mask_embedded_cpl_12_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
T_type = mdl.get_component_type_name(T_handle)
types = ["Three Winding", "Four Winding"]
if any(t in T_type for t in types):
    prop_name = mdl.get_name(prop_handle)
    inner_prop_handle = mdl.prop(T_handle, prop_name)
    mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl_12, "property_value_changed", _Three_Phase_Transformer_mask_embedded_cpl_12_property_value_changed)


_Three_Phase_Transformer_mask_embedded_cpl_12_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.enable_disable_grounds(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl_12, "property_value_edited", _Three_Phase_Transformer_mask_embedded_cpl_12_property_value_edited)

_Three_Phase_Transformer_mask_embedded_cpl_13 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="embedded_cpl_13",
    label="Embedded coupling 1-3",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling",
    unit=""
)


_Three_Phase_Transformer_mask_embedded_cpl_13_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
T_type = mdl.get_component_type_name(T_handle)
types = ["Three Winding", "Four Winding"]
if any(t in T_type for t in types):
    prop_name = mdl.get_name(prop_handle)
    inner_prop_handle = mdl.prop(T_handle, prop_name)
    mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl_13, "property_value_changed", _Three_Phase_Transformer_mask_embedded_cpl_13_property_value_changed)


_Three_Phase_Transformer_mask_embedded_cpl_13_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.enable_disable_grounds(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl_13, "property_value_edited", _Three_Phase_Transformer_mask_embedded_cpl_13_property_value_edited)

_Three_Phase_Transformer_mask_embedded_cpl_14 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="embedded_cpl_14",
    label="Embedded coupling 1-4",
    widget="combo",
    combo_values=['None', 'Ideal Transformer', 'TLM'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Core coupling",
    unit=""
)


_Three_Phase_Transformer_mask_embedded_cpl_14_property_value_changed = """
T_handle = mdl.get_item("T1", parent=mdl.get_parent(container_handle))
T_type = mdl.get_component_type_name(T_handle)
if "Four Winding" in T_type:
    prop_name = mdl.get_name(prop_handle)
    inner_prop_handle = mdl.prop(T_handle, prop_name)
    mdl.set_property_value(inner_prop_handle, new_value)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl_14, "property_value_changed", _Three_Phase_Transformer_mask_embedded_cpl_14_property_value_changed)


_Three_Phase_Transformer_mask_embedded_cpl_14_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.enable_disable_grounds(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_embedded_cpl_14, "property_value_edited", _Three_Phase_Transformer_mask_embedded_cpl_14_property_value_edited)

_Three_Phase_Transformer_mask_KVs = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="KVs",
    label="Array of rated winding phase voltages",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kV"
)

_Three_Phase_Transformer_mask_KVAs = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="KVAs",
    label="Array of winding kVA ratings",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kVA"
)

_Three_Phase_Transformer_mask_percentRs = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="percentRs",
    label="Array of winding percent resistances",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Three_Phase_Transformer_mask_XArray = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="XArray",
    label="Winding reactances",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Three_Phase_Transformer_mask_XscArray = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="XscArray",
    label="Short circuit reactances",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit="%"
)

_Three_Phase_Transformer_mask_global_basefreq = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Three_Phase_Transformer_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_global_basefreq, "property_value_changed", _Three_Phase_Transformer_mask_global_basefreq_property_value_changed)


_Three_Phase_Transformer_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_frequency_prop(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_global_basefreq, "property_value_edited", _Three_Phase_Transformer_mask_global_basefreq_property_value_edited)

_Three_Phase_Transformer_mask_Basefreq = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="Basefreq",
    label="Base frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit="Hz"
)

_Three_Phase_Transformer_mask_percentNoloadloss = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="percentNoloadloss",
    label="No-load losses",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Three_Phase_Transformer_mask_percentimag = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="percentimag",
    label="Magnetizing current",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Three_Phase_Transformer_mask_prim_conn = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="prim_conn",
    label="Primary",
    widget="combo",
    combo_values=['Y', 'Δ'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections:2",
    unit=""
)


_Three_Phase_Transformer_mask_prim_conn_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_prim_conn, "property_value_changed", _Three_Phase_Transformer_mask_prim_conn_property_value_changed)


_Three_Phase_Transformer_mask_prim_conn_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.show_hide_ground(mdl, prop_handle, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_prim_conn, "property_value_edited", _Three_Phase_Transformer_mask_prim_conn_property_value_edited)

_Three_Phase_Transformer_mask_grounded_prim = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="grounded_prim",
    label="Grounded Primary",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections",
    unit=""
)


_Three_Phase_Transformer_mask_grounded_prim_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_grounded_prim, "property_value_changed", _Three_Phase_Transformer_mask_grounded_prim_property_value_changed)

_Three_Phase_Transformer_mask_sec1_conn = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="sec1_conn",
    label="Secondary 1",
    widget="combo",
    combo_values=['Y', 'Δ'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections",
    unit=""
)


_Three_Phase_Transformer_mask_sec1_conn_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
comp_script.vreg_connection(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_sec1_conn, "property_value_changed", _Three_Phase_Transformer_mask_sec1_conn_property_value_changed)


_Three_Phase_Transformer_mask_sec1_conn_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.show_hide_ground(mdl, prop_handle, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_sec1_conn, "property_value_edited", _Three_Phase_Transformer_mask_sec1_conn_property_value_edited)

_Three_Phase_Transformer_mask_grounded_sec1 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="grounded_sec1",
    label="Grounded Secondary 1",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections",
    unit=""
)


_Three_Phase_Transformer_mask_grounded_sec1_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
comp_script.vreg_connection(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_grounded_sec1, "property_value_changed", _Three_Phase_Transformer_mask_grounded_sec1_property_value_changed)

_Three_Phase_Transformer_mask_sec2_conn = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="sec2_conn",
    label="Secondary 2",
    widget="combo",
    combo_values=['Y', 'Δ'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections",
    unit=""
)


_Three_Phase_Transformer_mask_sec2_conn_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
comp_script.vreg_connection(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_sec2_conn, "property_value_changed", _Three_Phase_Transformer_mask_sec2_conn_property_value_changed)


_Three_Phase_Transformer_mask_sec2_conn_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.show_hide_ground(mdl, prop_handle, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_sec2_conn, "property_value_edited", _Three_Phase_Transformer_mask_sec2_conn_property_value_edited)

_Three_Phase_Transformer_mask_grounded_sec2 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="grounded_sec2",
    label="Grounded Secondary 2",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections",
    unit=""
)


_Three_Phase_Transformer_mask_grounded_sec2_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
comp_script.vreg_connection(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_grounded_sec2, "property_value_changed", _Three_Phase_Transformer_mask_grounded_sec2_property_value_changed)

_Three_Phase_Transformer_mask_sec3_conn = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="sec3_conn",
    label="Secondary 3",
    widget="combo",
    combo_values=['Y', 'Δ'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections",
    unit=""
)


_Three_Phase_Transformer_mask_sec3_conn_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)
comp_script.vreg_connection(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_sec3_conn, "property_value_changed", _Three_Phase_Transformer_mask_sec3_conn_property_value_changed)


_Three_Phase_Transformer_mask_sec3_conn_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.show_hide_ground(mdl, prop_handle, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_sec3_conn, "property_value_edited", _Three_Phase_Transformer_mask_sec3_conn_property_value_edited)

_Three_Phase_Transformer_mask_grounded_sec3 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="grounded_sec3",
    label="Grounded Secondary 3",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Winding connections",
    unit=""
)


_Three_Phase_Transformer_mask_grounded_sec3_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
comp_script.update_winding_configs(mdl, prop_handle, container_handle, created_ports)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_grounded_sec3, "property_value_changed", _Three_Phase_Transformer_mask_grounded_sec3_property_value_changed)

_Three_Phase_Transformer_mask_regcontrol_on = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="regcontrol_on",
    label="Activate RegControl",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="RegControl:4",
    unit=""
)


_Three_Phase_Transformer_mask_regcontrol_on_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_regcontrol_props(mdl, container_handle)
comp_script.vreg_connection(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_regcontrol_on, "property_value_changed", _Three_Phase_Transformer_mask_regcontrol_on_property_value_changed)


_Three_Phase_Transformer_mask_regcontrol_on_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_regcontrol_props(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_regcontrol_on, "property_value_edited", _Three_Phase_Transformer_mask_regcontrol_on_property_value_edited)

_Three_Phase_Transformer_mask_maxtap = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="maxtap",
    label="Maximum tap voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="pu"
)

_Three_Phase_Transformer_mask_mintap = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="mintap",
    label="Minimum tap voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="pu"
)

_Three_Phase_Transformer_mask_numtaps = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="numtaps",
    label="Number of taps",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit=""
)

_Three_Phase_Transformer_mask_ctrl_winding = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="ctrl_winding",
    label="Monitored winding",
    widget="combo",
    combo_values=['Winding 1', 'Winding 2'],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit=""
)


_Three_Phase_Transformer_mask_ctrl_winding_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.vreg_connection(mdl, container_handle)
comp_script.update_regctrl_combo(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_ctrl_winding, "property_value_changed", _Three_Phase_Transformer_mask_ctrl_winding_property_value_changed)

_Three_Phase_Transformer_mask_vreg = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="vreg",
    label="Vreg",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)


_Three_Phase_Transformer_mask_vreg_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.calculate_winding_voltage(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_vreg, "property_value_edited", _Three_Phase_Transformer_mask_vreg_property_value_edited)

_Three_Phase_Transformer_mask_ptratio = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="ptratio",
    label="PT ratio",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)


_Three_Phase_Transformer_mask_ptratio_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.calculate_winding_voltage(mdl, container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_ptratio, "property_value_edited", _Three_Phase_Transformer_mask_ptratio_property_value_edited)

_Three_Phase_Transformer_mask_winding_voltage = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="winding_voltage",
    label="Line voltage result",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)


_Three_Phase_Transformer_mask_winding_voltage_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask_winding_voltage, "property_value_edited", _Three_Phase_Transformer_mask_winding_voltage_property_value_edited)

_Three_Phase_Transformer_mask_band = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="band",
    label="Bandwidth",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="V"
)

_Three_Phase_Transformer_mask_delay = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="delay",
    label="Delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="s"
)

_Three_Phase_Transformer_mask_execution_rate = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="execution_rate",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="RegControl:4",
    unit="s"
)

_Three_Phase_Transformer_mask_enable_monitoring = mdl.create_property(
    item_handle=_Three_Phase_Transformer_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring:5",
    unit=""
)


_Three_Phase_Transformer_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask, "define_icon", _Three_Phase_Transformer_mask_define_icon)

_Three_Phase_Transformer_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_tptransf as comp_script

importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)


"""
mdl.set_handler_code(_Three_Phase_Transformer_mask, "init", _Three_Phase_Transformer_mask_init)

_Three_Phase_Transformer_mask_pre_compile = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.update_frequency_property(mdl, item_handle)
# HEADER START
num_windings = mdl.get_property_value(mdl.prop(item_handle, "num_windings"))
embedded_cpl = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl"))
embedded_cpl_12 = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl_12"))
embedded_cpl_13 = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl_13"))
embedded_cpl_14 = mdl.get_property_value(mdl.prop(item_handle, "embedded_cpl_14"))
KVs = mdl.get_property_value(mdl.prop(item_handle, "KVs"))
KVAs = mdl.get_property_value(mdl.prop(item_handle, "KVAs"))
percentRs = mdl.get_property_value(mdl.prop(item_handle, "percentRs"))
XArray = mdl.get_property_value(mdl.prop(item_handle, "XArray"))
XscArray = mdl.get_property_value(mdl.prop(item_handle, "XscArray"))
Basefreq = mdl.get_property_value(mdl.prop(item_handle, "Basefreq"))
percentNoloadloss = mdl.get_property_value(mdl.prop(item_handle, "percentNoloadloss"))
percentimag = mdl.get_property_value(mdl.prop(item_handle, "percentimag"))
prim_conn = mdl.get_property_value(mdl.prop(item_handle, "prim_conn"))
grounded_prim = mdl.get_property_value(mdl.prop(item_handle, "grounded_prim"))
sec1_conn = mdl.get_property_value(mdl.prop(item_handle, "sec1_conn"))
grounded_sec1 = mdl.get_property_value(mdl.prop(item_handle, "grounded_sec1"))
sec2_conn = mdl.get_property_value(mdl.prop(item_handle, "sec2_conn"))
grounded_sec2 = mdl.get_property_value(mdl.prop(item_handle, "grounded_sec2"))
sec3_conn = mdl.get_property_value(mdl.prop(item_handle, "sec3_conn"))
grounded_sec3 = mdl.get_property_value(mdl.prop(item_handle, "grounded_sec3"))
# HEADER STOP

comp_script.validate_properties(mdl, item_handle)
comp_script.convert_all_properties(mdl, item_handle)


"""
mdl.set_handler_code(_Three_Phase_Transformer_mask, "pre_compile", _Three_Phase_Transformer_mask_pre_compile)

_Three_Phase_Transformer_mask_post_resolve = """

"""
mdl.set_handler_code(_Three_Phase_Transformer_mask, "post_resolve", _Three_Phase_Transformer_mask_post_resolve)

_Three_Phase_Transformer_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The Three-Phase Transfomer is implemented as a multi-terminal power delivery element and consists of two or more windings, with a default wye-wye connection.<br></br><br></br>Note that contrary to OpenDSS, individual reactances are defined in the mask. Reactances between windings will be calculated.</p></body></html>
'''
mdl.set_description(_Three_Phase_Transformer_mask, _Three_Phase_Transformer_mask_desc)


# Component: Three-Phase Transformer.Vreg
_Three_Phase_Transformer_Vreg = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Three_Phase_Transformer,
    name="Vreg",
    rotation="up",
    flip="flip_none",
    position=(8960, 8232),
    hide_name=False,
    size=(144, 336)
)


# Component: Three-Phase Transformer.Vreg.Auto1
_Three_Phase_Transformer_Vreg_Auto1 = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Three_Phase_Transformer_Vreg,
    name="Auto1",
    rotation="up",
    flip="flip_none",
    position=(8152, 8056),
    hide_name=False,
    size=(256, 256)
)
_Three_Phase_Transformer_Vreg_Auto1_mask = mdl.create_mask(_Three_Phase_Transformer_Vreg_Auto1)
_Three_Phase_Transformer_Vreg_Auto1_mask_R1 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="R1",
    label="R1",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General:1",
    unit="Ω"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_L1 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="L1",
    label="L1",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="H"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_R2 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="R2",
    label="R2",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="Ω"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_L2 = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="L2",
    label="L2",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="H"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_Rm = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="Rm",
    label="Rm",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="Ω"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_Lm = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="Lm",
    label="Lm",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit="H"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_n_taps = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="n_taps",
    label="Number of taps ±",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="General",
    unit=""
)

_Three_Phase_Transformer_Vreg_Auto1_mask_reg_range = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="reg_range",
    label="Regualtor range ±",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="General",
    unit="%"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_atype = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="atype",
    label="Type",
    widget="combo",
    combo_values=['Type A', 'Type B'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation:2",
    unit=""
)


_Three_Phase_Transformer_Vreg_Auto1_mask_atype_property_value_changed = """
comp_handle = mdl.get_sub_level_handle(container_handle)

for phase in ['a', 'b', 'c']:
    ET11 = mdl.get_item(f'ET11{phase}', parent=comp_handle, item_type='tag')
    ET12 = mdl.get_item(f'ET12{phase}', parent=comp_handle, item_type='tag')
    ET21 = mdl.get_item(f'ET21{phase}', parent=comp_handle, item_type='tag')
    ET22 = mdl.get_item(f'ET22{phase}', parent=comp_handle, item_type='tag')

    if new_value == 'Type A':
        mdl.set_tag_properties(ET11, value=f'S1{phase}')
        mdl.set_tag_properties(ET12, value=f'S2{phase}')
        mdl.set_tag_properties(ET21, value=f'L1{phase}')
        mdl.set_tag_properties(ET22, value=f'L2{phase}')
    else:
        mdl.set_tag_properties(ET11, value=f'L1{phase}')
        mdl.set_tag_properties(ET12, value=f'L2{phase}')
        mdl.set_tag_properties(ET21, value=f'S1{phase}')
        mdl.set_tag_properties(ET22, value=f'S2{phase}')

    mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Three_Phase_Transformer_Vreg_Auto1_mask_atype, "property_value_changed", _Three_Phase_Transformer_Vreg_Auto1_mask_atype_property_value_changed)

_Three_Phase_Transformer_Vreg_Auto1_mask_reg_method = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="reg_method",
    label="Regulation method",
    widget="combo",
    combo_values=['Line voltage regulator', 'Bus voltage regulator', 'Line drop compensator'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit=""
)


_Three_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_changed = """
if new_value == 'Line drop compensator':
    mdl.show_property(mdl.prop(container_handle, 'Rp'))
    mdl.show_property(mdl.prop(container_handle, 'Xp'))
    mdl.show_property(mdl.prop(container_handle, 'ptratio'))
    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
else:
    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == 'Bus voltage regulator':
    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
    if FromVLDC:
        mdl.delete_item(FromVLDC)

    Vin = mdl.create_port(
                            name='vref',
                            parent=comp_handle,
                            kind='sp',
                            direction='in',
                            terminal_position=(-32,-128),
                            hide_name=False,
                            position=(8672, 8856)
                         )
    VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
    mdl.create_connection(Vin, mdl.term(VSum,'in'))
else:
    Vin = mdl.get_item('vref', parent=comp_handle, item_type='port')
    if Vin:
        mdl.delete_item(Vin)
    FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
    if not FromVLDC:
        FromVLDC = mdl.create_tag(
                                    value='VLDC',
                                    name='FromVLDC',
                                    parent=comp_handle,
                                    kind='sp',
                                    position=(8656, 8880),
                                    direction='out',
                                    scope='local'
                                 )
        mdl.hide_name(FromVLDC)

        VSum = mdl.get_item('VSum',parent=comp_handle,item_type='component')
        mdl.create_connection(FromVLDC, mdl.term(VSum,'in'))
    if new_value == 'Line drop compensator':
        ctrl_src = 'VLDC'
    else:
        ctrl_src = 'VLoad'
    #mdl.set_tag_properties(FromVLDC, value=ctrl_src)

"""
mdl.set_handler_code(_Three_Phase_Transformer_Vreg_Auto1_mask_reg_method, "property_value_changed", _Three_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_changed)


_Three_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_edited = """
if new_value == 'Line drop compensator':
    mdl.show_property(mdl.prop(container_handle, 'Rp'))
    mdl.show_property(mdl.prop(container_handle, 'Xp'))
    mdl.show_property(mdl.prop(container_handle, 'ptratio_auto'))
    mdl.show_property(mdl.prop(container_handle, 'CTprim'))
else:
    mdl.hide_property(mdl.prop(container_handle, 'Rp'))
    mdl.hide_property(mdl.prop(container_handle, 'Xp'))
    mdl.hide_property(mdl.prop(container_handle, 'ptratio_auto'))
    mdl.hide_property(mdl.prop(container_handle, 'CTprim'))

"""
mdl.set_handler_code(_Three_Phase_Transformer_Vreg_Auto1_mask_reg_method, "property_value_edited", _Three_Phase_Transformer_Vreg_Auto1_mask_reg_method_property_value_edited)

_Three_Phase_Transformer_Vreg_Auto1_mask_Vreg = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="Vreg",
    label="Voltage level",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit="V"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_band = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="band",
    label="Bandwidth",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit="V"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_Td = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="Td",
    label="Time delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Voltage Regulation",
    unit="s"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_ptratio_auto = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="ptratio_auto",
    label="PT ratio",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="V/V"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_CTprim = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="CTprim",
    label="CT primary rating",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="A"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_Rp = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="Rp",
    label="R",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="V"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_Xp = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="Xp",
    label="X",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Voltage Regulation",
    unit="V"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_execution_rate = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="execution_rate",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Signal Processing:3",
    unit="s"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_fc = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="fc",
    label="LPF cutoff frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Stability:4",
    unit="Hz"
)

_Three_Phase_Transformer_Vreg_Auto1_mask_maxtap = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="maxtap",
    label="maxtap",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Three_Phase_Transformer_Vreg_Auto1_mask_mintap = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="mintap",
    label="mintap",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Three_Phase_Transformer_Vreg_Auto1_mask_YorD = mdl.create_property(
    item_handle=_Three_Phase_Transformer_Vreg_Auto1_mask,
    name="YorD",
    label="YorD",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)


_Three_Phase_Transformer_Vreg_Auto1_mask_init = """
def updateMask(mdl):
    bw_limit = mdl.get_property_disp_value(mdl.prop(item_handle, "bw_limit"))
    frequency = mdl.prop(item_handle, "frequency")
    if bw_limit == 'True':
        mdl.enable_property(frequency)
    else:
        mdl.disable_property(frequency)
    return

"""
mdl.set_handler_code(_Three_Phase_Transformer_Vreg_Auto1_mask, "init", _Three_Phase_Transformer_Vreg_Auto1_mask_init)

_Three_Phase_Transformer_Vreg_Auto1_mask_pre_compile = """
# HEADER START
R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
L1 = mdl.get_property_value(mdl.prop(item_handle, "L1"))
R2 = mdl.get_property_value(mdl.prop(item_handle, "R2"))
L2 = mdl.get_property_value(mdl.prop(item_handle, "L2"))
Rm = mdl.get_property_value(mdl.prop(item_handle, "Rm"))
Lm = mdl.get_property_value(mdl.prop(item_handle, "Lm"))
n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))
atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))
reg_method = mdl.get_property_value(mdl.prop(item_handle, "reg_method"))
Vreg = mdl.get_property_value(mdl.prop(item_handle, "Vreg"))
band = mdl.get_property_value(mdl.prop(item_handle, "band"))
Td = mdl.get_property_value(mdl.prop(item_handle, "Td"))
ptratio_auto = mdl.get_property_value(mdl.prop(item_handle, "ptratio_auto"))
CTprim = mdl.get_property_value(mdl.prop(item_handle, "CTprim"))
Rp = mdl.get_property_value(mdl.prop(item_handle, "Rp"))
Xp = mdl.get_property_value(mdl.prop(item_handle, "Xp"))
execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
fc = mdl.get_property_value(mdl.prop(item_handle, "fc"))
maxtap = mdl.get_property_value(mdl.prop(item_handle, "maxtap"))
mintap = mdl.get_property_value(mdl.prop(item_handle, "mintap"))
YorD = mdl.get_property_value(mdl.prop(item_handle, "YorD"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT

comp_handle = mdl.get_parent(item_handle)

Rmid = "1e9"

FromVLDC = mdl.get_item('FromVLDC', parent=comp_handle, item_type='tag')
FromVLDC_unused = mdl.get_item('FromVLDC_unused', parent=comp_handle, item_type='tag')

if YorD == "Δ":
    Vreg = float(Vreg)*np.sqrt(3)
    mdl.set_property_value(mdl.prop(item_handle, "Vreg"), Vreg)
    mdl.set_tag_properties(FromVLDC, value="VLoad_ab", scope='local')
    mdl.set_tag_properties(FromVLDC_unused, value="VLoad_a", scope='local')
else:
    mdl.set_tag_properties(FromVLDC, value="VLoad_a", scope='local')
    mdl.set_tag_properties(FromVLDC_unused, value="VLoad_ab", scope='local')

n_taps = mdl.get_property_value(mdl.prop(item_handle, "n_taps"))
reg_range = mdl.get_property_value(mdl.prop(item_handle, "reg_range"))

maxtap = float(maxtap)
mintap = float(mintap)

var_per_tap = (maxtap-mintap)/n_taps

max_n_tap = int(round(((maxtap - 1) / (maxtap - mintap) * n_taps)))
min_n_tap = n_taps - max_n_tap

tap_difference = max_n_tap - (n_taps // 2 + n_taps % 2)

ptratio_auto = float(ptratio_auto)
mdl.set_property_value(mdl.prop(item_handle, "ptratio_auto"), ptratio_auto)
mdl.set_property_value(mdl.prop(item_handle, "execution_rate"), execution_rate)

atype = mdl.get_property_value(mdl.prop(item_handle, "atype"))

if atype == 'Type A':
    ABcomp = 1
    Rleft = R1
    Lleft = L1
    Rright = R2
    Lright = L2
else:
    ABcomp = -1
    Rleft = R2
    Lleft = L2
    Rright = R1
    Lright = L1


"""
mdl.set_handler_code(_Three_Phase_Transformer_Vreg_Auto1_mask, "pre_compile", _Three_Phase_Transformer_Vreg_Auto1_mask_pre_compile)

_Three_Phase_Transformer_Vreg_Auto1_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Autotransformer with load tap changer (LTC) and optional line drop compensator (LDC).</p></body></html>
'''
mdl.set_description(_Three_Phase_Transformer_Vreg_Auto1_mask, _Three_Phase_Transformer_Vreg_Auto1_mask_desc)


# Component: Three-Phase Transformer.Vreg.Auto1.Rr_B
_Three_Phase_Transformer_Vreg_Auto1_Rr_B = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rr_B",
    rotation="up",
    flip="flip_none",
    position=(8808, 9136),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rr_B, "resistance"), "Rright")


# Component: Three-Phase Transformer.Vreg.Auto1.Lm_B
_Three_Phase_Transformer_Vreg_Auto1_Lm_B = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Lm_B",
    rotation="right",
    flip="flip_none",
    position=(8304, 9200),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Lm_B, "inductance"), "Lm")


# Component: Three-Phase Transformer.Vreg.Auto1.Rm_B
_Three_Phase_Transformer_Vreg_Auto1_Rm_B = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rm_B",
    rotation="right",
    flip="flip_none",
    position=(8240, 9200),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rm_B, "resistance"), "Rm")


# Component: Three-Phase Transformer.Vreg.Auto1.Ll_B
_Three_Phase_Transformer_Vreg_Auto1_Ll_B = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Ll_B",
    rotation="up",
    flip="flip_none",
    position=(8176, 9136),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Ll_B, "inductance"), "Lleft")


# Component: Three-Phase Transformer.Vreg.Auto1.Rl_B
_Three_Phase_Transformer_Vreg_Auto1_Rl_B = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rl_B",
    rotation="up",
    flip="flip_none",
    position=(8080, 9136),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rl_B, "resistance"), "Rleft")


# Component: Three-Phase Transformer.Vreg.Auto1.VLoad_B
_Three_Phase_Transformer_Vreg_Auto1_VLoad_B = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="VLoad_B",
    rotation="right",
    flip="flip_none",
    position=(9464, 9176),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VLoad_B, "execution_rate"), "execution_rate")


# Component: Three-Phase Transformer.Vreg.Auto1.ILrms_B
_Three_Phase_Transformer_Vreg_Auto1_ILrms_B = mdl.create_component(
    type_name="core/Current RMS",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="ILrms_B",
    rotation="up",
    flip="flip_none",
    position=(9168, 9136),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_ILrms_B, "execution_rate"), "execution_rate")


# Component: Three-Phase Transformer.Vreg.Auto1.Vprim_B
_Three_Phase_Transformer_Vreg_Auto1_Vprim_B = mdl.create_component(
    type_name="core/el_voltage_msr",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Vprim_B",
    rotation="right",
    flip="flip_none",
    position=(8384, 9200),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Vprim_B, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Vprim_B, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.Vsec_ins_B
_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_B = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Vsec_ins_B",
    rotation="up",
    flip="flip_horizontal",
    position=(8712, 9136),
    hide_name=False,
    size=(64, 32)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Isp_B
_Three_Phase_Transformer_Vreg_Auto1_Isp_B = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Isp_B",
    rotation="left",
    flip="flip_none",
    position=(8640, 9200),
    hide_name=False,
    size=(64, 32)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Isec_C
_Three_Phase_Transformer_Vreg_Auto1_Isec_C = mdl.create_component(
    type_name="core/el_current_msr",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Isec_C",
    rotation="up",
    flip="flip_none",
    position=(9272, 9560),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Isec_C, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Isec_C, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.Lr_C
_Three_Phase_Transformer_Vreg_Auto1_Lr_C = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Lr_C",
    rotation="up",
    flip="flip_none",
    position=(8912, 9560),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Lr_C, "inductance"), "Lright")


# Component: Three-Phase Transformer.Vreg.Auto1.Rr_C
_Three_Phase_Transformer_Vreg_Auto1_Rr_C = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rr_C",
    rotation="up",
    flip="flip_none",
    position=(8816, 9560),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rr_C, "resistance"), "Rright")


# Component: Three-Phase Transformer.Vreg.Auto1.Lm_C
_Three_Phase_Transformer_Vreg_Auto1_Lm_C = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Lm_C",
    rotation="right",
    flip="flip_none",
    position=(8312, 9624),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Lm_C, "inductance"), "Lm")


# Component: Three-Phase Transformer.Vreg.Auto1.Rm_C
_Three_Phase_Transformer_Vreg_Auto1_Rm_C = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rm_C",
    rotation="right",
    flip="flip_none",
    position=(8248, 9624),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rm_C, "resistance"), "Rm")


# Component: Three-Phase Transformer.Vreg.Auto1.Ll_C
_Three_Phase_Transformer_Vreg_Auto1_Ll_C = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Ll_C",
    rotation="up",
    flip="flip_none",
    position=(8184, 9560),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Ll_C, "inductance"), "Lleft")


# Component: Three-Phase Transformer.Vreg.Auto1.Rl_C
_Three_Phase_Transformer_Vreg_Auto1_Rl_C = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rl_C",
    rotation="up",
    flip="flip_none",
    position=(8088, 9560),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rl_C, "resistance"), "Rleft")


# Component: Three-Phase Transformer.Vreg.Auto1.VLoad_C
_Three_Phase_Transformer_Vreg_Auto1_VLoad_C = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="VLoad_C",
    rotation="right",
    flip="flip_none",
    position=(9472, 9600),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VLoad_C, "execution_rate"), "execution_rate")


# Component: Three-Phase Transformer.Vreg.Auto1.ILrms_C
_Three_Phase_Transformer_Vreg_Auto1_ILrms_C = mdl.create_component(
    type_name="core/Current RMS",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="ILrms_C",
    rotation="up",
    flip="flip_none",
    position=(9176, 9560),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_ILrms_C, "execution_rate"), "execution_rate")


# Component: Three-Phase Transformer.Vreg.Auto1.Vprim_C
_Three_Phase_Transformer_Vreg_Auto1_Vprim_C = mdl.create_component(
    type_name="core/el_voltage_msr",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Vprim_C",
    rotation="right",
    flip="flip_none",
    position=(8392, 9624),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Vprim_C, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Vprim_C, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.Vsec_ins_C
_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_C = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Vsec_ins_C",
    rotation="up",
    flip="flip_horizontal",
    position=(8720, 9560),
    hide_name=False,
    size=(64, 32)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Isp_C
_Three_Phase_Transformer_Vreg_Auto1_Isp_C = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Isp_C",
    rotation="left",
    flip="flip_none",
    position=(8648, 9624),
    hide_name=False,
    size=(64, 32)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Product12
_Three_Phase_Transformer_Vreg_Auto1_Product12 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product12",
    rotation="up",
    flip="flip_none",
    position=(8312, 9344),
    hide_name=False,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Product13
_Three_Phase_Transformer_Vreg_Auto1_Product13 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product13",
    rotation="up",
    flip="flip_none",
    position=(8312, 9440),
    hide_name=False,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Product14
_Three_Phase_Transformer_Vreg_Auto1_Product14 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product14",
    rotation="up",
    flip="flip_none",
    position=(8312, 9784),
    hide_name=False,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Product15
_Three_Phase_Transformer_Vreg_Auto1_Product15 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product15",
    rotation="up",
    flip="flip_none",
    position=(8312, 9880),
    hide_name=False,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Relational operator1
_Three_Phase_Transformer_Vreg_Auto1_Relational_operator1 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Relational operator1",
    rotation="up",
    flip="flip_none",
    position=(8280, 8256),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator1, "relational_op"), ">")


# Component: Three-Phase Transformer.Vreg.Auto1.diff
_Three_Phase_Transformer_Vreg_Auto1_diff = mdl.create_component(
    type_name="core/Probe",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="diff",
    rotation="down",
    flip="flip_both",
    position=(8208, 8168),
    hide_name=False,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.VLoad_AB
_Three_Phase_Transformer_Vreg_Auto1_VLoad_AB = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="VLoad_AB",
    rotation="right",
    flip="flip_none",
    position=(9528, 8936),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VLoad_AB, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VLoad_AB, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.Rinb
_Three_Phase_Transformer_Vreg_Auto1_Rinb = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rinb",
    rotation="right",
    flip="flip_none",
    position=(8032, 9200),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rinb, "resistance"), "1e10")


# Component: Three-Phase Transformer.Vreg.Auto1.Isec_A
_Three_Phase_Transformer_Vreg_Auto1_Isec_A = mdl.create_component(
    type_name="core/el_current_msr",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Isec_A",
    rotation="up",
    flip="flip_none",
    position=(9256, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Isec_A, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Isec_A, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.Rr_A
_Three_Phase_Transformer_Vreg_Auto1_Rr_A = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rr_A",
    rotation="up",
    flip="flip_none",
    position=(8800, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rr_A, "resistance"), "Rright")


# Component: Three-Phase Transformer.Vreg.Auto1.Lm_A
_Three_Phase_Transformer_Vreg_Auto1_Lm_A = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Lm_A",
    rotation="right",
    flip="flip_none",
    position=(8288, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Lm_A, "inductance"), "Lm")


# Component: Three-Phase Transformer.Vreg.Auto1.Rm_A
_Three_Phase_Transformer_Vreg_Auto1_Rm_A = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rm_A",
    rotation="right",
    flip="flip_none",
    position=(8224, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rm_A, "resistance"), "Rm")


# Component: Three-Phase Transformer.Vreg.Auto1.Ll_A
_Three_Phase_Transformer_Vreg_Auto1_Ll_A = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Ll_A",
    rotation="up",
    flip="flip_none",
    position=(8160, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Ll_A, "inductance"), "Lleft")


# Component: Three-Phase Transformer.Vreg.Auto1.Rl_A
_Three_Phase_Transformer_Vreg_Auto1_Rl_A = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rl_A",
    rotation="up",
    flip="flip_none",
    position=(8064, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rl_A, "resistance"), "Rleft")


# Component: Three-Phase Transformer.Vreg.Auto1.Elapsed Time
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Elapsed Time",
    rotation="left",
    flip="flip_both",
    position=(8512, 8320),
    hide_name=False,
    size=(48, 48)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.Signal switch1
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(8200, 8184),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "threshold"), "0.5")


# Component: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.Unit Delay1
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Unit_Delay1 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Unit Delay1",
    rotation="up",
    flip="flip_horizontal",
    position=(8200, 8240),
    hide_name=True,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.Edge Detection1
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1 = mdl.create_component(
    type_name="core/Edge Detection",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Edge Detection1",
    rotation="right",
    flip="flip_none",
    position=(8200, 8120),
    hide_name=True,
    size=(32, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1, "edge"), "rising")


# Component: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.Sum2
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2 = mdl.create_component(
    type_name="core/Sum",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Sum2",
    rotation="up",
    flip="flip_none",
    position=(8272, 8264),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "signs"), "-+")


# Component: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.Clock1
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Clock1 = mdl.create_component(
    type_name="core/Clock",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    name="Clock1",
    rotation="up",
    flip="flip_none",
    position=(8112, 8168),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Clock1, "execution_rate"), "execution_rate")


# Port: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.In1
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_In1 = mdl.create_port(
    name="In1",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(8112, 8080)
)

# Port: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.Out2
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Out2 = mdl.create_port(
    name="Out2",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(8344, 8264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.Junction30
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30 = mdl.create_junction(
    name="Junction30",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    kind="sp",
    position=(8232, 8240)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Elapsed Time.JL2
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2 = mdl.create_junction(
    name="JL2",
    parent=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time,
    kind="sp",
    position=(8152, 8168)
)

# Component: Three-Phase Transformer.Vreg.Auto1.var_per_tap
_Three_Phase_Transformer_Vreg_Auto1_var_per_tap = mdl.create_component(
    type_name="core/Constant",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="var_per_tap",
    rotation="up",
    flip="flip_none",
    position=(8936, 8328),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_var_per_tap, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_var_per_tap, "value"), "var_per_tap")


# Component: Three-Phase Transformer.Vreg.Auto1.Product1
_Three_Phase_Transformer_Vreg_Auto1_Product1 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product1",
    rotation="up",
    flip="flip_none",
    position=(9040, 8264),
    hide_name=True,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.tap
_Three_Phase_Transformer_Vreg_Auto1_tap = mdl.create_component(
    type_name="core/Probe",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="tap",
    rotation="down",
    flip="flip_both",
    position=(9112, 8184),
    hide_name=False,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.regulator_voltage
_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage = mdl.create_component(
    type_name="core/Constant",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage",
    rotation="up",
    flip="flip_none",
    position=(7848, 8264),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage, "value"), "Vreg")


# Component: Three-Phase Transformer.Vreg.Auto1.regulator_voltage1
_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage1",
    rotation="up",
    flip="flip_none",
    position=(8152, 8304),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage1, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage1, "value"), "band")


# Component: Three-Phase Transformer.Vreg.Auto1.Rina
_Three_Phase_Transformer_Vreg_Auto1_Rina = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rina",
    rotation="right",
    flip="flip_none",
    position=(8016, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rina, "resistance"), "1e10")


# Component: Three-Phase Transformer.Vreg.Auto1.Rinc
_Three_Phase_Transformer_Vreg_Auto1_Rinc = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rinc",
    rotation="right",
    flip="flip_none",
    position=(8040, 9624),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rinc, "resistance"), "1e10")


# Component: Three-Phase Transformer.Vreg.Auto1.Rmida
_Three_Phase_Transformer_Vreg_Auto1_Rmida = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rmida",
    rotation="right",
    flip="flip_none",
    position=(8512, 8720),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rmida, "resistance"), "Rmid")


# Component: Three-Phase Transformer.Vreg.Auto1.Rmidb
_Three_Phase_Transformer_Vreg_Auto1_Rmidb = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rmidb",
    rotation="right",
    flip="flip_none",
    position=(8512, 9200),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rmidb, "resistance"), "Rmid")


# Component: Three-Phase Transformer.Vreg.Auto1.Rmidc
_Three_Phase_Transformer_Vreg_Auto1_Rmidc = mdl.create_component(
    type_name="core/Resistor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Rmidc",
    rotation="right",
    flip="flip_none",
    position=(8512, 9624),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Rmidc, "resistance"), "Rmid")


# Component: Three-Phase Transformer.Vreg.Auto1.Termination1
_Three_Phase_Transformer_Vreg_Auto1_Termination1 = mdl.create_component(
    type_name="core/Termination",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Termination1",
    rotation="up",
    flip="flip_none",
    position=(7880, 8328),
    hide_name=True,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Lr_A
_Three_Phase_Transformer_Vreg_Auto1_Lr_A = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Lr_A",
    rotation="up",
    flip="flip_none",
    position=(8896, 8656),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Lr_A, "inductance"), "Lright")


# Component: Three-Phase Transformer.Vreg.Auto1.Gain1
_Three_Phase_Transformer_Vreg_Auto1_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(8216, 8304),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Gain1, "gain"), "0.5")


# Component: Three-Phase Transformer.Vreg.Auto1.VSum
_Three_Phase_Transformer_Vreg_Auto1_VSum = mdl.create_component(
    type_name="core/Sum",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="VSum",
    rotation="up",
    flip="flip_none",
    position=(7960, 8248),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VSum, "signs"), "-+")


# Component: Three-Phase Transformer.Vreg.Auto1.Abs1
_Three_Phase_Transformer_Vreg_Auto1_Abs1 = mdl.create_component(
    type_name="core/Abs",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Abs1",
    rotation="up",
    flip="flip_none",
    position=(8032, 8248),
    hide_name=True,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Sign1
_Three_Phase_Transformer_Vreg_Auto1_Sign1 = mdl.create_component(
    type_name="core/Sign",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Sign1",
    rotation="up",
    flip="flip_none",
    position=(8032, 8208),
    hide_name=True,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.regulator_voltage2
_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage2 = mdl.create_component(
    type_name="core/Constant",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage2",
    rotation="up",
    flip="flip_none",
    position=(8480, 8376),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage2, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage2, "value"), "Td")


# Component: Three-Phase Transformer.Vreg.Auto1.Relational operator2
_Three_Phase_Transformer_Vreg_Auto1_Relational_operator2 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Relational operator2",
    rotation="up",
    flip="flip_none",
    position=(8560, 8368),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator2, "relational_op"), ">")


# Component: Three-Phase Transformer.Vreg.Auto1.Logical operator1
_Three_Phase_Transformer_Vreg_Auto1_Logical_operator1 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Logical operator1",
    rotation="up",
    flip="flip_none",
    position=(8672, 8288),
    hide_name=True,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Edge Detection3
_Three_Phase_Transformer_Vreg_Auto1_Edge_Detection3 = mdl.create_component(
    type_name="core/Edge Detection",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Edge Detection3",
    rotation="up",
    flip="flip_horizontal",
    position=(8816, 8408),
    hide_name=True,
    size=(32, 32)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Logical operator2
_Three_Phase_Transformer_Vreg_Auto1_Logical_operator2 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Logical operator2",
    rotation="up",
    flip="flip_none",
    position=(8448, 8280),
    hide_name=True,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Logical operator3
_Three_Phase_Transformer_Vreg_Auto1_Logical_operator3 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Logical operator3",
    rotation="up",
    flip="flip_horizontal",
    position=(8728, 8408),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator3, "operator"), "NOT")


# Component: Three-Phase Transformer.Vreg.Auto1.Product2
_Three_Phase_Transformer_Vreg_Auto1_Product2 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product2",
    rotation="up",
    flip="flip_none",
    position=(8752, 8256),
    hide_name=True,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.VLoad_A
_Three_Phase_Transformer_Vreg_Auto1_VLoad_A = mdl.create_component(
    type_name="core/Voltage RMS",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="VLoad_A",
    rotation="right",
    flip="flip_none",
    position=(9456, 8696),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VLoad_A, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VLoad_A, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.ILrms_A
_Three_Phase_Transformer_Vreg_Auto1_ILrms_A = mdl.create_component(
    type_name="core/Current RMS",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="ILrms_A",
    rotation="up",
    flip="flip_none",
    position=(9160, 8656),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_ILrms_A, "execution_rate"), "execution_rate")


# Component: Three-Phase Transformer.Vreg.Auto1.ABcomp
_Three_Phase_Transformer_Vreg_Auto1_ABcomp = mdl.create_component(
    type_name="core/Gain",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="ABcomp",
    rotation="down",
    flip="flip_horizontal",
    position=(8448, 8216),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_ABcomp, "gain"), "ABcomp")


# Component: Three-Phase Transformer.Vreg.Auto1.Tap Position
_Three_Phase_Transformer_Vreg_Auto1_Tap_Position = mdl.create_component(
    type_name="core/Accumulator",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Tap Position",
    rotation="up",
    flip="flip_none",
    position=(8832, 8256),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Tap_Position, "limit_lower"), "-min_n_tap")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Tap_Position, "limit_output"), "True")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Tap_Position, "limit_upper"), "max_n_tap")


# Component: Three-Phase Transformer.Vreg.Auto1.Vprim_A
_Three_Phase_Transformer_Vreg_Auto1_Vprim_A = mdl.create_component(
    type_name="core/el_voltage_msr",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Vprim_A",
    rotation="right",
    flip="flip_none",
    position=(8368, 8720),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Vprim_A, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Vprim_A, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.Gain4
_Three_Phase_Transformer_Vreg_Auto1_Gain4 = mdl.create_component(
    type_name="core/Gain",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Gain4",
    rotation="up",
    flip="flip_none",
    position=(7880, 8232),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Gain4, "gain"), "1/ptratio_auto")


# Component: Three-Phase Transformer.Vreg.Auto1.Vsec_ins_A
_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_A = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Vsec_ins_A",
    rotation="up",
    flip="flip_horizontal",
    position=(8704, 8656),
    hide_name=False,
    size=(64, 32)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Isp_A
_Three_Phase_Transformer_Vreg_Auto1_Isp_A = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Isp_A",
    rotation="left",
    flip="flip_none",
    position=(8632, 8720),
    hide_name=False,
    size=(64, 32)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Product11
_Three_Phase_Transformer_Vreg_Auto1_Product11 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product11",
    rotation="up",
    flip="flip_none",
    position=(8312, 8872),
    hide_name=False,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.Product10
_Three_Phase_Transformer_Vreg_Auto1_Product10 = mdl.create_component(
    type_name="core/Product",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Product10",
    rotation="up",
    flip="flip_none",
    position=(8312, 8968),
    hide_name=False,
    size=(0, 0)
)


# Component: Three-Phase Transformer.Vreg.Auto1.per_tap
_Three_Phase_Transformer_Vreg_Auto1_per_tap = mdl.create_component(
    type_name="core/Probe",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="per_tap",
    rotation="down",
    flip="flip_both",
    position=(9040, 8328),
    hide_name=False,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.pu_applied
_Three_Phase_Transformer_Vreg_Auto1_pu_applied = mdl.create_component(
    type_name="core/Probe",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="pu_applied",
    rotation="down",
    flip="flip_both",
    position=(9344, 8192),
    hide_name=False,
    size=(None, None)
)


# Component: Three-Phase Transformer.Vreg.Auto1.VSum1
_Three_Phase_Transformer_Vreg_Auto1_VSum1 = mdl.create_component(
    type_name="core/Sum",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="VSum1",
    rotation="up",
    flip="flip_none",
    position=(9256, 8192),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VSum1, "signs"), "++")


# Component: Three-Phase Transformer.Vreg.Auto1.regulator_voltage3
_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage3 = mdl.create_component(
    type_name="core/Constant",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage3",
    rotation="up",
    flip="flip_none",
    position=(9168, 8184),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage3, "execution_rate"), "execution_rate")


# Component: Three-Phase Transformer.Vreg.Auto1.VSum2
_Three_Phase_Transformer_Vreg_Auto1_VSum2 = mdl.create_component(
    type_name="core/Sum",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="VSum2",
    rotation="up",
    flip="flip_none",
    position=(9040, 8184),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_VSum2, "signs"), "-+")


# Component: Three-Phase Transformer.Vreg.Auto1.regulator_voltage4
_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage4 = mdl.create_component(
    type_name="core/Constant",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="regulator_voltage4",
    rotation="up",
    flip="flip_none",
    position=(8936, 8176),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage4, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage4, "value"), "tap_difference")


# Component: Three-Phase Transformer.Vreg.Auto1.Isec_B
_Three_Phase_Transformer_Vreg_Auto1_Isec_B = mdl.create_component(
    type_name="core/el_current_msr",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Isec_B",
    rotation="up",
    flip="flip_none",
    position=(9264, 9136),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Isec_B, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Isec_B, "sig_output"), "True")


# Component: Three-Phase Transformer.Vreg.Auto1.Lr_B
_Three_Phase_Transformer_Vreg_Auto1_Lr_B = mdl.create_component(
    type_name="core/Inductor",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    name="Lr_B",
    rotation="up",
    flip="flip_none",
    position=(8904, 9136),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_Vreg_Auto1_Lr_B, "inductance"), "Lright")


# Port: Three-Phase Transformer.Vreg.Auto1.P1
_Three_Phase_Transformer_Vreg_Auto1_P1 = mdl.create_port(
    name="P1",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-128.0, -120.0),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(7776, 8656)
)

# Port: Three-Phase Transformer.Vreg.Auto1.P2
_Three_Phase_Transformer_Vreg_Auto1_P2 = mdl.create_port(
    name="P2",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-128.0, -72.0),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(7776, 8784)
)

# Port: Three-Phase Transformer.Vreg.Auto1.S1
_Three_Phase_Transformer_Vreg_Auto1_S1 = mdl.create_port(
    name="S1",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(128.0, -120.0),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9616, 8656)
)

# Port: Three-Phase Transformer.Vreg.Auto1.S2
_Three_Phase_Transformer_Vreg_Auto1_S2 = mdl.create_port(
    name="S2",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(128.0, -72.0),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9616, 8784)
)

# Port: Three-Phase Transformer.Vreg.Auto1.P3
_Three_Phase_Transformer_Vreg_Auto1_P3 = mdl.create_port(
    name="P3",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-128.0, -24.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7776, 9136)
)

# Port: Three-Phase Transformer.Vreg.Auto1.S3
_Three_Phase_Transformer_Vreg_Auto1_S3 = mdl.create_port(
    name="S3",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(128.0, -24.0),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9584, 9136)
)

# Port: Three-Phase Transformer.Vreg.Auto1.P5
_Three_Phase_Transformer_Vreg_Auto1_P5 = mdl.create_port(
    name="P5",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-128.0, 72.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7752, 9560)
)

# Port: Three-Phase Transformer.Vreg.Auto1.S5
_Three_Phase_Transformer_Vreg_Auto1_S5 = mdl.create_port(
    name="S5",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(128.0, 72.0),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9584, 9560)
)

# Port: Three-Phase Transformer.Vreg.Auto1.P6
_Three_Phase_Transformer_Vreg_Auto1_P6 = mdl.create_port(
    name="P6",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-128.0, 24.0),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(7776, 9264)
)

# Port: Three-Phase Transformer.Vreg.Auto1.P7
_Three_Phase_Transformer_Vreg_Auto1_P7 = mdl.create_port(
    name="P7",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-128.0, 120.0),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(7752, 9688)
)

# Port: Three-Phase Transformer.Vreg.Auto1.S6
_Three_Phase_Transformer_Vreg_Auto1_S6 = mdl.create_port(
    name="S6",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(128.0, 24.0),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9584, 9264)
)

# Port: Three-Phase Transformer.Vreg.Auto1.S7
_Three_Phase_Transformer_Vreg_Auto1_S7 = mdl.create_port(
    name="S7",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(128.0, 120.0),
    rotation="down",
    flip="flip_none",
    hide_name=True,
    position=(9584, 9688)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto16
_Three_Phase_Transformer_Vreg_Auto1_Goto16 = mdl.create_tag(
    value="Iinst_B",
    name="Goto16",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9312, 9104)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag9
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag9 = mdl.create_tag(
    value="S1b",
    name="Electric Tag9",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7912, 9136)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag10
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag10 = mdl.create_tag(
    value="S2b",
    name="Electric Tag10",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7912, 9264)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET11b
_Three_Phase_Transformer_Vreg_Auto1_ET11b = mdl.create_tag(
    value="S1b",
    name="ET11b",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7984, 9136)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET12b
_Three_Phase_Transformer_Vreg_Auto1_ET12b = mdl.create_tag(
    value="S2b",
    name="ET12b",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7984, 9264)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET21b
_Three_Phase_Transformer_Vreg_Auto1_ET21b = mdl.create_tag(
    value="L1b",
    name="ET21b",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9000, 9136)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET22b
_Three_Phase_Transformer_Vreg_Auto1_ET22b = mdl.create_tag(
    value="L2b",
    name="ET22b",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9000, 9264)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag11
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag11 = mdl.create_tag(
    value="L1b",
    name="Electric Tag11",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9072, 9136)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag12
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag12 = mdl.create_tag(
    value="L2b",
    name="Electric Tag12",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9072, 9264)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto18
_Three_Phase_Transformer_Vreg_Auto1_Goto18 = mdl.create_tag(
    value="Vprim_B",
    name="Goto18",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8448, 9200)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From15
_Three_Phase_Transformer_Vreg_Auto1_From15 = mdl.create_tag(
    value="Iprim_B",
    name="From15",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8576, 9200)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From16
_Three_Phase_Transformer_Vreg_Auto1_From16 = mdl.create_tag(
    value="Vsec_B",
    name="From16",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8648, 9080)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto21
_Three_Phase_Transformer_Vreg_Auto1_Goto21 = mdl.create_tag(
    value="Iinst_C",
    name="Goto21",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9320, 9528)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag13
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag13 = mdl.create_tag(
    value="S1c",
    name="Electric Tag13",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7920, 9560)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag14
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag14 = mdl.create_tag(
    value="S2c",
    name="Electric Tag14",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7920, 9688)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET11c
_Three_Phase_Transformer_Vreg_Auto1_ET11c = mdl.create_tag(
    value="S1c",
    name="ET11c",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7992, 9560)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET12c
_Three_Phase_Transformer_Vreg_Auto1_ET12c = mdl.create_tag(
    value="S2c",
    name="ET12c",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7992, 9688)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET21c
_Three_Phase_Transformer_Vreg_Auto1_ET21c = mdl.create_tag(
    value="L1c",
    name="ET21c",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9008, 9560)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET22c
_Three_Phase_Transformer_Vreg_Auto1_ET22c = mdl.create_tag(
    value="L2c",
    name="ET22c",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9008, 9688)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag15
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag15 = mdl.create_tag(
    value="L1c",
    name="Electric Tag15",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9080, 9560)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag16
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag16 = mdl.create_tag(
    value="L2c",
    name="Electric Tag16",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9080, 9688)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto23
_Three_Phase_Transformer_Vreg_Auto1_Goto23 = mdl.create_tag(
    value="Vprim_C",
    name="Goto23",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8456, 9624)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From17
_Three_Phase_Transformer_Vreg_Auto1_From17 = mdl.create_tag(
    value="Iprim_C",
    name="From17",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8584, 9624)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From18
_Three_Phase_Transformer_Vreg_Auto1_From18 = mdl.create_tag(
    value="Vsec_C",
    name="From18",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8656, 9528)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From19
_Three_Phase_Transformer_Vreg_Auto1_From19 = mdl.create_tag(
    value="ratio",
    name="From19",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 9288)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From20
_Three_Phase_Transformer_Vreg_Auto1_From20 = mdl.create_tag(
    value="Iinst_B",
    name="From20",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 9448)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From21
_Three_Phase_Transformer_Vreg_Auto1_From21 = mdl.create_tag(
    value="Vprim_B",
    name="From21",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 9352)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto24
_Three_Phase_Transformer_Vreg_Auto1_Goto24 = mdl.create_tag(
    value="Vsec_B",
    name="Goto24",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 9344)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto25
_Three_Phase_Transformer_Vreg_Auto1_Goto25 = mdl.create_tag(
    value="Iprim_B",
    name="Goto25",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 9440)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From22
_Three_Phase_Transformer_Vreg_Auto1_From22 = mdl.create_tag(
    value="ratio",
    name="From22",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 9728)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From23
_Three_Phase_Transformer_Vreg_Auto1_From23 = mdl.create_tag(
    value="Iinst_C",
    name="From23",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 9888)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From24
_Three_Phase_Transformer_Vreg_Auto1_From24 = mdl.create_tag(
    value="Vprim_C",
    name="From24",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 9792)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto26
_Three_Phase_Transformer_Vreg_Auto1_Goto26 = mdl.create_tag(
    value="Vsec_C",
    name="Goto26",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 9784)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto27
_Three_Phase_Transformer_Vreg_Auto1_Goto27 = mdl.create_tag(
    value="Iprim_C",
    name="Goto27",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 9880)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto28
_Three_Phase_Transformer_Vreg_Auto1_Goto28 = mdl.create_tag(
    value="VLoad_ab",
    name="Goto28",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9608, 8936)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.FromVLDC_unused
_Three_Phase_Transformer_Vreg_Auto1_FromVLDC_unused = mdl.create_tag(
    value="VLoad_ab",
    name="FromVLDC_unused",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7792, 8328)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto2
_Three_Phase_Transformer_Vreg_Auto1_Goto2 = mdl.create_tag(
    value="ratio",
    name="Goto2",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9272, 8264)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto3
_Three_Phase_Transformer_Vreg_Auto1_Goto3 = mdl.create_tag(
    value="VLoad_a",
    name="Goto3",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="right",
    flip="flip_none",
    position=(9488, 8744)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto6
_Three_Phase_Transformer_Vreg_Auto1_Goto6 = mdl.create_tag(
    value="Iinst_A",
    name="Goto6",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9304, 8624)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag1
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag1 = mdl.create_tag(
    value="S1a",
    name="Electric Tag1",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7896, 8656)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag2
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag2 = mdl.create_tag(
    value="S2a",
    name="Electric Tag2",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7896, 8784)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET11a
_Three_Phase_Transformer_Vreg_Auto1_ET11a = mdl.create_tag(
    value="S1a",
    name="ET11a",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7968, 8656)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET12a
_Three_Phase_Transformer_Vreg_Auto1_ET12a = mdl.create_tag(
    value="S2a",
    name="ET12a",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7968, 8784)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET21a
_Three_Phase_Transformer_Vreg_Auto1_ET21a = mdl.create_tag(
    value="L1a",
    name="ET21a",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8992, 8656)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.ET22a
_Three_Phase_Transformer_Vreg_Auto1_ET22a = mdl.create_tag(
    value="L2a",
    name="ET22a",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8992, 8784)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag7
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag7 = mdl.create_tag(
    value="L1a",
    name="Electric Tag7",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9064, 8656)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Electric Tag8
_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag8 = mdl.create_tag(
    value="L2a",
    name="Electric Tag8",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9064, 8784)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.FromVLDC
_Three_Phase_Transformer_Vreg_Auto1_FromVLDC = mdl.create_tag(
    value="VLoad_a",
    name="FromVLDC",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7792, 8232)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From1
_Three_Phase_Transformer_Vreg_Auto1_From1 = mdl.create_tag(
    value="ratio",
    name="From1",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 8816)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto11
_Three_Phase_Transformer_Vreg_Auto1_Goto11 = mdl.create_tag(
    value="Vprim_A",
    name="Goto11",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8432, 8720)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From11
_Three_Phase_Transformer_Vreg_Auto1_From11 = mdl.create_tag(
    value="Iinst_A",
    name="From11",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 8976)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From12
_Three_Phase_Transformer_Vreg_Auto1_From12 = mdl.create_tag(
    value="Vprim_A",
    name="From12",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8176, 8880)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From13
_Three_Phase_Transformer_Vreg_Auto1_From13 = mdl.create_tag(
    value="Iprim_A",
    name="From13",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8568, 8720)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto12
_Three_Phase_Transformer_Vreg_Auto1_Goto12 = mdl.create_tag(
    value="Vsec_A",
    name="Goto12",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 8872)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.Goto13
_Three_Phase_Transformer_Vreg_Auto1_Goto13 = mdl.create_tag(
    value="Iprim_A",
    name="Goto13",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 8968)
)

# Tag: Three-Phase Transformer.Vreg.Auto1.From14
_Three_Phase_Transformer_Vreg_Auto1_From14 = mdl.create_tag(
    value="Vsec_A",
    name="From14",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8640, 8600)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction8
_Three_Phase_Transformer_Vreg_Auto1_Junction8 = mdl.create_junction(
    name="Junction8",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8680)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction10
_Three_Phase_Transformer_Vreg_Auto1_Junction10 = mdl.create_junction(
    name="Junction10",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8760)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction11
_Three_Phase_Transformer_Vreg_Auto1_Junction11 = mdl.create_junction(
    name="Junction11",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8656)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction42
_Three_Phase_Transformer_Vreg_Auto1_Junction42 = mdl.create_junction(
    name="Junction42",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8000, 8248)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction43
_Three_Phase_Transformer_Vreg_Auto1_Junction43 = mdl.create_junction(
    name="Junction43",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8512, 8280)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.JL2
_Three_Phase_Transformer_Vreg_Auto1_JL2 = mdl.create_junction(
    name="JL2",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9456, 8784)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.JL1
_Three_Phase_Transformer_Vreg_Auto1_JL1 = mdl.create_junction(
    name="JL1",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9456, 8656)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction53
_Three_Phase_Transformer_Vreg_Auto1_Junction53 = mdl.create_junction(
    name="Junction53",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8256, 8784)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction55
_Three_Phase_Transformer_Vreg_Auto1_Junction55 = mdl.create_junction(
    name="Junction55",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8632, 8784)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction60
_Three_Phase_Transformer_Vreg_Auto1_Junction60 = mdl.create_junction(
    name="Junction60",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8368, 8656)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction61
_Three_Phase_Transformer_Vreg_Auto1_Junction61 = mdl.create_junction(
    name="Junction61",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8368, 8784)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction63
_Three_Phase_Transformer_Vreg_Auto1_Junction63 = mdl.create_junction(
    name="Junction63",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8632, 8656)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction64
_Three_Phase_Transformer_Vreg_Auto1_Junction64 = mdl.create_junction(
    name="Junction64",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8248, 8864)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction65
_Three_Phase_Transformer_Vreg_Auto1_Junction65 = mdl.create_junction(
    name="Junction65",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(9000, 8328)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction66
_Three_Phase_Transformer_Vreg_Auto1_Junction66 = mdl.create_junction(
    name="Junction66",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(9200, 8264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction67
_Three_Phase_Transformer_Vreg_Auto1_Junction67 = mdl.create_junction(
    name="Junction67",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8896, 8256)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction68
_Three_Phase_Transformer_Vreg_Auto1_Junction68 = mdl.create_junction(
    name="Junction68",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8984, 8256)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction69
_Three_Phase_Transformer_Vreg_Auto1_Junction69 = mdl.create_junction(
    name="Junction69",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8272, 9160)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction70
_Three_Phase_Transformer_Vreg_Auto1_Junction70 = mdl.create_junction(
    name="Junction70",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8272, 9240)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction71
_Three_Phase_Transformer_Vreg_Auto1_Junction71 = mdl.create_junction(
    name="Junction71",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8272, 9136)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.JL4
_Three_Phase_Transformer_Vreg_Auto1_JL4 = mdl.create_junction(
    name="JL4",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9464, 9136)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction73
_Three_Phase_Transformer_Vreg_Auto1_Junction73 = mdl.create_junction(
    name="Junction73",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8272, 9264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction75
_Three_Phase_Transformer_Vreg_Auto1_Junction75 = mdl.create_junction(
    name="Junction75",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8640, 9264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction78
_Three_Phase_Transformer_Vreg_Auto1_Junction78 = mdl.create_junction(
    name="Junction78",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8384, 9136)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction79
_Three_Phase_Transformer_Vreg_Auto1_Junction79 = mdl.create_junction(
    name="Junction79",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8384, 9264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction80
_Three_Phase_Transformer_Vreg_Auto1_Junction80 = mdl.create_junction(
    name="Junction80",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8640, 9136)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction81
_Three_Phase_Transformer_Vreg_Auto1_Junction81 = mdl.create_junction(
    name="Junction81",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8280, 9584)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction82
_Three_Phase_Transformer_Vreg_Auto1_Junction82 = mdl.create_junction(
    name="Junction82",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8280, 9664)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction83
_Three_Phase_Transformer_Vreg_Auto1_Junction83 = mdl.create_junction(
    name="Junction83",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8280, 9560)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.JL6
_Three_Phase_Transformer_Vreg_Auto1_JL6 = mdl.create_junction(
    name="JL6",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9472, 9560)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction85
_Three_Phase_Transformer_Vreg_Auto1_Junction85 = mdl.create_junction(
    name="Junction85",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8280, 9688)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction87
_Three_Phase_Transformer_Vreg_Auto1_Junction87 = mdl.create_junction(
    name="Junction87",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8648, 9688)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction90
_Three_Phase_Transformer_Vreg_Auto1_Junction90 = mdl.create_junction(
    name="Junction90",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8392, 9560)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction91
_Three_Phase_Transformer_Vreg_Auto1_Junction91 = mdl.create_junction(
    name="Junction91",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8392, 9688)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction92
_Three_Phase_Transformer_Vreg_Auto1_Junction92 = mdl.create_junction(
    name="Junction92",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8648, 9560)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction93
_Three_Phase_Transformer_Vreg_Auto1_Junction93 = mdl.create_junction(
    name="Junction93",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8248, 9336)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction94
_Three_Phase_Transformer_Vreg_Auto1_Junction94 = mdl.create_junction(
    name="Junction94",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8248, 9776)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction101
_Three_Phase_Transformer_Vreg_Auto1_Junction101 = mdl.create_junction(
    name="Junction101",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="sp",
    position=(8152, 8248)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction102
_Three_Phase_Transformer_Vreg_Auto1_Junction102 = mdl.create_junction(
    name="Junction102",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9464, 9264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction103
_Three_Phase_Transformer_Vreg_Auto1_Junction103 = mdl.create_junction(
    name="Junction103",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9472, 9688)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction104
_Three_Phase_Transformer_Vreg_Auto1_Junction104 = mdl.create_junction(
    name="Junction104",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9528, 9136)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction105
_Three_Phase_Transformer_Vreg_Auto1_Junction105 = mdl.create_junction(
    name="Junction105",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(9528, 8656)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction106
_Three_Phase_Transformer_Vreg_Auto1_Junction106 = mdl.create_junction(
    name="Junction106",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8032, 9136)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction107
_Three_Phase_Transformer_Vreg_Auto1_Junction107 = mdl.create_junction(
    name="Junction107",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8032, 9264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction108
_Three_Phase_Transformer_Vreg_Auto1_Junction108 = mdl.create_junction(
    name="Junction108",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8016, 8656)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction109
_Three_Phase_Transformer_Vreg_Auto1_Junction109 = mdl.create_junction(
    name="Junction109",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8016, 8784)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction110
_Three_Phase_Transformer_Vreg_Auto1_Junction110 = mdl.create_junction(
    name="Junction110",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8040, 9560)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction111
_Three_Phase_Transformer_Vreg_Auto1_Junction111 = mdl.create_junction(
    name="Junction111",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8040, 9688)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction112
_Three_Phase_Transformer_Vreg_Auto1_Junction112 = mdl.create_junction(
    name="Junction112",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 8656)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction113
_Three_Phase_Transformer_Vreg_Auto1_Junction113 = mdl.create_junction(
    name="Junction113",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 8784)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction114
_Three_Phase_Transformer_Vreg_Auto1_Junction114 = mdl.create_junction(
    name="Junction114",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 9136)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction115
_Three_Phase_Transformer_Vreg_Auto1_Junction115 = mdl.create_junction(
    name="Junction115",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 9264)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction116
_Three_Phase_Transformer_Vreg_Auto1_Junction116 = mdl.create_junction(
    name="Junction116",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 9560)
)

# Junction: Three-Phase Transformer.Vreg.Auto1.Junction117
_Three_Phase_Transformer_Vreg_Auto1_Junction117 = mdl.create_junction(
    name="Junction117",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    kind="pe",
    position=(8512, 9688)
)

# Comment: Three-Phase Transformer.Vreg.Auto1.Comment2
_Three_Phase_Transformer_Vreg_Auto1_Comment2 = mdl.create_comment(
    text="<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\"><html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\" font-family:\'Arial\'; font-size:12pt; font-weight:400; font-style:normal;\"><p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Tap changer control</p></body></html> ",
    parent=_Three_Phase_Transformer_Vreg_Auto1,
    position=(8488, 8168)
)

# Port: Three-Phase Transformer.Vreg.RegB1
_Three_Phase_Transformer_Vreg_RegB1 = mdl.create_port(
    name="RegB1",
    parent=_Three_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7496, 8008)
)

# Port: Three-Phase Transformer.Vreg.RegA2
_Three_Phase_Transformer_Vreg_RegA2 = mdl.create_port(
    name="RegA2",
    parent=_Three_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8800, 7888)
)

# Port: Three-Phase Transformer.Vreg.RegC2
_Three_Phase_Transformer_Vreg_RegC2 = mdl.create_port(
    name="RegC2",
    parent=_Three_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 3),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8800, 8240)
)

# Port: Three-Phase Transformer.Vreg.RegA1
_Three_Phase_Transformer_Vreg_RegA1 = mdl.create_port(
    name="RegA1",
    parent=_Three_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7496, 7912)
)

# Port: Three-Phase Transformer.Vreg.RegB2
_Three_Phase_Transformer_Vreg_RegB2 = mdl.create_port(
    name="RegB2",
    parent=_Three_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8800, 8056)
)

# Port: Three-Phase Transformer.Vreg.RegN
_Three_Phase_Transformer_Vreg_RegN = mdl.create_port(
    name="RegN",
    parent=_Three_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 4),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7496, 8208)
)

# Port: Three-Phase Transformer.Vreg.RegC1
_Three_Phase_Transformer_Vreg_RegC1 = mdl.create_port(
    name="RegC1",
    parent=_Three_Phase_Transformer_Vreg,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=('left', 3),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7496, 8104)
)

# Tag: Three-Phase Transformer.Vreg.TagRegC1
_Three_Phase_Transformer_Vreg_TagRegC1 = mdl.create_tag(
    value="C1",
    name="TagRegC1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7600, 8104)
)

# Tag: Three-Phase Transformer.Vreg.TagRegN1
_Three_Phase_Transformer_Vreg_TagRegN1 = mdl.create_tag(
    value="N",
    name="TagRegN1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7600, 8208)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto1A1
_Three_Phase_Transformer_Vreg_TagAuto1A1 = mdl.create_tag(
    value="A1",
    name="TagAuto1A1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7896, 7936)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto1B1
_Three_Phase_Transformer_Vreg_TagAuto1B1 = mdl.create_tag(
    value="N",
    name="TagAuto1B1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7896, 7984)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto2A1
_Three_Phase_Transformer_Vreg_TagAuto2A1 = mdl.create_tag(
    value="B1",
    name="TagAuto2A1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7896, 8032)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto3A1
_Three_Phase_Transformer_Vreg_TagAuto3A1 = mdl.create_tag(
    value="C1",
    name="TagAuto3A1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7896, 8128)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto2A2
_Three_Phase_Transformer_Vreg_TagAuto2A2 = mdl.create_tag(
    value="B2",
    name="TagAuto2A2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8400, 8032)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto1A2
_Three_Phase_Transformer_Vreg_TagAuto1A2 = mdl.create_tag(
    value="A2",
    name="TagAuto1A2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8400, 7936)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto1B2
_Three_Phase_Transformer_Vreg_TagAuto1B2 = mdl.create_tag(
    value="N2",
    name="TagAuto1B2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8400, 7984)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto3A2
_Three_Phase_Transformer_Vreg_TagAuto3A2 = mdl.create_tag(
    value="C2",
    name="TagAuto3A2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8400, 8128)
)

# Tag: Three-Phase Transformer.Vreg.TagRegA2
_Three_Phase_Transformer_Vreg_TagRegA2 = mdl.create_tag(
    value="A2",
    name="TagRegA2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8696, 7888)
)

# Tag: Three-Phase Transformer.Vreg.TagRegB2
_Three_Phase_Transformer_Vreg_TagRegB2 = mdl.create_tag(
    value="B2",
    name="TagRegB2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8696, 8056)
)

# Tag: Three-Phase Transformer.Vreg.TagRegC2
_Three_Phase_Transformer_Vreg_TagRegC2 = mdl.create_tag(
    value="C2",
    name="TagRegC2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8696, 8240)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto2B2
_Three_Phase_Transformer_Vreg_TagAuto2B2 = mdl.create_tag(
    value="B2",
    name="TagAuto2B2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8400, 8080)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto3B2
_Three_Phase_Transformer_Vreg_TagAuto3B2 = mdl.create_tag(
    value="C2",
    name="TagAuto3B2",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8400, 8176)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto3B1
_Three_Phase_Transformer_Vreg_TagAuto3B1 = mdl.create_tag(
    value="C2",
    name="TagAuto3B1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7896, 8176)
)

# Tag: Three-Phase Transformer.Vreg.TagAuto2B1
_Three_Phase_Transformer_Vreg_TagAuto2B1 = mdl.create_tag(
    value="B1",
    name="TagAuto2B1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(7896, 8080)
)

# Tag: Three-Phase Transformer.Vreg.TagRegA1
_Three_Phase_Transformer_Vreg_TagRegA1 = mdl.create_tag(
    value="A1",
    name="TagRegA1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7600, 7912)
)

# Tag: Three-Phase Transformer.Vreg.TagRegB1
_Three_Phase_Transformer_Vreg_TagRegB1 = mdl.create_tag(
    value="B1",
    name="TagRegB1",
    parent=_Three_Phase_Transformer_Vreg,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(7600, 8008)
)

# Component: Three-Phase Transformer.T1
_Three_Phase_Transformer_T1 = mdl.create_component(
    type_name="core/Three Phase Two Winding Transformer",
    parent=_Three_Phase_Transformer,
    name="T1",
    rotation="up",
    flip="flip_none",
    position=(8448, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Three_Phase_Transformer_T1, "input"), "SI")


# Port: Three-Phase Transformer.A1
_Three_Phase_Transformer_A1 = mdl.create_port(
    name="A1",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, -32.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8056, 8088)
)

# Port: Three-Phase Transformer.B1
_Three_Phase_Transformer_B1 = mdl.create_port(
    name="B1",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, 0.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8056, 8160)
)

# Port: Three-Phase Transformer.C1
_Three_Phase_Transformer_C1 = mdl.create_port(
    name="C1",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, 32.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8056, 8232)
)

# Port: Three-Phase Transformer.A2
_Three_Phase_Transformer_A2 = mdl.create_port(
    name="A2",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(32, -32),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(9376, 8144)
)

# Port: Three-Phase Transformer.B2
_Three_Phase_Transformer_B2 = mdl.create_port(
    name="B2",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(32, 0),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(9376, 8240)
)

# Port: Three-Phase Transformer.C2
_Three_Phase_Transformer_C2 = mdl.create_port(
    name="C2",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(32, 32),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(9376, 8336)
)

# Port: Three-Phase Transformer.N1
_Three_Phase_Transformer_N1 = mdl.create_port(
    name="N1",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(-24, 48),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8224, 8496)
)

# Port: Three-Phase Transformer.N2
_Three_Phase_Transformer_N2 = mdl.create_port(
    name="N2",
    parent=_Three_Phase_Transformer,
    label="",
    kind="pe",
    direction="out",
    dimension=(1,),
    terminal_position=(24, 48),
    rotation="up",
    flip="flip_horizontal",
    hide_name=False,
    position=(8496, 8496)
)

# Tag: Three-Phase Transformer.TagA1
_Three_Phase_Transformer_TagA1 = mdl.create_tag(
    value="TA_1",
    name="TagA1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8136, 8088)
)

# Tag: Three-Phase Transformer.TagB1
_Three_Phase_Transformer_TagB1 = mdl.create_tag(
    value="TB_1",
    name="TagB1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8136, 8160)
)

# Tag: Three-Phase Transformer.TagC1
_Three_Phase_Transformer_TagC1 = mdl.create_tag(
    value="TC_1",
    name="TagC1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8136, 8232)
)

# Tag: Three-Phase Transformer.TagRegA1
_Three_Phase_Transformer_TagRegA1 = mdl.create_tag(
    value="not_used",
    name="TagRegA1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8800, 8088)
)

# Tag: Three-Phase Transformer.TagRegB1
_Three_Phase_Transformer_TagRegB1 = mdl.create_tag(
    value="not_used",
    name="TagRegB1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8800, 8184)
)

# Tag: Three-Phase Transformer.TagRegC1
_Three_Phase_Transformer_TagRegC1 = mdl.create_tag(
    value="not_used",
    name="TagRegC1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8800, 8280)
)

# Tag: Three-Phase Transformer.Reg_N1
_Three_Phase_Transformer_Reg_N1 = mdl.create_tag(
    value="T_N2",
    name="Reg_N1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8800, 8376)
)

# Tag: Three-Phase Transformer.TagRegA2
_Three_Phase_Transformer_TagRegA2 = mdl.create_tag(
    value="not_used",
    name="TagRegA2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9120, 8088)
)

# Tag: Three-Phase Transformer.TagRegB2
_Three_Phase_Transformer_TagRegB2 = mdl.create_tag(
    value="not_used",
    name="TagRegB2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9120, 8232)
)

# Tag: Three-Phase Transformer.TagRegC2
_Three_Phase_Transformer_TagRegC2 = mdl.create_tag(
    value="not_used",
    name="TagRegC2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(9120, 8376)
)

# Tag: Three-Phase Transformer.TagTA1
_Three_Phase_Transformer_TagTA1 = mdl.create_tag(
    value="TA_1",
    name="TagTA1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8256, 8096)
)

# Tag: Three-Phase Transformer.TagTB1
_Three_Phase_Transformer_TagTB1 = mdl.create_tag(
    value="TB_1",
    name="TagTB1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8256, 8192)
)

# Tag: Three-Phase Transformer.TagTC1
_Three_Phase_Transformer_TagTC1 = mdl.create_tag(
    value="TC_1",
    name="TagTC1",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(8256, 8288)
)

# Tag: Three-Phase Transformer.TagTA2
_Three_Phase_Transformer_TagTA2 = mdl.create_tag(
    value="TA_2",
    name="TagTA2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8600, 8096)
)

# Tag: Three-Phase Transformer.TagTB2
_Three_Phase_Transformer_TagTB2 = mdl.create_tag(
    value="TB_2",
    name="TagTB2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8600, 8192)
)

# Tag: Three-Phase Transformer.TagTC2
_Three_Phase_Transformer_TagTC2 = mdl.create_tag(
    value="TC_2",
    name="TagTC2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8600, 8288)
)

# Tag: Three-Phase Transformer.TagTN2
_Three_Phase_Transformer_TagTN2 = mdl.create_tag(
    value="T_N2",
    name="TagTN2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_horizontal",
    position=(8600, 8464)
)

# Tag: Three-Phase Transformer.TagA2
_Three_Phase_Transformer_TagA2 = mdl.create_tag(
    value="TA_2",
    name="TagA2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9272, 8144)
)

# Tag: Three-Phase Transformer.TagB2
_Three_Phase_Transformer_TagB2 = mdl.create_tag(
    value="TB_2",
    name="TagB2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9272, 8240)
)

# Tag: Three-Phase Transformer.TagC2
_Three_Phase_Transformer_TagC2 = mdl.create_tag(
    value="TC_2",
    name="TagC2",
    parent=_Three_Phase_Transformer,
    scope="local",
    kind="pe",
    rotation="up",
    flip="flip_none",
    position=(9272, 8336)
)

# Junction: Three-Phase Transformer.Junction1
_Three_Phase_Transformer_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Three_Phase_Transformer,
    kind="pe",
    position=(8480, 8464)
)

# Component: VSConverter
_VSConverter = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="VSConverter",
    rotation="up",
    flip="flip_none",
    position=(5520, 7384),
    hide_name=False,
    size=(220, 175)
)
_VSConverter_mask = mdl.create_mask(_VSConverter)
_VSConverter_mask_ctrl_mode_str = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="ctrl_mode_str",
    label="Inverter control mode",
    widget="combo",
    combo_values=['PQ', 'PV', 'Vdc-Vac', 'Vdc-Q', 'Grid Forming', 'External Control'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Control mode:2",
    unit=""
)


_VSConverter_mask_ctrl_mode_str_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "External Control":
    mode_ext = mdl.get_item("mode", parent=comp_handle, item_type=ITEM_PORT)
    mode_inp = mdl.get_item("Gain32", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_mode = mdl.get_item("Termination5", parent=comp_handle, item_type=ITEM_COMPONENT)
    mode_int = mdl.get_item("From25", parent=comp_handle, item_type=ITEM_TAG)
    conn_mode_int = mdl.get_item("connmode", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_mode_int:
        mdl.delete_item(conn_mode_int)

    if not term_mode:
        term_mode = mdl.create_component("Termination", parent=comp_handle,
                                         name="Termination5", position=(7047, 9200),
                                         hide_name=True)
    mdl.create_connection(mdl.term(term_mode, "in"), mode_int)
    if not mode_ext:
        mode_ext = mdl.create_port(parent=comp_handle, name="mode", direction="in", kind = "sp",
                            terminal_position=(-10, 87),
                            position=(7120, 9201))
        mdl.create_connection(mdl.term(mode_inp, "in"), mode_ext)
else:
    mode_ext = mdl.get_item("mode", parent=comp_handle, item_type=ITEM_PORT)
    term_mode = mdl.get_item("Termination5", parent=comp_handle, item_type=ITEM_COMPONENT)
    mode_int = mdl.get_item("From25", parent=comp_handle, item_type=ITEM_TAG)
    mode_inp = mdl.get_item("Gain32", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_mode_int = mdl.get_item("connmode", parent=comp_handle, item_type=ITEM_CONNECTION)
    if mode_ext:
        mdl.delete_item(mode_ext)
    if term_mode:
        mdl.delete_item(term_mode)
    if conn_mode_int:
        mdl.delete_item(conn_mode_int)
    mdl.create_connection(mdl.term(mode_inp, "in"), mode_int, name="connmode")

comp_script = return_comp_script(mdl, container_handle)
comp_script.inv_control_mode_value_edited(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_VSConverter_mask_ctrl_mode_str, "property_value_changed", _VSConverter_mask_ctrl_mode_str_property_value_changed)


_VSConverter_mask_ctrl_mode_str_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.inv_control_mode_value_edited(mdl, container_handle, new_value)

"""
mdl.set_handler_code(_VSConverter_mask_ctrl_mode_str, "property_value_edited", _VSConverter_mask_ctrl_mode_str_property_value_edited)

_VSConverter_mask_ctrl_mode_int = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="ctrl_mode_int",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_ext_mode = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="ext_mode",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_P_ref_str = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="P_ref_str",
    label="Active power reference (kW)",
    widget="combo",
    combo_values=['External input', 'Converter nominal'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Control mode",
    unit=""
)


_VSConverter_mask_P_ref_str_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "External input":
    P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
    P_inp = mdl.get_item("Sum9", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
    P_int = mdl.get_item("From11", parent=comp_handle, item_type=ITEM_TAG)
    conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_P_int:
        mdl.delete_item(conn_P_int)

    if not term_P:
        term_P = mdl.create_component("Termination", parent=comp_handle,
                                      name="Termination1", position=(6567, 8352),
                                      hide_name=True)
        mdl.create_connection(mdl.term(term_P, "in"), P_int)

    if not P_ext:
        P_ext = mdl.create_port(parent=comp_handle, name="P_set", direction="in", kind = "sp",
                            terminal_position=(-10, -87),
                            position=(6642, 8348))
        mdl.create_connection(mdl.term(P_inp, "in"), P_ext)
elif new_value == "Converter nominal":
    P_ext = mdl.get_item("P_set", parent=comp_handle, item_type=ITEM_PORT)
    term_P = mdl.get_item("Termination1", parent=comp_handle, item_type=ITEM_COMPONENT)
    P_int = mdl.get_item("From11", parent=comp_handle, item_type=ITEM_TAG)
    P_inp = mdl.get_item("Sum9", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_P_int = mdl.get_item("connP", parent=comp_handle, item_type=ITEM_CONNECTION)
    if P_ext:
        mdl.delete_item(P_ext)
    if term_P:
        mdl.delete_item(term_P)
    if conn_P_int:
        mdl.delete_item(conn_P_int)
    mdl.create_connection(mdl.term(P_inp, "in"), P_int, name="connP")

"""
mdl.set_handler_code(_VSConverter_mask_P_ref_str, "property_value_changed", _VSConverter_mask_P_ref_str_property_value_changed)

_VSConverter_mask_P_sel = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="P_sel",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_Q_ref_str = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Q_ref_str",
    label="Reactive power reference (kVAR)",
    widget="combo",
    combo_values=['External input', 'Converter nominal'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Control mode",
    unit=""
)


_VSConverter_mask_Q_ref_str_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "External input":
    Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
    Q_inp = mdl.get_item("Sum7", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
    Q_int = mdl.get_item("From10", parent=comp_handle, item_type=ITEM_TAG)
    conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_Q_int:
        mdl.delete_item(conn_Q_int)

    if not term_Q:
        term_Q = mdl.create_component("Termination", parent=comp_handle,
                                      name="Termination2", position=(6424, 8751),
                                      hide_name=True)
        mdl.create_connection(mdl.term(term_Q, "in"), Q_int)

    if not Q_ext:
        Q_ext = mdl.create_port(parent=comp_handle, name="Q_set", direction="in", kind = "sp",
                            terminal_position=(25, -87),
                            position=(6504, 8753))
        mdl.create_connection(mdl.term(Q_inp, "in"), Q_ext)
elif new_value == "Converter nominal":
    Q_ext = mdl.get_item("Q_set", parent=comp_handle, item_type=ITEM_PORT)
    term_Q = mdl.get_item("Termination2", parent=comp_handle, item_type=ITEM_COMPONENT)
    Q_int = mdl.get_item("From10", parent=comp_handle, item_type=ITEM_TAG)
    Q_inp = mdl.get_item("Sum7", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_Q_int = mdl.get_item("connQ", parent=comp_handle, item_type=ITEM_CONNECTION)
    if Q_ext:
        mdl.delete_item(Q_ext)
    if term_Q:
        mdl.delete_item(term_Q)
    if conn_Q_int:
        mdl.delete_item(conn_Q_int)
    mdl.create_connection(mdl.term(Q_inp, "in"), Q_int, name="connQ")

"""
mdl.set_handler_code(_VSConverter_mask_Q_ref_str, "property_value_changed", _VSConverter_mask_Q_ref_str_property_value_changed)

_VSConverter_mask_Q_sel = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Q_sel",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_V_ref_str = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="V_ref_str",
    label="Line voltage reference (kV)",
    widget="combo",
    combo_values=['External input', 'Converter nominal'],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="Control mode",
    unit=""
)


_VSConverter_mask_V_ref_str_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "External input":
    V_ext = mdl.get_item("V_set", parent=comp_handle, item_type=ITEM_PORT)
    V_inp = mdl.get_item("Sum11", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_V = mdl.get_item("Termination3", parent=comp_handle, item_type=ITEM_COMPONENT)
    V_int = mdl.get_item("From15", parent=comp_handle, item_type=ITEM_TAG)
    conn_V_int = mdl.get_item("connV", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_V_int:
        mdl.delete_item(conn_V_int)

    if not term_V:
        term_V = mdl.create_component("Termination", parent=comp_handle,
                                      name="Termination3", position=(6376, 8930),
                                      hide_name=True)
        mdl.create_connection(mdl.term(term_V, "in"), V_int)

    if not V_ext:
        V_ext = mdl.create_port(parent=comp_handle, name="V_set", direction="in", kind = "sp",
                            terminal_position=(55, -87),
                            position=(6450, 8926))
        mdl.create_connection(mdl.term(V_inp, "in"), V_ext)
elif new_value == "Converter nominal":
    V_ext = mdl.get_item("V_set", parent=comp_handle, item_type=ITEM_PORT)
    term_V = mdl.get_item("Termination3", parent=comp_handle, item_type=ITEM_COMPONENT)
    V_int = mdl.get_item("From15", parent=comp_handle, item_type=ITEM_TAG)
    V_inp = mdl.get_item("Sum11", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_V_int = mdl.get_item("connV", parent=comp_handle, item_type=ITEM_CONNECTION)
    if V_ext:
        mdl.delete_item(V_ext)
    if term_V:
        mdl.delete_item(term_V)
    if conn_V_int:
        mdl.delete_item(conn_V_int)
    mdl.create_connection(mdl.term(V_inp, "in"), V_int, name="connV")

"""
mdl.set_handler_code(_VSConverter_mask_V_ref_str, "property_value_changed", _VSConverter_mask_V_ref_str_property_value_changed)

_VSConverter_mask_V_sel = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="V_sel",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_vdc_ref_str = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="vdc_ref_str",
    label="DC Link voltage (kV)",
    widget="combo",
    combo_values=['External input', 'Converter nominal'],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="Control mode",
    unit=""
)


_VSConverter_mask_vdc_ref_str_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "External input":
    vdc_ext = mdl.get_item("vdc_set", parent=comp_handle, item_type=ITEM_PORT)
    vdc_inp = mdl.get_item("Gain30", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_vdc = mdl.get_item("Termination4", parent=comp_handle, item_type=ITEM_COMPONENT)
    vdc_int = mdl.get_item("From22", parent=comp_handle, item_type=ITEM_TAG)
    conn_vdc_int = mdl.get_item("connw", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_vdc_int:
        mdl.delete_item(conn_vdc_int)

    if not term_vdc:
        term_vdc = mdl.create_component("Termination", parent=comp_handle,
                                        name="Termination4", position=(6621, 8663),
                                        hide_name=True)
        mdl.create_connection(mdl.term(term_vdc, "in"), vdc_int)

    if not vdc_ext:
        vdc_ext = mdl.create_port(parent=comp_handle, name="vdc_set", direction="in", kind = "sp",
                            terminal_position=(25, 87),
                            position=(6695, 8660))
        mdl.create_connection(mdl.term(vdc_inp, "in"), vdc_ext)
elif new_value == "Converter nominal":
    vdc_ext = mdl.get_item("vdc_set", parent=comp_handle, item_type=ITEM_PORT)
    term_vdc = mdl.get_item("Termination4", parent=comp_handle, item_type=ITEM_COMPONENT)
    vdc_int = mdl.get_item("From22", parent=comp_handle, item_type=ITEM_TAG)
    vdc_inp = mdl.get_item("Gain30", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_vdc_int = mdl.get_item("connw", parent=comp_handle, item_type=ITEM_CONNECTION)
    if vdc_ext:
        mdl.delete_item(vdc_ext)
    if term_vdc:
        mdl.delete_item(term_vdc)
    if conn_vdc_int:
        mdl.delete_item(conn_vdc_int)
    mdl.create_connection(mdl.term(vdc_inp, "in"), vdc_int, name="connw")

"""
mdl.set_handler_code(_VSConverter_mask_vdc_ref_str, "property_value_changed", _VSConverter_mask_vdc_ref_str_property_value_changed)

_VSConverter_mask_fs_ref_str = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="fs_ref_str",
    label="Frequency (Hz)",
    widget="combo",
    combo_values=['External input', 'Converter nominal'],
    evaluate=False,
    enabled=False,
    visible=True,
    tab_name="Control mode",
    unit=""
)


_VSConverter_mask_fs_ref_str_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "External input":
    fs_ext = mdl.get_item("fs_set", parent=comp_handle, item_type=ITEM_PORT)
    fs_inp = mdl.get_item("Gain33", parent=comp_handle, item_type=ITEM_COMPONENT)
    term_fs = mdl.get_item("Termination8", parent=comp_handle, item_type=ITEM_COMPONENT)
    fs_int = mdl.get_item("From44", parent=comp_handle, item_type=ITEM_TAG)
    conn_fs_int = mdl.get_item("connfs", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_fs_int:
        mdl.delete_item(conn_fs_int)

    if not term_fs:
        term_fs = mdl.create_component("Termination", parent=comp_handle,
                                       name="Termination8", position=(6767, 8247),
                                       hide_name=True)
        mdl.create_connection(mdl.term(term_fs, "in"), fs_int)

    if not fs_ext:
        fs_ext = mdl.create_port(parent=comp_handle, name="fs_set", direction="in", kind = "sp",
                            terminal_position=(55, 87),
                            position=(6893, 8248))
        mdl.create_connection(mdl.term(fs_inp, "in"), fs_ext)
elif new_value == "Converter nominal":
    fs_ext = mdl.get_item("fs_set", parent=comp_handle, item_type=ITEM_PORT)
    term_fs = mdl.get_item("Termination8", parent=comp_handle, item_type=ITEM_COMPONENT)
    fs_int = mdl.get_item("From44", parent=comp_handle, item_type=ITEM_TAG)
    fs_inp = mdl.get_item("Gain33", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_fs_int = mdl.get_item("connfs", parent=comp_handle, item_type=ITEM_CONNECTION)
    if fs_ext:
        mdl.delete_item(fs_ext)
    if term_fs:
        mdl.delete_item(term_fs)
    if conn_fs_int:
        mdl.delete_item(conn_fs_int)
    mdl.create_connection(mdl.term(fs_inp, "in"), fs_int, name="connfs")

"""
mdl.set_handler_code(_VSConverter_mask_fs_ref_str, "property_value_changed", _VSConverter_mask_fs_ref_str_property_value_changed)

_VSConverter_mask_w_sel = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="w_sel",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_P_kp = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="P_kp",
    label="P Controller proportional gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Controller settings:3",
    unit=""
)

_VSConverter_mask_P_ki = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="P_ki",
    label="P Controller integral gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Controller settings",
    unit=""
)

_VSConverter_mask_Q_kp = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Q_kp",
    label="Q Controller proportional gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Controller settings",
    unit=""
)

_VSConverter_mask_Q_ki = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Q_ki",
    label="Q Controller integral gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Controller settings",
    unit=""
)

_VSConverter_mask_V_kp = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="V_kp",
    label="V Controller proportional gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="Controller settings",
    unit=""
)

_VSConverter_mask_V_ki = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="V_ki",
    label="V Controller integral gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="Controller settings",
    unit=""
)

_VSConverter_mask_vdc_kp = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="vdc_kp",
    label="DC-Link Voltage Controller proportional gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="Controller settings",
    unit=""
)

_VSConverter_mask_vdc_ki = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="vdc_ki",
    label="DC-Link Voltage Controller integral gain",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="Controller settings",
    unit=""
)

_VSConverter_mask_vdc_set = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="vdc_set",
    label="Inverter DC-Link Voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters:1",
    unit="kV"
)

_VSConverter_mask_dc_cap_en = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="dc_cap_en",
    label="Use Internal DC-Link Capacitor",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit=""
)


_VSConverter_mask_dc_cap_en_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG

comp_handle = mdl.get_sub_level_handle(container_handle)

mdl.refresh_icon(container_handle)

if new_value == False:
    CDC = mdl.get_item("dccap", parent=comp_handle, item_type=ITEM_COMPONENT)
    if CDC:
        mdl.delete_item(CDC)
elif new_value == True:
    CDC = mdl.get_item("dccap", parent=comp_handle, item_type=ITEM_COMPONENT)
    DCpport = mdl.get_item("Junction121", parent=comp_handle, item_type="junction")
    DCnport = mdl.get_item("Junction120", parent=comp_handle, item_type="junction")
    if not CDC:
        CDC = mdl.create_component("Capacitor", parent=comp_handle, name="dccap", position=(7709,9516), rotation="right")
        mdl.set_property_value(mdl.prop(CDC, "capacitance"), "dc_cap")
        mdl.set_property_value(mdl.prop(CDC, "initial_voltage"), "1000*vdc_set")
        dcp = mdl.create_connection(mdl.term(CDC, "p_node"), DCpport, name="dcConnp")
        dcn = mdl.create_connection(mdl.term(CDC, "n_node"), DCnport, name="dcConnn")

if new_value == False:
    mdl.disable_property(mdl.prop(container_handle, "dc_cap"))
elif new_value == True:
    mdl.enable_property(mdl.prop(container_handle, "dc_cap"))

"""
mdl.set_handler_code(_VSConverter_mask_dc_cap_en, "property_value_changed", _VSConverter_mask_dc_cap_en_property_value_changed)


_VSConverter_mask_dc_cap_en_property_value_edited = """
if new_value == False:
    mdl.disable_property(mdl.prop(container_handle, "dc_cap"))
elif new_value == True:
    mdl.enable_property(mdl.prop(container_handle, "dc_cap"))

"""
mdl.set_handler_code(_VSConverter_mask_dc_cap_en, "property_value_edited", _VSConverter_mask_dc_cap_en_property_value_edited)

_VSConverter_mask_dc_cap = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="dc_cap",
    label="Internal DC-Link Capacitor",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit="F"
)

_VSConverter_mask_dc_snub = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="dc_snub",
    label="DC-Link Snubber Resistance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit="Ω"
)

_VSConverter_mask_vac_set = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="vac_set",
    label="Nominal AC Line voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit="kV"
)

_VSConverter_mask_global_basefreq = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit=""
)


_VSConverter_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_VSConverter_mask_global_basefreq, "property_value_changed", _VSConverter_mask_global_basefreq_property_value_changed)


_VSConverter_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_frequency_prop(mdl, container_handle)

"""
mdl.set_handler_code(_VSConverter_mask_global_basefreq, "property_value_edited", _VSConverter_mask_global_basefreq_property_value_edited)

_VSConverter_mask_Fs = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Fs",
    label="Nominal Frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Inverter Parameters",
    unit="Hz"
)

_VSConverter_mask_Sinv = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Sinv",
    label="Nominal Active Power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit="kW"
)

_VSConverter_mask_Qinv = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Qinv",
    label="Nominal Reactive Power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit="kVAR"
)

_VSConverter_mask_Rac = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Rac",
    label="Series ac resistance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit="Ω"
)

_VSConverter_mask_Lac = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Lac",
    label="Series ac inductance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter Parameters",
    unit="H"
)

_VSConverter_mask_Ts = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Ts",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Execution Rate:5",
    unit="s"
)

_VSConverter_mask_cont_t = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="cont_t",
    label="Controller start time ",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Initialization:4",
    unit="s"
)

_VSConverter_mask_dss_ctrl = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="dss_ctrl",
    label="OpenDSS control mode",
    widget="combo",
    combo_values=['Fixed', 'PacVac', 'PacQac', 'VdcVac', 'VdcQac'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="OpenDSS Setting:6",
    unit=""
)

_VSConverter_mask_Phases = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Phases",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_kv = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="kv",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_kw = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="kw",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_pf = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="pf",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_model = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="model",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_basefreq = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="basefreq",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_r0 = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="r0",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_r1 = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="r1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_x0 = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="x0",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_x1 = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="x1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_pu = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="pu",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_Angle = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Angle",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_Frequency = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Frequency",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_basekv = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="basekv",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_mask_gen_ts_en = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="gen_ts_en",
    label="Enable time series",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series:6",
    unit=""
)


_VSConverter_mask_gen_ts_en_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT, ITEM_TAG
comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value:
    TSmdl = mdl.get_item("TS_module", parent=comp_handle, item_type=ITEM_COMPONENT)
    Ts_select = mdl.get_item("T_switch", parent=comp_handle, item_type=ITEM_COMPONENT)
    Ts_select1 = mdl.get_item("Constant102", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_Ts_in = mdl.get_item("ConnTs", parent=comp_handle, item_type=ITEM_CONNECTION)
    conn_P_int = mdl.get_item("connPint", parent=comp_handle, item_type=ITEM_CONNECTION)
    conn_Q_int = mdl.get_item("connQint", parent=comp_handle, item_type=ITEM_CONNECTION)
    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    P_inp = mdl.get_item("Goto10", parent=comp_handle, item_type=ITEM_TAG)
    Q_inp = mdl.get_item("Goto11", parent=comp_handle, item_type=ITEM_TAG)

    if conn_P_int:
        mdl.delete_item(conn_P_int)
    if conn_Q_int:
        mdl.delete_item(conn_Q_int)

    mdl.enable_items(TSmdl)
    mdl.enable_items(Ts_select)
    mdl.enable_items(Ts_select1)

    mdl.set_property_value(mdl.prop(TSmdl, "P_mode"), "Manual input")
    if not T_ext:
        T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                            terminal_position=(-35, 60),
                            position=(5879, 8399))
    if not conn_Ts_in:
        mdl.create_connection(mdl.term(Ts_select, "T"), T_ext, "ConnTs")


    conn_TsP_int = mdl.get_item("ConnTsP", parent=comp_handle, item_type=ITEM_CONNECTION)
    conn_TsQ_int = mdl.get_item("ConnTsQ", parent=comp_handle, item_type=ITEM_CONNECTION)

    if not conn_TsP_int:
        mdl.create_connection(P_inp, mdl.term(TSmdl, "P"), "ConnTsP")
    if not conn_TsQ_int:
        mdl.create_connection(Q_inp, mdl.term(TSmdl, "Q"), "ConnTsQ")
else:
    TSmdl = mdl.get_item("TS_module", parent=comp_handle, item_type=ITEM_COMPONENT)
    Ts_select = mdl.get_item("T_switch", parent=comp_handle, item_type=ITEM_COMPONENT)
    Ts_select1 = mdl.get_item("Constant102", parent=comp_handle, item_type=ITEM_COMPONENT)
    Pnom = mdl.get_item("Constant22", parent=comp_handle, item_type=ITEM_COMPONENT)
    Qnom = mdl.get_item("Constant23", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_Ts_in = mdl.get_item("ConnTs", parent=comp_handle, item_type=ITEM_CONNECTION)
    conn_P_int = mdl.get_item("connPint", parent=comp_handle, item_type=ITEM_CONNECTION)
    conn_Q_int = mdl.get_item("connQint", parent=comp_handle, item_type=ITEM_CONNECTION)
    conn_TsP_int = mdl.get_item("ConnTsP", parent=comp_handle, item_type=ITEM_CONNECTION)
    conn_TsQ_int = mdl.get_item("ConnTsQ", parent=comp_handle, item_type=ITEM_CONNECTION)
    P_inp = mdl.get_item("Goto10", parent=comp_handle, item_type=ITEM_TAG)
    Q_inp = mdl.get_item("Goto11", parent=comp_handle, item_type=ITEM_TAG)

    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    mdl.set_property_value(mdl.prop(TSmdl, "P_mode"), "Manual input")

    if conn_TsP_int:
        mdl.delete_item(conn_TsP_int)
    if conn_TsQ_int:
        mdl.delete_item(conn_TsQ_int)

    if conn_P_int:
        mdl.delete_item(conn_P_int)
    if conn_Q_int:
        mdl.delete_item(conn_Q_int)

    mdl.disable_items(TSmdl)
    mdl.disable_items(Ts_select)
    mdl.disable_items(Ts_select1)

    mdl.create_connection(mdl.term(Pnom, "out"), P_inp, "connPint")
    mdl.create_connection(mdl.term(Qnom, "out"), Q_inp, "connQint")

    if T_ext:
        mdl.delete_item(T_ext)

"""
mdl.set_handler_code(_VSConverter_mask_gen_ts_en, "property_value_changed", _VSConverter_mask_gen_ts_en_property_value_changed)


_VSConverter_mask_gen_ts_en_property_value_edited = """
if new_value:
    mdl.set_property_value(mdl.prop(container_handle, 'ctrl_mode_str'), "PQ")
    mdl.set_property_value(mdl.prop(container_handle, 'P_ref_str'), "Converter nominal")
    mdl.set_property_value(mdl.prop(container_handle, 'Q_ref_str'), "Converter nominal")

"""
mdl.set_handler_code(_VSConverter_mask_gen_ts_en, "property_value_edited", _VSConverter_mask_gen_ts_en_property_value_edited)

_VSConverter_mask_load_loadshape = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="load_loadshape",
    label="LoadShape object",
    widget="button",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series",
    button_label="Choose",
    unit=""
)


_VSConverter_mask_load_loadshape_button_clicked = """
comp_script_load = return_comp_script_load()
comp_script_load.load_loadshape(mdl, container_handle)

"""
mdl.set_handler_code(_VSConverter_mask_load_loadshape, "button_clicked", _VSConverter_mask_load_loadshape_button_clicked)

_VSConverter_mask_loadshape_name = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="loadshape_name",
    label="LoadShape name",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series",
    unit=""
)


_VSConverter_mask_loadshape_name_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_VSConverter_mask_loadshape_name, "property_value_edited", _VSConverter_mask_loadshape_name_property_value_edited)

_VSConverter_mask_loadshape = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="loadshape",
    label="LoadShape points",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series",
    unit="pu"
)


_VSConverter_mask_loadshape_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_VSConverter_mask_loadshape, "property_value_edited", _VSConverter_mask_loadshape_property_value_edited)

_VSConverter_mask_useactual = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="useactual",
    label="Actual load value",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_loadshape_int = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="loadshape_int",
    label="LoadShape interval",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series",
    unit="h"
)


_VSConverter_mask_loadshape_int_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_VSConverter_mask_loadshape_int, "property_value_edited", _VSConverter_mask_loadshape_int_property_value_edited)

_VSConverter_mask_gen_ts_en_bit = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="gen_ts_en_bit",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_T_mode = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="T_mode",
    label="Loadshape input mode",
    widget="combo",
    combo_values=['Loadshape index', 'Time'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Time Series",
    unit=""
)


_VSConverter_mask_T_mode_property_value_edited = """
if new_value == "Time":
    mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
else:
    mdl.disable_property(mdl.prop(container_handle, "T_Ts"))

"""
mdl.set_handler_code(_VSConverter_mask_T_mode, "property_value_edited", _VSConverter_mask_T_mode_property_value_edited)

_VSConverter_mask_S_Ts = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="S_Ts",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_Q_Ts = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Q_Ts",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_T_Ts = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="T_Ts",
    label="Loadshape time range",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="Time Series",
    unit="h"
)

_VSConverter_mask_timespan = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="timespan",
    label="Loadshape time span",
    widget="combo",
    combo_values=['Daily', 'Yearly'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_T_Ts_internal = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="T_Ts_internal",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_dssT = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="dssT",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_dssnpts = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="dssnpts",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_T_Ts_max = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="T_Ts_max",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_del_Ts = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="del_Ts",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_Slen = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Slen",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_T_lim_low = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="T_lim_low",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_T_lim_high = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="T_lim_high",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_Ts_switch = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="Ts_switch",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Time Series",
    unit=""
)

_VSConverter_mask_enable_monitoring = mdl.create_property(
    item_handle=_VSConverter_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_VSConverter_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_VSConverter_mask, "define_icon", _VSConverter_mask_define_icon)

_VSConverter_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_vsc as comp_script
importlib.reload(comp_script)
import comp_load as comp_script2
importlib.reload(comp_script2)
def return_comp_script(mdl, item_handle):
    return comp_script

def return_comp_script_load():
    return comp_script2

"""
mdl.set_handler_code(_VSConverter_mask, "init", _VSConverter_mask_init)

_VSConverter_mask_pre_compile = """
# HEADER START
ctrl_mode_str = mdl.get_property_value(mdl.prop(item_handle, "ctrl_mode_str"))
ctrl_mode_int = mdl.get_property_value(mdl.prop(item_handle, "ctrl_mode_int"))
ext_mode = mdl.get_property_value(mdl.prop(item_handle, "ext_mode"))
P_ref_str = mdl.get_property_value(mdl.prop(item_handle, "P_ref_str"))
P_sel = mdl.get_property_value(mdl.prop(item_handle, "P_sel"))
Q_ref_str = mdl.get_property_value(mdl.prop(item_handle, "Q_ref_str"))
Q_sel = mdl.get_property_value(mdl.prop(item_handle, "Q_sel"))
V_ref_str = mdl.get_property_value(mdl.prop(item_handle, "V_ref_str"))
V_sel = mdl.get_property_value(mdl.prop(item_handle, "V_sel"))
vdc_ref_str = mdl.get_property_value(mdl.prop(item_handle, "vdc_ref_str"))
fs_ref_str = mdl.get_property_value(mdl.prop(item_handle, "fs_ref_str"))
w_sel = mdl.get_property_value(mdl.prop(item_handle, "w_sel"))
P_kp = mdl.get_property_value(mdl.prop(item_handle, "P_kp"))
P_ki = mdl.get_property_value(mdl.prop(item_handle, "P_ki"))
Q_kp = mdl.get_property_value(mdl.prop(item_handle, "Q_kp"))
Q_ki = mdl.get_property_value(mdl.prop(item_handle, "Q_ki"))
V_kp = mdl.get_property_value(mdl.prop(item_handle, "V_kp"))
V_ki = mdl.get_property_value(mdl.prop(item_handle, "V_ki"))
vdc_kp = mdl.get_property_value(mdl.prop(item_handle, "vdc_kp"))
vdc_ki = mdl.get_property_value(mdl.prop(item_handle, "vdc_ki"))
vdc_set = mdl.get_property_value(mdl.prop(item_handle, "vdc_set"))
dc_cap_en = mdl.get_property_value(mdl.prop(item_handle, "dc_cap_en"))
dc_cap = mdl.get_property_value(mdl.prop(item_handle, "dc_cap"))
dc_snub = mdl.get_property_value(mdl.prop(item_handle, "dc_snub"))
vac_set = mdl.get_property_value(mdl.prop(item_handle, "vac_set"))
global_basefreq = mdl.get_property_value(mdl.prop(item_handle, "global_basefreq"))
Fs = mdl.get_property_value(mdl.prop(item_handle, "Fs"))
Sinv = mdl.get_property_value(mdl.prop(item_handle, "Sinv"))
Qinv = mdl.get_property_value(mdl.prop(item_handle, "Qinv"))
Rac = mdl.get_property_value(mdl.prop(item_handle, "Rac"))
Lac = mdl.get_property_value(mdl.prop(item_handle, "Lac"))
Ts = mdl.get_property_value(mdl.prop(item_handle, "Ts"))
cont_t = mdl.get_property_value(mdl.prop(item_handle, "cont_t"))
dss_ctrl = mdl.get_property_value(mdl.prop(item_handle, "dss_ctrl"))
Phases = mdl.get_property_value(mdl.prop(item_handle, "Phases"))
kv = mdl.get_property_value(mdl.prop(item_handle, "kv"))
kw = mdl.get_property_value(mdl.prop(item_handle, "kw"))
pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
model = mdl.get_property_value(mdl.prop(item_handle, "model"))
basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
r0 = mdl.get_property_value(mdl.prop(item_handle, "r0"))
r1 = mdl.get_property_value(mdl.prop(item_handle, "r1"))
x0 = mdl.get_property_value(mdl.prop(item_handle, "x0"))
x1 = mdl.get_property_value(mdl.prop(item_handle, "x1"))
pu = mdl.get_property_value(mdl.prop(item_handle, "pu"))
Angle = mdl.get_property_value(mdl.prop(item_handle, "Angle"))
Frequency = mdl.get_property_value(mdl.prop(item_handle, "Frequency"))
basekv = mdl.get_property_value(mdl.prop(item_handle, "basekv"))
gen_ts_en = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en"))
load_loadshape = mdl.get_property_value(mdl.prop(item_handle, "load_loadshape"))
loadshape_name = mdl.get_property_value(mdl.prop(item_handle, "loadshape_name"))
loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
loadshape_int = mdl.get_property_value(mdl.prop(item_handle, "loadshape_int"))
gen_ts_en_bit = mdl.get_property_value(mdl.prop(item_handle, "gen_ts_en_bit"))
T_mode = mdl.get_property_value(mdl.prop(item_handle, "T_mode"))
S_Ts = mdl.get_property_value(mdl.prop(item_handle, "S_Ts"))
Q_Ts = mdl.get_property_value(mdl.prop(item_handle, "Q_Ts"))
T_Ts = mdl.get_property_value(mdl.prop(item_handle, "T_Ts"))
T_Ts_internal = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_internal"))
dssT = mdl.get_property_value(mdl.prop(item_handle, "dssT"))
dssnpts = mdl.get_property_value(mdl.prop(item_handle, "dssnpts"))
T_Ts_max = mdl.get_property_value(mdl.prop(item_handle, "T_Ts_max"))
del_Ts = mdl.get_property_value(mdl.prop(item_handle, "del_Ts"))
Slen = mdl.get_property_value(mdl.prop(item_handle, "Slen"))
T_lim_low = mdl.get_property_value(mdl.prop(item_handle, "T_lim_low"))
T_lim_high = mdl.get_property_value(mdl.prop(item_handle, "T_lim_high"))
Ts_switch = mdl.get_property_value(mdl.prop(item_handle, "Ts_switch"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy
import math

pu = 1
Angle = 0
r0 = 0.001
r1 = 0.001
x0 = 0.001
x1 = 0.001

Phases = 3
kv = vac_set
kw = Sinv
basefreq = Fs
Frequency = Fs
basekv = kv

if Qinv >= 0:
    pf = Sinv/((Sinv*Sinv+Qinv*Qinv)**0.5)
else:
    pf = -Sinv/((Sinv*Sinv+Qinv*Qinv)**0.5)

if ctrl_mode_str == "PQ":
    ctrl_mode_int = 1
    ext_mode = 0
    model = 1
elif ctrl_mode_str == "PV":
    ctrl_mode_int = 0
    ext_mode = 0
    model = 3
elif ctrl_mode_str == "Vdc-Vac":
    ctrl_mode_int = 2
    ext_mode = 0
    model = 3
elif ctrl_mode_str == "Vdc-Q":
    ctrl_mode_int = 3
    ext_mode = 0
    model = 1
elif ctrl_mode_str == "Grid Forming":
    ctrl_mode_int = 4
    ext_mode = 0
    model = 2
elif ctrl_mode_str == "External Control":
    ctrl_mode_int = -1
    ext_mode = 1
    model = 1
else:
    ctrl_mode_int = 0
    ext_mode = 0
    model = 1


S_Ts = loadshape
dssT = loadshape_int
Slen = len(S_Ts)

dssnpts = len(S_Ts)

if T_mode == "Loadshape index":
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for S_val in S_vec1:
        T_Ts_internal[idxS] = idxS
        idxS += 1
    T_lim_low = T_Ts_internal[0]
    T_lim_high = T_Ts_internal[Slen-1]
elif T_mode == "Time":
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for T_val in T_Ts:
        T_Ts_internal[idxS] = T_val
        idxS += 1
    T_lim_low = T_Ts[0]
    T_lim_high = T_Ts[len(T_Ts)-1]
else:
    T_Ts_internal = [0] * Slen
    S_vec1 = [0] * Slen
    idxS = 0
    for S_val in S_vec1:
        T_Ts_internal[idxS] = idxS
        idxS += 1
    T_lim_low = T_Ts_internal[0]
    T_lim_high = T_Ts_internal[Slen-1]


if T_mode == "Loadshape index":
    Ts_switch = 0
elif T_mode == "Time":
    Ts_switch = 1
else:
    Ts_switch = 0


mdl.set_property_value(mdl.prop(item_handle, "P_kp"), P_kp)
mdl.set_property_value(mdl.prop(item_handle, "P_ki"), P_ki)
mdl.set_property_value(mdl.prop(item_handle, "Q_kp"), Q_kp)
mdl.set_property_value(mdl.prop(item_handle, "Q_ki"), Q_ki)
mdl.set_property_value(mdl.prop(item_handle, "V_kp"), V_kp)
mdl.set_property_value(mdl.prop(item_handle, "V_ki"), V_ki)
mdl.set_property_value(mdl.prop(item_handle, "P_sel"), P_sel)
mdl.set_property_value(mdl.prop(item_handle, "Q_sel"), Q_sel)
mdl.set_property_value(mdl.prop(item_handle, "V_sel"), V_sel)
mdl.set_property_value(mdl.prop(item_handle, "ctrl_mode_int"), ctrl_mode_int)
mdl.set_property_value(mdl.prop(item_handle, "ext_mode"), ext_mode)
mdl.set_property_value(mdl.prop(item_handle, "Ts"), Ts)
mdl.set_property_value(mdl.prop(item_handle, "cont_t"), cont_t)
mdl.set_property_value(mdl.prop(item_handle, "Sinv"), Sinv)
mdl.set_property_value(mdl.prop(item_handle, "Qinv"), Qinv)
mdl.set_property_value(mdl.prop(item_handle, "Fs"), Fs)
mdl.set_property_value(mdl.prop(item_handle, "vdc_set"), vdc_set)

mdl.set_property_value(mdl.prop(item_handle, "Rac"), Rac)
mdl.set_property_value(mdl.prop(item_handle, "Lac"), Lac)

mdl.set_property_value(mdl.prop(item_handle, "Phases"), Phases)
mdl.set_property_value(mdl.prop(item_handle, "kv"), kv)
mdl.set_property_value(mdl.prop(item_handle, "kw"), kw)
mdl.set_property_value(mdl.prop(item_handle, "pf"), pf)
mdl.set_property_value(mdl.prop(item_handle, "model"), model)
mdl.set_property_value(mdl.prop(item_handle, "basefreq"), basefreq)

mdl.set_property_value(mdl.prop(item_handle, "r0"), r0)
mdl.set_property_value(mdl.prop(item_handle, "r1"), r1)
mdl.set_property_value(mdl.prop(item_handle, "x0"), x0)
mdl.set_property_value(mdl.prop(item_handle, "x1"), x1)
mdl.set_property_value(mdl.prop(item_handle, "Frequency"), Frequency)
mdl.set_property_value(mdl.prop(item_handle, "basekv"), basekv)
mdl.set_property_value(mdl.prop(item_handle, "Angle"), Angle)
mdl.set_property_value(mdl.prop(item_handle, "pu"), pu)

mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en"), gen_ts_en)
mdl.set_property_value(mdl.prop(item_handle, "gen_ts_en_bit"), gen_ts_en_bit)
mdl.set_property_value(mdl.prop(item_handle, "S_Ts"), S_Ts)
mdl.set_property_value(mdl.prop(item_handle, "Q_Ts"), Q_Ts)
mdl.set_property_value(mdl.prop(item_handle, "T_Ts"), T_Ts)
mdl.set_property_value(mdl.prop(item_handle, "dssT"), dssT)
mdl.set_property_value(mdl.prop(item_handle, "dssnpts"), dssnpts)
mdl.set_property_value(mdl.prop(item_handle, "T_Ts_max"), T_Ts_max)
mdl.set_property_value(mdl.prop(item_handle, "del_Ts"), del_Ts)

mdl.set_property_value(mdl.prop(item_handle, "loadshape"), loadshape)
mdl.set_property_value(mdl.prop(item_handle, "loadshape_int"), loadshape_int)

mdl.set_property_value(mdl.prop(item_handle, "T_lim_low"), T_lim_low)
mdl.set_property_value(mdl.prop(item_handle, "T_lim_high"), T_lim_high)
mdl.set_property_value(mdl.prop(item_handle, "Ts_switch"), Ts_switch)
mdl.set_property_value(mdl.prop(item_handle, "Slen"), Slen)
mdl.set_property_value(mdl.prop(item_handle, "T_Ts_internal"), T_Ts_internal)

"""
mdl.set_handler_code(_VSConverter_mask, "pre_compile", _VSConverter_mask_pre_compile)

_VSConverter_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Voltage Source Converter</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">This component provides an average model of a three-phase full bridge DC to AC converter.</p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Internal PI controllers (with adjustable gains) are used to implement multiple modes of steady state operations. Note that this component will be converted to a conventional generator mode with only PQ and PV modes when simulated in OpenDSS.</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">When external control mode is selected, the operation mode can be selected and changed in real time using the following inputs to "Inverter control mode" input:</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">0 = PV operation mode</p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">1 = PQ operation mode</p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">2 = Vdc-Vac operation mode</p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">3 = Vdc-Q operation mode</p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">4 = Grid forming operation mode</p><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Active power P (in kilo Watts), Reactive power Q (In kilo VARs), Line RMS voltage (in Kilo-Volts), DC-Link voltage (in Kilo-Volts) and Line frequency (in Hz) can be controlled individually depending on mode of operation. Controller coefficients for above variables can be set in "Controller settings" tab.</p></body></html>
'''
mdl.set_description(_VSConverter_mask, _VSConverter_mask_desc)
mdl.set_property_value(mdl.prop(_VSConverter_mask, "loadshape"), "[0.5, 0.8, 1, 0.4, 0.5]")
mdl.set_property_value(mdl.prop(_VSConverter_mask, "loadshape_int"), "1")
mdl.set_property_value(mdl.prop(_VSConverter_mask, "loadshape_name"), "vsc1")


# Component: VSConverter.abc to dq1
_VSConverter_abc_to_dq1 = mdl.create_component(
    type_name="core/abc to dq",
    parent=_VSConverter,
    name="abc to dq1",
    rotation="up",
    flip="flip_none",
    position=(7440, 8248),
    hide_name=True,
    size=(48, 80)
)


# Component: VSConverter.Constant3
_VSConverter_Constant3 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant3",
    rotation="left",
    flip="flip_none",
    position=(7096, 8360),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant3, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant3, "value"), "0")


# Component: VSConverter.abc to dq2
_VSConverter_abc_to_dq2 = mdl.create_component(
    type_name="core/abc to dq",
    parent=_VSConverter,
    name="abc to dq2",
    rotation="up",
    flip="flip_none",
    position=(9232, 8936),
    hide_name=True,
    size=(48, 80)
)


# Component: VSConverter.Product1
_VSConverter_Product1 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter,
    name="Product1",
    rotation="up",
    flip="flip_none",
    position=(10296, 8792),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Gain9
_VSConverter_Gain9 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain9",
    rotation="up",
    flip="flip_none",
    position=(10376, 8792),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain9, "gain"), "1.5")


# Component: VSConverter.P_gen
_VSConverter_P_gen = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="P_gen",
    rotation="left",
    flip="flip_none",
    position=(10496, 8752),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_P_gen, "signal_name"), "P")
mdl.set_property_value(mdl.prop(_VSConverter_P_gen, "signal_type"), "power")


# Component: VSConverter.Product4
_VSConverter_Product4 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter,
    name="Product4",
    rotation="up",
    flip="flip_none",
    position=(10296, 8896),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Gain10
_VSConverter_Gain10 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain10",
    rotation="up",
    flip="flip_none",
    position=(10376, 8896),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain10, "gain"), "-1.5")


# Component: VSConverter.Q_gen
_VSConverter_Q_gen = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="Q_gen",
    rotation="left",
    flip="flip_none",
    position=(10496, 8856),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Q_gen, "signal_name"), "Q")
mdl.set_property_value(mdl.prop(_VSConverter_Q_gen, "signal_type"), "power")


# Component: VSConverter.Sum7
_VSConverter_Sum7 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum7",
    rotation="up",
    flip="flip_none",
    position=(6712, 8792),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum7, "signs"), "+-")


# Component: VSConverter.Integrator3
_VSConverter_Integrator3 = mdl.create_component(
    type_name="core/Integrator",
    parent=_VSConverter,
    name="Integrator3",
    rotation="up",
    flip="flip_none",
    position=(7448, 9008),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Integrator3, "limit_lower"), "-1000*vdc_set*0.05")
mdl.set_property_value(mdl.prop(_VSConverter_Integrator3, "limit_output"), "True")
mdl.set_property_value(mdl.prop(_VSConverter_Integrator3, "limit_upper"), "1000*vdc_set*0.05")


# Component: VSConverter.Sum8
_VSConverter_Sum8 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum8",
    rotation="up",
    flip="flip_none",
    position=(7536, 8944),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum8, "signs"), "++")


# Component: VSConverter.Signal switch3
_VSConverter_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(7016, 8928),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch3, "threshold"), "0.5")


# Component: VSConverter.Constant4
_VSConverter_Constant4 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant4",
    rotation="left",
    flip="flip_none",
    position=(6984, 9056),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant4, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant4, "value"), "0")


# Component: VSConverter.Signal switch4
_VSConverter_Signal_switch4 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch4",
    rotation="up",
    flip="flip_none",
    position=(7152, 8944),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch4, "threshold"), "0.5")


# Component: VSConverter.Sum9
_VSConverter_Sum9 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum9",
    rotation="up",
    flip="flip_none",
    position=(6808, 8400),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum9, "signs"), "+-")


# Component: VSConverter.Integrator4
_VSConverter_Integrator4 = mdl.create_component(
    type_name="core/Integrator",
    parent=_VSConverter,
    name="Integrator4",
    rotation="up",
    flip="flip_none",
    position=(7472, 8632),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Integrator4, "limit_lower"), "-1000*vdc_set*0.05")
mdl.set_property_value(mdl.prop(_VSConverter_Integrator4, "limit_output"), "True")
mdl.set_property_value(mdl.prop(_VSConverter_Integrator4, "limit_upper"), "1000*vdc_set*0.05")


# Component: VSConverter.Gain13
_VSConverter_Gain13 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain13",
    rotation="up",
    flip="flip_none",
    position=(7320, 8616),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain13, "gain"), "P_ki")


# Component: VSConverter.Gain14
_VSConverter_Gain14 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain14",
    rotation="up",
    flip="flip_none",
    position=(7320, 8496),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain14, "gain"), "P_kp")


# Component: VSConverter.Sum10
_VSConverter_Sum10 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum10",
    rotation="up",
    flip="flip_none",
    position=(7560, 8624),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum10, "signs"), "++")


# Component: VSConverter.Signal switch5
_VSConverter_Signal_switch5 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch5",
    rotation="up",
    flip="flip_none",
    position=(7112, 8560),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch5, "threshold"), "0.5")


# Component: VSConverter.Constant5
_VSConverter_Constant5 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant5",
    rotation="left",
    flip="flip_none",
    position=(7080, 8648),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant5, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant5, "value"), "0")


# Component: VSConverter.Signal switch6
_VSConverter_Signal_switch6 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch6",
    rotation="up",
    flip="flip_none",
    position=(7200, 8576),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch6, "threshold"), "0.5")


# Component: VSConverter.Sum11
_VSConverter_Sum11 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum11",
    rotation="up",
    flip="flip_none",
    position=(6720, 8960),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum11, "signs"), "+-")


# Component: VSConverter.V_gen
_VSConverter_V_gen = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="V_gen",
    rotation="up",
    flip="flip_none",
    position=(7872, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_V_gen, "signal_name"), "V")
mdl.set_property_value(mdl.prop(_VSConverter_V_gen, "signal_type"), "voltage")


# Component: VSConverter.Gain21
_VSConverter_Gain21 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain21",
    rotation="up",
    flip="flip_none",
    position=(10464, 8792),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain21, "gain"), "0.001")


# Component: VSConverter.Gain22
_VSConverter_Gain22 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain22",
    rotation="up",
    flip="flip_none",
    position=(10464, 8896),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain22, "gain"), "0.001")


# Component: VSConverter.Gain23
_VSConverter_Gain23 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain23",
    rotation="up",
    flip="flip_none",
    position=(7768, 8120),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain23, "gain"), "1.224745")


# Component: VSConverter.Constant9
_VSConverter_Constant9 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant9",
    rotation="up",
    flip="flip_none",
    position=(7248, 9176),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant9, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant9, "value"), "ext_mode")


# Component: VSConverter.Signal switch12
_VSConverter_Signal_switch12 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch12",
    rotation="up",
    flip="flip_none",
    position=(6920, 8912),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch12, "threshold"), "0.5")


# Component: VSConverter.Gain24
_VSConverter_Gain24 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain24",
    rotation="up",
    flip="flip_none",
    position=(7296, 8872),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain24, "gain"), "Q_kp")


# Component: VSConverter.Signal switch13
_VSConverter_Signal_switch13 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch13",
    rotation="up",
    flip="flip_none",
    position=(7392, 8888),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch13, "threshold"), "0.5")


# Component: VSConverter.Gain25
_VSConverter_Gain25 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain25",
    rotation="up",
    flip="flip_none",
    position=(7296, 8904),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain25, "gain"), "V_kp")


# Component: VSConverter.Signal switch14
_VSConverter_Signal_switch14 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch14",
    rotation="up",
    flip="flip_none",
    position=(7368, 9008),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch14, "threshold"), "0.5")


# Component: VSConverter.Gain26
_VSConverter_Gain26 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain26",
    rotation="up",
    flip="flip_none",
    position=(7280, 8992),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain26, "gain"), "Q_ki")


# Component: VSConverter.Gain27
_VSConverter_Gain27 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain27",
    rotation="up",
    flip="flip_none",
    position=(7280, 9024),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain27, "gain"), "V_ki")


# Component: VSConverter.C function1
_VSConverter_C_function1 = mdl.create_component(
    type_name="core/C function",
    parent=_VSConverter,
    name="C function1",
    rotation="up",
    flip="flip_none",
    position=(7432, 9200),
    hide_name=True,
    size=(192, 96)
)
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "input_terminals"), "real mode_external;inherit Mode_select_ext;inherit Mode_select_int;")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "input_terminals_dimensions"), "inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "input_terminals_feedthrough"), "True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "input_terminals_show_labels"), "True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "output_fnc"), "/*Begin code section*/
if (mode_external) {
    if (Mode_select_ext==0) {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_ext==1) {
        dED_sel = 1;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_ext==2) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_ext==3) {
        dED_sel = 1;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_ext==4) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 1;
    }
    else {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
}
else {
    if (Mode_select_int==0) {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_int==1) {
        dED_sel = 1;
        dEQ_sel = 1;
        GF_en = 0;
    }
    else if (Mode_select_int==2) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_int==3) {
        dED_sel = 1;
        dEQ_sel = 0;
        GF_en = 0;
    }
    else if (Mode_select_int==4) {
        dED_sel = 0;
        dEQ_sel = 0;
        GF_en = 1;
    }
    else {
        dED_sel = 0;
        dEQ_sel = 1;
        GF_en = 0;
    }
}
/*End code section*/")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "output_terminals"), "real dED_sel;real dEQ_sel;real GF_en;")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "output_terminals_dimensions"), "inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "output_terminals_feedthrough"), "True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function1, "output_terminals_show_labels"), "True;True;True")


# Component: VSConverter.Constant13
_VSConverter_Constant13 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant13",
    rotation="up",
    flip="flip_none",
    position=(7248, 9224),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant13, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant13, "value"), "ctrl_mode_int")


# Component: VSConverter.Gain28
_VSConverter_Gain28 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain28",
    rotation="up",
    flip="flip_none",
    position=(7320, 8528),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain28, "gain"), "vdc_kp")


# Component: VSConverter.Gain29
_VSConverter_Gain29 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain29",
    rotation="up",
    flip="flip_none",
    position=(7320, 8648),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain29, "gain"), "vdc_ki")


# Component: VSConverter.Sum14
_VSConverter_Sum14 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum14",
    rotation="up",
    flip="flip_none",
    position=(6928, 8672),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum14, "signs"), "+-")


# Component: VSConverter.Gain30
_VSConverter_Gain30 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain30",
    rotation="up",
    flip="flip_none",
    position=(6768, 8664),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain30, "gain"), "1000")


# Component: VSConverter.Signal switch15
_VSConverter_Signal_switch15 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch15",
    rotation="up",
    flip="flip_none",
    position=(7392, 8512),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch15, "threshold"), "0.5")


# Component: VSConverter.Signal switch16
_VSConverter_Signal_switch16 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch16",
    rotation="up",
    flip="flip_none",
    position=(7400, 8632),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch16, "threshold"), "0.5")


# Component: VSConverter.Signal switch17
_VSConverter_Signal_switch17 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch17",
    rotation="up",
    flip="flip_none",
    position=(7024, 8544),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch17, "threshold"), "0.5")


# Component: VSConverter.Constant14
_VSConverter_Constant14 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant14",
    rotation="up",
    flip="flip_none",
    position=(6688, 9200),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant14, "execution_rate"), "Ts")


# Component: VSConverter.Gain32
_VSConverter_Gain32 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain32",
    rotation="up",
    flip="flip_none",
    position=(7184, 9200),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Vinv_a
_VSConverter_Vinv_a = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_VSConverter,
    name="Vinv_a",
    rotation="left",
    flip="flip_vertical",
    position=(8304, 9568),
    hide_name=False,
    size=(64, 32)
)


# Component: VSConverter.Vinv_b
_VSConverter_Vinv_b = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_VSConverter,
    name="Vinv_b",
    rotation="left",
    flip="flip_vertical",
    position=(8376, 9632),
    hide_name=False,
    size=(64, 32)
)


# Component: VSConverter.Vinv_c
_VSConverter_Vinv_c = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_VSConverter,
    name="Vinv_c",
    rotation="left",
    flip="flip_vertical",
    position=(8448, 9704),
    hide_name=False,
    size=(64, 32)
)


# Component: VSConverter.Ra
_VSConverter_Ra = mdl.create_component(
    type_name="core/Resistor",
    parent=_VSConverter,
    name="Ra",
    rotation="up",
    flip="flip_none",
    position=(8560, 9424),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Ra, "resistance"), "Rac")


# Component: VSConverter.Rb
_VSConverter_Rb = mdl.create_component(
    type_name="core/Resistor",
    parent=_VSConverter,
    name="Rb",
    rotation="up",
    flip="flip_none",
    position=(8560, 9504),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Rb, "resistance"), "Rac")


# Component: VSConverter.Rc
_VSConverter_Rc = mdl.create_component(
    type_name="core/Resistor",
    parent=_VSConverter,
    name="Rc",
    rotation="up",
    flip="flip_none",
    position=(8560, 9584),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Rc, "resistance"), "Rac")


# Component: VSConverter.La
_VSConverter_La = mdl.create_component(
    type_name="core/Inductor",
    parent=_VSConverter,
    name="La",
    rotation="up",
    flip="flip_none",
    position=(8688, 9424),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_La, "inductance"), "Lac")


# Component: VSConverter.Lb
_VSConverter_Lb = mdl.create_component(
    type_name="core/Inductor",
    parent=_VSConverter,
    name="Lb",
    rotation="up",
    flip="flip_none",
    position=(8688, 9504),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Lb, "inductance"), "Lac")


# Component: VSConverter.Lc
_VSConverter_Lc = mdl.create_component(
    type_name="core/Inductor",
    parent=_VSConverter,
    name="Lc",
    rotation="up",
    flip="flip_none",
    position=(8696, 9584),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Lc, "inductance"), "Lac")


# Component: VSConverter.Ia
_VSConverter_Ia = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_VSConverter,
    name="Ia",
    rotation="up",
    flip="flip_none",
    position=(8808, 9424),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_VSConverter_Ia, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Ia, "sig_output"), "True")


# Component: VSConverter.Ib
_VSConverter_Ib = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_VSConverter,
    name="Ib",
    rotation="up",
    flip="flip_none",
    position=(8808, 9504),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_VSConverter_Ib, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Ib, "sig_output"), "True")


# Component: VSConverter.Ic
_VSConverter_Ic = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_VSConverter,
    name="Ic",
    rotation="up",
    flip="flip_none",
    position=(8808, 9584),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_VSConverter_Ic, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Ic, "sig_output"), "True")


# Component: VSConverter.Va
_VSConverter_Va = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_VSConverter,
    name="Va",
    rotation="right",
    flip="flip_none",
    position=(8960, 9688),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_VSConverter_Va, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Va, "sig_output"), "True")


# Component: VSConverter.Vb
_VSConverter_Vb = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_VSConverter,
    name="Vb",
    rotation="right",
    flip="flip_none",
    position=(9040, 9688),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_VSConverter_Vb, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Vb, "sig_output"), "True")


# Component: VSConverter.Vc
_VSConverter_Vc = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_VSConverter,
    name="Vc",
    rotation="right",
    flip="flip_none",
    position=(9120, 9688),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_VSConverter_Vc, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Vc, "sig_output"), "True")


# Component: VSConverter.Sum15
_VSConverter_Sum15 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum15",
    rotation="up",
    flip="flip_none",
    position=(10296, 8488),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum15, "signs"), "+-")


# Component: VSConverter.Sum16
_VSConverter_Sum16 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum16",
    rotation="up",
    flip="flip_none",
    position=(10296, 8592),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum16, "signs"), "+-")


# Component: VSConverter.Sum17
_VSConverter_Sum17 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum17",
    rotation="up",
    flip="flip_none",
    position=(10296, 8696),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum17, "signs"), "+-")


# Component: VSConverter.Vab
_VSConverter_Vab = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="Vab",
    rotation="up",
    flip="flip_none",
    position=(10384, 8488),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Vab, "signal_name"), "V")
mdl.set_property_value(mdl.prop(_VSConverter_Vab, "signal_type"), "voltage")


# Component: VSConverter.Vbc
_VSConverter_Vbc = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="Vbc",
    rotation="up",
    flip="flip_none",
    position=(10384, 8592),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Vbc, "signal_name"), "V")
mdl.set_property_value(mdl.prop(_VSConverter_Vbc, "signal_type"), "voltage")


# Component: VSConverter.Vca
_VSConverter_Vca = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="Vca",
    rotation="up",
    flip="flip_none",
    position=(10384, 8696),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Vca, "signal_name"), "V")
mdl.set_property_value(mdl.prop(_VSConverter_Vca, "signal_type"), "voltage")


# Component: VSConverter.Subsystem8
_VSConverter_Subsystem8 = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_VSConverter,
    name="Subsystem8",
    rotation="right",
    flip="flip_vertical",
    position=(7584, 8176),
    hide_name=True,
    size=(48, 64)
)


# Component: VSConverter.Subsystem8.Constant8
_VSConverter_Subsystem8_Constant8 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem8,
    name="Constant8",
    rotation="up",
    flip="flip_none",
    position=(8744, 8352),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant8, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant8, "value"), "np.pi")


# Component: VSConverter.Subsystem8.Comparator5
_VSConverter_Subsystem8_Comparator5 = mdl.create_component(
    type_name="core/Comparator",
    parent=_VSConverter_Subsystem8,
    name="Comparator5",
    rotation="up",
    flip="flip_none",
    position=(9008, 8312),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Subsystem8.Signal switch14
_VSConverter_Subsystem8_Signal_switch14 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem8,
    name="Signal switch14",
    rotation="up",
    flip="flip_none",
    position=(9072, 8360),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Signal_switch14, "threshold"), "0.5")


# Component: VSConverter.Subsystem8.Sum21
_VSConverter_Subsystem8_Sum21 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem8,
    name="Sum21",
    rotation="up",
    flip="flip_none",
    position=(8888, 8432),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Sum21, "signs"), "+-")


# Component: VSConverter.Subsystem8.Constant9
_VSConverter_Subsystem8_Constant9 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem8,
    name="Constant9",
    rotation="up",
    flip="flip_none",
    position=(8744, 8424),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant9, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant9, "value"), "-np.pi")


# Component: VSConverter.Subsystem8.Constant10
_VSConverter_Subsystem8_Constant10 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem8,
    name="Constant10",
    rotation="up",
    flip="flip_none",
    position=(8944, 8328),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant10, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant10, "value"), "0")


# Component: VSConverter.Subsystem8.Sum16
_VSConverter_Subsystem8_Sum16 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem8,
    name="Sum16",
    rotation="up",
    flip="flip_none",
    position=(8160, 7920),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem8.Product5
_VSConverter_Subsystem8_Product5 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter_Subsystem8,
    name="Product5",
    rotation="up",
    flip="flip_none",
    position=(8080, 7888),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem8.Mathematical function2
_VSConverter_Subsystem8_Mathematical_function2 = mdl.create_component(
    type_name="core/Mathematical function",
    parent=_VSConverter_Subsystem8,
    name="Mathematical function2",
    rotation="up",
    flip="flip_none",
    position=(8264, 7920),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Mathematical_function2, "mathematical_fn"), "sqrt")


# Component: VSConverter.Subsystem8.Product4
_VSConverter_Subsystem8_Product4 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter_Subsystem8,
    name="Product4",
    rotation="up",
    flip="flip_none",
    position=(8080, 7968),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem8.Trigonometric function4
_VSConverter_Subsystem8_Trigonometric_function4 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_VSConverter_Subsystem8,
    name="Trigonometric function4",
    rotation="up",
    flip="flip_none",
    position=(8688, 8032),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Trigonometric_function4, "trigonometric_fn"), "asin")


# Component: VSConverter.Subsystem8.Product7
_VSConverter_Subsystem8_Product7 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter_Subsystem8,
    name="Product7",
    rotation="up",
    flip="flip_none",
    position=(8512, 7872),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Product7, "signs"), "*/")


# Component: VSConverter.Subsystem8.Relational operator2
_VSConverter_Subsystem8_Relational_operator2 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_VSConverter_Subsystem8,
    name="Relational operator2",
    rotation="up",
    flip="flip_none",
    position=(8344, 7992),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Subsystem8.Constant5
_VSConverter_Subsystem8_Constant5 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem8,
    name="Constant5",
    rotation="up",
    flip="flip_none",
    position=(8264, 8000),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant5, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant5, "value"), "0")


# Component: VSConverter.Subsystem8.Signal switch4
_VSConverter_Subsystem8_Signal_switch4 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem8,
    name="Signal switch4",
    rotation="up",
    flip="flip_none",
    position=(8768, 8016),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Signal_switch4, "threshold"), "0.5")


# Component: VSConverter.Subsystem8.Signal switch12
_VSConverter_Subsystem8_Signal_switch12 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem8,
    name="Signal switch12",
    rotation="up",
    flip="flip_none",
    position=(8392, 8080),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Signal_switch12, "threshold"), "0.5")


# Component: VSConverter.Subsystem8.Sum19
_VSConverter_Subsystem8_Sum19 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem8,
    name="Sum19",
    rotation="up",
    flip="flip_none",
    position=(8232, 8072),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem8.Constant6
_VSConverter_Subsystem8_Constant6 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem8,
    name="Constant6",
    rotation="up",
    flip="flip_none",
    position=(8152, 8080),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant6, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant6, "value"), "0.001")


# Component: VSConverter.Subsystem8.Constant7
_VSConverter_Subsystem8_Constant7 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem8,
    name="Constant7",
    rotation="up",
    flip="flip_none",
    position=(8608, 8000),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant7, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Constant7, "value"), "0")


# Component: VSConverter.Subsystem8.Comparator4
_VSConverter_Subsystem8_Comparator4 = mdl.create_component(
    type_name="core/Comparator",
    parent=_VSConverter_Subsystem8,
    name="Comparator4",
    rotation="up",
    flip="flip_none",
    position=(8264, 8160),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Subsystem8.Signal switch13
_VSConverter_Subsystem8_Signal_switch13 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem8,
    name="Signal switch13",
    rotation="up",
    flip="flip_none",
    position=(9000, 8208),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Signal_switch13, "threshold"), "0.5")


# Component: VSConverter.Subsystem8.Sum20
_VSConverter_Subsystem8_Sum20 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem8,
    name="Sum20",
    rotation="up",
    flip="flip_none",
    position=(8880, 8360),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem8_Sum20, "signs"), "+-")


# Port: VSConverter.Subsystem8.mag
_VSConverter_Subsystem8_mag = mdl.create_port(
    name="mag",
    parent=_VSConverter_Subsystem8,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8336, 7920)
)

# Port: VSConverter.Subsystem8.d
_VSConverter_Subsystem8_d = mdl.create_port(
    name="d",
    parent=_VSConverter_Subsystem8,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7776, 8304)
)

# Port: VSConverter.Subsystem8.q
_VSConverter_Subsystem8_q = mdl.create_port(
    name="q",
    parent=_VSConverter_Subsystem8,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7696, 7872)
)

# Port: VSConverter.Subsystem8.Angle
_VSConverter_Subsystem8_Angle = mdl.create_port(
    name="Angle",
    parent=_VSConverter_Subsystem8,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(9072, 8208)
)

# Junction: VSConverter.Subsystem8.Junction24
_VSConverter_Subsystem8_Junction24 = mdl.create_junction(
    name="Junction24",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8032, 7896)
)

# Junction: VSConverter.Subsystem8.Junction29
_VSConverter_Subsystem8_Junction29 = mdl.create_junction(
    name="Junction29",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8024, 7976)
)

# Junction: VSConverter.Subsystem8.Junction33
_VSConverter_Subsystem8_Junction33 = mdl.create_junction(
    name="Junction33",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(7824, 8304)
)

# Junction: VSConverter.Subsystem8.Junction35
_VSConverter_Subsystem8_Junction35 = mdl.create_junction(
    name="Junction35",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8304, 7920)
)

# Junction: VSConverter.Subsystem8.Junction37
_VSConverter_Subsystem8_Junction37 = mdl.create_junction(
    name="Junction37",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8392, 7992)
)

# Junction: VSConverter.Subsystem8.Junction38
_VSConverter_Subsystem8_Junction38 = mdl.create_junction(
    name="Junction38",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8304, 7984)
)

# Junction: VSConverter.Subsystem8.Junction39
_VSConverter_Subsystem8_Junction39 = mdl.create_junction(
    name="Junction39",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8304, 8024)
)

# Junction: VSConverter.Subsystem8.Junction40
_VSConverter_Subsystem8_Junction40 = mdl.create_junction(
    name="Junction40",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8184, 8080)
)

# Junction: VSConverter.Subsystem8.Junction43
_VSConverter_Subsystem8_Junction43 = mdl.create_junction(
    name="Junction43",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8816, 8192)
)

# Junction: VSConverter.Subsystem8.Junction44
_VSConverter_Subsystem8_Junction44 = mdl.create_junction(
    name="Junction44",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8816, 8304)
)

# Junction: VSConverter.Subsystem8.Junction45
_VSConverter_Subsystem8_Junction45 = mdl.create_junction(
    name="Junction45",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(8816, 8368)
)

# Junction: VSConverter.Subsystem8.Junction46
_VSConverter_Subsystem8_Junction46 = mdl.create_junction(
    name="Junction46",
    parent=_VSConverter_Subsystem8,
    kind="sp",
    position=(7792, 7872)
)

# Component: VSConverter.Comparator1
_VSConverter_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_VSConverter,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(8224, 8264),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Clock1
_VSConverter_Clock1 = mdl.create_component(
    type_name="core/Clock",
    parent=_VSConverter,
    name="Clock1",
    rotation="up",
    flip="flip_none",
    position=(8080, 8256),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Clock1, "execution_rate"), "Ts")


# Component: VSConverter.Constant21
_VSConverter_Constant21 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant21",
    rotation="up",
    flip="flip_none",
    position=(8128, 8296),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant21, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant21, "value"), "cont_t")


# Component: VSConverter.Constant22
_VSConverter_Constant22 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant22",
    rotation="up",
    flip="flip_none",
    position=(6224, 8384),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant22, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant22, "value"), "Sinv")


# Component: VSConverter.Constant23
_VSConverter_Constant23 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant23",
    rotation="up",
    flip="flip_none",
    position=(6224, 8424),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant23, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant23, "value"), "Qinv")


# Component: VSConverter.Constant24
_VSConverter_Constant24 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant24",
    rotation="up",
    flip="flip_none",
    position=(6224, 8344),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant24, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant24, "value"), "Fs")


# Component: VSConverter.Constant25
_VSConverter_Constant25 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant25",
    rotation="up",
    flip="flip_none",
    position=(6224, 8472),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant25, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant25, "value"), "vac_set")


# Component: VSConverter.dq to abc1
_VSConverter_dq_to_abc1 = mdl.create_component(
    type_name="core/dq to abc",
    parent=_VSConverter,
    name="dq to abc1",
    rotation="up",
    flip="flip_none",
    position=(8832, 8816),
    hide_name=False,
    size=(48, 80)
)
mdl.set_property_value(mdl.prop(_VSConverter_dq_to_abc1, "execution_rate"), "inherit")


# Component: VSConverter.Constant27
_VSConverter_Constant27 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant27",
    rotation="left",
    flip="flip_none",
    position=(8744, 8872),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant27, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant27, "value"), "0")


# Component: VSConverter.Gain33
_VSConverter_Gain33 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain33",
    rotation="up",
    flip="flip_none",
    position=(6976, 8248),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain33, "gain"), "2*np.pi")


# Component: VSConverter.Constant28
_VSConverter_Constant28 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant28",
    rotation="left",
    flip="flip_none",
    position=(7016, 8360),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant28, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant28, "value"), "2*np.pi")


# Component: VSConverter.C function2
_VSConverter_C_function2 = mdl.create_component(
    type_name="core/C function",
    parent=_VSConverter,
    name="C function2",
    rotation="up",
    flip="flip_none",
    position=(7208, 8272),
    hide_name=True,
    size=(112, 80)
)
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "global_variables"), "real out_mem;")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "init_fnc"), "/*Begin code section*/
out_mem = ang_init;
/*End code section*/")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "input_terminals"), "real in;real reset_level;real dt;real ang_init;")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "input_terminals_feedthrough"), "True;True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "input_terminals_show_labels"), "True;True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "output_fnc"), "/*Begin code section*/
out = dt * in + out_mem;
if (out>reset_level) {
    out = out - reset_level;
}

out_mem = out;
/*End code section*/")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "output_terminals_dimensions"), "inherit")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "output_terminals_feedthrough"), "True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function2, "output_terminals_show_labels"), "True")


# Component: VSConverter.Constant30
_VSConverter_Constant30 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant30",
    rotation="left",
    flip="flip_none",
    position=(7056, 8360),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant30, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant30, "value"), "Ts")


# Component: VSConverter.Sum19
_VSConverter_Sum19 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum19",
    rotation="up",
    flip="flip_none",
    position=(8736, 8952),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum19, "signs"), "++")


# Component: VSConverter.Constant31
_VSConverter_Constant31 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant31",
    rotation="up",
    flip="flip_none",
    position=(8664, 8960),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant31, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant31, "value"), "Ts*Fs*2*np.pi")


# Component: VSConverter.Sum23
_VSConverter_Sum23 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum23",
    rotation="up",
    flip="flip_none",
    position=(7944, 8584),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum23, "signs"), "++")


# Component: VSConverter.Limit1
_VSConverter_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_VSConverter,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7632, 8624),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Limit1, "lower_limit"), "-1000*vdc_set*0.05")
mdl.set_property_value(mdl.prop(_VSConverter_Limit1, "upper_limit"), "1000*vdc_set*0.05")


# Component: VSConverter.Limit2
_VSConverter_Limit2 = mdl.create_component(
    type_name="core/Limit",
    parent=_VSConverter,
    name="Limit2",
    rotation="up",
    flip="flip_none",
    position=(7616, 8944),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Limit2, "lower_limit"), "-1000*vdc_set*0.05")
mdl.set_property_value(mdl.prop(_VSConverter_Limit2, "upper_limit"), "1000*vdc_set*0.05")


# Component: VSConverter.Sum24
_VSConverter_Sum24 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum24",
    rotation="up",
    flip="flip_none",
    position=(7936, 8736),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum24, "signs"), "+")


# Component: VSConverter.Sum25
_VSConverter_Sum25 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum25",
    rotation="up",
    flip="flip_none",
    position=(9304, 8704),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum25, "signs"), "++")


# Component: VSConverter.Sum26
_VSConverter_Sum26 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum26",
    rotation="up",
    flip="flip_none",
    position=(6912, 8528),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum26, "signs"), "+-")


# Component: VSConverter.Constant38
_VSConverter_Constant38 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant38",
    rotation="up",
    flip="flip_none",
    position=(6640, 8408),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant38, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant38, "value"), "0")


# Component: VSConverter.Rate Limiter1
_VSConverter_Rate_Limiter1 = mdl.create_component(
    type_name="core/Rate Limiter",
    parent=_VSConverter,
    name="Rate Limiter1",
    rotation="right",
    flip="flip_none",
    position=(6848, 8472),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Rate_Limiter1, "falling_limit"), "-1*Sinv*Fs*1000")
mdl.set_property_value(mdl.prop(_VSConverter_Rate_Limiter1, "rising_limit"), "1*Sinv*Fs*1000")


# Component: VSConverter.Sum27
_VSConverter_Sum27 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum27",
    rotation="up",
    flip="flip_none",
    position=(6832, 8896),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum27, "signs"), "+-")


# Component: VSConverter.Constant39
_VSConverter_Constant39 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant39",
    rotation="up",
    flip="flip_none",
    position=(6560, 8800),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant39, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant39, "value"), "0")


# Component: VSConverter.Rate Limiter4
_VSConverter_Rate_Limiter4 = mdl.create_component(
    type_name="core/Rate Limiter",
    parent=_VSConverter,
    name="Rate Limiter4",
    rotation="right",
    flip="flip_none",
    position=(6776, 8840),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Rate_Limiter4, "falling_limit"), "-1*Sinv*Fs*1000")
mdl.set_property_value(mdl.prop(_VSConverter_Rate_Limiter4, "rising_limit"), "1*Sinv*Fs*1000")


# Component: VSConverter.Isp1
_VSConverter_Isp1 = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_VSConverter,
    name="Isp1",
    rotation="right",
    flip="flip_none",
    position=(7880, 9520),
    hide_name=False,
    size=(64, 32)
)


# Component: VSConverter.C function3
_VSConverter_C_function3 = mdl.create_component(
    type_name="core/C function",
    parent=_VSConverter,
    name="C function3",
    rotation="up",
    flip="flip_none",
    position=(9824, 8776),
    hide_name=True,
    size=(120, 392)
)
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "global_variables"), "real ia_add;real ib_add;real ic_add;real ia_addn;real ib_addn;real ic_addn;real idcp;real idcn;real Emax;real Z;real VLL;real con_mode;")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "init_fnc"), "/*Begin code section*/
Z = sqrt(Rac*Rac+Fs*Fs*4*Lac*Lac*9.8696);
/*End code section*/")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "input_terminals"), "real Vdc;real Ea;inherit Eb;inherit Ec;inherit ia;inherit ib;inherit ic;inherit va;inherit vb;inherit vc;inherit mc;inherit con_en;")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "input_terminals_feedthrough"), "True;True;True;True;True;True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "input_terminals_show_labels"), "True;True;True;True;True;True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "output_fnc"), "/*Begin code section*/
Ea1 = Ea;
Eb1 = Eb;
Ec1 = Ec;
Emax = Ea-Eb;
VLL = va-vb;
con_mode = 1;
if ((vb-va)>VLL) {
    Emax = Eb-Ea;
    VLL = vb-va;
    con_mode = 2;
}
else if ((vb-vc)>VLL) {
    Emax = Eb-Ec;
    VLL = vb-vc;
    con_mode = 3;
}
else if ((vc-vb)>VLL) {
    Emax = Ec-Eb;
    VLL = vc-vb;
    con_mode = 4;
}
else if ((vc-va)>VLL) {
    Emax = Ec-Ea;
    VLL = vc-va;
    con_mode = 5;
}
else if ((va-vc)>VLL) {
    Emax = Ea-Ec;
    VLL = va-vc;
    con_mode = 6;
}



if (con_en==1) {
if (Vdc<VLL) {
    if (con_mode==1) {
        Ea1 = Vdc/2;
        Eb1 = -Vdc/2;
    }
    else if (con_mode==2) {
        Eb1 = Vdc/2;
        Ea1 = -Vdc/2;
    }
    else if (con_mode==3) {
        Eb1 = Vdc/2;
        Ec1 = -Vdc/2;
    }
    else if (con_mode==4) {
        Ec1 = Vdc/2;
        Eb1 = -Vdc/2;
    }
    else if (con_mode==5) {
        Ec1 = Vdc/2;
        Ea1 = -Vdc/2;
    }
    else if (con_mode==6) {
        Ea1 = Vdc/2;
        Ec1 = -Vdc/2;
    }

}
}







if (ia>=0) {
    if (Ea1>=0) {
        ia_add = -ia;
        ia_addn = 0;
    }
    else {
        ia_add = 0;
        ia_addn = ia;
    }
}
else {
    if (Ea1>=0) {
        ia_add = -ia;
        ia_addn = 0;
    }
    else {
        ia_add = 0;
        ia_addn = ia;
    }
}


if (ib>=0) {
    if (Eb1>=0) {
        ib_add = -ib;
        ib_addn = 0;
    }
    else {
        ib_add = 0;
        ib_addn = ib;
    }
}
else {
    if (Eb1>=0) {
        ib_add = -ib;
        ib_addn = 0;
    }
    else {
        ib_add = 0;
        ib_addn = ib;
    }
}


if (ic>=0) {
    if (Ec1>=0) {
        ic_add = -ic;
        ic_addn = 0;
    }
    else {
        ic_add = 0;
        ic_addn = ic;
    }
}
else {
    if (Ec1>=0) {
        ic_add = -ic;
        ic_addn = 0;
    }
    else {
        ic_add = 0;
        ic_addn = ic;
    }
}

idcp = mc*(ia_add + ib_add + ic_add);
idcn = mc*(ia_addn + ib_addn + ic_addn);

if (idcp>=0 && idcp>=idcn) {
    idc = idcp;
}
else if (idcp<0 && idcp>=idcn) {
    idc = idcn;
}
else if (idcp>=0 && idcp<idcn) {
    idc = idcn;
}
else if (idcp<0 && idcp<idcn) {
    idc = idcp;
}
else {
    idc = idcp;
}


if (Vdc<-2) {
    idc = -Vdc;
}
/*End code section*/")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "output_terminals"), "real idc;real Ea1;real Eb1;real Ec1;")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "output_terminals_dimensions"), "inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "output_terminals_feedthrough"), "True;True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "output_terminals_show_labels"), "True;True;True;True")
mdl.set_property_value(mdl.prop(_VSConverter_C_function3, "parameters"), "real Rac;real Lac;real Fs;")


# Component: VSConverter.Va1
_VSConverter_Va1 = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_VSConverter,
    name="Va1",
    rotation="right",
    flip="flip_none",
    position=(7976, 9512),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_VSConverter_Va1, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Va1, "sig_output"), "True")


# Component: VSConverter.DC_C
_VSConverter_DC_C = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="DC_C",
    rotation="left",
    flip="flip_none",
    position=(9920, 8560),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_DC_C, "signal_name"), "V")
mdl.set_property_value(mdl.prop(_VSConverter_DC_C, "signal_type"), "current")


# Component: VSConverter.DC_VDC
_VSConverter_DC_VDC = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="DC_VDC",
    rotation="up",
    flip="flip_none",
    position=(8056, 9568),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_DC_VDC, "signal_name"), "V")
mdl.set_property_value(mdl.prop(_VSConverter_DC_VDC, "signal_type"), "voltage")


# Component: VSConverter.Subsystem9
_VSConverter_Subsystem9 = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_VSConverter,
    name="Subsystem9",
    rotation="up",
    flip="flip_vertical",
    position=(8064, 8672),
    hide_name=True,
    size=(48, 64)
)


# Component: VSConverter.Subsystem9.Product5
_VSConverter_Subsystem9_Product5 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter_Subsystem9,
    name="Product5",
    rotation="up",
    flip="flip_none",
    position=(8080, 7888),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem9.Sum16
_VSConverter_Subsystem9_Sum16 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem9,
    name="Sum16",
    rotation="up",
    flip="flip_none",
    position=(8160, 7920),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem9.Mathematical function2
_VSConverter_Subsystem9_Mathematical_function2 = mdl.create_component(
    type_name="core/Mathematical function",
    parent=_VSConverter_Subsystem9,
    name="Mathematical function2",
    rotation="up",
    flip="flip_none",
    position=(8264, 7920),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Mathematical_function2, "mathematical_fn"), "sqrt")


# Component: VSConverter.Subsystem9.Product4
_VSConverter_Subsystem9_Product4 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter_Subsystem9,
    name="Product4",
    rotation="up",
    flip="flip_none",
    position=(8080, 7968),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem9.Trigonometric function4
_VSConverter_Subsystem9_Trigonometric_function4 = mdl.create_component(
    type_name="core/Trigonometric function",
    parent=_VSConverter_Subsystem9,
    name="Trigonometric function4",
    rotation="up",
    flip="flip_none",
    position=(8688, 8032),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Trigonometric_function4, "trigonometric_fn"), "asin")


# Component: VSConverter.Subsystem9.Product7
_VSConverter_Subsystem9_Product7 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter_Subsystem9,
    name="Product7",
    rotation="up",
    flip="flip_none",
    position=(8512, 7872),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Product7, "signs"), "*/")


# Component: VSConverter.Subsystem9.Relational operator2
_VSConverter_Subsystem9_Relational_operator2 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_VSConverter_Subsystem9,
    name="Relational operator2",
    rotation="up",
    flip="flip_none",
    position=(8344, 7992),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Subsystem9.Constant5
_VSConverter_Subsystem9_Constant5 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem9,
    name="Constant5",
    rotation="up",
    flip="flip_none",
    position=(8264, 8000),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant5, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant5, "value"), "0")


# Component: VSConverter.Subsystem9.Signal switch4
_VSConverter_Subsystem9_Signal_switch4 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem9,
    name="Signal switch4",
    rotation="up",
    flip="flip_none",
    position=(8768, 8016),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Signal_switch4, "threshold"), "0.5")


# Component: VSConverter.Subsystem9.Signal switch12
_VSConverter_Subsystem9_Signal_switch12 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem9,
    name="Signal switch12",
    rotation="up",
    flip="flip_none",
    position=(8392, 8080),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Signal_switch12, "threshold"), "0.5")


# Component: VSConverter.Subsystem9.Sum19
_VSConverter_Subsystem9_Sum19 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem9,
    name="Sum19",
    rotation="up",
    flip="flip_none",
    position=(8232, 8072),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Subsystem9.Constant6
_VSConverter_Subsystem9_Constant6 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem9,
    name="Constant6",
    rotation="up",
    flip="flip_none",
    position=(8152, 8080),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant6, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant6, "value"), "0.001")


# Component: VSConverter.Subsystem9.Constant7
_VSConverter_Subsystem9_Constant7 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem9,
    name="Constant7",
    rotation="up",
    flip="flip_none",
    position=(8608, 8000),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant7, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant7, "value"), "0")


# Component: VSConverter.Subsystem9.Comparator4
_VSConverter_Subsystem9_Comparator4 = mdl.create_component(
    type_name="core/Comparator",
    parent=_VSConverter_Subsystem9,
    name="Comparator4",
    rotation="up",
    flip="flip_none",
    position=(8264, 8160),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Subsystem9.Signal switch13
_VSConverter_Subsystem9_Signal_switch13 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem9,
    name="Signal switch13",
    rotation="up",
    flip="flip_none",
    position=(9000, 8208),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Signal_switch13, "threshold"), "0.5")


# Component: VSConverter.Subsystem9.Sum20
_VSConverter_Subsystem9_Sum20 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem9,
    name="Sum20",
    rotation="up",
    flip="flip_none",
    position=(8880, 8360),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Sum20, "signs"), "+-")


# Component: VSConverter.Subsystem9.Constant8
_VSConverter_Subsystem9_Constant8 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem9,
    name="Constant8",
    rotation="up",
    flip="flip_none",
    position=(8744, 8352),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant8, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant8, "value"), "np.pi")


# Component: VSConverter.Subsystem9.Comparator5
_VSConverter_Subsystem9_Comparator5 = mdl.create_component(
    type_name="core/Comparator",
    parent=_VSConverter_Subsystem9,
    name="Comparator5",
    rotation="up",
    flip="flip_none",
    position=(9008, 8312),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Subsystem9.Signal switch14
_VSConverter_Subsystem9_Signal_switch14 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_Subsystem9,
    name="Signal switch14",
    rotation="up",
    flip="flip_none",
    position=(9072, 8360),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Signal_switch14, "threshold"), "0.5")


# Component: VSConverter.Subsystem9.Sum21
_VSConverter_Subsystem9_Sum21 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter_Subsystem9,
    name="Sum21",
    rotation="up",
    flip="flip_none",
    position=(8888, 8432),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Sum21, "signs"), "+-")


# Component: VSConverter.Subsystem9.Constant9
_VSConverter_Subsystem9_Constant9 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem9,
    name="Constant9",
    rotation="up",
    flip="flip_none",
    position=(8744, 8424),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant9, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant9, "value"), "-np.pi")


# Component: VSConverter.Subsystem9.Constant10
_VSConverter_Subsystem9_Constant10 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_Subsystem9,
    name="Constant10",
    rotation="up",
    flip="flip_none",
    position=(8944, 8328),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant10, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Subsystem9_Constant10, "value"), "0")


# Port: VSConverter.Subsystem9.mag
_VSConverter_Subsystem9_mag = mdl.create_port(
    name="mag",
    parent=_VSConverter_Subsystem9,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8336, 7920)
)

# Port: VSConverter.Subsystem9.d
_VSConverter_Subsystem9_d = mdl.create_port(
    name="d",
    parent=_VSConverter_Subsystem9,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7776, 8304)
)

# Port: VSConverter.Subsystem9.q
_VSConverter_Subsystem9_q = mdl.create_port(
    name="q",
    parent=_VSConverter_Subsystem9,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7696, 7872)
)

# Port: VSConverter.Subsystem9.Angle
_VSConverter_Subsystem9_Angle = mdl.create_port(
    name="Angle",
    parent=_VSConverter_Subsystem9,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(9072, 8208)
)

# Junction: VSConverter.Subsystem9.Junction45
_VSConverter_Subsystem9_Junction45 = mdl.create_junction(
    name="Junction45",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8816, 8368)
)

# Junction: VSConverter.Subsystem9.Junction46
_VSConverter_Subsystem9_Junction46 = mdl.create_junction(
    name="Junction46",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(7792, 7872)
)

# Junction: VSConverter.Subsystem9.Junction24
_VSConverter_Subsystem9_Junction24 = mdl.create_junction(
    name="Junction24",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8032, 7896)
)

# Junction: VSConverter.Subsystem9.Junction29
_VSConverter_Subsystem9_Junction29 = mdl.create_junction(
    name="Junction29",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8024, 7976)
)

# Junction: VSConverter.Subsystem9.Junction33
_VSConverter_Subsystem9_Junction33 = mdl.create_junction(
    name="Junction33",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(7824, 8304)
)

# Junction: VSConverter.Subsystem9.Junction35
_VSConverter_Subsystem9_Junction35 = mdl.create_junction(
    name="Junction35",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8304, 7920)
)

# Junction: VSConverter.Subsystem9.Junction37
_VSConverter_Subsystem9_Junction37 = mdl.create_junction(
    name="Junction37",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8392, 7992)
)

# Junction: VSConverter.Subsystem9.Junction38
_VSConverter_Subsystem9_Junction38 = mdl.create_junction(
    name="Junction38",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8304, 7984)
)

# Junction: VSConverter.Subsystem9.Junction39
_VSConverter_Subsystem9_Junction39 = mdl.create_junction(
    name="Junction39",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8304, 8024)
)

# Junction: VSConverter.Subsystem9.Junction40
_VSConverter_Subsystem9_Junction40 = mdl.create_junction(
    name="Junction40",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8184, 8080)
)

# Junction: VSConverter.Subsystem9.Junction43
_VSConverter_Subsystem9_Junction43 = mdl.create_junction(
    name="Junction43",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8816, 8192)
)

# Junction: VSConverter.Subsystem9.Junction44
_VSConverter_Subsystem9_Junction44 = mdl.create_junction(
    name="Junction44",
    parent=_VSConverter_Subsystem9,
    kind="sp",
    position=(8816, 8304)
)

# Component: VSConverter.Limit3
_VSConverter_Limit3 = mdl.create_component(
    type_name="core/Limit",
    parent=_VSConverter,
    name="Limit3",
    rotation="up",
    flip="flip_none",
    position=(8168, 8776),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Limit3, "lower_limit"), "0.1")
mdl.set_property_value(mdl.prop(_VSConverter_Limit3, "upper_limit"), "1e9")


# Component: VSConverter.Product12
_VSConverter_Product12 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter,
    name="Product12",
    rotation="up",
    flip="flip_none",
    position=(8296, 8720),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Product12, "signs"), "*/")


# Component: VSConverter.Limit4
_VSConverter_Limit4 = mdl.create_component(
    type_name="core/Limit",
    parent=_VSConverter,
    name="Limit4",
    rotation="up",
    flip="flip_none",
    position=(8136, 8688),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Limit4, "lower_limit"), "0.1")
mdl.set_property_value(mdl.prop(_VSConverter_Limit4, "upper_limit"), "1e9")


# Component: VSConverter.Limit5
_VSConverter_Limit5 = mdl.create_component(
    type_name="core/Limit",
    parent=_VSConverter,
    name="Limit5",
    rotation="up",
    flip="flip_none",
    position=(8376, 8720),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Limit5, "lower_limit"), "0")
mdl.set_property_value(mdl.prop(_VSConverter_Limit5, "upper_limit"), "1")


# Component: VSConverter.Product13
_VSConverter_Product13 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter,
    name="Product13",
    rotation="up",
    flip="flip_none",
    position=(8584, 8592),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Product14
_VSConverter_Product14 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter,
    name="Product14",
    rotation="up",
    flip="flip_none",
    position=(8600, 8792),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.Signal switch18
_VSConverter_Signal_switch18 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch18",
    rotation="up",
    flip="flip_vertical",
    position=(8672, 8576),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch18, "threshold"), "0.5")


# Component: VSConverter.Signal switch19
_VSConverter_Signal_switch19 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch19",
    rotation="up",
    flip="flip_none",
    position=(8704, 8808),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch19, "threshold"), "0.5")


# Component: VSConverter.Gain35
_VSConverter_Gain35 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain35",
    rotation="up",
    flip="flip_none",
    position=(8104, 8776),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain35, "gain"), "0.6366")


# Component: VSConverter.Product15
_VSConverter_Product15 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter,
    name="Product15",
    rotation="up",
    flip="flip_none",
    position=(8296, 8632),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Product15, "signs"), "*/")


# Component: VSConverter.Limit6
_VSConverter_Limit6 = mdl.create_component(
    type_name="core/Limit",
    parent=_VSConverter,
    name="Limit6",
    rotation="up",
    flip="flip_none",
    position=(8376, 8632),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Limit6, "lower_limit"), "0")
mdl.set_property_value(mdl.prop(_VSConverter_Limit6, "upper_limit"), "1")


# Component: VSConverter.Constant43
_VSConverter_Constant43 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant43",
    rotation="up",
    flip="flip_none",
    position=(9688, 8952),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant43, "execution_rate"), "Ts")


# Component: VSConverter.DC_m0
_VSConverter_DC_m0 = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="DC_m0",
    rotation="right",
    flip="flip_none",
    position=(9736, 9056),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_DC_m0, "signal_name"), "V")


# Component: VSConverter.Product16
_VSConverter_Product16 = mdl.create_component(
    type_name="core/Product",
    parent=_VSConverter,
    name="Product16",
    rotation="up",
    flip="flip_none",
    position=(10296, 9008),
    hide_name=True,
    size=(0, 0)
)


# Component: VSConverter.DC_Pow
_VSConverter_DC_Pow = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter,
    name="DC_Pow",
    rotation="up",
    flip="flip_none",
    position=(10472, 9008),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_DC_Pow, "signal_name"), "V")
mdl.set_property_value(mdl.prop(_VSConverter_DC_Pow, "signal_type"), "power")


# Component: VSConverter.Gain36
_VSConverter_Gain36 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain36",
    rotation="up",
    flip="flip_none",
    position=(10376, 9008),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain36, "gain"), "0.001")


# Component: VSConverter.Constant44
_VSConverter_Constant44 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant44",
    rotation="up",
    flip="flip_none",
    position=(6224, 8304),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant44, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant44, "value"), "vdc_set")


# Component: VSConverter.Gain37
_VSConverter_Gain37 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain37",
    rotation="up",
    flip="flip_none",
    position=(6288, 8472),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Gain38
_VSConverter_Gain38 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain38",
    rotation="left",
    flip="flip_none",
    position=(6968, 8600),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain38, "gain"), "-1")


# Component: VSConverter.R_SN
_VSConverter_R_SN = mdl.create_component(
    type_name="core/Resistor",
    parent=_VSConverter,
    name="R_SN",
    rotation="right",
    flip="flip_none",
    position=(7808, 9520),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_R_SN, "resistance"), "dc_snub")


# Component: VSConverter.Gain39
_VSConverter_Gain39 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain39",
    rotation="up",
    flip="flip_none",
    position=(6824, 8960),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain39, "gain"), "1000")


# Component: VSConverter.Gain40
_VSConverter_Gain40 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain40",
    rotation="up",
    flip="flip_none",
    position=(6616, 8968),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain40, "gain"), "0.001")


# Component: VSConverter.Signal switch20
_VSConverter_Signal_switch20 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch20",
    rotation="up",
    flip="flip_none",
    position=(8472, 8248),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch20, "threshold"), "0.5")


# Component: VSConverter.Constant45
_VSConverter_Constant45 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant45",
    rotation="up",
    flip="flip_none",
    position=(8392, 8232),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant45, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant45, "value"), "0")


# Component: VSConverter.Signal switch21
_VSConverter_Signal_switch21 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch21",
    rotation="up",
    flip="flip_none",
    position=(9152, 8696),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch21, "threshold"), "0.5")


# Component: VSConverter.Unit Delay1
_VSConverter_Unit_Delay1 = mdl.create_component(
    type_name="core/Unit Delay",
    parent=_VSConverter,
    name="Unit Delay1",
    rotation="down",
    flip="flip_none",
    position=(9064, 8608),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Termination100
_VSConverter_Termination100 = mdl.create_component(
    type_name="core/Termination",
    parent=_VSConverter,
    name="Termination100",
    rotation="right",
    flip="flip_none",
    position=(9288, 9016),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Termination101
_VSConverter_Termination101 = mdl.create_component(
    type_name="core/Termination",
    parent=_VSConverter,
    name="Termination101",
    rotation="right",
    flip="flip_none",
    position=(7480, 8312),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.Termination102
_VSConverter_Termination102 = mdl.create_component(
    type_name="core/Termination",
    parent=_VSConverter,
    name="Termination102",
    rotation="left",
    flip="flip_none",
    position=(8112, 8608),
    hide_name=True,
    size=(None, None)
)


# Component: VSConverter.dccap
_VSConverter_dccap = mdl.create_component(
    type_name="core/Capacitor",
    parent=_VSConverter,
    name="dccap",
    rotation="right",
    flip="flip_none",
    position=(7712, 9520),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_dccap, "capacitance"), "dc_cap")
mdl.set_property_value(mdl.prop(_VSConverter_dccap, "initial_voltage"), "1000*vdc_set")


# Component: VSConverter.Discrete Transfer Function1
_VSConverter_Discrete_Transfer_Function1 = mdl.create_component(
    type_name="core/Discrete Transfer Function",
    parent=_VSConverter,
    name="Discrete Transfer Function1",
    rotation="up",
    flip="flip_none",
    position=(7832, 8408),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Discrete_Transfer_Function1, "a_coeff"), "[.001,1]")
mdl.set_property_value(mdl.prop(_VSConverter_Discrete_Transfer_Function1, "b_coeff"), "[1]")
mdl.set_property_value(mdl.prop(_VSConverter_Discrete_Transfer_Function1, "domain"), "S-domain")
mdl.set_property_value(mdl.prop(_VSConverter_Discrete_Transfer_Function1, "method"), "Euler")


# Component: VSConverter.Sum28
_VSConverter_Sum28 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum28",
    rotation="up",
    flip="flip_none",
    position=(7744, 8408),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum28, "signs"), "+-")


# Component: VSConverter.Constant47
_VSConverter_Constant47 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant47",
    rotation="up",
    flip="flip_none",
    position=(7592, 8440),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant47, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant47, "value"), "vac_set")


# Component: VSConverter.Sum29
_VSConverter_Sum29 = mdl.create_component(
    type_name="core/Sum",
    parent=_VSConverter,
    name="Sum29",
    rotation="up",
    flip="flip_none",
    position=(7920, 8432),
    hide_name=True,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_Sum29, "signs"), "++")


# Component: VSConverter.Gain42
_VSConverter_Gain42 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter,
    name="Gain42",
    rotation="up",
    flip="flip_none",
    position=(7664, 8440),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Gain42, "gain"), "1000/1.224745")


# Component: VSConverter.Signal switch24
_VSConverter_Signal_switch24 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter,
    name="Signal switch24",
    rotation="up",
    flip="flip_none",
    position=(7848, 8536),
    hide_name=True,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Signal_switch24, "threshold"), "0.5")


# Component: VSConverter.TS_module
_VSConverter_TS_module = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_VSConverter,
    name="TS_module",
    rotation="up",
    flip="flip_none",
    position=(6112, 8416),
    hide_name=False,
    size=(112, 72)
)
_VSConverter_TS_module_mask = mdl.create_mask(_VSConverter_TS_module)
_VSConverter_TS_module_mask_P_nom = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="P_nom",
    label="Nominal active power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kW"
)

_VSConverter_TS_module_mask_Q_nom = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="Q_nom",
    label="Nominal reactive power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kVAR"
)

_VSConverter_TS_module_mask_S_vec = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="S_vec",
    label="Load profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="pu"
)

_VSConverter_TS_module_mask_S_vec1 = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="S_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_S_vec2 = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="S_vec2",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_P_vec1 = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="P_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_Plen = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="Plen",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_Q_vec1 = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="Q_vec1",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_T_vecP = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="T_vecP",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_T_vecQ = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="T_vecQ",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_P_mode = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="P_mode",
    label="Power profile mode",
    widget="combo",
    combo_values=['Manual input', 'Loop cycle'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_VSConverter_TS_module_mask_P_mode_property_value_changed = """
from typhoon.api.schematic_editor.const import ITEM_JUNCTION, ITEM_CONNECTION, ITEM_PORT, ITEM_COMPONENT
comp_handle = mdl.get_sub_level_handle(container_handle)

if new_value == "Loop cycle":
    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    T_def = mdl.get_item("Constant5", parent=comp_handle, item_type=ITEM_COMPONENT)

    if T_ext:
        mdl.delete_item(T_ext)

    conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
    if not conn_T_int:
        mdl.create_connection(mdl.term(T_inp, "in"), mdl.term(T_def, "out"), "connT")

else:
    T_ext = mdl.get_item("T", parent=comp_handle, item_type=ITEM_PORT)
    T_inp = mdl.get_item("Gain1", parent=comp_handle, item_type=ITEM_COMPONENT)
    conn_T_int = mdl.get_item("connT", parent=comp_handle, item_type=ITEM_CONNECTION)
    if conn_T_int:
        mdl.delete_item(conn_T_int)

    if not T_ext:
        T_ext = mdl.create_port(parent=comp_handle, name="T", direction="in", kind = "sp",
                            terminal_position=("left", 1),
                            position=(7237, 8437))

    mdl.create_connection(mdl.term(T_inp, "in"), T_ext, "connT")

"""
mdl.set_handler_code(_VSConverter_TS_module_mask_P_mode, "property_value_changed", _VSConverter_TS_module_mask_P_mode_property_value_changed)


_VSConverter_TS_module_mask_P_mode_property_value_edited = """
if new_value == "Manual input":
    mdl.disable_property(mdl.prop(container_handle, "Tmax"))
    mdl.disable_property(mdl.prop(container_handle, "Tdel"))
    mdl.enable_property(mdl.prop(container_handle, "T_vec"))
else:
    mdl.enable_property(mdl.prop(container_handle, "Tmax"))
    mdl.enable_property(mdl.prop(container_handle, "Tdel"))
    mdl.disable_property(mdl.prop(container_handle, "T_vec"))

"""
mdl.set_handler_code(_VSConverter_TS_module_mask_P_mode, "property_value_edited", _VSConverter_TS_module_mask_P_mode_property_value_edited)

_VSConverter_TS_module_mask_loop_en = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="loop_en",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_VSConverter_TS_module_mask_T_vec = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="T_vec",
    label="Time profile",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="h"
)

_VSConverter_TS_module_mask_Tmax = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="Tmax",
    label="Power profile loop cycle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="",
    unit="s"
)

_VSConverter_TS_module_mask_Tdel = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="Tdel",
    label="Profile start delay",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=False,
    visible=True,
    tab_name="",
    unit="s"
)

_VSConverter_TS_module_mask_Texec = mdl.create_property(
    item_handle=_VSConverter_TS_module_mask,
    name="Texec",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="s"
)


_VSConverter_TS_module_mask_pre_compile = """
# HEADER START
P_nom = mdl.get_property_value(mdl.prop(item_handle, "P_nom"))
Q_nom = mdl.get_property_value(mdl.prop(item_handle, "Q_nom"))
S_vec = mdl.get_property_value(mdl.prop(item_handle, "S_vec"))
S_vec1 = mdl.get_property_value(mdl.prop(item_handle, "S_vec1"))
S_vec2 = mdl.get_property_value(mdl.prop(item_handle, "S_vec2"))
P_vec1 = mdl.get_property_value(mdl.prop(item_handle, "P_vec1"))
Plen = mdl.get_property_value(mdl.prop(item_handle, "Plen"))
Q_vec1 = mdl.get_property_value(mdl.prop(item_handle, "Q_vec1"))
T_vecP = mdl.get_property_value(mdl.prop(item_handle, "T_vecP"))
T_vecQ = mdl.get_property_value(mdl.prop(item_handle, "T_vecQ"))
P_mode = mdl.get_property_value(mdl.prop(item_handle, "P_mode"))
loop_en = mdl.get_property_value(mdl.prop(item_handle, "loop_en"))
T_vec = mdl.get_property_value(mdl.prop(item_handle, "T_vec"))
Tmax = mdl.get_property_value(mdl.prop(item_handle, "Tmax"))
Tdel = mdl.get_property_value(mdl.prop(item_handle, "Tdel"))
Texec = mdl.get_property_value(mdl.prop(item_handle, "Texec"))
# HEADER STOP
from typhoon.api.schematic_editor.const import ITEM_COMPONENT
import numpy as np
import math

if P_mode == "Manual input":
    loop_en = 0
else:
    loop_en = 1


Plen = len(S_vec)
S_vec2 = S_vec

S_vec1 = [0] * Plen

idxS = 0
for S_val in S_vec:
    S_vec1[idxS] = S_vec[idxS]
    idxS += 1


T_vecP = [0] * Plen
T_vecQ = [0] * Plen

P_vec1 = [P_nom*i for i in S_vec2]
Q_vec1 = [Q_nom*i for i in S_vec2]

TstepP = Tmax/(Plen - 1)
TstepQ = Tmax/(Plen - 1)

idxP = 0
for P_val in S_vec1:

    if loop_en == 1:
        T_vecP[idxP] = idxP * TstepP
    else:
        T_vecP[idxP] = T_vec[idxP]
    idxP += 1

idxQ = 0
for Q_val in S_vec1:

    if loop_en == 1:
        T_vecQ[idxQ] = idxQ * TstepQ
    else:
        T_vecQ[idxQ] = T_vec[idxQ]
    idxQ += 1






mdl.set_property_value(mdl.prop(item_handle, "P_vec1"), P_vec1)
mdl.set_property_value(mdl.prop(item_handle, "Q_vec1"), Q_vec1)
mdl.set_property_value(mdl.prop(item_handle, "T_vecP"), T_vecP)
mdl.set_property_value(mdl.prop(item_handle, "T_vecQ"), T_vecQ)
mdl.set_property_value(mdl.prop(item_handle, "Tdel"), Tdel)
mdl.set_property_value(mdl.prop(item_handle, "Tmax"), Tmax)
mdl.set_property_value(mdl.prop(item_handle, "loop_en"), loop_en)
mdl.set_property_value(mdl.prop(item_handle, "P_nom"), P_nom)
mdl.set_property_value(mdl.prop(item_handle, "Q_nom"), Q_nom)
mdl.set_property_value(mdl.prop(item_handle, "Plen"), Plen)

mdl.set_property_value(mdl.prop(item_handle, "S_vec"), S_vec)
mdl.set_property_value(mdl.prop(item_handle, "S_vec1"), S_vec1)
mdl.set_property_value(mdl.prop(item_handle, "S_vec2"), S_vec2)

mdl.set_property_value(mdl.prop(item_handle, "Texec"), Texec)

"""
mdl.set_handler_code(_VSConverter_TS_module_mask, "pre_compile", _VSConverter_TS_module_mask_pre_compile)

_VSConverter_TS_module_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_VSConverter_TS_module_mask, _VSConverter_TS_module_mask_desc)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_mask, "P_mode"), "Manual input")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_mask, "P_nom"), "Sinv")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_mask, "Q_nom"), "Qinv")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_mask, "T_vec"), "T_Ts_internal")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_mask, "Tdel"), "10")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_mask, "Texec"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_mask, "Tmax"), "10")


# Component: VSConverter.TS_module.Constant5
_VSConverter_TS_module_Constant5 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_TS_module,
    name="Constant5",
    rotation="up",
    flip="flip_none",
    position=(6840, 8176),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant5, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant5, "value"), "0")


# Component: VSConverter.TS_module.Signal switch2
_VSConverter_TS_module_Signal_switch2 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_TS_module,
    name="Signal switch2",
    rotation="up",
    flip="flip_none",
    position=(7176, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Signal_switch2, "threshold"), "0.5")


# Component: VSConverter.TS_module.Constant6
_VSConverter_TS_module_Constant6 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_TS_module,
    name="Constant6",
    rotation="up",
    flip="flip_none",
    position=(7112, 8048),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant6, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant6, "value"), "loop_en")


# Component: VSConverter.TS_module.Clock1
_VSConverter_TS_module_Clock1 = mdl.create_component(
    type_name="core/Clock",
    parent=_VSConverter_TS_module,
    name="Clock1",
    rotation="up",
    flip="flip_none",
    position=(6824, 8000),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Clock1, "execution_rate"), "Texec")


# Component: VSConverter.TS_module.d_rel
_VSConverter_TS_module_d_rel = mdl.create_component(
    type_name="core/Probe",
    parent=_VSConverter_TS_module,
    name="d_rel",
    rotation="up",
    flip="flip_none",
    position=(6928, 7936),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_d_rel, "signal_name"), "Delay release")


# Component: VSConverter.TS_module.Signal switch3
_VSConverter_TS_module_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_TS_module,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(7456, 8160),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Signal_switch3, "threshold"), "0.5")


# Component: VSConverter.TS_module.Comparator1
_VSConverter_TS_module_Comparator1 = mdl.create_component(
    type_name="core/Comparator",
    parent=_VSConverter_TS_module,
    name="Comparator1",
    rotation="up",
    flip="flip_none",
    position=(6928, 8000),
    hide_name=False,
    size=(None, None)
)


# Component: VSConverter.TS_module.Constant7
_VSConverter_TS_module_Constant7 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_TS_module,
    name="Constant7",
    rotation="up",
    flip="flip_none",
    position=(7400, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant7, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant7, "value"), "loop_en")


# Component: VSConverter.TS_module.Constant1
_VSConverter_TS_module_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_TS_module,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(6824, 8064),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant1, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant1, "value"), "Tdel")


# Component: VSConverter.TS_module.Gain1
_VSConverter_TS_module_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_VSConverter_TS_module,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(7384, 8352),
    hide_name=False,
    size=(None, None)
)


# Component: VSConverter.TS_module.Signal switch1
_VSConverter_TS_module_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_TS_module,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(7008, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Signal_switch1, "threshold"), "0.5")


# Component: VSConverter.TS_module.Constant3
_VSConverter_TS_module_Constant3 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_TS_module,
    name="Constant3",
    rotation="up",
    flip="flip_none",
    position=(6840, 8128),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant3, "execution_rate"), "Texec")


# Component: VSConverter.TS_module.Integrator1
_VSConverter_TS_module_Integrator1 = mdl.create_component(
    type_name="core/Integrator",
    parent=_VSConverter_TS_module,
    name="Integrator1",
    rotation="up",
    flip="flip_none",
    position=(7352, 8152),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Integrator1, "show_reset"), "rising")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Integrator1, "show_state"), "True")


# Component: VSConverter.TS_module.Constant4
_VSConverter_TS_module_Constant4 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter_TS_module,
    name="Constant4",
    rotation="up",
    flip="flip_none",
    position=(7152, 8304),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant4, "execution_rate"), "Texec")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_Constant4, "value"), "Tmax")


# Component: VSConverter.TS_module.Comparator2
_VSConverter_TS_module_Comparator2 = mdl.create_component(
    type_name="core/Comparator",
    parent=_VSConverter_TS_module,
    name="Comparator2",
    rotation="up",
    flip="flip_none",
    position=(7240, 8296),
    hide_name=False,
    size=(None, None)
)


# Component: VSConverter.TS_module.1D look-up table1
_VSConverter_TS_module_1D_look_up_table1 = mdl.create_component(
    type_name="core/1D look-up table",
    parent=_VSConverter_TS_module,
    name="1D look-up table1",
    rotation="up",
    flip="flip_none",
    position=(7608, 8008),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_1D_look_up_table1, "in_vec_x"), "T_vecP")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_1D_look_up_table1, "out_vec_f_x"), "P_vec1")


# Component: VSConverter.TS_module.1D look-up table2
_VSConverter_TS_module_1D_look_up_table2 = mdl.create_component(
    type_name="core/1D look-up table",
    parent=_VSConverter_TS_module,
    name="1D look-up table2",
    rotation="up",
    flip="flip_none",
    position=(7608, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_1D_look_up_table2, "in_vec_x"), "T_vecQ")
mdl.set_property_value(mdl.prop(_VSConverter_TS_module_1D_look_up_table2, "out_vec_f_x"), "Q_vec1")


# Port: VSConverter.TS_module.P
_VSConverter_TS_module_P = mdl.create_port(
    name="P",
    parent=_VSConverter_TS_module,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7976, 8008)
)

# Port: VSConverter.TS_module.Q
_VSConverter_TS_module_Q = mdl.create_port(
    name="Q",
    parent=_VSConverter_TS_module,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7976, 8192)
)

# Port: VSConverter.TS_module.T
_VSConverter_TS_module_T = mdl.create_port(
    name="T",
    parent=_VSConverter_TS_module,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7240, 8440)
)

# Junction: VSConverter.TS_module.Junction3
_VSConverter_TS_module_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_VSConverter_TS_module,
    kind="sp",
    position=(6952, 8176)
)

# Junction: VSConverter.TS_module.Junction4
_VSConverter_TS_module_Junction4 = mdl.create_junction(
    name="Junction4",
    parent=_VSConverter_TS_module,
    kind="sp",
    position=(7496, 8160)
)

# Component: VSConverter.T_switch
_VSConverter_T_switch = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_VSConverter,
    name="T_switch",
    rotation="up",
    flip="flip_none",
    position=(5984, 8416),
    hide_name=False,
    size=(72, 64)
)


# Component: VSConverter.T_switch.Round1
_VSConverter_T_switch_Round1 = mdl.create_component(
    type_name="core/Round",
    parent=_VSConverter_T_switch,
    name="Round1",
    rotation="up",
    flip="flip_none",
    position=(7392, 8072),
    hide_name=False,
    size=(None, None)
)


# Component: VSConverter.T_switch.Limit1
_VSConverter_T_switch_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_VSConverter_T_switch,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7808, 8056),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_T_switch_Limit1, "lower_limit"), "T_lim_low")
mdl.set_property_value(mdl.prop(_VSConverter_T_switch_Limit1, "upper_limit"), "T_lim_high")


# Component: VSConverter.T_switch.Signal switch1
_VSConverter_T_switch_Signal_switch1 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_VSConverter_T_switch,
    name="Signal switch1",
    rotation="up",
    flip="flip_none",
    position=(7632, 8056),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_T_switch_Signal_switch1, "threshold"), "0.5")


# Port: VSConverter.T_switch.mode
_VSConverter_T_switch_mode = mdl.create_port(
    name="mode",
    parent=_VSConverter_T_switch,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7472, 7920)
)

# Port: VSConverter.T_switch.T
_VSConverter_T_switch_T = mdl.create_port(
    name="T",
    parent=_VSConverter_T_switch,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7176, 8040)
)

# Port: VSConverter.T_switch.T_out
_VSConverter_T_switch_T_out = mdl.create_port(
    name="T_out",
    parent=_VSConverter_T_switch,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8096, 8056)
)

# Junction: VSConverter.T_switch.Junction1
_VSConverter_T_switch_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_VSConverter_T_switch,
    kind="sp",
    position=(7280, 8040)
)

# Junction: VSConverter.T_switch.Junction2
_VSConverter_T_switch_Junction2 = mdl.create_junction(
    name="Junction2",
    parent=_VSConverter_T_switch,
    kind="sp",
    position=(7712, 8056)
)

# Junction: VSConverter.T_switch.Junction3
_VSConverter_T_switch_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_VSConverter_T_switch,
    kind="sp",
    position=(7880, 8056)
)

# Component: VSConverter.Constant102
_VSConverter_Constant102 = mdl.create_component(
    type_name="core/Constant",
    parent=_VSConverter,
    name="Constant102",
    rotation="up",
    flip="flip_none",
    position=(5880, 8456),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_VSConverter_Constant102, "execution_rate"), "Ts")
mdl.set_property_value(mdl.prop(_VSConverter_Constant102, "value"), "Ts_switch")


# Port: VSConverter.A1
_VSConverter_A1 = mdl.create_port(
    name="A1",
    parent=_VSConverter,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(110.0, -32.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(9224, 9424)
)

# Port: VSConverter.B1
_VSConverter_B1 = mdl.create_port(
    name="B1",
    parent=_VSConverter,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(110.0, 0.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(9224, 9504)
)

# Port: VSConverter.C1
_VSConverter_C1 = mdl.create_port(
    name="C1",
    parent=_VSConverter,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(110.0, 32.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(9224, 9584)
)

# Port: VSConverter.DC+
_VSConverter_DC_ = mdl.create_port(
    name="DC+",
    parent=_VSConverter,
    label="DC+",
    kind="pe",
    dimension=(1,),
    terminal_position=(-110.0, -35.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7640, 9424)
)

# Port: VSConverter.DC-
_VSConverter_DC_ = mdl.create_port(
    name="DC-",
    parent=_VSConverter,
    label="DC-",
    kind="pe",
    dimension=(1,),
    terminal_position=(-110.0, 35.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7640, 9608)
)

# Tag: VSConverter.Goto5
_VSConverter_Goto5 = mdl.create_tag(
    value="P_out",
    name="Goto5",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(10568, 8792)
)

# Tag: VSConverter.Goto6
_VSConverter_Goto6 = mdl.create_tag(
    value="Q_out",
    name="Goto6",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(10568, 8896)
)

# Tag: VSConverter.Goto7
_VSConverter_Goto7 = mdl.create_tag(
    value="V_en",
    name="Goto7",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8312, 8296)
)

# Tag: VSConverter.Goto8
_VSConverter_Goto8 = mdl.create_tag(
    value="M_en",
    name="Goto8",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8552, 8248)
)

# Tag: VSConverter.Goto9
_VSConverter_Goto9 = mdl.create_tag(
    value="ctrl_en",
    name="Goto9",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8312, 8232)
)

# Tag: VSConverter.From4
_VSConverter_From4 = mdl.create_tag(
    value="Q_out",
    name="From4",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6728, 8904)
)

# Tag: VSConverter.From5
_VSConverter_From5 = mdl.create_tag(
    value="ctrl_en",
    name="From5",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6976, 8864)
)

# Tag: VSConverter.From6
_VSConverter_From6 = mdl.create_tag(
    value="V_en",
    name="From6",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7096, 8896)
)

# Tag: VSConverter.From7
_VSConverter_From7 = mdl.create_tag(
    value="P_out",
    name="From7",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6824, 8536)
)

# Tag: VSConverter.From8
_VSConverter_From8 = mdl.create_tag(
    value="ctrl_en",
    name="From8",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(7112, 8480)
)

# Tag: VSConverter.From9
_VSConverter_From9 = mdl.create_tag(
    value="M_en",
    name="From9",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(7200, 8488)
)

# Tag: VSConverter.Goto10
_VSConverter_Goto10 = mdl.create_tag(
    value="Watt",
    name="Goto10",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6328, 8384)
)

# Tag: VSConverter.Goto11
_VSConverter_Goto11 = mdl.create_tag(
    value="VAR",
    name="Goto11",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6328, 8424)
)

# Tag: VSConverter.From10
_VSConverter_From10 = mdl.create_tag(
    value="VAR",
    name="From10",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6336, 8752)
)

# Tag: VSConverter.From11
_VSConverter_From11 = mdl.create_tag(
    value="Watt",
    name="From11",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6480, 8352)
)

# Tag: VSConverter.Goto12
_VSConverter_Goto12 = mdl.create_tag(
    value="VLL",
    name="Goto12",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6392, 8472)
)

# Tag: VSConverter.Goto13
_VSConverter_Goto13 = mdl.create_tag(
    value="Gen_V_mag",
    name="Goto13",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7872, 8120)
)

# Tag: VSConverter.From14
_VSConverter_From14 = mdl.create_tag(
    value="Gen_V_mag",
    name="From14",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6512, 8968)
)

# Tag: VSConverter.From15
_VSConverter_From15 = mdl.create_tag(
    value="VLL",
    name="From15",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6280, 8928)
)

# Tag: VSConverter.Goto14
_VSConverter_Goto14 = mdl.create_tag(
    value="dED_sel",
    name="Goto14",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7624, 9176)
)

# Tag: VSConverter.Goto15
_VSConverter_Goto15 = mdl.create_tag(
    value="dEQ_sel",
    name="Goto15",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7624, 9200)
)

# Tag: VSConverter.From16
_VSConverter_From16 = mdl.create_tag(
    value="dED_sel",
    name="From16",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6872, 8848)
)

# Tag: VSConverter.From17
_VSConverter_From17 = mdl.create_tag(
    value="dEQ_sel",
    name="From17",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7336, 8456)
)

# Tag: VSConverter.From18
_VSConverter_From18 = mdl.create_tag(
    value="dED_sel",
    name="From18",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7320, 8832)
)

# Tag: VSConverter.From19
_VSConverter_From19 = mdl.create_tag(
    value="dED_sel",
    name="From19",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7320, 8952)
)

# Tag: VSConverter.Goto16
_VSConverter_Goto16 = mdl.create_tag(
    value="fs",
    name="Goto16",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6328, 8344)
)

# Tag: VSConverter.From20
_VSConverter_From20 = mdl.create_tag(
    value="Vdc",
    name="From20",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6832, 8680)
)

# Tag: VSConverter.From22
_VSConverter_From22 = mdl.create_tag(
    value="vdc_ref",
    name="From22",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6528, 8664)
)

# Tag: VSConverter.From23
_VSConverter_From23 = mdl.create_tag(
    value="dEQ_sel",
    name="From23",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7328, 8576)
)

# Tag: VSConverter.From24
_VSConverter_From24 = mdl.create_tag(
    value="dEQ_sel",
    name="From24",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6984, 8488)
)

# Tag: VSConverter.Goto19
_VSConverter_Goto19 = mdl.create_tag(
    value="mod_internal",
    name="Goto19",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6784, 9200)
)

# Tag: VSConverter.From25
_VSConverter_From25 = mdl.create_tag(
    value="mod_internal",
    name="From25",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6936, 9200)
)

# Tag: VSConverter.Goto20
_VSConverter_Goto20 = mdl.create_tag(
    value="I_a",
    name="Goto20",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8872, 9392)
)

# Tag: VSConverter.Goto21
_VSConverter_Goto21 = mdl.create_tag(
    value="I_b",
    name="Goto21",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8872, 9472)
)

# Tag: VSConverter.Goto22
_VSConverter_Goto22 = mdl.create_tag(
    value="I_c",
    name="Goto22",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8872, 9552)
)

# Tag: VSConverter.Goto23
_VSConverter_Goto23 = mdl.create_tag(
    value="V_a",
    name="Goto23",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="left",
    flip="flip_none",
    position=(8992, 9624)
)

# Tag: VSConverter.Goto24
_VSConverter_Goto24 = mdl.create_tag(
    value="V_b",
    name="Goto24",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="left",
    flip="flip_none",
    position=(9072, 9624)
)

# Tag: VSConverter.Goto25
_VSConverter_Goto25 = mdl.create_tag(
    value="V_c",
    name="Goto25",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="left",
    flip="flip_none",
    position=(9152, 9624)
)

# Tag: VSConverter.From26
_VSConverter_From26 = mdl.create_tag(
    value="E_a",
    name="From26",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8464)
)

# Tag: VSConverter.From27
_VSConverter_From27 = mdl.create_tag(
    value="E_b",
    name="From27",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8496)
)

# Tag: VSConverter.From28
_VSConverter_From28 = mdl.create_tag(
    value="V_b",
    name="From28",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8576)
)

# Tag: VSConverter.From29
_VSConverter_From29 = mdl.create_tag(
    value="V_c",
    name="From29",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8600)
)

# Tag: VSConverter.From30
_VSConverter_From30 = mdl.create_tag(
    value="V_c",
    name="From30",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8680)
)

# Tag: VSConverter.From31
_VSConverter_From31 = mdl.create_tag(
    value="V_a",
    name="From31",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8704)
)

# Tag: VSConverter.From32
_VSConverter_From32 = mdl.create_tag(
    value="V_a",
    name="From32",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(7344, 8176)
)

# Tag: VSConverter.From33
_VSConverter_From33 = mdl.create_tag(
    value="V_b",
    name="From33",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(7320, 8176)
)

# Tag: VSConverter.From34
_VSConverter_From34 = mdl.create_tag(
    value="V_c",
    name="From34",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(7296, 8176)
)

# Tag: VSConverter.From35
_VSConverter_From35 = mdl.create_tag(
    value="I_a",
    name="From35",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(9176, 8848)
)

# Tag: VSConverter.From36
_VSConverter_From36 = mdl.create_tag(
    value="I_b",
    name="From36",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(9152, 8848)
)

# Tag: VSConverter.From37
_VSConverter_From37 = mdl.create_tag(
    value="I_c",
    name="From37",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(9128, 8848)
)

# Tag: VSConverter.Goto26
_VSConverter_Goto26 = mdl.create_tag(
    value="V_mag",
    name="Goto26",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7696, 8136)
)

# Tag: VSConverter.Goto27
_VSConverter_Goto27 = mdl.create_tag(
    value="V_ang",
    name="Goto27",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7696, 8104)
)

# Tag: VSConverter.From38
_VSConverter_From38 = mdl.create_tag(
    value="wst",
    name="From38",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(9104, 8848)
)

# Tag: VSConverter.Goto28
_VSConverter_Goto28 = mdl.create_tag(
    value="I_d",
    name="Goto28",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9328, 8912)
)

# Tag: VSConverter.Goto29
_VSConverter_Goto29 = mdl.create_tag(
    value="I_q",
    name="Goto29",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9328, 8936)
)

# Tag: VSConverter.Goto30
_VSConverter_Goto30 = mdl.create_tag(
    value="E_a",
    name="Goto30",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8920, 8792)
)

# Tag: VSConverter.Goto31
_VSConverter_Goto31 = mdl.create_tag(
    value="E_b",
    name="Goto31",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8920, 8816)
)

# Tag: VSConverter.Goto32
_VSConverter_Goto32 = mdl.create_tag(
    value="E_c",
    name="Goto32",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8920, 8840)
)

# Tag: VSConverter.From41
_VSConverter_From41 = mdl.create_tag(
    value="E_a1",
    name="From41",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8224, 9568)
)

# Tag: VSConverter.From42
_VSConverter_From42 = mdl.create_tag(
    value="E_b1",
    name="From42",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8224, 9632)
)

# Tag: VSConverter.From43
_VSConverter_From43 = mdl.create_tag(
    value="E_c1",
    name="From43",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8224, 9704)
)

# Tag: VSConverter.From44
_VSConverter_From44 = mdl.create_tag(
    value="fs",
    name="From44",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(6672, 8248)
)

# Tag: VSConverter.From45
_VSConverter_From45 = mdl.create_tag(
    value="I_d",
    name="From45",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8800)
)

# Tag: VSConverter.From46
_VSConverter_From46 = mdl.create_tag(
    value="V_mag",
    name="From46",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8776)
)

# Tag: VSConverter.From47
_VSConverter_From47 = mdl.create_tag(
    value="V_mag",
    name="From47",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8880)
)

# Tag: VSConverter.From48
_VSConverter_From48 = mdl.create_tag(
    value="I_q",
    name="From48",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8904)
)

# Tag: VSConverter.Goto33
_VSConverter_Goto33 = mdl.create_tag(
    value="dEq",
    name="Goto33",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7712, 8624)
)

# Tag: VSConverter.From49
_VSConverter_From49 = mdl.create_tag(
    value="dEq",
    name="From49",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7840, 8736)
)

# Tag: VSConverter.Goto34
_VSConverter_Goto34 = mdl.create_tag(
    value="dEd",
    name="Goto34",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7704, 8944)
)

# Tag: VSConverter.From50
_VSConverter_From50 = mdl.create_tag(
    value="dEd",
    name="From50",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7848, 8592)
)

# Tag: VSConverter.Goto39
_VSConverter_Goto39 = mdl.create_tag(
    value="wt",
    name="Goto39",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7368, 8312)
)

# Tag: VSConverter.From59
_VSConverter_From59 = mdl.create_tag(
    value="wst",
    name="From59",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8624, 8912)
)

# Tag: VSConverter.From60
_VSConverter_From60 = mdl.create_tag(
    value="V_ang",
    name="From60",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9072, 8712)
)

# Tag: VSConverter.From61
_VSConverter_From61 = mdl.create_tag(
    value="wt",
    name="From61",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9216, 8728)
)

# Tag: VSConverter.Goto40
_VSConverter_Goto40 = mdl.create_tag(
    value="wst",
    name="Goto40",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9392, 8704)
)

# Tag: VSConverter.Goto41
_VSConverter_Goto41 = mdl.create_tag(
    value="Vdc",
    name="Goto41",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8072, 9488)
)

# Tag: VSConverter.From63
_VSConverter_From63 = mdl.create_tag(
    value="I_a",
    name="From63",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8728)
)

# Tag: VSConverter.From64
_VSConverter_From64 = mdl.create_tag(
    value="I_b",
    name="From64",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8760)
)

# Tag: VSConverter.From65
_VSConverter_From65 = mdl.create_tag(
    value="I_c",
    name="From65",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8792)
)

# Tag: VSConverter.From66
_VSConverter_From66 = mdl.create_tag(
    value="E_a",
    name="From66",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8632)
)

# Tag: VSConverter.From67
_VSConverter_From67 = mdl.create_tag(
    value="E_b",
    name="From67",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8664)
)

# Tag: VSConverter.From68
_VSConverter_From68 = mdl.create_tag(
    value="E_c",
    name="From68",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8696)
)

# Tag: VSConverter.Goto42
_VSConverter_Goto42 = mdl.create_tag(
    value="idc",
    name="Goto42",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9976, 8608)
)

# Tag: VSConverter.From69
_VSConverter_From69 = mdl.create_tag(
    value="idc",
    name="From69",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="right",
    flip="flip_none",
    position=(7912, 9464)
)

# Tag: VSConverter.From70
_VSConverter_From70 = mdl.create_tag(
    value="Vdc",
    name="From70",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8600)
)

# Tag: VSConverter.From71
_VSConverter_From71 = mdl.create_tag(
    value="V_a",
    name="From71",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8824)
)

# Tag: VSConverter.From72
_VSConverter_From72 = mdl.create_tag(
    value="V_b",
    name="From72",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8856)
)

# Tag: VSConverter.From73
_VSConverter_From73 = mdl.create_tag(
    value="V_c",
    name="From73",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8888)
)

# Tag: VSConverter.From74
_VSConverter_From74 = mdl.create_tag(
    value="Vdc",
    name="From74",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8024, 8776)
)

# Tag: VSConverter.From75
_VSConverter_From75 = mdl.create_tag(
    value="ctrl_en",
    name="From75",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8624, 8640)
)

# Tag: VSConverter.From76
_VSConverter_From76 = mdl.create_tag(
    value="ctrl_en",
    name="From76",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8656, 8744)
)

# Tag: VSConverter.Goto43
_VSConverter_Goto43 = mdl.create_tag(
    value="mc",
    name="Goto43",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8464, 8632)
)

# Tag: VSConverter.From77
_VSConverter_From77 = mdl.create_tag(
    value="mc",
    name="From77",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8920)
)

# Tag: VSConverter.Goto44
_VSConverter_Goto44 = mdl.create_tag(
    value="E_a1",
    name="Goto44",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9976, 8720)
)

# Tag: VSConverter.Goto45
_VSConverter_Goto45 = mdl.create_tag(
    value="E_b1",
    name="Goto45",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9976, 8832)
)

# Tag: VSConverter.Goto46
_VSConverter_Goto46 = mdl.create_tag(
    value="E_c1",
    name="Goto46",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(9976, 8944)
)

# Tag: VSConverter.From78
_VSConverter_From78 = mdl.create_tag(
    value="ctrl_en",
    name="From78",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9608, 8952)
)

# Tag: VSConverter.From79
_VSConverter_From79 = mdl.create_tag(
    value="idc",
    name="From79",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 8992)
)

# Tag: VSConverter.From80
_VSConverter_From80 = mdl.create_tag(
    value="Vdc",
    name="From80",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(10200, 9016)
)

# Tag: VSConverter.Goto47
_VSConverter_Goto47 = mdl.create_tag(
    value="vdc_ref",
    name="Goto47",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(6328, 8304)
)

# Tag: VSConverter.Goto48
_VSConverter_Goto48 = mdl.create_tag(
    value="GF_en",
    name="Goto48",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7624, 9224)
)

# Tag: VSConverter.From81
_VSConverter_From81 = mdl.create_tag(
    value="GF_en",
    name="From81",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8408, 8200)
)

# Tag: VSConverter.From82
_VSConverter_From82 = mdl.create_tag(
    value="GF_en",
    name="From82",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(9088, 8648)
)

# Tag: VSConverter.From39
_VSConverter_From39 = mdl.create_tag(
    value="V_mag",
    name="From39",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7600, 8400)
)

# Tag: VSConverter.From85
_VSConverter_From85 = mdl.create_tag(
    value="GF_en",
    name="From85",
    parent=_VSConverter,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7648, 8488)
)

# Junction: VSConverter.Junction13
_VSConverter_Junction13 = mdl.create_junction(
    name="Junction13",
    parent=_VSConverter,
    kind="sp",
    position=(6984, 9016)
)

# Junction: VSConverter.Junction15
_VSConverter_Junction15 = mdl.create_junction(
    name="Junction15",
    parent=_VSConverter,
    kind="sp",
    position=(7080, 8608)
)

# Junction: VSConverter.Junction23
_VSConverter_Junction23 = mdl.create_junction(
    name="Junction23",
    parent=_VSConverter,
    kind="sp",
    position=(7808, 8120)
)

# Junction: VSConverter.Junction29
_VSConverter_Junction29 = mdl.create_junction(
    name="Junction29",
    parent=_VSConverter,
    kind="sp",
    position=(7216, 8904)
)

# Junction: VSConverter.Junction33
_VSConverter_Junction33 = mdl.create_junction(
    name="Junction33",
    parent=_VSConverter,
    kind="sp",
    position=(7248, 8528)
)

# Junction: VSConverter.Junction34
_VSConverter_Junction34 = mdl.create_junction(
    name="Junction34",
    parent=_VSConverter,
    kind="sp",
    position=(7248, 8616)
)

# Junction: VSConverter.Junction35
_VSConverter_Junction35 = mdl.create_junction(
    name="Junction35",
    parent=_VSConverter,
    kind="pe",
    position=(8376, 9760)
)

# Junction: VSConverter.Junction39
_VSConverter_Junction39 = mdl.create_junction(
    name="Junction39",
    parent=_VSConverter,
    kind="pe",
    position=(8960, 9424)
)

# Junction: VSConverter.Junction40
_VSConverter_Junction40 = mdl.create_junction(
    name="Junction40",
    parent=_VSConverter,
    kind="pe",
    position=(9040, 9504)
)

# Junction: VSConverter.Junction41
_VSConverter_Junction41 = mdl.create_junction(
    name="Junction41",
    parent=_VSConverter,
    kind="pe",
    position=(9120, 9584)
)

# Junction: VSConverter.Junction47
_VSConverter_Junction47 = mdl.create_junction(
    name="Junction47",
    parent=_VSConverter,
    kind="sp",
    position=(8264, 8264)
)

# Junction: VSConverter.Junction50
_VSConverter_Junction50 = mdl.create_junction(
    name="Junction50",
    parent=_VSConverter,
    kind="sp",
    position=(7640, 8120)
)

# Junction: VSConverter.Junction68
_VSConverter_Junction68 = mdl.create_junction(
    name="Junction68",
    parent=_VSConverter,
    kind="sp",
    position=(7320, 8272)
)

# Junction: VSConverter.Junction72
_VSConverter_Junction72 = mdl.create_junction(
    name="Junction72",
    parent=_VSConverter,
    kind="sp",
    position=(7248, 8576)
)

# Junction: VSConverter.Junction88
_VSConverter_Junction88 = mdl.create_junction(
    name="Junction88",
    parent=_VSConverter,
    kind="sp",
    position=(7216, 8944)
)

# Junction: VSConverter.Junction89
_VSConverter_Junction89 = mdl.create_junction(
    name="Junction89",
    parent=_VSConverter,
    kind="sp",
    position=(7216, 8992)
)

# Junction: VSConverter.Junction94
_VSConverter_Junction94 = mdl.create_junction(
    name="Junction94",
    parent=_VSConverter,
    kind="pe",
    position=(7880, 9608)
)

# Junction: VSConverter.Junction95
_VSConverter_Junction95 = mdl.create_junction(
    name="Junction95",
    parent=_VSConverter,
    kind="pe",
    position=(7880, 9424)
)

# Junction: VSConverter.Junction97
_VSConverter_Junction97 = mdl.create_junction(
    name="Junction97",
    parent=_VSConverter,
    kind="sp",
    position=(9920, 8608)
)

# Junction: VSConverter.Junction98
_VSConverter_Junction98 = mdl.create_junction(
    name="Junction98",
    parent=_VSConverter,
    kind="sp",
    position=(8016, 9512)
)

# Junction: VSConverter.Junction99
_VSConverter_Junction99 = mdl.create_junction(
    name="Junction99",
    parent=_VSConverter,
    kind="sp",
    position=(8512, 8720)
)

# Junction: VSConverter.Junction100
_VSConverter_Junction100 = mdl.create_junction(
    name="Junction100",
    parent=_VSConverter,
    kind="sp",
    position=(8000, 8584)
)

# Junction: VSConverter.Junction103
_VSConverter_Junction103 = mdl.create_junction(
    name="Junction103",
    parent=_VSConverter,
    kind="sp",
    position=(8528, 8584)
)

# Junction: VSConverter.Junction104
_VSConverter_Junction104 = mdl.create_junction(
    name="Junction104",
    parent=_VSConverter,
    kind="sp",
    position=(7976, 8736)
)

# Junction: VSConverter.Junction105
_VSConverter_Junction105 = mdl.create_junction(
    name="Junction105",
    parent=_VSConverter,
    kind="sp",
    position=(8536, 8800)
)

# Junction: VSConverter.Junction106
_VSConverter_Junction106 = mdl.create_junction(
    name="Junction106",
    parent=_VSConverter,
    kind="sp",
    position=(8208, 8712)
)

# Junction: VSConverter.Junction107
_VSConverter_Junction107 = mdl.create_junction(
    name="Junction107",
    parent=_VSConverter,
    kind="sp",
    position=(8184, 8688)
)

# Junction: VSConverter.Junction108
_VSConverter_Junction108 = mdl.create_junction(
    name="Junction108",
    parent=_VSConverter,
    kind="sp",
    position=(9736, 8920)
)

# Junction: VSConverter.Junction110
_VSConverter_Junction110 = mdl.create_junction(
    name="Junction110",
    parent=_VSConverter,
    kind="pe",
    position=(7808, 9424)
)

# Junction: VSConverter.Junction111
_VSConverter_Junction111 = mdl.create_junction(
    name="Junction111",
    parent=_VSConverter,
    kind="pe",
    position=(7808, 9608)
)

# Junction: VSConverter.Junction113
_VSConverter_Junction113 = mdl.create_junction(
    name="Junction113",
    parent=_VSConverter,
    kind="sp",
    position=(9200, 8696)
)

# Junction: VSConverter.Junction114
_VSConverter_Junction114 = mdl.create_junction(
    name="Junction114",
    parent=_VSConverter,
    kind="sp",
    position=(10496, 8792)
)

# Junction: VSConverter.Junction115
_VSConverter_Junction115 = mdl.create_junction(
    name="Junction115",
    parent=_VSConverter,
    kind="sp",
    position=(10496, 8896)
)

# Junction: VSConverter.Junction116
_VSConverter_Junction116 = mdl.create_junction(
    name="Junction116",
    parent=_VSConverter,
    kind="pe",
    position=(9040, 9760)
)

# Junction: VSConverter.Junction117
_VSConverter_Junction117 = mdl.create_junction(
    name="Junction117",
    parent=_VSConverter,
    kind="pe",
    position=(8960, 9760)
)

# Junction: VSConverter.Junction118
_VSConverter_Junction118 = mdl.create_junction(
    name="Junction118",
    parent=_VSConverter,
    kind="pe",
    position=(8448, 9760)
)

# Junction: VSConverter.Junction119
_VSConverter_Junction119 = mdl.create_junction(
    name="Junction119",
    parent=_VSConverter,
    kind="sp",
    position=(8264, 8264)
)

# Junction: VSConverter.Junction120
_VSConverter_Junction120 = mdl.create_junction(
    name="Junction120",
    parent=_VSConverter,
    kind="pe",
    position=(7712, 9608)
)

# Junction: VSConverter.Junction121
_VSConverter_Junction121 = mdl.create_junction(
    name="Junction121",
    parent=_VSConverter,
    kind="pe",
    position=(7712, 9424)
)

# Junction: VSConverter.Junction126
_VSConverter_Junction126 = mdl.create_junction(
    name="Junction126",
    parent=_VSConverter,
    kind="sp",
    position=(7704, 8440)
)

# Junction: VSConverter.Junction127
_VSConverter_Junction127 = mdl.create_junction(
    name="Junction127",
    parent=_VSConverter,
    kind="sp",
    position=(7696, 8400)
)

# Component: Vsource
_Vsource = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Vsource",
    rotation="up",
    flip="flip_none",
    position=(5856, 7384),
    hide_name=False,
    size=(64, 96)
)
_Vsource_mask = mdl.create_mask(_Vsource)
_Vsource_mask_ground_connected = mdl.create_property(
    item_handle=_Vsource_mask,
    name="ground_connected",
    label="Ground-connected",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Vsource_mask_ground_connected_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if not new_value == old_value:
    ports, _ = comp_script.port_dynamics(mdl, container_handle)
    comp_script.update_connections(mdl, container_handle, ports)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Vsource_mask_ground_connected, "property_value_changed", _Vsource_mask_ground_connected_property_value_changed)

_Vsource_mask_basekv = mdl.create_property(
    item_handle=_Vsource_mask,
    name="basekv",
    label="Base voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="kV"
)


_Vsource_mask_basekv_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_basekv, "property_value_changed", _Vsource_mask_basekv_property_value_changed)

_Vsource_mask_pu = mdl.create_property(
    item_handle=_Vsource_mask,
    name="pu",
    label="pu",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Vsource_mask_pu_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_pu, "property_value_changed", _Vsource_mask_pu_property_value_changed)

_Vsource_mask_Angle = mdl.create_property(
    item_handle=_Vsource_mask,
    name="Angle",
    label="Angle",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="°"
)


_Vsource_mask_Angle_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_Angle, "property_value_changed", _Vsource_mask_Angle_property_value_changed)

_Vsource_mask_Frequency = mdl.create_property(
    item_handle=_Vsource_mask,
    name="Frequency",
    label="Frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Hz"
)


_Vsource_mask_Frequency_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_Frequency, "property_value_changed", _Vsource_mask_Frequency_property_value_changed)

_Vsource_mask_global_basefreq = mdl.create_property(
    item_handle=_Vsource_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Vsource_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_global_basefreq, "property_value_changed", _Vsource_mask_global_basefreq_property_value_changed)


_Vsource_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)

"""
mdl.set_handler_code(_Vsource_mask_global_basefreq, "property_value_edited", _Vsource_mask_global_basefreq_property_value_edited)

_Vsource_mask_BaseFreq = mdl.create_property(
    item_handle=_Vsource_mask,
    name="BaseFreq",
    label="Base frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit="Hz"
)

_Vsource_mask_r1 = mdl.create_property(
    item_handle=_Vsource_mask,
    name="r1",
    label="Positive-sequence resistance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Ω"
)


_Vsource_mask_r1_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_r1, "property_value_changed", _Vsource_mask_r1_property_value_changed)

_Vsource_mask_x1 = mdl.create_property(
    item_handle=_Vsource_mask,
    name="x1",
    label="Positive-sequence reactance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Ω"
)


_Vsource_mask_x1_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_x1, "property_value_changed", _Vsource_mask_x1_property_value_changed)

_Vsource_mask_r0 = mdl.create_property(
    item_handle=_Vsource_mask,
    name="r0",
    label="Zero-sequence resistance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Ω"
)


_Vsource_mask_r0_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_r0, "property_value_changed", _Vsource_mask_r0_property_value_changed)

_Vsource_mask_x0 = mdl.create_property(
    item_handle=_Vsource_mask,
    name="x0",
    label="Zero-sequence reactance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="Ω"
)


_Vsource_mask_x0_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_source_values(mdl, container_handle)

"""
mdl.set_handler_code(_Vsource_mask_x0, "property_value_changed", _Vsource_mask_x0_property_value_changed)

_Vsource_mask_enable_monitoring = mdl.create_property(
    item_handle=_Vsource_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_Vsource_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Vsource_mask, "define_icon", _Vsource_mask_define_icon)

_Vsource_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)

import comp_vsource as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Vsource_mask, "init", _Vsource_mask_init)

_Vsource_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">A Vsource object is a voltage source behind an impedance. The most common way to use a voltage source object is with the first terminal connected to one bus with the second terminal connected to ground, but it is possible to connect it to two different buses by unchecking the “ground-connected” property.</p></body></html>
'''
mdl.set_description(_Vsource_mask, _Vsource_mask_desc)


# Component: Vsource.Va
_Vsource_Va = mdl.create_component(
    type_name="core/Voltage Source",
    parent=_Vsource,
    name="Va",
    rotation="down",
    flip="flip_none",
    position=(8112, 8096),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Vsource_Va, "init_frequency"), "60")
mdl.set_property_value(mdl.prop(_Vsource_Va, "init_phase"), "0")
mdl.set_property_value(mdl.prop(_Vsource_Va, "init_rms_value"), "66395.28095681")
mdl.set_property_value(mdl.prop(_Vsource_Va, "init_source_nature"), "Sine")


# Component: Vsource.Vb
_Vsource_Vb = mdl.create_component(
    type_name="core/Voltage Source",
    parent=_Vsource,
    name="Vb",
    rotation="down",
    flip="flip_none",
    position=(8112, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Vsource_Vb, "init_frequency"), "60")
mdl.set_property_value(mdl.prop(_Vsource_Vb, "init_phase"), "-120")
mdl.set_property_value(mdl.prop(_Vsource_Vb, "init_rms_value"), "66395.28095681")
mdl.set_property_value(mdl.prop(_Vsource_Vb, "init_source_nature"), "Sine")


# Component: Vsource.Vc
_Vsource_Vc = mdl.create_component(
    type_name="core/Voltage Source",
    parent=_Vsource,
    name="Vc",
    rotation="down",
    flip="flip_none",
    position=(8112, 8288),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Vsource_Vc, "init_frequency"), "60")
mdl.set_property_value(mdl.prop(_Vsource_Vc, "init_phase"), "-240")
mdl.set_property_value(mdl.prop(_Vsource_Vc, "init_rms_value"), "66395.28095681")
mdl.set_property_value(mdl.prop(_Vsource_Vc, "init_source_nature"), "Sine")


# Component: Vsource.gnd1
_Vsource_gnd1 = mdl.create_component(
    type_name="core/Ground",
    parent=_Vsource,
    name="gnd1",
    rotation="up",
    flip="flip_none",
    position=(8000, 8400),
    hide_name=False,
    size=(None, None)
)


# Component: Vsource.TL1
_Vsource_TL1 = mdl.create_component(
    type_name="core/Transmission Line",
    parent=_Vsource,
    name="TL1",
    rotation="up",
    flip="flip_none",
    position=(8304, 8192),
    hide_name=False,
    size=(256, 72)
)
mdl.set_property_value(mdl.prop(_Vsource_TL1, "Frequency"), "60")
mdl.set_property_value(mdl.prop(_Vsource_TL1, "L_sequence_metric"), "[[0.015119719593730058, 0, 0], [0, 0.017507043740108485, 0], [0, 0, 0.017507043740108485]]")
mdl.set_property_value(mdl.prop(_Vsource_TL1, "Length_metric"), "1")
mdl.set_property_value(mdl.prop(_Vsource_TL1, "R_sequence_metric"), "[[1.9, 0, 0], [0, 1.65, 0], [0, 0, 1.65]]")
mdl.set_property_value(mdl.prop(_Vsource_TL1, "model_def"), "Sequence")
mdl.set_property_value(mdl.prop(_Vsource_TL1, "unit_sys"), "metric")


# Port: Vsource.A1
_Vsource_A1 = mdl.create_port(
    name="A1",
    parent=_Vsource,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32.0, -32.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8496, 8096)
)

# Port: Vsource.B1
_Vsource_B1 = mdl.create_port(
    name="B1",
    parent=_Vsource,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32.0, 0.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8496, 8192)
)

# Port: Vsource.C1
_Vsource_C1 = mdl.create_port(
    name="C1",
    parent=_Vsource,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(32.0, 32.0),
    rotation="down",
    flip="flip_none",
    hide_name=False,
    position=(8496, 8288)
)

# Component: Storage
_Storage = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=None,
    name="Storage",
    rotation="up",
    flip="flip_none",
    position=(6192, 7384),
    hide_name=False,
    size=(64, 96)
)
_Storage_mask = mdl.create_mask(_Storage)
_Storage_mask_dispatch_p = mdl.create_property(
    item_handle=_Storage_mask,
    name="dispatch_p",
    label="Dispatch P",
    widget="combo",
    combo_values=['Default', 'Follow'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_mask_dispatch_p_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_dispatch_mode(mdl, container_handle)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Storage_mask_dispatch_p, "property_value_edited", _Storage_mask_dispatch_p_property_value_edited)

_Storage_mask_dispatch_q = mdl.create_property(
    item_handle=_Storage_mask,
    name="dispatch_q",
    label="Dispatch Q",
    widget="combo",
    combo_values=['Unit PF', 'Constant PF', 'Constant kVAr'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_mask_dispatch_q_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_dispatch_mode(mdl, container_handle)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Storage_mask_dispatch_q, "property_value_changed", _Storage_mask_dispatch_q_property_value_changed)


_Storage_mask_dispatch_q_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.update_dispatch_mode(mdl, container_handle)
mdl.refresh_icon(container_handle)

"""
mdl.set_handler_code(_Storage_mask_dispatch_q, "property_value_edited", _Storage_mask_dispatch_q_property_value_edited)

_Storage_mask_snap_status = mdl.create_property(
    item_handle=_Storage_mask,
    name="snap_status",
    label="Snap solve status",
    widget="combo",
    combo_values=['Charging', 'Discharging', 'Idling'],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)

_Storage_mask_kv = mdl.create_property(
    item_handle=_Storage_mask,
    name="kv",
    label="Nominal voltage",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit="kV"
)

_Storage_mask_global_basefreq = mdl.create_property(
    item_handle=_Storage_mask,
    name="global_basefreq",
    label="Global base frequency",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit=""
)


_Storage_mask_global_basefreq_property_value_changed = """
comp_script = return_comp_script(mdl, container_handle)
if old_value == new_value:
    comp_script.update_frequency_property(mdl, container_handle, init=True)
else:
    comp_script.update_frequency_property(mdl, container_handle)

"""
mdl.set_handler_code(_Storage_mask_global_basefreq, "property_value_changed", _Storage_mask_global_basefreq_property_value_changed)


_Storage_mask_global_basefreq_property_value_edited = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.toggle_frequency_prop(mdl, container_handle)

"""
mdl.set_handler_code(_Storage_mask_global_basefreq, "property_value_edited", _Storage_mask_global_basefreq_property_value_edited)

_Storage_mask_basefreq = mdl.create_property(
    item_handle=_Storage_mask,
    name="basefreq",
    label="Base frequency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Ratings:2",
    unit="Hz"
)

_Storage_mask_kwrated = mdl.create_property(
    item_handle=_Storage_mask,
    name="kwrated",
    label="Rated kW",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit="kW"
)

_Storage_mask_kwhrated = mdl.create_property(
    item_handle=_Storage_mask,
    name="kwhrated",
    label="Rated kWh",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit="kWh"
)

_Storage_mask_chargetrigger = mdl.create_property(
    item_handle=_Storage_mask,
    name="chargetrigger",
    label="ChargeTrigger",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)

_Storage_mask_dischargetrigger = mdl.create_property(
    item_handle=_Storage_mask,
    name="dischargetrigger",
    label="DischargeTrigger",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)

_Storage_mask_pct_charge = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_charge",
    label="%Charge",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Storage_mask_pct_discharge = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_discharge",
    label="%Discharge",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Storage_mask_pct_effcharge = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_effcharge",
    label="Charge efficiency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit="%"
)

_Storage_mask_pct_effdischarge = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_effdischarge",
    label="Discharge efficiency",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit="%"
)

_Storage_mask_kvar = mdl.create_property(
    item_handle=_Storage_mask,
    name="kvar",
    label="Reactive power",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Ratings:2",
    unit="kVAr"
)

_Storage_mask_pf = mdl.create_property(
    item_handle=_Storage_mask,
    name="pf",
    label="Power factor",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Ratings:2",
    unit=""
)

_Storage_mask_pct_idlingkvar = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_idlingkvar",
    label="%IdlingkVAr",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="Ratings:2",
    unit="%"
)

_Storage_mask_pct_idlingkw = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_idlingkw",
    label="Idling losses",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit="%"
)

_Storage_mask_pct_reserve = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_reserve",
    label="Reserve mode SOC",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Ratings:2",
    unit="%"
)

_Storage_mask_load_loadshape = mdl.create_property(
    item_handle=_Storage_mask,
    name="load_loadshape",
    label="LoadShape object",
    widget="button",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    button_label="Choose",
    unit=""
)


_Storage_mask_load_loadshape_button_clicked = """
comp_script = return_comp_script(mdl, container_handle)
comp_script.load_loadshape(mdl, container_handle)

"""
mdl.set_handler_code(_Storage_mask_load_loadshape, "button_clicked", _Storage_mask_load_loadshape_button_clicked)

_Storage_mask_loadshape_name = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape_name",
    label="LoadShape name",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_mask_loadshape_name_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Storage_mask_loadshape_name, "property_value_edited", _Storage_mask_loadshape_name_property_value_edited)

_Storage_mask_loadshape_from_file = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape_from_file",
    label="From CSV file",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_mask_loadshape_from_file_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Storage_mask_loadshape_from_file, "property_value_edited", _Storage_mask_loadshape_from_file_property_value_edited)

_Storage_mask_useactual = mdl.create_property(
    item_handle=_Storage_mask,
    name="useactual",
    label="Actual load value",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_mask_useactual_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Storage_mask_useactual, "property_value_edited", _Storage_mask_useactual_property_value_edited)

_Storage_mask_loadshape_from_file_path = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape_from_file_path",
    label="LoadShape from file - path",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_loadshape_from_file_column = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape_from_file_column",
    label="LoadShape from file - column",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_loadshape_from_file_header = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape_from_file_header",
    label="LoadShape from file - header",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_loadshape = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape",
    label="LoadShape points",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_mask_loadshape_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Storage_mask_loadshape, "property_value_edited", _Storage_mask_loadshape_property_value_edited)

_Storage_mask_loadshape_int = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape_int",
    label="LoadShape interval",
    widget="edit",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_mask_loadshape_int_property_value_edited = """
old_value = mdl.get_property_value(prop_handle)
mdl.set_property_value(prop_handle, old_value)

"""
mdl.set_handler_code(_Storage_mask_loadshape_int, "property_value_edited", _Storage_mask_loadshape_int_property_value_edited)

_Storage_mask_timespan = mdl.create_property(
    item_handle=_Storage_mask,
    name="timespan",
    label="Loadshape time span",
    widget="combo",
    combo_values=['Daily', 'Yearly'],
    evaluate=False,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_pct_stored = mdl.create_property(
    item_handle=_Storage_mask,
    name="pct_stored",
    label="Initial SOC",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit="%"
)

_Storage_mask_execution_rate = mdl.create_property(
    item_handle=_Storage_mask,
    name="execution_rate",
    label="Execution rate",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)

_Storage_mask_vmaxpu = mdl.create_property(
    item_handle=_Storage_mask,
    name="vmaxpu",
    label="vmaxpu",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_vminpu = mdl.create_property(
    item_handle=_Storage_mask,
    name="vminpu",
    label="vminpu",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_kva = mdl.create_property(
    item_handle=_Storage_mask,
    name="kva",
    label="kva",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_inv_r = mdl.create_property(
    item_handle=_Storage_mask,
    name="inv_r",
    label="AC-side resistance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter:3",
    unit="Ω"
)

_Storage_mask_inv_l = mdl.create_property(
    item_handle=_Storage_mask,
    name="inv_l",
    label="AC-side inductance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter:3",
    unit="H"
)

_Storage_mask_inv_rf = mdl.create_property(
    item_handle=_Storage_mask,
    name="inv_rf",
    label="Filter resistance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter:3",
    unit="Ω"
)

_Storage_mask_inv_cf = mdl.create_property(
    item_handle=_Storage_mask,
    name="inv_cf",
    label="Filter capacitance",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter:3",
    unit="F"
)

_Storage_mask_inv_kp = mdl.create_property(
    item_handle=_Storage_mask,
    name="inv_kp",
    label="Controller Kp",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter:3",
    unit=""
)

_Storage_mask_inv_ki = mdl.create_property(
    item_handle=_Storage_mask,
    name="inv_ki",
    label="Controller Ki",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="Inverter:3",
    unit=""
)

_Storage_mask_loadshape_n_points = mdl.create_property(
    item_handle=_Storage_mask,
    name="loadshape_n_points",
    label="",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=False,
    tab_name="",
    unit=""
)

_Storage_mask_enable_monitoring = mdl.create_property(
    item_handle=_Storage_mask,
    name="enable_monitoring",
    label="Enable monitoring",
    widget="checkbox",
    combo_values=[],
    evaluate=False,
    enabled=True,
    visible=True,
    tab_name="Monitoring",
    unit=""
)


_Storage_mask_define_icon = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Storage_mask, "define_icon", _Storage_mask_define_icon)

_Storage_mask_init = """
import os
import sys
import importlib

lib_path = mdl.get_library_resource_dir_path(item_handle)
comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")
gui_scripts_path = os.path.join(os.path.realpath(lib_path), "gui_scripts")

if not comp_scripts_path in sys.path:
    sys.path.append(comp_scripts_path)
if not gui_scripts_path in sys.path:
    sys.path.append(gui_scripts_path)

import comp_storage as comp_script
importlib.reload(comp_script)
def return_comp_script(mdl, item_handle):
    return comp_script

comp_script.define_icon(mdl, item_handle)

"""
mdl.set_handler_code(_Storage_mask, "init", _Storage_mask_init)

_Storage_mask_pre_compile = """
comp_script = return_comp_script(mdl, item_handle)
comp_script.update_frequency_property(mdl, item_handle)
comp_script.restore_all_storages_points(mdl, item_handle)
# HEADER START
dispatch_p = mdl.get_property_value(mdl.prop(item_handle, "dispatch_p"))
dispatch_q = mdl.get_property_value(mdl.prop(item_handle, "dispatch_q"))
snap_status = mdl.get_property_value(mdl.prop(item_handle, "snap_status"))
kv = mdl.get_property_value(mdl.prop(item_handle, "kv"))
basefreq = mdl.get_property_value(mdl.prop(item_handle, "basefreq"))
kwrated = mdl.get_property_value(mdl.prop(item_handle, "kwrated"))
kwhrated = mdl.get_property_value(mdl.prop(item_handle, "kwhrated"))
chargetrigger = mdl.get_property_value(mdl.prop(item_handle, "chargetrigger"))
dischargetrigger = mdl.get_property_value(mdl.prop(item_handle, "dischargetrigger"))
pct_charge = mdl.get_property_value(mdl.prop(item_handle, "pct_charge"))
pct_discharge = mdl.get_property_value(mdl.prop(item_handle, "pct_discharge"))
pct_effcharge = mdl.get_property_value(mdl.prop(item_handle, "pct_effcharge"))
pct_effdischarge = mdl.get_property_value(mdl.prop(item_handle, "pct_effdischarge"))
kvar = mdl.get_property_value(mdl.prop(item_handle, "kvar"))
pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
pct_idlingkvar = mdl.get_property_value(mdl.prop(item_handle, "pct_idlingkvar"))
pct_idlingkw = mdl.get_property_value(mdl.prop(item_handle, "pct_idlingkw"))
pct_reserve = mdl.get_property_value(mdl.prop(item_handle, "pct_reserve"))
loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
pct_stored = mdl.get_property_value(mdl.prop(item_handle, "pct_stored"))
execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
vmaxpu = mdl.get_property_value(mdl.prop(item_handle, "vmaxpu"))
vminpu = mdl.get_property_value(mdl.prop(item_handle, "vminpu"))
kva = mdl.get_property_value(mdl.prop(item_handle, "kva"))
inv_r = mdl.get_property_value(mdl.prop(item_handle, "inv_r"))
inv_l = mdl.get_property_value(mdl.prop(item_handle, "inv_l"))
inv_rf = mdl.get_property_value(mdl.prop(item_handle, "inv_rf"))
inv_cf = mdl.get_property_value(mdl.prop(item_handle, "inv_cf"))
inv_kp = mdl.get_property_value(mdl.prop(item_handle, "inv_kp"))
inv_ki = mdl.get_property_value(mdl.prop(item_handle, "inv_ki"))
#loadshape_n_points = mdl.get_property_value(mdl.prop(item_handle, "loadshape_n_points"))
# HEADER STOP

comp_script.update_dispatch_int_comp(mdl, item_handle)

comp_name = mdl.get_name(mdl.get_parent(item_handle))

loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
if not loadshape:
    mdl.error(f"Select a LoadShape for component {comp_name}")
#mdl.set_property_value(mdl.prop(item_handle, "loadshape_n_points"), len(loadshape))
#loadshape_n_points = mdl.get_property_value(mdl.prop(item_handle, "loadshape_n_points"))

try:
    pf_value = mdl.get_property_value(mdl.prop(item_handle, "pf"))
    float(pf_value) # test
except:
    raise Exception(f"Invalid power factor value for component {comp_name}")

comp_script.calculate_kva(mdl, item_handle)

"""
mdl.set_handler_code(_Storage_mask, "pre_compile", _Storage_mask_pre_compile)

_Storage_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p>A detailed explanation of the OpenDSS Storage model can be found by clicking on the help button.</p><p>The Storage component time-domain model is comprised of an ideal battery and a Simple Battery inverter (average) from the Microgrid library.</p></body></html>
'''
mdl.set_description(_Storage_mask, _Storage_mask_desc)


# Component: Storage.chtrigger
_Storage_chtrigger = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="chtrigger",
    rotation="up",
    flip="flip_none",
    position=(8128, 7440),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_chtrigger, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_chtrigger, "value"), "chargetrigger")


# Component: Storage.dchtrigger
_Storage_dchtrigger = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="dchtrigger",
    rotation="up",
    flip="flip_none",
    position=(8200, 7392),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_dchtrigger, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_dchtrigger, "value"), "dischargetrigger")


# Component: Storage.Dispatch kW Reference Calculation
_Storage_Dispatch_kW_Reference_Calculation = mdl.create_component(
    type_name="core/C function",
    parent=_Storage,
    name="Dispatch kW Reference Calculation",
    rotation="up",
    flip="flip_none",
    position=(8392, 7440),
    hide_name=False,
    size=(280, 368)
)
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "input_terminals"), "real loadshape_point;inherit kwrated;real dchtrigger;real chtrigger;int dispatch_mode;real pct_charge;real pct_discharge;")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "input_terminals_feedthrough"), "True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "input_terminals_show_labels"), "True;True;True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "output_fnc"), "/*Begin code section*/
if (dispatch_mode == 1 || dispatch_mode == 2 || dispatch_mode == 3){
    // Discharge mode
    if (loadshape_point > dchtrigger)
        {
            close_contactor = 1;
            kwref = kwrated*1000*pct_discharge/100;
        }
    // Charge mode
    else if (loadshape_point < chtrigger)
        {
            close_contactor = 1;
            kwref = -kwrated*1000*pct_charge/100;
        }
    // Idle mode
    else
        {
            close_contactor = 0;
            kwref = 0;
        }
}
else if (dispatch_mode == 4 || dispatch_mode == 5 || dispatch_mode == 6){
    // Idle mode
    if (loadshape_point == 0)
        {
            close_contactor = 0;
            kwref = 0;
        }
    else
        {
            close_contactor = 1;
            kwref = loadshape_point*kwrated*1000;
        }
}
/*End code section*/")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "output_terminals"), "real close_contactor;real kwref;")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "output_terminals_dimensions"), "inherit;inherit")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "output_terminals_feedthrough"), "True;True")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_kW_Reference_Calculation, "output_terminals_show_labels"), "True;True")


# Component: Storage.Enable Inverter
_Storage_Enable_Inverter = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage,
    name="Enable Inverter",
    rotation="up",
    flip="flip_none",
    position=(8632, 7344),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Vbat
_Storage_Vbat = mdl.create_component(
    type_name="core/Voltage Measurement",
    parent=_Storage,
    name="Vbat",
    rotation="right",
    flip="flip_none",
    position=(8592, 8304),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Storage_Vbat, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Vbat, "sig_output"), "True")


# Component: Storage.Simple Battery inverter (Average)1
_Storage_Simple_Battery_inverter__Average_1 = mdl.create_component(
    type_name="core/Simple Battery inverter (Average)",
    parent=_Storage,
    name="Simple Battery inverter (Average)1",
    rotation="up",
    flip="flip_horizontal",
    position=(7768, 8312),
    hide_name=False,
    size=(288, 239)
)
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "Cf"), "inv_cf")
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "Ki"), "inv_ki")
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "Kp"), "inv_kp")
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "L"), "inv_l")
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "R"), "inv_r")
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "Rf"), "inv_rf")
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "Sn"), "4*kva*1000")
mdl.set_property_value(mdl.prop(_Storage_Simple_Battery_inverter__Average_1, "Ts"), "execution_rate")


# Component: Storage.Inverter Power Reference
_Storage_Inverter_Power_Reference = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage,
    name="Inverter Power Reference",
    rotation="up",
    flip="flip_none",
    position=(7728, 7952),
    hide_name=False,
    size=(144, 176)
)


# Component: Storage.Inverter Power Reference.Product20
_Storage_Inverter_Power_Reference_Product20 = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Inverter_Power_Reference,
    name="Product20",
    rotation="up",
    flip="flip_none",
    position=(7672, 7912),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Inverter Power Reference.Product21
_Storage_Inverter_Power_Reference_Product21 = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Inverter_Power_Reference,
    name="Product21",
    rotation="up",
    flip="flip_none",
    position=(7672, 8040),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Inverter Power Reference.Signal switch2
_Storage_Inverter_Power_Reference_Signal_switch2 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Storage_Inverter_Power_Reference,
    name="Signal switch2",
    rotation="up",
    flip="flip_none",
    position=(7448, 7776),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Signal_switch2, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Signal_switch2, "threshold"), "0.1")


# Component: Storage.Inverter Power Reference.Constant Z mode check
_Storage_Inverter_Power_Reference_Constant_Z_mode_check = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage_Inverter_Power_Reference,
    name="Constant Z mode check",
    rotation="up",
    flip="flip_none",
    position=(7032, 7520),
    hide_name=False,
    size=(152, 88)
)


# Component: Storage.Inverter Power Reference.Constant Z mode check.Relational operator2
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator2 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    name="Relational operator2",
    rotation="up",
    flip="flip_none",
    position=(8184, 8240),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator2, "relational_op"), "<")


# Component: Storage.Inverter Power Reference.Constant Z mode check.vmaxpu
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vmaxpu = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    name="vmaxpu",
    rotation="up",
    flip="flip_none",
    position=(8088, 8152),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vmaxpu, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vmaxpu, "value"), "vmaxpu*kv*1000")


# Component: Storage.Inverter Power Reference.Constant Z mode check.vminpu
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vminpu = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    name="vminpu",
    rotation="up",
    flip="flip_none",
    position=(8088, 8248),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vminpu, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vminpu, "value"), "vminpu*kv*1000")


# Component: Storage.Inverter Power Reference.Constant Z mode check.Logical operator1
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Logical_operator1 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    name="Logical operator1",
    rotation="up",
    flip="flip_none",
    position=(8296, 8192),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Logical_operator1, "operator"), "OR")


# Component: Storage.Inverter Power Reference.Constant Z mode check.Relational operator1
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator1 = mdl.create_component(
    type_name="core/Relational operator",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    name="Relational operator1",
    rotation="up",
    flip="flip_none",
    position=(8184, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator1, "relational_op"), ">")


# Port: Storage.Inverter Power Reference.Constant Z mode check.constant_z_mode
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_constant_z_mode = mdl.create_port(
    name="constant_z_mode",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8408, 8192)
)

# Port: Storage.Inverter Power Reference.Constant Z mode check.v_line
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_v_line = mdl.create_port(
    name="v_line",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8088, 8080)
)

# Junction: Storage.Inverter Power Reference.Constant Z mode check.Junction560
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Junction560 = mdl.create_junction(
    name="Junction560",
    parent=_Storage_Inverter_Power_Reference_Constant_Z_mode_check,
    kind="sp",
    position=(8120, 8136)
)

# Component: Storage.Inverter Power Reference.ctZ
_Storage_Inverter_Power_Reference_ctZ = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage_Inverter_Power_Reference,
    name="ctZ",
    rotation="up",
    flip="flip_none",
    position=(7496, 7520),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Inverter Power Reference.const_p_mult
_Storage_Inverter_Power_Reference_const_p_mult = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference,
    name="const_p_mult",
    rotation="up",
    flip="flip_none",
    position=(7344, 7840),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_const_p_mult, "execution_rate"), "execution_rate")


# Component: Storage.Inverter Power Reference.Signal switch3
_Storage_Inverter_Power_Reference_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Storage_Inverter_Power_Reference,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(7880, 7928),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Signal_switch3, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Signal_switch3, "threshold"), "0.1")


# Component: Storage.Inverter Power Reference.Constant1
_Storage_Inverter_Power_Reference_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(7776, 7944),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant1, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Constant1, "value"), "-pct_idlingkw/100*kwrated*1000")


# Component: Storage.Inverter Power Reference.ctz_multiplier
_Storage_Inverter_Power_Reference_ctz_multiplier = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage_Inverter_Power_Reference,
    name="ctz_multiplier",
    rotation="up",
    flip="flip_none",
    position=(7392, 7696),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Inverter Power Reference.Data Type Conversion1
_Storage_Inverter_Power_Reference_Data_Type_Conversion1 = mdl.create_component(
    type_name="core/Data Type Conversion",
    parent=_Storage_Inverter_Power_Reference,
    name="Data Type Conversion1",
    rotation="up",
    flip="flip_none",
    position=(7784, 8040),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Inverter Power Reference.Limit1
_Storage_Inverter_Power_Reference_Limit1 = mdl.create_component(
    type_name="core/Limit",
    parent=_Storage_Inverter_Power_Reference,
    name="Limit1",
    rotation="up",
    flip="flip_none",
    position=(7968, 7928),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Limit1, "lower_limit"), "[-4*kwrated*1000]")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Limit1, "upper_limit"), "[4*kwrated*1000]")


# Component: Storage.Inverter Power Reference.Bus Join1
_Storage_Inverter_Power_Reference_Bus_Join1 = mdl.create_component(
    type_name="core/Bus Join",
    parent=_Storage_Inverter_Power_Reference,
    name="Bus Join1",
    rotation="up",
    flip="flip_none",
    position=(8216, 7984),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Bus_Join1, "inputs"), "3")


# Component: Storage.Inverter Power Reference.Inverter P Reference
_Storage_Inverter_Power_Reference_Inverter_P_Reference = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage_Inverter_Power_Reference,
    name="Inverter P Reference",
    rotation="left",
    flip="flip_none",
    position=(8056, 7888),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Inverter Power Reference.enable_inverter
_Storage_Inverter_Power_Reference_enable_inverter = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference,
    name="enable_inverter",
    rotation="down",
    flip="flip_vertical",
    position=(8280, 7912),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_enable_inverter, "execution_rate"), "execution_rate")


# Component: Storage.Inverter Power Reference.Inverter Q Reference
_Storage_Inverter_Power_Reference_Inverter_Q_Reference = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage_Inverter_Power_Reference,
    name="Inverter Q Reference",
    rotation="right",
    flip="flip_none",
    position=(8056, 8112),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Inverter Power Reference.kvar calculation
_Storage_Inverter_Power_Reference_kvar_calculation = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage_Inverter_Power_Reference,
    name="kvar calculation",
    rotation="up",
    flip="flip_none",
    position=(7440, 8048),
    hide_name=False,
    size=(120, 80)
)


# Component: Storage.Inverter Power Reference.kvar calculation.unit pf
_Storage_Inverter_Power_Reference_kvar_calculation_unit_pf = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    name="unit pf",
    rotation="up",
    flip="flip_none",
    position=(8664, 8208),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_unit_pf, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_unit_pf, "value"), "0")


# Component: Storage.Inverter Power Reference.kvar calculation.kVAr
_Storage_Inverter_Power_Reference_kvar_calculation_kVAr = mdl.create_component(
    type_name="core/Multiport signal switch",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    name="kVAr",
    rotation="up",
    flip="flip_none",
    position=(8872, 8240),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "number_of_input_terminals"), "6")


# Component: Storage.Inverter Power Reference.kvar calculation.kvar_kvar
_Storage_Inverter_Power_Reference_kvar_calculation_kvar_kvar = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    name="kvar_kvar",
    rotation="up",
    flip="flip_none",
    position=(8664, 8352),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_kvar_kvar, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_kvar_kvar, "value"), "kvar*1000")


# Component: Storage.Inverter Power Reference.kvar calculation.Gain1
_Storage_Inverter_Power_Reference_kvar_calculation_Gain1 = mdl.create_component(
    type_name="core/Gain",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    name="Gain1",
    rotation="up",
    flip="flip_none",
    position=(8752, 8272),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_Gain1, "gain"), "np.sqrt(1/(pf*pf)-1)")


# Component: Storage.Inverter Power Reference.kvar calculation.kwrated
_Storage_Inverter_Power_Reference_kvar_calculation_kwrated = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    name="kwrated",
    rotation="up",
    flip="flip_none",
    position=(8664, 8272),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_kwrated, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_kvar_calculation_kwrated, "value"), "kwrated*1000")


# Port: Storage.Inverter Power Reference.kvar calculation.kvar_out
_Storage_Inverter_Power_Reference_kvar_calculation_kvar_out = mdl.create_port(
    name="kvar_out",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8952, 8240)
)

# Port: Storage.Inverter Power Reference.kvar calculation.dispatch_int
_Storage_Inverter_Power_Reference_kvar_calculation_dispatch_int = mdl.create_port(
    name="dispatch_int",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(8824, 8152)
)

# Junction: Storage.Inverter Power Reference.kvar calculation.Junction1
_Storage_Inverter_Power_Reference_kvar_calculation_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    kind="sp",
    position=(8808, 8208)
)

# Junction: Storage.Inverter Power Reference.kvar calculation.Junction2
_Storage_Inverter_Power_Reference_kvar_calculation_Junction2 = mdl.create_junction(
    name="Junction2",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    kind="sp",
    position=(8832, 8272)
)

# Junction: Storage.Inverter Power Reference.kvar calculation.Junction3
_Storage_Inverter_Power_Reference_kvar_calculation_Junction3 = mdl.create_junction(
    name="Junction3",
    parent=_Storage_Inverter_Power_Reference_kvar_calculation,
    kind="sp",
    position=(8800, 8288)
)

# Component: Storage.Inverter Power Reference.Product16
_Storage_Inverter_Power_Reference_Product16 = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Inverter_Power_Reference,
    name="Product16",
    rotation="up",
    flip="flip_none",
    position=(7280, 7760),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Product16, "signs"), "/*")


# Component: Storage.Inverter Power Reference.Product18
_Storage_Inverter_Power_Reference_Product18 = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Inverter_Power_Reference,
    name="Product18",
    rotation="up",
    flip="flip_none",
    position=(6976, 7864),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Inverter Power Reference.Product19
_Storage_Inverter_Power_Reference_Product19 = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Inverter_Power_Reference,
    name="Product19",
    rotation="up",
    flip="flip_none",
    position=(7168, 7680),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Inverter Power Reference.vmax
_Storage_Inverter_Power_Reference_vmax = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference,
    name="vmax",
    rotation="up",
    flip="flip_none",
    position=(6928, 7648),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_vmax, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_vmax, "value"), "kv*1000*vmaxpu")


# Component: Storage.Inverter Power Reference.vmin
_Storage_Inverter_Power_Reference_vmin = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Inverter_Power_Reference,
    name="vmin",
    rotation="up",
    flip="flip_none",
    position=(6928, 7712),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_vmin, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_vmin, "value"), "kv*1000*vminpu")


# Component: Storage.Inverter Power Reference.Signal switch4
_Storage_Inverter_Power_Reference_Signal_switch4 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Storage_Inverter_Power_Reference,
    name="Signal switch4",
    rotation="up",
    flip="flip_none",
    position=(7024, 7680),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Signal_switch4, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Storage_Inverter_Power_Reference_Signal_switch4, "threshold"), "kv*1000")


# Port: Storage.Inverter Power Reference.dispatch_mode_int
_Storage_Inverter_Power_Reference_dispatch_mode_int = mdl.create_port(
    name="dispatch_mode_int",
    parent=_Storage_Inverter_Power_Reference,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7288, 8048)
)

# Port: Storage.Inverter Power Reference.v_line
_Storage_Inverter_Power_Reference_v_line = mdl.create_port(
    name="v_line",
    parent=_Storage_Inverter_Power_Reference,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(6720, 7872)
)

# Port: Storage.Inverter Power Reference.active_status
_Storage_Inverter_Power_Reference_active_status = mdl.create_port(
    name="active_status",
    parent=_Storage_Inverter_Power_Reference,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 4),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7776, 7840)
)

# Port: Storage.Inverter Power Reference.dss_kw
_Storage_Inverter_Power_Reference_dss_kw = mdl.create_port(
    name="dss_kw",
    parent=_Storage_Inverter_Power_Reference,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 3),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7288, 7920)
)

# Port: Storage.Inverter Power Reference.inv_inputs
_Storage_Inverter_Power_Reference_inv_inputs = mdl.create_port(
    name="inv_inputs",
    parent=_Storage_Inverter_Power_Reference,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('auto', 'auto'),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8304, 7984)
)

# Junction: Storage.Inverter Power Reference.Junction18
_Storage_Inverter_Power_Reference_Junction18 = mdl.create_junction(
    name="Junction18",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(6928, 7872)
)

# Junction: Storage.Inverter Power Reference.Junction20
_Storage_Inverter_Power_Reference_Junction20 = mdl.create_junction(
    name="Junction20",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(6800, 7872)
)

# Junction: Storage.Inverter Power Reference.Junction21
_Storage_Inverter_Power_Reference_Junction21 = mdl.create_junction(
    name="Junction21",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(7120, 7680)
)

# Junction: Storage.Inverter Power Reference.Junction562
_Storage_Inverter_Power_Reference_Junction562 = mdl.create_junction(
    name="Junction562",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(7448, 7520)
)

# Junction: Storage.Inverter Power Reference.Junction563
_Storage_Inverter_Power_Reference_Junction563 = mdl.create_junction(
    name="Junction563",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(6800, 7616)
)

# Junction: Storage.Inverter Power Reference.Junction564
_Storage_Inverter_Power_Reference_Junction564 = mdl.create_junction(
    name="Junction564",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(7536, 7904)
)

# Junction: Storage.Inverter Power Reference.Junction566
_Storage_Inverter_Power_Reference_Junction566 = mdl.create_junction(
    name="Junction566",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(7344, 7760)
)

# Junction: Storage.Inverter Power Reference.Junction567
_Storage_Inverter_Power_Reference_Junction567 = mdl.create_junction(
    name="Junction567",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(8056, 7928)
)

# Junction: Storage.Inverter Power Reference.Junction568
_Storage_Inverter_Power_Reference_Junction568 = mdl.create_junction(
    name="Junction568",
    parent=_Storage_Inverter_Power_Reference,
    kind="sp",
    position=(8056, 8040)
)

# Comment: Storage.Inverter Power Reference.Comment8
_Storage_Inverter_Power_Reference_Comment8 = mdl.create_comment(
    text="<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\"><html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\" font-family:\'Arial\'; font-size:12pt; font-weight:400; font-style:normal;\"><p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Multiplier</p></body></html> ",
    parent=_Storage_Inverter_Power_Reference,
    position=(7544, 7776)
)

# Component: Storage.Vline
_Storage_Vline = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage,
    name="Vline",
    rotation="left",
    flip="flip_none",
    position=(7472, 7872),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.DSS kW Reference
_Storage_DSS_kW_Reference = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage,
    name="DSS kW Reference",
    rotation="up",
    flip="flip_none",
    position=(8632, 7528),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Ibat
_Storage_Ibat = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_Storage,
    name="Ibat",
    rotation="up",
    flip="flip_none",
    position=(8416, 8216),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Storage_Ibat, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Ibat, "sig_output"), "True")


# Component: Storage.Active status
_Storage_Active_status = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage,
    name="Active status",
    rotation="up",
    flip="flip_none",
    position=(7696, 7696),
    hide_name=False,
    size=(104, 96)
)


# Component: Storage.Active status.Logical operator1
_Storage_Active_status_Logical_operator1 = mdl.create_component(
    type_name="core/Logical operator",
    parent=_Storage_Active_status,
    name="Logical operator1",
    rotation="up",
    flip="flip_none",
    position=(8192, 8192),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Active status.bool_to_real
_Storage_Active_status_bool_to_real = mdl.create_component(
    type_name="core/Data Type Conversion",
    parent=_Storage_Active_status,
    name="bool_to_real",
    rotation="up",
    flip="flip_none",
    position=(8296, 8192),
    hide_name=False,
    size=(None, None)
)


# Port: Storage.Active status.In2
_Storage_Active_status_In2 = mdl.create_port(
    name="In2",
    parent=_Storage_Active_status,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8072, 8240)
)

# Port: Storage.Active status.In1
_Storage_Active_status_In1 = mdl.create_port(
    name="In1",
    parent=_Storage_Active_status,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8072, 8144)
)

# Port: Storage.Active status.Out3
_Storage_Active_status_Out3 = mdl.create_port(
    name="Out3",
    parent=_Storage_Active_status,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8384, 8192)
)

# Component: Storage.Battery Active
_Storage_Battery_Active = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage,
    name="Battery Active",
    rotation="up",
    flip="flip_none",
    position=(7864, 7632),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.i_ch_dch_losses
_Storage_i_ch_dch_losses = mdl.create_component(
    type_name="core/Signal Controlled Current Source",
    parent=_Storage,
    name="i_ch_dch_losses",
    rotation="left",
    flip="flip_horizontal",
    position=(8272, 8320),
    hide_name=False,
    size=(64, 32)
)


# Component: Storage.Ch | Dch Losses Current Calc
_Storage_Ch___Dch_Losses_Current_Calc = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage,
    name="Ch | Dch Losses Current Calc",
    rotation="up",
    flip="flip_none",
    position=(8240, 8112),
    hide_name=False,
    size=(160, 104)
)


# Component: Storage.Ch | Dch Losses Current Calc.discharge_losses
_Storage_Ch___Dch_Losses_Current_Calc_discharge_losses = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    name="discharge_losses",
    rotation="up",
    flip="flip_none",
    position=(8064, 8264),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_discharge_losses, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_discharge_losses, "value"), "1-pct_effdischarge/100")


# Component: Storage.Ch | Dch Losses Current Calc.Power1
_Storage_Ch___Dch_Losses_Current_Calc_Power1 = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    name="Power1",
    rotation="up",
    flip="flip_none",
    position=(8488, 8208),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Ch | Dch Losses Current Calc.Abs1
_Storage_Ch___Dch_Losses_Current_Calc_Abs1 = mdl.create_component(
    type_name="core/Abs",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    name="Abs1",
    rotation="up",
    flip="flip_none",
    position=(8064, 8400),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Ch | Dch Losses Current Calc.Signal switch4
_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch4 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    name="Signal switch4",
    rotation="up",
    flip="flip_none",
    position=(8904, 8240),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch4, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch4, "threshold"), "0.5")


# Component: Storage.Ch | Dch Losses Current Calc.Constant1
_Storage_Ch___Dch_Losses_Current_Calc_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(8832, 8368),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_Constant1, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_Constant1, "value"), "0")


# Component: Storage.Ch | Dch Losses Current Calc.Signal switch3
_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(8240, 8192),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch3, "criterion"), "ctrl > threshold")


# Component: Storage.Ch | Dch Losses Current Calc.charge_losses
_Storage_Ch___Dch_Losses_Current_Calc_charge_losses = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    name="charge_losses",
    rotation="up",
    flip="flip_none",
    position=(8056, 8120),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_charge_losses, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Ch___Dch_Losses_Current_Calc_charge_losses, "value"), "1-pct_effcharge/100")


# Port: Storage.Ch | Dch Losses Current Calc.i_minus_idle
_Storage_Ch___Dch_Losses_Current_Calc_i_minus_idle = mdl.create_port(
    name="i_minus_idle",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7888, 8064)
)

# Port: Storage.Ch | Dch Losses Current Calc.i_ch|dch_losses
_Storage_Ch___Dch_Losses_Current_Calc_i_ch_dch_losses = mdl.create_port(
    name="i_ch|dch_losses",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(9000, 8240)
)

# Port: Storage.Ch | Dch Losses Current Calc.active_bat
_Storage_Ch___Dch_Losses_Current_Calc_active_bat = mdl.create_port(
    name="active_bat",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8848, 8128)
)

# Junction: Storage.Ch | Dch Losses Current Calc.Junction1
_Storage_Ch___Dch_Losses_Current_Calc_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Storage_Ch___Dch_Losses_Current_Calc,
    kind="sp",
    position=(7952, 8064)
)

# Component: Storage.Three-phase Meter1
_Storage_Three_phase_Meter1 = mdl.create_component(
    type_name="core/Three-phase Meter",
    parent=_Storage,
    name="Three-phase Meter1",
    rotation="up",
    flip="flip_horizontal",
    position=(7296, 8312),
    hide_name=False,
    size=(56, 240)
)
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "P_meas"), "True")
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "Ts"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "VAB"), "True")
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "VBC"), "True")
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "VCA"), "True")
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "VLL_avg_rms"), "True")
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "VLL_rms"), "True")
mdl.set_property_value(mdl.prop(_Storage_Three_phase_Meter1, "freq"), "True")


# Component: Storage.Meter Split1
_Storage_Meter_Split1 = mdl.create_component(
    type_name="core/Meter Split",
    parent=_Storage,
    name="Meter Split1",
    rotation="up",
    flip="flip_none",
    position=(7384, 8008),
    hide_name=False,
    size=(88, 200)
)
mdl.set_property_value(mdl.prop(_Storage_Meter_Split1, "power_p"), "True")
mdl.set_property_value(mdl.prop(_Storage_Meter_Split1, "power_pf"), "True")
mdl.set_property_value(mdl.prop(_Storage_Meter_Split1, "power_q"), "True")
mdl.set_property_value(mdl.prop(_Storage_Meter_Split1, "van"), "False")
mdl.set_property_value(mdl.prop(_Storage_Meter_Split1, "vbn"), "False")
mdl.set_property_value(mdl.prop(_Storage_Meter_Split1, "vcn"), "False")
mdl.set_property_value(mdl.prop(_Storage_Meter_Split1, "vll_rms"), "True")


# Component: Storage.P
_Storage_P = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage,
    name="P",
    rotation="up",
    flip="flip_none",
    position=(7464, 7984),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Q
_Storage_Q = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage,
    name="Q",
    rotation="up",
    flip="flip_none",
    position=(7488, 8032),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.pf
_Storage_pf = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage,
    name="pf",
    rotation="up",
    flip="flip_none",
    position=(7520, 8080),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Dispatch Mode Integer
_Storage_Dispatch_Mode_Integer = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage,
    name="Dispatch Mode Integer",
    rotation="up",
    flip="flip_none",
    position=(7944, 7488),
    hide_name=False,
    size=(152, 56)
)
_Storage_Dispatch_Mode_Integer_mask = mdl.create_mask(_Storage_Dispatch_Mode_Integer)
_Storage_Dispatch_Mode_Integer_mask_dispatch_mode_int = mdl.create_property(
    item_handle=_Storage_Dispatch_Mode_Integer_mask,
    name="dispatch_mode_int",
    label="Dispatch Mode",
    widget="edit",
    combo_values=[],
    evaluate=True,
    enabled=True,
    visible=True,
    tab_name="",
    unit=""
)


_Storage_Dispatch_Mode_Integer_mask_init = """

"""
mdl.set_handler_code(_Storage_Dispatch_Mode_Integer_mask, "init", _Storage_Dispatch_Mode_Integer_mask_init)

_Storage_Dispatch_Mode_Integer_mask_pre_compile = """

"""
mdl.set_handler_code(_Storage_Dispatch_Mode_Integer_mask, "pre_compile", _Storage_Dispatch_Mode_Integer_mask_pre_compile)

_Storage_Dispatch_Mode_Integer_mask_desc = '''
<html><head><meta name="qrichtext" content="1"></meta><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=""><p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></br></p></body></html>
'''
mdl.set_description(_Storage_Dispatch_Mode_Integer_mask, _Storage_Dispatch_Mode_Integer_mask_desc)


# Component: Storage.Dispatch Mode Integer.kw_mode
_Storage_Dispatch_Mode_Integer_kw_mode = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Dispatch_Mode_Integer,
    name="kw_mode",
    rotation="up",
    flip="flip_none",
    position=(8352, 8168),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Dispatch_Mode_Integer_kw_mode, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_Mode_Integer_kw_mode, "signal_type"), "int")
mdl.set_property_value(mdl.prop(_Storage_Dispatch_Mode_Integer_kw_mode, "value"), "dispatch_mode_int")


# Port: Storage.Dispatch Mode Integer.dispatch_mode_int
_Storage_Dispatch_Mode_Integer_dispatch_mode_int = mdl.create_port(
    name="dispatch_mode_int",
    parent=_Storage_Dispatch_Mode_Integer,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8440, 8168)
)

# Component: Storage.pct_charge
_Storage_pct_charge = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="pct_charge",
    rotation="up",
    flip="flip_none",
    position=(8128, 7536),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_pct_charge, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_pct_charge, "value"), "pct_charge")


# Component: Storage.pct_discharge
_Storage_pct_discharge = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="pct_discharge",
    rotation="up",
    flip="flip_none",
    position=(8200, 7584),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_pct_discharge, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_pct_discharge, "value"), "pct_discharge")


# Component: Storage.kwrated
_Storage_kwrated = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="kwrated",
    rotation="up",
    flip="flip_none",
    position=(8128, 7344),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_kwrated, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_kwrated, "value"), "kwrated")


# Component: Storage.Ideal Bat
_Storage_Ideal_Bat = mdl.create_component(
    type_name="core/Signal Controlled Voltage Source",
    parent=_Storage,
    name="Ideal Bat",
    rotation="right",
    flip="flip_none",
    position=(8488, 8304),
    hide_name=False,
    size=(64, 32)
)


# Component: Storage.Vdc
_Storage_Vdc = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="Vdc",
    rotation="up",
    flip="flip_horizontal",
    position=(8584, 8304),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Vdc, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Vdc, "value"), "4*kv*1000*vmaxpu")


# Component: Storage.R1
_Storage_R1 = mdl.create_component(
    type_name="core/Resistor",
    parent=_Storage,
    name="R1",
    rotation="right",
    flip="flip_none",
    position=(8112, 8344),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_R1, "resistance"), "(4*kv*1000*vmaxpu)**2/(pct_idlingkw/100*kwrated*1000 + 1e-6)")


# Component: Storage.Battery Energy
_Storage_Battery_Energy = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage,
    name="Battery Energy",
    rotation="up",
    flip="flip_none",
    position=(8760, 8240),
    hide_name=False,
    size=(120, 160)
)


# Component: Storage.Battery Energy.Battery Power
_Storage_Battery_Energy_Battery_Power = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage_Battery_Energy,
    name="Battery Power",
    rotation="up",
    flip="flip_none",
    position=(8016, 8048),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Battery Energy.Signal switch3
_Storage_Battery_Energy_Signal_switch3 = mdl.create_component(
    type_name="core/Signal switch",
    parent=_Storage_Battery_Energy,
    name="Signal switch3",
    rotation="up",
    flip="flip_none",
    position=(8016, 8240),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Signal_switch3, "criterion"), "ctrl > threshold")
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Signal_switch3, "threshold"), "0.5")


# Component: Storage.Battery Energy.Constant1
_Storage_Battery_Energy_Constant1 = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Battery_Energy,
    name="Constant1",
    rotation="up",
    flip="flip_none",
    position=(7920, 8288),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Constant1, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Constant1, "value"), "0")


# Component: Storage.Battery Energy.Step1
_Storage_Battery_Energy_Step1 = mdl.create_component(
    type_name="core/Step",
    parent=_Storage_Battery_Energy,
    name="Step1",
    rotation="up",
    flip="flip_none",
    position=(8032, 8336),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Step1, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Step1, "step_time"), "0.5")


# Component: Storage.Battery Energy.E meas sw
_Storage_Battery_Energy_E_meas_sw = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Battery_Energy,
    name="E meas sw",
    rotation="up",
    flip="flip_none",
    position=(8136, 8248),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Battery Energy.Gain4
_Storage_Battery_Energy_Gain4 = mdl.create_component(
    type_name="core/Gain",
    parent=_Storage_Battery_Energy,
    name="Gain4",
    rotation="up",
    flip="flip_none",
    position=(8216, 8248),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Gain4, "gain"), "1/3600")


# Component: Storage.Battery Energy.Energy
_Storage_Battery_Energy_Energy = mdl.create_component(
    type_name="core/Integrator",
    parent=_Storage_Battery_Energy,
    name="Energy",
    rotation="up",
    flip="flip_none",
    position=(8312, 8248),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Energy, "init_value"), "pct_stored/100*kwhrated*1000")
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Energy, "limit_lower"), "kwhrated*1000*pct_reserve/100")
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Energy, "limit_output"), "True")
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Energy, "limit_upper"), "kwhrated*1000")


# Component: Storage.Battery Energy.SOC
_Storage_Battery_Energy_SOC = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage_Battery_Energy,
    name="SOC",
    rotation="up",
    flip="flip_none",
    position=(8504, 8184),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Battery Energy.Power
_Storage_Battery_Energy_Power = mdl.create_component(
    type_name="core/Product",
    parent=_Storage_Battery_Energy,
    name="Power",
    rotation="up",
    flip="flip_none",
    position=(7888, 8224),
    hide_name=False,
    size=(0, 0)
)


# Component: Storage.Battery Energy.Gain3
_Storage_Battery_Energy_Gain3 = mdl.create_component(
    type_name="core/Gain",
    parent=_Storage_Battery_Energy,
    name="Gain3",
    rotation="up",
    flip="flip_none",
    position=(8424, 8184),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Battery_Energy_Gain3, "gain"), "100/(kwhrated*1000)")


# Port: Storage.Battery Energy.Ibat
_Storage_Battery_Energy_Ibat = mdl.create_port(
    name="Ibat",
    parent=_Storage_Battery_Energy,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 2),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7808, 8280)
)

# Port: Storage.Battery Energy.In3
_Storage_Battery_Energy_In3 = mdl.create_port(
    name="In3",
    parent=_Storage_Battery_Energy,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('top', 1),
    rotation="right",
    flip="flip_none",
    hide_name=False,
    position=(8016, 8160)
)

# Port: Storage.Battery Energy.Battery Energy
_Storage_Battery_Energy_Battery_Energy = mdl.create_port(
    name="Battery Energy",
    parent=_Storage_Battery_Energy,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8504, 8248)
)

# Port: Storage.Battery Energy.Vbat
_Storage_Battery_Energy_Vbat = mdl.create_port(
    name="Vbat",
    parent=_Storage_Battery_Energy,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7808, 8184)
)

# Junction: Storage.Battery Energy.Junction611
_Storage_Battery_Energy_Junction611 = mdl.create_junction(
    name="Junction611",
    parent=_Storage_Battery_Energy,
    kind="sp",
    position=(7936, 8224)
)

# Junction: Storage.Battery Energy.Junction627
_Storage_Battery_Energy_Junction627 = mdl.create_junction(
    name="Junction627",
    parent=_Storage_Battery_Energy,
    kind="sp",
    position=(8376, 8248)
)

# Component: Storage.Idc
_Storage_Idc = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_Storage,
    name="Idc",
    rotation="up",
    flip="flip_none",
    position=(7984, 8216),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Storage_Idc, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Idc, "sig_output"), "True")


# Component: Storage.I_idl_losses
_Storage_I_idl_losses = mdl.create_component(
    type_name="core/Current Measurement",
    parent=_Storage,
    name="I_idl_losses",
    rotation="left",
    flip="flip_vertical",
    position=(8112, 8264),
    hide_name=False,
    size=(64, 32)
)
mdl.set_property_value(mdl.prop(_Storage_I_idl_losses, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_I_idl_losses, "sig_output"), "True")


# Component: Storage.Sum1
_Storage_Sum1 = mdl.create_component(
    type_name="core/Sum",
    parent=_Storage,
    name="Sum1",
    rotation="up",
    flip="flip_none",
    position=(8088, 8080),
    hide_name=False,
    size=(0, 0)
)
mdl.set_property_value(mdl.prop(_Storage_Sum1, "signs"), "+-")


# Component: Storage.Disconnect if on reserve or charged
_Storage_Disconnect_if_on_reserve_or_charged = mdl.create_component(
    type_name="core/C function",
    parent=_Storage,
    name="Disconnect if on reserve or charged",
    rotation="up",
    flip="flip_none",
    position=(7552, 7400),
    hide_name=False,
    size=(216, 280)
)
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "input_terminals"), "real energy;inherit kwhrated;inherit pct_reserve;inherit kwref;inherit active_inverter;")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "input_terminals_dimensions"), "inherit;inherit;inherit;inherit;inherit")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "input_terminals_feedthrough"), "True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "input_terminals_show_labels"), "True;True;True;True;True")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "output_fnc"), "/*Begin code section*/
if (active_inverter){
    if (energy >= kwhrated*1000){
        if (kwref >= 0){
            connect_battery = 1;
        }
        else{
            connect_battery = 0;
        }
    }
    else if (energy <= kwhrated*1000*pct_reserve/100){
            if (kwref < 0){
                connect_battery = 1;
            }
            else{
                connect_battery = 0;
            }
        }
    else {
            connect_battery = 1;
        }
}
else{
    connect_battery = 0;
}
/*End code section*/")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "output_terminals"), "real connect_battery;")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "output_terminals_dimensions"), "inherit")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "output_terminals_feedthrough"), "True")
mdl.set_property_value(mdl.prop(_Storage_Disconnect_if_on_reserve_or_charged, "output_terminals_show_labels"), "True")


# Component: Storage.kwhrated
_Storage_kwhrated = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="kwhrated",
    rotation="up",
    flip="flip_none",
    position=(7352, 7344),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_kwhrated, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_kwhrated, "value"), "kwhrated")


# Component: Storage.pct_reserve
_Storage_pct_reserve = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage,
    name="pct_reserve",
    rotation="up",
    flip="flip_none",
    position=(7352, 7400),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_pct_reserve, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_pct_reserve, "value"), "pct_reserve")


# Component: Storage.Termination2
_Storage_Termination2 = mdl.create_component(
    type_name="core/Termination",
    parent=_Storage,
    name="Termination2",
    rotation="left",
    flip="flip_none",
    position=(7656, 8160),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Loadshape Point Selector
_Storage_Loadshape_Point_Selector = mdl.create_component(
    type_name="core/Empty Subsystem",
    parent=_Storage,
    name="Loadshape Point Selector",
    rotation="up",
    flip="flip_none",
    position=(7944, 7296),
    hide_name=False,
    size=(144, 80)
)


# Component: Storage.Loadshape Point Selector.Loadshape Value
_Storage_Loadshape_Point_Selector_Loadshape_Value = mdl.create_component(
    type_name="core/Probe",
    parent=_Storage_Loadshape_Point_Selector,
    name="Loadshape Value",
    rotation="up",
    flip="flip_none",
    position=(8528, 8096),
    hide_name=False,
    size=(None, None)
)


# Component: Storage.Loadshape Point Selector.loadshape
_Storage_Loadshape_Point_Selector_loadshape = mdl.create_component(
    type_name="core/Constant",
    parent=_Storage_Loadshape_Point_Selector,
    name="loadshape",
    rotation="up",
    flip="flip_none",
    position=(8200, 8144),
    hide_name=False,
    size=(None, None)
)
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_loadshape, "execution_rate"), "execution_rate")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_loadshape, "value"), "loadshape")


# Component: Storage.Loadshape Point Selector.Selector
_Storage_Loadshape_Point_Selector_Selector = mdl.create_component(
    type_name="core/C function",
    parent=_Storage_Loadshape_Point_Selector,
    name="Selector",
    rotation="up",
    flip="flip_none",
    position=(8336, 8208),
    hide_name=False,
    size=(168, 168)
)
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "global_variables"), "real out_value;")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "input_terminals"), "real loadshape;int point;")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "input_terminals_dimensions"), "inherit;inherit")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "input_terminals_feedthrough"), "True;True")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "input_terminals_show_labels"), "True;True")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "output_fnc"), "/*Begin code section*/
if (point > loadshape_n_points - 1) {
    point = loadshape_n_points - 1;
}

out_value = loadshape[point];

if (out_value > 1) {
    out_value = 1;
}
else if (out_value < -1) {
    out_value = -1;
}

out = out_value;
/*End code section*/")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "output_terminals_dimensions"), "1")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "output_terminals_feedthrough"), "False")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "output_terminals_show_labels"), "True")
mdl.set_property_value(mdl.prop(_Storage_Loadshape_Point_Selector_Selector, "parameters"), "real loadshape_n_points;")


# Port: Storage.Loadshape Point Selector.loadshape_point
_Storage_Loadshape_Point_Selector_loadshape_point = mdl.create_port(
    name="loadshape_point",
    parent=_Storage_Loadshape_Point_Selector,
    label="",
    kind="sp",
    direction="out",
    dimension=(1,),
    terminal_position=('right', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8528, 8208)
)

# Port: Storage.Loadshape Point Selector.point
_Storage_Loadshape_Point_Selector_point = mdl.create_port(
    name="point",
    parent=_Storage_Loadshape_Point_Selector,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=('left', 1),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(8200, 8272)
)

# Junction: Storage.Loadshape Point Selector.Junction1
_Storage_Loadshape_Point_Selector_Junction1 = mdl.create_junction(
    name="Junction1",
    parent=_Storage_Loadshape_Point_Selector,
    kind="sp",
    position=(8464, 8208)
)

# Port: Storage.A1
_Storage_A1 = mdl.create_port(
    name="A1",
    parent=_Storage,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, -32.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7160, 8216)
)

# Port: Storage.B1
_Storage_B1 = mdl.create_port(
    name="B1",
    parent=_Storage,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, 0.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7160, 8312)
)

# Port: Storage.C1
_Storage_C1 = mdl.create_port(
    name="C1",
    parent=_Storage,
    label="",
    kind="pe",
    dimension=(1,),
    terminal_position=(-32.0, 32.0),
    rotation="up",
    flip="flip_none",
    hide_name=False,
    position=(7160, 8408)
)

# Port: Storage.Load point
_Storage_Load_point = mdl.create_port(
    name="Load point",
    parent=_Storage,
    label="",
    kind="sp",
    direction="in",
    dimension=(1,),
    terminal_position=(-8.0, -44.0),
    rotation="up",
    flip="flip_none",
    hide_name=True,
    position=(7816, 7296)
)

# Tag: Storage.Goto5
_Storage_Goto5 = mdl.create_tag(
    value="kwref",
    name="Goto5",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8632, 7600)
)

# Tag: Storage.From4
_Storage_From4 = mdl.create_tag(
    value="dispatch_int",
    name="From4",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7584, 7888)
)

# Tag: Storage.Goto8
_Storage_Goto8 = mdl.create_tag(
    value="active_inverter",
    name="Goto8",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8632, 7280)
)

# Tag: Storage.From7
_Storage_From7 = mdl.create_tag(
    value="active_inverter",
    name="From7",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7568, 7664)
)

# Tag: Storage.From12
_Storage_From12 = mdl.create_tag(
    value="active_battery",
    name="From12",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7568, 7728)
)

# Tag: Storage.Goto9
_Storage_Goto9 = mdl.create_tag(
    value="active_status",
    name="Goto9",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7864, 7696)
)

# Tag: Storage.From19
_Storage_From19 = mdl.create_tag(
    value="active_battery",
    name="From19",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8104, 8144)
)

# Tag: Storage.Goto10
_Storage_Goto10 = mdl.create_tag(
    value="dispatch_int",
    name="Goto10",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="in",
    rotation="right",
    flip="flip_none",
    position=(8064, 7552)
)

# Tag: Storage.From21
_Storage_From21 = mdl.create_tag(
    value="active_status",
    name="From21",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7584, 8016)
)

# Tag: Storage.From22
_Storage_From22 = mdl.create_tag(
    value="kwref",
    name="From22",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7584, 7968)
)

# Tag: Storage.From23
_Storage_From23 = mdl.create_tag(
    value="active_battery",
    name="From23",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(8704, 8120)
)

# Tag: Storage.Goto11
_Storage_Goto11 = mdl.create_tag(
    value="bat_energy",
    name="Goto11",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(8896, 8240)
)

# Tag: Storage.From24
_Storage_From24 = mdl.create_tag(
    value="bat_energy",
    name="From24",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7352, 7288)
)

# Tag: Storage.Goto4
_Storage_Goto4 = mdl.create_tag(
    value="active_battery",
    name="Goto4",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="in",
    rotation="up",
    flip="flip_none",
    position=(7728, 7400)
)

# Tag: Storage.From3
_Storage_From3 = mdl.create_tag(
    value="kwref",
    name="From3",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7352, 7456)
)

# Tag: Storage.From20
_Storage_From20 = mdl.create_tag(
    value="active_inverter",
    name="From20",
    parent=_Storage,
    scope="local",
    kind="sp",
    direction="out",
    rotation="up",
    flip="flip_none",
    position=(7352, 7512)
)

# Junction: Storage.Junction581
_Storage_Junction581 = mdl.create_junction(
    name="Junction581",
    parent=_Storage,
    kind="sp",
    position=(7784, 7696)
)

# Junction: Storage.Junction603
_Storage_Junction603 = mdl.create_junction(
    name="Junction603",
    parent=_Storage,
    kind="pe",
    position=(8272, 8408)
)

# Junction: Storage.Junction616
_Storage_Junction616 = mdl.create_junction(
    name="Junction616",
    parent=_Storage,
    kind="sp",
    position=(7472, 7936)
)

# Junction: Storage.Junction617
_Storage_Junction617 = mdl.create_junction(
    name="Junction617",
    parent=_Storage,
    kind="sp",
    position=(8568, 7600)
)

# Junction: Storage.Junction619
_Storage_Junction619 = mdl.create_junction(
    name="Junction619",
    parent=_Storage,
    kind="sp",
    position=(8568, 7280)
)

# Junction: Storage.Junction622
_Storage_Junction622 = mdl.create_junction(
    name="Junction622",
    parent=_Storage,
    kind="sp",
    position=(8064, 7488)
)

# Junction: Storage.Junction626
_Storage_Junction626 = mdl.create_junction(
    name="Junction626",
    parent=_Storage,
    kind="pe",
    position=(8112, 8408)
)

# Junction: Storage.Junction631
_Storage_Junction631 = mdl.create_junction(
    name="Junction631",
    parent=_Storage,
    kind="pe",
    position=(8488, 8216)
)

# Junction: Storage.Junction632
_Storage_Junction632 = mdl.create_junction(
    name="Junction632",
    parent=_Storage,
    kind="pe",
    position=(8488, 8408)
)

# Junction: Storage.Junction633
_Storage_Junction633 = mdl.create_junction(
    name="Junction633",
    parent=_Storage,
    kind="pe",
    position=(8112, 8216)
)

# Junction: Storage.Junction634
_Storage_Junction634 = mdl.create_junction(
    name="Junction634",
    parent=_Storage,
    kind="pe",
    position=(8272, 8216)
)

# Connections
_Capacitor_Bank_Connection26 = mdl.create_connection(
    start=mdl.term(_Capacitor_Bank_Ca, "p_node"),
    end=_Capacitor_Bank_A1,
    name="Connection26",
    breakpoints=[],
)
_Capacitor_Bank_Connection27 = mdl.create_connection(
    start=_Capacitor_Bank_j,
    end=mdl.term(_Capacitor_Bank_Ca, "n_node"),
    name="Connection27",
    breakpoints=[],
)
_Capacitor_Bank_Connection28 = mdl.create_connection(
    start=_Capacitor_Bank_j,
    end=mdl.term(_Capacitor_Bank_Cb, "n_node"),
    name="Connection28",
    breakpoints=[],
)
_Capacitor_Bank_Connection29 = mdl.create_connection(
    start=_Capacitor_Bank_j,
    end=mdl.term(_Capacitor_Bank_Cc, "n_node"),
    name="Connection29",
    breakpoints=[],
)
_Capacitor_Bank_b1_conn = mdl.create_connection(
    start=_Capacitor_Bank_B1,
    end=mdl.term(_Capacitor_Bank_Cb, "p_node"),
    name="b1_conn",
    breakpoints=[],
)
_Capacitor_Bank_c1_conn = mdl.create_connection(
    start=_Capacitor_Bank_C1,
    end=mdl.term(_Capacitor_Bank_Cc, "p_node"),
    name="c1_conn",
    breakpoints=[],
)
_Controlled_Switch_Connection1 = mdl.create_connection(
    start=_Controlled_Switch_A1,
    end=mdl.term(_Controlled_Switch_S, "a_in"),
    name="Connection1",
    breakpoints=[],
)
_Controlled_Switch_Connection2 = mdl.create_connection(
    start=_Controlled_Switch_B1,
    end=mdl.term(_Controlled_Switch_S, "b_in"),
    name="Connection2",
    breakpoints=[],
)
_Controlled_Switch_Connection3 = mdl.create_connection(
    start=_Controlled_Switch_C1,
    end=mdl.term(_Controlled_Switch_S, "c_in"),
    name="Connection3",
    breakpoints=[],
)
_Controlled_Switch_Connection4 = mdl.create_connection(
    start=_Controlled_Switch_A2,
    end=mdl.term(_Controlled_Switch_S, "a_out"),
    name="Connection4",
    breakpoints=[],
)
_Controlled_Switch_Connection5 = mdl.create_connection(
    start=_Controlled_Switch_B2,
    end=mdl.term(_Controlled_Switch_S, "b_out"),
    name="Connection5",
    breakpoints=[],
)
_Controlled_Switch_Connection6 = mdl.create_connection(
    start=_Controlled_Switch_C2,
    end=mdl.term(_Controlled_Switch_S, "c_out"),
    name="Connection6",
    breakpoints=[],
)
_Controlled_Switch_Connection7 = mdl.create_connection(
    start=_Controlled_Switch_ctrl,
    end=mdl.term(_Controlled_Switch_S, "ctrl_in"),
    name="Connection7",
    breakpoints=[],
)
_Fault_Connection1 = mdl.create_connection(
    start=_Fault_A1,
    end=mdl.term(_Fault_F1, "A1"),
    name="Connection1",
    breakpoints=[],
)
_Fault_Connection2 = mdl.create_connection(
    start=_Fault_B1,
    end=mdl.term(_Fault_F1, "B1"),
    name="Connection2",
    breakpoints=[],
)
_Fault_Connection3 = mdl.create_connection(
    start=_Fault_C1,
    end=mdl.term(_Fault_F1, "C1"),
    name="Connection3",
    breakpoints=[],
)
_Fault_Connection4 = mdl.create_connection(
    start=_Fault_A2,
    end=mdl.term(_Fault_F1, "A2"),
    name="Connection4",
    breakpoints=[],
)
_Fault_Connection5 = mdl.create_connection(
    start=_Fault_B2,
    end=mdl.term(_Fault_F1, "B2"),
    name="Connection5",
    breakpoints=[],
)
_Fault_Connection6 = mdl.create_connection(
    start=_Fault_C2,
    end=mdl.term(_Fault_F1, "C2"),
    name="Connection6",
    breakpoints=[],
)
_Generator_TS_module_Connection12 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_1D_look_up_table2, "value"),
    end=_Generator_TS_module_Q,
    name="Connection12",
    breakpoints=[],
)
_Generator_TS_module_Connection21 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Constant6, "out"),
    end=mdl.term(_Generator_TS_module_Signal_switch2, "in2"),
    name="Connection21",
    breakpoints=[],
)
_Generator_TS_module_Connection26 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Signal_switch1, "out"),
    end=mdl.term(_Generator_TS_module_Signal_switch2, "in"),
    name="Connection26",
    breakpoints=[],
)
_Generator_TS_module_Connection31 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Constant5, "out"),
    end=_Generator_TS_module_Junction3,
    name="Connection31",
    breakpoints=[],
)
_Generator_TS_module_Connection32 = mdl.create_connection(
    start=_Generator_TS_module_Junction3,
    end=mdl.term(_Generator_TS_module_Signal_switch1, "in1"),
    name="Connection32",
    breakpoints=[],
)
_Generator_TS_module_Connection33 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Signal_switch2, "in1"),
    end=_Generator_TS_module_Junction3,
    name="Connection33",
    breakpoints=[],
)
_Generator_TS_module_Connection38 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Constant7, "out"),
    end=mdl.term(_Generator_TS_module_Signal_switch3, "in2"),
    name="Connection38",
    breakpoints=[],
)
_Generator_TS_module_Connection40 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Integrator1, "out"),
    end=mdl.term(_Generator_TS_module_Signal_switch3, "in"),
    name="Connection40",
    breakpoints=[],
)
_Generator_TS_module_Connection41 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_1D_look_up_table2, "addr"),
    end=_Generator_TS_module_Junction4,
    name="Connection41",
    breakpoints=[],
)
_Generator_TS_module_Connection43 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Signal_switch3, "out"),
    end=_Generator_TS_module_Junction4,
    name="Connection43",
    breakpoints=[],
)
_Generator_TS_module_Connection44 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Gain1, "out"),
    end=mdl.term(_Generator_TS_module_Signal_switch3, "in1"),
    name="Connection44",
    breakpoints=[],
)
_Generator_TS_module_Connection45 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Integrator1, "in"),
    end=mdl.term(_Generator_TS_module_Signal_switch2, "out"),
    name="Connection45",
    breakpoints=[],
)
_Generator_TS_module_Connection49 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_1D_look_up_table1, "addr"),
    end=_Generator_TS_module_Junction4,
    name="Connection49",
    breakpoints=[],
)
_Generator_TS_module_Connection1 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Clock1, "out"),
    end=mdl.term(_Generator_TS_module_Comparator1, "in1"),
    name="Connection1",
    breakpoints=[],
)
_Generator_TS_module_Connection2 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Constant1, "out"),
    end=mdl.term(_Generator_TS_module_Comparator1, "in2"),
    name="Connection2",
    breakpoints=[],
)
_Generator_TS_module_Connection530 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_d_rel, "in"),
    end=mdl.term(_Generator_TS_module_Comparator1, "out"),
    name="Connection530",
    breakpoints=[],
)
_Generator_TS_module_Connection3 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Signal_switch1, "in2"),
    end=mdl.term(_Generator_TS_module_Comparator1, "out"),
    name="Connection3",
    breakpoints=[],
)
_Generator_TS_module_Connection5 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Constant3, "out"),
    end=mdl.term(_Generator_TS_module_Signal_switch1, "in"),
    name="Connection5",
    breakpoints=[],
)
_Generator_TS_module_Connection7 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Constant4, "out"),
    end=mdl.term(_Generator_TS_module_Comparator2, "in2"),
    name="Connection7",
    breakpoints=[],
)
_Generator_TS_module_Connection8 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Comparator2, "out"),
    end=mdl.term(_Generator_TS_module_Integrator1, "reset"),
    name="Connection8",
    breakpoints=[],
)
_Generator_TS_module_Connection9 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Comparator2, "in1"),
    end=mdl.term(_Generator_TS_module_Integrator1, "state_port"),
    name="Connection9",
    breakpoints=[(7208, 8232), (7392, 8232)],
)
_Generator_TS_module_Connection10 = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_1D_look_up_table1, "value"),
    end=_Generator_TS_module_P,
    name="Connection10",
    breakpoints=[],
)
_Generator_TS_module_connT = mdl.create_connection(
    start=mdl.term(_Generator_TS_module_Gain1, "in"),
    end=_Generator_TS_module_T,
    name="connT",
    breakpoints=[],
)
_Generator_T_switch_Connection14 = mdl.create_connection(
    start=mdl.term(_Generator_T_switch_Limit1, "out"),
    end=_Generator_T_switch_Junction3,
    name="Connection14",
    breakpoints=[],
)
_Generator_T_switch_Connection15 = mdl.create_connection(
    start=_Generator_T_switch_Junction3,
    end=_Generator_T_switch_T_out,
    name="Connection15",
    breakpoints=[],
)
_Generator_T_switch_Connection1 = mdl.create_connection(
    start=_Generator_T_switch_mode,
    end=mdl.term(_Generator_T_switch_Signal_switch1, "in2"),
    name="Connection1",
    breakpoints=[],
)
_Generator_T_switch_Connection5 = mdl.create_connection(
    start=_Generator_T_switch_T,
    end=_Generator_T_switch_Junction1,
    name="Connection5",
    breakpoints=[],
)
_Generator_T_switch_Connection6 = mdl.create_connection(
    start=_Generator_T_switch_Junction1,
    end=mdl.term(_Generator_T_switch_Signal_switch1, "in"),
    name="Connection6",
    breakpoints=[],
)
_Generator_T_switch_Connection7 = mdl.create_connection(
    start=mdl.term(_Generator_T_switch_Round1, "in"),
    end=_Generator_T_switch_Junction1,
    name="Connection7",
    breakpoints=[],
)
_Generator_T_switch_Connection8 = mdl.create_connection(
    start=mdl.term(_Generator_T_switch_Round1, "out"),
    end=mdl.term(_Generator_T_switch_Signal_switch1, "in1"),
    name="Connection8",
    breakpoints=[],
)
_Generator_T_switch_Connection11 = mdl.create_connection(
    start=mdl.term(_Generator_T_switch_Signal_switch1, "out"),
    end=_Generator_T_switch_Junction2,
    name="Connection11",
    breakpoints=[],
)
_Generator_T_switch_Connection12 = mdl.create_connection(
    start=_Generator_T_switch_Junction2,
    end=mdl.term(_Generator_T_switch_Limit1, "in"),
    name="Connection12",
    breakpoints=[],
)
_Generator_Connection110 = mdl.create_connection(
    start=_Generator_From32,
    end=mdl.term(_Generator_eb, "in"),
    name="Connection110",
    breakpoints=[],
)
_Generator_Connection109 = mdl.create_connection(
    start=_Generator_From31,
    end=mdl.term(_Generator_ea, "in"),
    name="Connection109",
    breakpoints=[],
)
_Generator_Connection102 = mdl.create_connection(
    start=mdl.term(_Generator_ec, "p_node"),
    end=mdl.term(_Generator_R3, "n_node"),
    name="Connection102",
    breakpoints=[],
)
_Generator_Connection414 = mdl.create_connection(
    start=mdl.term(_Generator_L3, "n_node"),
    end=mdl.term(_Generator_R3, "p_node"),
    name="Connection414",
    breakpoints=[],
)
_Generator_Connection103 = mdl.create_connection(
    start=mdl.term(_Generator_eb, "p_node"),
    end=mdl.term(_Generator_R2, "n_node"),
    name="Connection103",
    breakpoints=[],
)
_Generator_Connection104 = mdl.create_connection(
    start=mdl.term(_Generator_ea, "p_node"),
    end=mdl.term(_Generator_R1, "n_node"),
    name="Connection104",
    breakpoints=[],
)
_Generator_Connection426 = mdl.create_connection(
    start=mdl.term(_Generator_L2, "n_node"),
    end=mdl.term(_Generator_R2, "p_node"),
    name="Connection426",
    breakpoints=[],
)
_Generator_Connection111 = mdl.create_connection(
    start=_Generator_From33,
    end=mdl.term(_Generator_ec, "in"),
    name="Connection111",
    breakpoints=[],
)
_Generator_Connection434 = mdl.create_connection(
    start=mdl.term(_Generator_L1, "n_node"),
    end=mdl.term(_Generator_R1, "p_node"),
    name="Connection434",
    breakpoints=[],
)
_Generator_Connection4607 = mdl.create_connection(
    start=mdl.term(_Generator_Vb, "n_node"),
    end=_Generator_Junction160,
    name="Connection4607",
    breakpoints=[],
)
_Generator_Connection4609 = mdl.create_connection(
    start=mdl.term(_Generator_Va, "n_node"),
    end=_Generator_Junction160,
    name="Connection4609",
    breakpoints=[],
)
_Generator_Connection4610 = mdl.create_connection(
    start=_Generator_A1,
    end=mdl.term(_Generator_Ia, "p_node"),
    name="Connection4610",
    breakpoints=[],
)
_Generator_Connection4611 = mdl.create_connection(
    start=_Generator_B1,
    end=mdl.term(_Generator_Ib, "p_node"),
    name="Connection4611",
    breakpoints=[],
)
_Generator_Connection4612 = mdl.create_connection(
    start=_Generator_C1,
    end=mdl.term(_Generator_Ic, "p_node"),
    name="Connection4612",
    breakpoints=[],
)
_Generator_Connection97 = mdl.create_connection(
    start=mdl.term(_Generator_Constant3, "out"),
    end=mdl.term(_Generator_dq_to_abc1, "zero_input"),
    name="Connection97",
    breakpoints=[],
)
_Generator_Connection96 = mdl.create_connection(
    start=_Generator_From27,
    end=mdl.term(_Generator_dq_to_abc1, "q_input"),
    name="Connection96",
    breakpoints=[],
)
_Generator_Connection95 = mdl.create_connection(
    start=_Generator_From28,
    end=mdl.term(_Generator_dq_to_abc1, "d_input"),
    name="Connection95",
    breakpoints=[],
)
_Generator_Connection90 = mdl.create_connection(
    start=_Generator_From18,
    end=mdl.term(_Generator_abc_to_dq1, "vb"),
    name="Connection90",
    breakpoints=[],
)
_Generator_Connection89 = mdl.create_connection(
    start=_Generator_From46,
    end=mdl.term(_Generator_abc_to_dq1, "va"),
    name="Connection89",
    breakpoints=[],
)
_Generator_Connection91 = mdl.create_connection(
    start=_Generator_From19,
    end=mdl.term(_Generator_abc_to_dq1, "vc"),
    name="Connection91",
    breakpoints=[],
)
_Generator_Connection4629 = mdl.create_connection(
    start=_Generator_From48,
    end=mdl.term(_Generator_C_function2, "isq"),
    name="Connection4629",
    breakpoints=[],
)
_Generator_Connection4630 = mdl.create_connection(
    start=_Generator_From47,
    end=mdl.term(_Generator_C_function2, "isd"),
    name="Connection4630",
    breakpoints=[],
)
_Generator_Connection4632 = mdl.create_connection(
    start=mdl.term(_Generator_Constant4, "out"),
    end=mdl.term(_Generator_C_function2, "dt"),
    name="Connection4632",
    breakpoints=[],
)
_Generator_Connection4633 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay2, "out"),
    end=mdl.term(_Generator_C_function2, "Tm_mem"),
    name="Connection4633",
    breakpoints=[],
)
_Generator_Connection4638 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "thet_r"),
    end=_Generator_Goto69,
    name="Connection4638",
    breakpoints=[],
)
_Generator_Connection4641 = mdl.create_connection(
    start=_Generator_From51,
    end=_Generator_Junction162,
    name="Connection4641",
    breakpoints=[],
)
_Generator_Connection4642 = mdl.create_connection(
    start=_Generator_Junction162,
    end=mdl.term(_Generator_Gain1, "in"),
    name="Connection4642",
    breakpoints=[],
)
_Generator_Connection4643 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay3, "in"),
    end=_Generator_Junction162,
    name="Connection4643",
    breakpoints=[],
)
_Generator_Connection4645 = mdl.create_connection(
    start=mdl.term(_Generator_Gain1, "out"),
    end=mdl.term(_Generator_Sum1, "in"),
    name="Connection4645",
    breakpoints=[],
)
_Generator_Connection4646 = mdl.create_connection(
    start=mdl.term(_Generator_Sum1, "out"),
    end=mdl.term(_Generator_Product1, "in"),
    name="Connection4646",
    breakpoints=[],
)
_Generator_Connection4647 = mdl.create_connection(
    start=mdl.term(_Generator_Constant6, "out"),
    end=mdl.term(_Generator_Product1, "in1"),
    name="Connection4647",
    breakpoints=[],
)
_Generator_Connection4649 = mdl.create_connection(
    start=mdl.term(_Generator_Gain2, "out"),
    end=mdl.term(_Generator_Sum1, "in1"),
    name="Connection4649",
    breakpoints=[],
)
_Generator_Connection4650 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay3, "out"),
    end=_Generator_Junction163,
    name="Connection4650",
    breakpoints=[],
)
_Generator_Connection4651 = mdl.create_connection(
    start=_Generator_Junction163,
    end=mdl.term(_Generator_Gain2, "in"),
    name="Connection4651",
    breakpoints=[],
)
_Generator_Connection4652 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay4, "in"),
    end=_Generator_Junction163,
    name="Connection4652",
    breakpoints=[],
)
_Generator_Connection4653 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay4, "out"),
    end=mdl.term(_Generator_Sum1, "in2"),
    name="Connection4653",
    breakpoints=[],
)
_Generator_Connection4654 = mdl.create_connection(
    start=_Generator_From52,
    end=mdl.term(_Generator_C_function2, "pisq"),
    name="Connection4654",
    breakpoints=[],
)
_Generator_Connection4655 = mdl.create_connection(
    start=_Generator_From30,
    end=mdl.term(_Generator_dq_to_abc1, "wt"),
    name="Connection4655",
    breakpoints=[],
)
_Generator_Connection4656 = mdl.create_connection(
    start=_Generator_From26,
    end=mdl.term(_Generator_abc_to_dq1, "wt"),
    name="Connection4656",
    breakpoints=[],
)
_Generator_Connection4668 = mdl.create_connection(
    start=_Generator_Goto18,
    end=mdl.term(_Generator_Unit_Delay8, "out"),
    name="Connection4668",
    breakpoints=[],
)
_Generator_Connection4669 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay8, "in"),
    end=mdl.term(_Generator_abc_to_dq1, "d_axis"),
    name="Connection4669",
    breakpoints=[],
)
_Generator_Connection4670 = mdl.create_connection(
    start=_Generator_Goto19,
    end=mdl.term(_Generator_Unit_Delay9, "out"),
    name="Connection4670",
    breakpoints=[],
)
_Generator_Connection4671 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay9, "in"),
    end=mdl.term(_Generator_abc_to_dq1, "q_axis"),
    name="Connection4671",
    breakpoints=[],
)
_Generator_Connection4672 = mdl.create_connection(
    start=mdl.term(_Generator_dq_to_abc1, "phase_a"),
    end=_Generator_Goto20,
    name="Connection4672",
    breakpoints=[],
)
_Generator_Connection4673 = mdl.create_connection(
    start=mdl.term(_Generator_dq_to_abc1, "phase_b"),
    end=_Generator_Goto21,
    name="Connection4673",
    breakpoints=[],
)
_Generator_Connection4674 = mdl.create_connection(
    start=mdl.term(_Generator_dq_to_abc1, "phase_c"),
    end=_Generator_Goto22,
    name="Connection4674",
    breakpoints=[],
)
_Generator_Connection4685 = mdl.create_connection(
    start=mdl.term(_Generator_Constant13, "out"),
    end=mdl.term(_Generator_C_function2, "Wm_inp"),
    name="Connection4685",
    breakpoints=[],
)
_Generator_Connection4692 = mdl.create_connection(
    start=mdl.term(_Generator_Gain3, "out"),
    end=mdl.term(_Generator_Sum2, "in"),
    name="Connection4692",
    breakpoints=[],
)
_Generator_Connection4693 = mdl.create_connection(
    start=mdl.term(_Generator_Gain4, "out"),
    end=mdl.term(_Generator_Sum2, "in1"),
    name="Connection4693",
    breakpoints=[],
)
_Generator_Connection4723 = mdl.create_connection(
    start=mdl.term(_Generator_Constant14, "out"),
    end=_Generator_Goto73,
    name="Connection4723",
    breakpoints=[],
)
_Generator_Connection4724 = mdl.create_connection(
    start=_Generator_From55,
    end=mdl.term(_Generator_C_function2, "eq_init"),
    name="Connection4724",
    breakpoints=[],
)
_Generator_Connection4725 = mdl.create_connection(
    start=_Generator_From56,
    end=mdl.term(_Generator_C_function2, "ed_init"),
    name="Connection4725",
    breakpoints=[],
)
_Generator_Connection4726 = mdl.create_connection(
    start=_Generator_From57,
    end=mdl.term(_Generator_Gain3, "in"),
    name="Connection4726",
    breakpoints=[],
)
_Generator_Connection4734 = mdl.create_connection(
    start=mdl.term(_Generator_Gain6, "out"),
    end=mdl.term(_Generator_Limit1, "in"),
    name="Connection4734",
    breakpoints=[],
)
_Generator_Connection4737 = mdl.create_connection(
    start=_Generator_From58,
    end=mdl.term(_Generator_Signal_switch1, "in2"),
    name="Connection4737",
    breakpoints=[],
)
_Generator_Connection4739 = mdl.create_connection(
    start=_Generator_From60,
    end=mdl.term(_Generator_Sum3, "in1"),
    name="Connection4739",
    breakpoints=[],
)
_Generator_Connection4745 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay10, "in"),
    end=_Generator_Junction169,
    name="Connection4745",
    breakpoints=[],
)
_Generator_Connection4747 = mdl.create_connection(
    start=mdl.term(_Generator_vfd_p, "in"),
    end=_Generator_Junction169,
    name="Connection4747",
    breakpoints=[],
)
_Generator_Connection4751 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch1, "in1"),
    end=mdl.term(_Generator_Limit1, "out"),
    name="Connection4751",
    breakpoints=[],
)
_Generator_Connection4752 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay10, "out"),
    end=mdl.term(_Generator_Signal_switch1, "in"),
    name="Connection4752",
    breakpoints=[],
)
_Generator_Connection4775 = mdl.create_connection(
    start=mdl.term(_Generator_Discrete_Transfer_Function1, "out"),
    end=_Generator_Goto70,
    name="Connection4775",
    breakpoints=[],
)
_Generator_Connection4786 = mdl.create_connection(
    start=_Generator_From66,
    end=mdl.term(_Generator_Signal_switch2, "in2"),
    name="Connection4786",
    breakpoints=[],
)
_Generator_Connection4791 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay11, "out"),
    end=mdl.term(_Generator_Signal_switch2, "in"),
    name="Connection4791",
    breakpoints=[],
)
_Generator_Connection4801 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch2, "out"),
    end=_Generator_Junction175,
    name="Connection4801",
    breakpoints=[],
)
_Generator_Connection4802 = mdl.create_connection(
    start=_Generator_Junction175,
    end=mdl.term(_Generator_Unit_Delay11, "in"),
    name="Connection4802",
    breakpoints=[],
)
_Generator_Connection4807 = mdl.create_connection(
    start=_Generator_From65,
    end=_Generator_Junction176,
    name="Connection4807",
    breakpoints=[],
)
_Generator_Connection4808 = mdl.create_connection(
    start=_Generator_Junction176,
    end=mdl.term(_Generator_Signal_switch2, "in1"),
    name="Connection4808",
    breakpoints=[],
)
_Generator_Connection4814 = mdl.create_connection(
    start=_Generator_From67,
    end=mdl.term(_Generator_C_function2, "angle_in"),
    name="Connection4814",
    breakpoints=[],
)
_Generator_Connection4816 = mdl.create_connection(
    start=mdl.term(_Generator_Unit_Delay13, "in"),
    end=_Generator_Junction175,
    name="Connection4816",
    breakpoints=[],
)
_Generator_Connection4817 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "Te"),
    end=_Generator_Goto78,
    name="Connection4817",
    breakpoints=[],
)
_Generator_Connection4824 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "M_inp"),
    end=mdl.term(_Generator_Constant5, "out"),
    name="Connection4824",
    breakpoints=[],
)
_Generator_Connection4825 = mdl.create_connection(
    start=_Generator_From64,
    end=mdl.term(_Generator_Sum4, "in1"),
    name="Connection4825",
    breakpoints=[],
)
_Generator_Connection4833 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "psimq"),
    end=mdl.term(_Generator_psimq, "in"),
    name="Connection4833",
    breakpoints=[],
)
_Generator_Connection4834 = mdl.create_connection(
    start=mdl.term(_Generator_psimd, "in"),
    end=mdl.term(_Generator_C_function2, "psimd"),
    name="Connection4834",
    breakpoints=[],
)
_Generator_Connection4835 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "psifd"),
    end=mdl.term(_Generator_psifd, "in"),
    name="Connection4835",
    breakpoints=[],
)
_Generator_Connection4840 = mdl.create_connection(
    start=mdl.term(_Generator_Product1, "out"),
    end=mdl.term(_Generator_Discrete_Transfer_Function1, "in"),
    name="Connection4840",
    breakpoints=[],
)
_Generator_Connection4841 = mdl.create_connection(
    start=_Generator_From53,
    end=mdl.term(_Generator_Gain4, "in"),
    name="Connection4841",
    breakpoints=[],
)
_Generator_Connection4842 = mdl.create_connection(
    start=_Generator_Goto79,
    end=_Generator_Junction178,
    name="Connection4842",
    breakpoints=[],
)
_Generator_Connection4843 = mdl.create_connection(
    start=_Generator_Junction178,
    end=mdl.term(_Generator_Unit_Delay13, "out"),
    name="Connection4843",
    breakpoints=[],
)
_Generator_Connection4844 = mdl.create_connection(
    start=mdl.term(_Generator_Tm_p, "in"),
    end=_Generator_Junction178,
    name="Connection4844",
    breakpoints=[],
)
_Generator_Connection4847 = mdl.create_connection(
    start=mdl.term(_Generator_Sum3, "out"),
    end=mdl.term(_Generator_Signal_switch3, "in"),
    name="Connection4847",
    breakpoints=[],
)
_Generator_Connection4850 = mdl.create_connection(
    start=_Generator_From49,
    end=_Generator_Junction179,
    name="Connection4850",
    breakpoints=[],
)
_Generator_Connection4851 = mdl.create_connection(
    start=_Generator_Junction179,
    end=mdl.term(_Generator_Sum3, "in"),
    name="Connection4851",
    breakpoints=[],
)
_Generator_Connection4852 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch3, "in1"),
    end=_Generator_Junction179,
    name="Connection4852",
    breakpoints=[],
)
_Generator_Connection4857 = mdl.create_connection(
    start=mdl.term(_Generator_Sum4, "out"),
    end=mdl.term(_Generator_Signal_switch4, "in"),
    name="Connection4857",
    breakpoints=[],
)
_Generator_Connection4858 = mdl.create_connection(
    start=mdl.term(_Generator_Sum4, "in"),
    end=_Generator_Junction181,
    name="Connection4858",
    breakpoints=[],
)
_Generator_Connection4859 = mdl.create_connection(
    start=_Generator_Junction181,
    end=_Generator_From50,
    name="Connection4859",
    breakpoints=[],
)
_Generator_Connection4860 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch4, "in1"),
    end=_Generator_Junction181,
    name="Connection4860",
    breakpoints=[],
)
_Generator_Connection4861 = mdl.create_connection(
    start=mdl.term(_Generator_Constant18, "out"),
    end=_Generator_Junction182,
    name="Connection4861",
    breakpoints=[],
)
_Generator_Connection4862 = mdl.create_connection(
    start=_Generator_Junction182,
    end=mdl.term(_Generator_Signal_switch3, "in2"),
    name="Connection4862",
    breakpoints=[],
)
_Generator_Connection4867 = mdl.create_connection(
    start=mdl.term(_Generator_Comparator2, "out"),
    end=_Generator_Goto77,
    name="Connection4867",
    breakpoints=[],
)
_Generator_Connection4868 = mdl.create_connection(
    start=mdl.term(_Generator_Constant19, "out"),
    end=_Generator_Goto80,
    name="Connection4868",
    breakpoints=[],
)
_Generator_Connection4869 = mdl.create_connection(
    start=mdl.term(_Generator_Constant20, "out"),
    end=mdl.term(_Generator_Gain7, "in"),
    name="Connection4869",
    breakpoints=[],
)
_Generator_Connection4870 = mdl.create_connection(
    start=mdl.term(_Generator_Gain7, "out"),
    end=_Generator_Goto74,
    name="Connection4870",
    breakpoints=[],
)
_Generator_Connection4875 = mdl.create_connection(
    start=mdl.term(_Generator_Constant21, "out"),
    end=mdl.term(_Generator_Comparator1, "in2"),
    name="Connection4875",
    breakpoints=[],
)
_Generator_Connection4876 = mdl.create_connection(
    start=mdl.term(_Generator_Constant23, "out"),
    end=mdl.term(_Generator_Comparator2, "in2"),
    name="Connection4876",
    breakpoints=[],
)
_Generator_Connection4884 = mdl.create_connection(
    start=mdl.term(_Generator_Comparator2, "in1"),
    end=_Generator_Junction183,
    name="Connection4884",
    breakpoints=[],
)
_Generator_Connection4885 = mdl.create_connection(
    start=_Generator_Junction183,
    end=mdl.term(_Generator_Comparator1, "in1"),
    name="Connection4885",
    breakpoints=[],
)
_Generator_Connection4886 = mdl.create_connection(
    start=mdl.term(_Generator_Clock1, "out"),
    end=_Generator_Junction183,
    name="Connection4886",
    breakpoints=[],
)
_Generator_Connection4894 = mdl.create_connection(
    start=_Generator_Junction169,
    end=_Generator_Junction184,
    name="Connection4894",
    breakpoints=[],
)
_Generator_Connection4895 = mdl.create_connection(
    start=_Generator_Junction184,
    end=mdl.term(_Generator_Signal_switch1, "out"),
    name="Connection4895",
    breakpoints=[],
)
_Generator_Connection4896 = mdl.create_connection(
    start=_Generator_Goto75,
    end=_Generator_Junction184,
    name="Connection4896",
    breakpoints=[],
)
_Generator_Connection4899 = mdl.create_connection(
    start=_Generator_Junction185,
    end=mdl.term(_Generator_C_function2, "Tm"),
    name="Connection4899",
    breakpoints=[],
)
_Generator_Connection4901 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch3, "out"),
    end=mdl.term(_Generator_C_function2, "vfd"),
    name="Connection4901",
    breakpoints=[],
)
_Generator_Connection4902 = mdl.create_connection(
    start=_Generator_Vfd_in,
    end=mdl.term(_Generator_Rate_Transition1, "in"),
    name="Connection4902",
    breakpoints=[],
)
_Generator_Connection4903 = mdl.create_connection(
    start=mdl.term(_Generator_Rate_Transition1, "out"),
    end=_Generator_Goto71,
    name="Connection4903",
    breakpoints=[],
)
_Generator_Connection4904 = mdl.create_connection(
    start=_Generator_Tm_in,
    end=mdl.term(_Generator_Rate_Transition2, "in"),
    name="Connection4904",
    breakpoints=[],
)
_Generator_Connection4905 = mdl.create_connection(
    start=mdl.term(_Generator_Rate_Transition2, "out"),
    end=_Generator_Goto72,
    name="Connection4905",
    breakpoints=[],
)
_Generator_Connection4906 = mdl.create_connection(
    start=mdl.term(_Generator_Gain5, "in"),
    end=mdl.term(_Generator_Sum2, "out"),
    name="Connection4906",
    breakpoints=[],
)
_Generator_Connection4910 = mdl.create_connection(
    start=_Generator_From59,
    end=mdl.term(_Generator_Signal_switch5, "in"),
    name="Connection4910",
    breakpoints=[],
)
_Generator_Connection4911 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch5, "out"),
    end=mdl.term(_Generator_C_function2, "V2S"),
    name="Connection4911",
    breakpoints=[],
)
_Generator_Connection4917 = mdl.create_connection(
    start=_Generator_From63,
    end=mdl.term(_Generator_Signal_switch6, "in"),
    name="Connection4917",
    breakpoints=[],
)
_Generator_Connection4927 = mdl.create_connection(
    start=mdl.term(_Generator_Constant25, "out"),
    end=_Generator_Junction189,
    name="Connection4927",
    breakpoints=[],
)
_Generator_Connection4928 = mdl.create_connection(
    start=_Generator_Junction189,
    end=mdl.term(_Generator_Signal_switch6, "in1"),
    name="Connection4928",
    breakpoints=[],
)
_Generator_Connection4929 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch5, "in1"),
    end=_Generator_Junction189,
    name="Connection4929",
    breakpoints=[],
)
_Generator_Connection4930 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch4, "in2"),
    end=_Generator_Junction182,
    name="Connection4930",
    breakpoints=[],
)
_Generator_Connection4931 = mdl.create_connection(
    start=mdl.term(_Generator_Gain6, "in"),
    end=mdl.term(_Generator_Gain5, "out"),
    name="Connection4931",
    breakpoints=[],
)
_Generator_Connection4982 = mdl.create_connection(
    start=mdl.term(_Generator_Ia, "out"),
    end=_Generator_Goto64,
    name="Connection4982",
    breakpoints=[],
)
_Generator_Connection4983 = mdl.create_connection(
    start=mdl.term(_Generator_Ib, "out"),
    end=_Generator_Goto65,
    name="Connection4983",
    breakpoints=[],
)
_Generator_Connection4984 = mdl.create_connection(
    start=_Generator_Goto66,
    end=mdl.term(_Generator_Ic, "out"),
    name="Connection4984",
    breakpoints=[],
)
_Generator_Connection4985 = mdl.create_connection(
    start=_Generator_Goto38,
    end=mdl.term(_Generator_Vc, "out"),
    name="Connection4985",
    breakpoints=[],
)
_Generator_Connection4986 = mdl.create_connection(
    start=_Generator_Goto37,
    end=mdl.term(_Generator_Vb, "out"),
    name="Connection4986",
    breakpoints=[],
)
_Generator_Connection4987 = mdl.create_connection(
    start=mdl.term(_Generator_Va, "out"),
    end=_Generator_Goto36,
    name="Connection4987",
    breakpoints=[],
)
_Generator_Connection4991 = mdl.create_connection(
    start=_Generator_Junction176,
    end=mdl.term(_Generator_Te, "in"),
    name="Connection4991",
    breakpoints=[],
)
_Generator_Connection4993 = mdl.create_connection(
    start=mdl.term(_Generator_Bus_Join3, "out"),
    end=_Generator_meas,
    name="Connection4993",
    breakpoints=[],
)
_Generator_Connection4994 = mdl.create_connection(
    start=_Generator_From73,
    end=mdl.term(_Generator_Bus_Join3, "in"),
    name="Connection4994",
    breakpoints=[],
)
_Generator_Connection4995 = mdl.create_connection(
    start=_Generator_From74,
    end=mdl.term(_Generator_Bus_Join3, "in1"),
    name="Connection4995",
    breakpoints=[],
)
_Generator_Connection4996 = mdl.create_connection(
    start=_Generator_From75,
    end=mdl.term(_Generator_Bus_Join3, "in2"),
    name="Connection4996",
    breakpoints=[],
)
_Generator_Connection4997 = mdl.create_connection(
    start=_Generator_From70,
    end=mdl.term(_Generator_Bus_Join3, "in3"),
    name="Connection4997",
    breakpoints=[],
)
_Generator_Connection4998 = mdl.create_connection(
    start=_Generator_From71,
    end=mdl.term(_Generator_Bus_Join3, "in4"),
    name="Connection4998",
    breakpoints=[],
)
_Generator_Connection4999 = mdl.create_connection(
    start=_Generator_From72,
    end=mdl.term(_Generator_Bus_Join3, "in5"),
    name="Connection4999",
    breakpoints=[],
)
_Generator_Connection5000 = mdl.create_connection(
    start=_Generator_From76,
    end=mdl.term(_Generator_Bus_Join3, "in6"),
    name="Connection5000",
    breakpoints=[],
)
_Generator_Connection5011 = mdl.create_connection(
    start=_Generator_From78,
    end=mdl.term(_Generator_Bus_Join4, "in"),
    name="Connection5011",
    breakpoints=[],
)
_Generator_Connection5012 = mdl.create_connection(
    start=_Generator_From77,
    end=mdl.term(_Generator_Bus_Join4, "in1"),
    name="Connection5012",
    breakpoints=[],
)
_Generator_Connection5013 = mdl.create_connection(
    start=mdl.term(_Generator_Constant26, "out"),
    end=mdl.term(_Generator_Bus_Join4, "in2"),
    name="Connection5013",
    breakpoints=[],
)
_Generator_Connection5014 = mdl.create_connection(
    start=mdl.term(_Generator_Bus_Join4, "out"),
    end=_Generator_ctrl,
    name="Connection5014",
    breakpoints=[],
)
_Generator_Connection5015 = mdl.create_connection(
    start=mdl.term(_Generator_Constant27, "out"),
    end=mdl.term(_Generator_Bus_Join4, "in3"),
    name="Connection5015",
    breakpoints=[],
)
_Generator_Connection5016 = mdl.create_connection(
    start=mdl.term(_Generator_Constant28, "out"),
    end=mdl.term(_Generator_Bus_Join4, "in4"),
    name="Connection5016",
    breakpoints=[],
)
_Generator_Connection5017 = mdl.create_connection(
    start=mdl.term(_Generator_Constant29, "out"),
    end=mdl.term(_Generator_Bus_Join4, "in5"),
    name="Connection5017",
    breakpoints=[],
)
_Generator_Connection5027 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "ed"),
    end=_Generator_Goto67,
    name="Connection5027",
    breakpoints=[],
)
_Generator_Connection5028 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "eq"),
    end=_Generator_Goto68,
    name="Connection5028",
    breakpoints=[],
)
_Generator_Connection5037 = mdl.create_connection(
    start=_Generator_Goto76,
    end=mdl.term(_Generator_Comparator1, "out"),
    name="Connection5037",
    breakpoints=[],
)
_Generator_Connection5038 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch6, "out"),
    end=mdl.term(_Generator_C_function2, "S2M"),
    name="Connection5038",
    breakpoints=[],
)
_Generator_Connection5042 = mdl.create_connection(
    start=mdl.term(_Generator_Constant30, "out"),
    end=mdl.term(_Generator_Bus_Join4, "in7"),
    name="Connection5042",
    breakpoints=[],
)
_Generator_Connection5043 = mdl.create_connection(
    start=mdl.term(_Generator_Constant31, "out"),
    end=mdl.term(_Generator_Bus_Join4, "in6"),
    name="Connection5043",
    breakpoints=[],
)
_Generator_Connection5046 = mdl.create_connection(
    start=mdl.term(_Generator_C_function2, "psikq2"),
    end=mdl.term(_Generator_Termination60, "in"),
    name="Connection5046",
    breakpoints=[],
)
_Generator_Connection5047 = mdl.create_connection(
    start=mdl.term(_Generator_Termination62, "in"),
    end=mdl.term(_Generator_C_function2, "wr"),
    name="Connection5047",
    breakpoints=[],
)
_Generator_Connection5048 = mdl.create_connection(
    start=mdl.term(_Generator_Termination61, "in"),
    end=mdl.term(_Generator_C_function2, "psikd"),
    name="Connection5048",
    breakpoints=[],
)
_Generator_Connection5049 = mdl.create_connection(
    start=mdl.term(_Generator_Termination63, "in"),
    end=mdl.term(_Generator_abc_to_dq1, "zero_axis"),
    name="Connection5049",
    breakpoints=[],
)
_Generator_Connection5050 = mdl.create_connection(
    start=mdl.term(_Generator_Termination64, "in"),
    end=mdl.term(_Generator_C_function2, "psikq"),
    name="Connection5050",
    breakpoints=[],
)
_Generator_Connection5056 = mdl.create_connection(
    start=mdl.term(_Generator_L1, "p_node"),
    end=_Generator_Junction201,
    name="Connection5056",
    breakpoints=[],
)
_Generator_Connection5058 = mdl.create_connection(
    start=mdl.term(_Generator_Va, "p_node"),
    end=_Generator_Junction201,
    name="Connection5058",
    breakpoints=[],
)
_Generator_Connection5060 = mdl.create_connection(
    start=_Generator_Junction202,
    end=mdl.term(_Generator_L2, "p_node"),
    name="Connection5060",
    breakpoints=[],
)
_Generator_Connection5061 = mdl.create_connection(
    start=mdl.term(_Generator_Vb, "p_node"),
    end=_Generator_Junction202,
    name="Connection5061",
    breakpoints=[],
)
_Generator_Connection5063 = mdl.create_connection(
    start=_Generator_Junction203,
    end=mdl.term(_Generator_L3, "p_node"),
    name="Connection5063",
    breakpoints=[],
)
_Generator_Connection5064 = mdl.create_connection(
    start=mdl.term(_Generator_Vc, "p_node"),
    end=_Generator_Junction203,
    name="Connection5064",
    breakpoints=[],
)
_Generator_Connection5065 = mdl.create_connection(
    start=_Generator_Junction160,
    end=_Generator_Junction204,
    name="Connection5065",
    breakpoints=[],
)
_Generator_Connection5066 = mdl.create_connection(
    start=_Generator_Junction204,
    end=mdl.term(_Generator_Vc, "n_node"),
    name="Connection5066",
    breakpoints=[],
)
_Generator_Connection5067 = mdl.create_connection(
    start=mdl.term(_Generator_ec, "n_node"),
    end=_Generator_Junction205,
    name="Connection5067",
    breakpoints=[],
)
_Generator_Connection5069 = mdl.create_connection(
    start=_Generator_Junction204,
    end=_Generator_Junction205,
    name="Connection5069",
    breakpoints=[],
)
_Generator_Connection5075 = mdl.create_connection(
    start=_Generator_Junction206,
    end=mdl.term(_Generator_Ia, "n_node"),
    name="Connection5075",
    breakpoints=[],
)
_Generator_Connection5076 = mdl.create_connection(
    start=mdl.term(_Generator_Vab, "p_node"),
    end=_Generator_Junction206,
    name="Connection5076",
    breakpoints=[],
)
_Generator_Connection5077 = mdl.create_connection(
    start=mdl.term(_Generator_Ib, "n_node"),
    end=_Generator_Junction207,
    name="Connection5077",
    breakpoints=[],
)
_Generator_Connection5078 = mdl.create_connection(
    start=_Generator_Junction207,
    end=_Generator_Junction202,
    name="Connection5078",
    breakpoints=[],
)
_Generator_Connection5081 = mdl.create_connection(
    start=_Generator_Junction208,
    end=_Generator_Junction203,
    name="Connection5081",
    breakpoints=[],
)
_Generator_Connection5082 = mdl.create_connection(
    start=mdl.term(_Generator_Vca, "p_node"),
    end=_Generator_Junction208,
    name="Connection5082",
    breakpoints=[],
)
_Generator_Connection5083 = mdl.create_connection(
    start=_Generator_Junction201,
    end=_Generator_Junction209,
    name="Connection5083",
    breakpoints=[],
)
_Generator_Connection5084 = mdl.create_connection(
    start=_Generator_Junction209,
    end=_Generator_Junction206,
    name="Connection5084",
    breakpoints=[],
)
_Generator_Connection5085 = mdl.create_connection(
    start=mdl.term(_Generator_Vca, "n_node"),
    end=_Generator_Junction209,
    name="Connection5085",
    breakpoints=[],
)
_Generator_Connection5086 = mdl.create_connection(
    start=mdl.term(_Generator_Vab, "n_node"),
    end=_Generator_Junction210,
    name="Connection5086",
    breakpoints=[],
)
_Generator_Connection5087 = mdl.create_connection(
    start=_Generator_Junction210,
    end=_Generator_Junction207,
    name="Connection5087",
    breakpoints=[],
)
_Generator_Connection5088 = mdl.create_connection(
    start=mdl.term(_Generator_Vbc, "p_node"),
    end=_Generator_Junction210,
    name="Connection5088",
    breakpoints=[],
)
_Generator_Connection5089 = mdl.create_connection(
    start=mdl.term(_Generator_Ic, "n_node"),
    end=_Generator_Junction211,
    name="Connection5089",
    breakpoints=[],
)
_Generator_Connection5090 = mdl.create_connection(
    start=_Generator_Junction211,
    end=_Generator_Junction208,
    name="Connection5090",
    breakpoints=[],
)
_Generator_Connection5091 = mdl.create_connection(
    start=mdl.term(_Generator_Vbc, "n_node"),
    end=_Generator_Junction211,
    name="Connection5091",
    breakpoints=[],
)
_Generator_Connection5093 = mdl.create_connection(
    start=mdl.term(_Generator_eb, "n_node"),
    end=_Generator_Junction212,
    name="Connection5093",
    breakpoints=[],
)
_Generator_Connection5094 = mdl.create_connection(
    start=_Generator_Junction212,
    end=_Generator_Junction205,
    name="Connection5094",
    breakpoints=[],
)
_Generator_Connection5095 = mdl.create_connection(
    start=mdl.term(_Generator_ea, "n_node"),
    end=_Generator_Junction212,
    name="Connection5095",
    breakpoints=[],
)
_Generator_Connection5097 = mdl.create_connection(
    start=_Generator_Goto81,
    end=mdl.term(_Generator_C_function2, "wm"),
    name="Connection5097",
    breakpoints=[],
)
_Generator_Connection5098 = mdl.create_connection(
    start=mdl.term(_Generator_Bus_Join3, "in7"),
    end=_Generator_Junction213,
    name="Connection5098",
    breakpoints=[],
)
_Generator_Connection5099 = mdl.create_connection(
    start=_Generator_Junction213,
    end=mdl.term(_Generator_w_mech, "in"),
    name="Connection5099",
    breakpoints=[],
)
_Generator_Connection5100 = mdl.create_connection(
    start=_Generator_From79,
    end=_Generator_Junction213,
    name="Connection5100",
    breakpoints=[],
)
_Generator_Connection5102 = mdl.create_connection(
    start=mdl.term(_Generator_Constant24, "out"),
    end=_Generator_Junction214,
    name="Connection5102",
    breakpoints=[],
)
_Generator_Connection5103 = mdl.create_connection(
    start=_Generator_Junction214,
    end=mdl.term(_Generator_Signal_switch6, "in2"),
    name="Connection5103",
    breakpoints=[],
)
_Generator_Connection5104 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch5, "in2"),
    end=_Generator_Junction214,
    name="Connection5104",
    breakpoints=[],
)
_Generator_Connection5105 = mdl.create_connection(
    start=_Generator_Junction185,
    end=mdl.term(_Generator_Unit_Delay2, "in"),
    name="Connection5105",
    breakpoints=[],
)
_Generator_Connection5106 = mdl.create_connection(
    start=mdl.term(_Generator_Signal_switch4, "out"),
    end=_Generator_Junction215,
    name="Connection5106",
    breakpoints=[],
)
_Generator_Connection5107 = mdl.create_connection(
    start=_Generator_Junction215,
    end=_Generator_Junction185,
    name="Connection5107",
    breakpoints=[],
)
_Generator_Connection5108 = mdl.create_connection(
    start=mdl.term(_Generator_Tm, "in"),
    end=_Generator_Junction215,
    name="Connection5108",
    breakpoints=[],
)
_Generator_Connection5109 = mdl.create_connection(
    start=_Generator_Junction184,
    end=_Generator_Vfd0,
    name="Connection5109",
    breakpoints=[],
)
_Generator_Connection5110 = mdl.create_connection(
    start=_Generator_Junction178,
    end=_Generator_Tm0,
    name="Connection5110",
    breakpoints=[],
)
_Generator_Connection5115 = mdl.create_connection(
    start=mdl.term(_Generator_Bus_Join4, "in8"),
    end=mdl.term(_Generator_Constant32, "out"),
    name="Connection5115",
    breakpoints=[],
)
_Generator_Connection3 = mdl.create_connection(
    start=mdl.term(_Generator_Constant102, "out"),
    end=mdl.term(_Generator_T_switch, "mode"),
    name="Connection3",
    breakpoints=[],
)
_Generator_Connection5116 = mdl.create_connection(
    start=mdl.term(_Generator_T_switch, "T_out"),
    end=mdl.term(_Generator_TS_module, "T"),
    name="Connection5116",
    breakpoints=[],
)
_Generator_connP = mdl.create_connection(
    start=mdl.term(_Generator_Bus_Join4, "in9"),
    end=mdl.term(_Generator_Constant33, "out"),
    name="connP",
    breakpoints=[],
)
_Generator_connQ = mdl.create_connection(
    start=mdl.term(_Generator_Bus_Join4, "in10"),
    end=mdl.term(_Generator_Constant33, "out"),
    name="connQ",
    breakpoints=[],
)
_Isource_Connection25 = mdl.create_connection(
    start=mdl.term(_Isource_Ib, "p_node"),
    end=_Isource_B1,
    name="Connection25",
    breakpoints=[],
)
_Isource_Connection26 = mdl.create_connection(
    start=mdl.term(_Isource_Ia, "p_node"),
    end=_Isource_A1,
    name="Connection26",
    breakpoints=[],
)
_Isource_Connection27 = mdl.create_connection(
    start=mdl.term(_Isource_Ic, "p_node"),
    end=_Isource_C1,
    name="Connection27",
    breakpoints=[],
)
_Isource_Connection31 = mdl.create_connection(
    start=mdl.term(_Isource_gnd1, "node"),
    end=mdl.term(_Isource_Ia, "n_node"),
    name="Connection31",
    breakpoints=[],
)
_Isource_Connection32 = mdl.create_connection(
    start=mdl.term(_Isource_Ic, "n_node"),
    end=mdl.term(_Isource_gnd1, "node"),
    name="Connection32",
    breakpoints=[],
)
_Isource_Connection33 = mdl.create_connection(
    start=mdl.term(_Isource_Ib, "n_node"),
    end=mdl.term(_Isource_gnd1, "node"),
    name="Connection33",
    breakpoints=[],
)
_Line_pisec_Connection2 = mdl.create_connection(
    start=mdl.term(_Line_pisec_R1, "n_node"),
    end=mdl.term(_Line_pisec_L1, "p_node"),
    name="Connection2",
    breakpoints=[],
)
_Line_pisec_Connection4 = mdl.create_connection(
    start=_Line_pisec_A1,
    end=_Line_pisec_Junction1,
    name="Connection4",
    breakpoints=[],
)
_Line_pisec_Connection5 = mdl.create_connection(
    start=_Line_pisec_Junction1,
    end=mdl.term(_Line_pisec_R1, "p_node"),
    name="Connection5",
    breakpoints=[],
)
_Line_pisec_Connection6 = mdl.create_connection(
    start=mdl.term(_Line_pisec_C1, "p_node"),
    end=_Line_pisec_Junction1,
    name="Connection6",
    breakpoints=[],
)
_Line_pisec_Connection7 = mdl.create_connection(
    start=mdl.term(_Line_pisec_L1, "n_node"),
    end=_Line_pisec_Junction2,
    name="Connection7",
    breakpoints=[],
)
_Line_pisec_Connection8 = mdl.create_connection(
    start=_Line_pisec_Junction2,
    end=_Line_pisec_A2,
    name="Connection8",
    breakpoints=[],
)
_Line_pisec_Connection9 = mdl.create_connection(
    start=mdl.term(_Line_pisec_C2, "p_node"),
    end=_Line_pisec_Junction2,
    name="Connection9",
    breakpoints=[],
)
_Line_pisec_Connection11 = mdl.create_connection(
    start=mdl.term(_Line_pisec_C1, "n_node"),
    end=_Line_pisec_Junction3,
    name="Connection11",
    breakpoints=[],
)
_Line_pisec_Connection12 = mdl.create_connection(
    start=_Line_pisec_Junction3,
    end=_Line_pisec_N,
    name="Connection12",
    breakpoints=[],
)
_Line_pisec_Connection13 = mdl.create_connection(
    start=mdl.term(_Line_pisec_C2, "n_node"),
    end=_Line_pisec_Junction3,
    name="Connection13",
    breakpoints=[],
)
_Line_ConnTLN1 = mdl.create_connection(
    start=_Line_N,
    end=mdl.term(_Line_TL, "gnd"),
    name="ConnTLN1",
    breakpoints=[],
)
_Line_Connection1 = mdl.create_connection(
    start=_Line_A1,
    end=mdl.term(_Line_TL, "a_in"),
    name="Connection1",
    breakpoints=[],
)
_Line_Connection2 = mdl.create_connection(
    start=_Line_B1,
    end=mdl.term(_Line_TL, "b_in"),
    name="Connection2",
    breakpoints=[],
)
_Line_Connection3 = mdl.create_connection(
    start=_Line_C1,
    end=mdl.term(_Line_TL, "c_in"),
    name="Connection3",
    breakpoints=[],
)
_Line_Connection4 = mdl.create_connection(
    start=_Line_A2,
    end=mdl.term(_Line_TL, "a_out"),
    name="Connection4",
    breakpoints=[],
)
_Line_Connection5 = mdl.create_connection(
    start=_Line_B2,
    end=mdl.term(_Line_TL, "b_out"),
    name="Connection5",
    breakpoints=[],
)
_Line_Connection6 = mdl.create_connection(
    start=_Line_C2,
    end=mdl.term(_Line_TL, "c_out"),
    name="Connection6",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection44 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product1, "out"),
    end=mdl.term(_Load_CPL_CPL3_Limit2, "in"),
    name="Connection44",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection47 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain2, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product1, "in"),
    name="Connection47",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection54 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant2, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product4, "in1"),
    name="Connection54",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection57 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Comparator1, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch20, "in2"),
    name="Connection57",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection59 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction10,
    end=mdl.term(_Load_CPL_CPL3_Limit2, "out"),
    name="Connection59",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection60 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch20, "in1"),
    end=_Load_CPL_CPL3_Junction10,
    name="Connection60",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection62 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product4, "out"),
    end=_Load_CPL_CPL3_Junction11,
    name="Connection62",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection64 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch20, "in"),
    end=_Load_CPL_CPL3_Junction11,
    name="Connection64",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection299 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Limit10, "out"),
    end=mdl.term(_Load_CPL_CPL3_Gain16, "in"),
    name="Connection299",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection315 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain16, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sign1, "in"),
    name="Connection315",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection319 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Limit10, "in"),
    end=_Load_CPL_CPL3_Junction62,
    name="Connection319",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection320 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Limit11, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sign2, "in"),
    name="Connection320",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection227 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain15, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product14, "in"),
    name="Connection227",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection228 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product14, "out"),
    end=mdl.term(_Load_CPL_CPL3_Limit7, "in"),
    name="Connection228",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection229 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Comparator4, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch23, "in2"),
    name="Connection229",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection233 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Limit7, "out"),
    end=_Load_CPL_CPL3_Junction50,
    name="Connection233",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection234 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction50,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch23, "in1"),
    name="Connection234",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection235 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Comparator4, "in1"),
    end=_Load_CPL_CPL3_Junction50,
    name="Connection235",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection236 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch23, "in"),
    end=_Load_CPL_CPL3_Junction51,
    name="Connection236",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection238 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product15, "out"),
    end=_Load_CPL_CPL3_Junction51,
    name="Connection238",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection239 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant8, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product15, "in1"),
    name="Connection239",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection243 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch23, "out"),
    end=mdl.term(_Load_CPL_CPL3_Discrete_Transfer_Function4, "in"),
    name="Connection243",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection253 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction51,
    end=mdl.term(_Load_CPL_CPL3_Comparator4, "in2"),
    name="Connection253",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection395 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Abs1, "in"),
    end=_Load_CPL_CPL3_Junction62,
    name="Connection395",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection396 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product15, "in"),
    end=_Load_CPL_CPL3_Junction74,
    name="Connection396",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection397 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction74,
    end=mdl.term(_Load_CPL_CPL3_Abs1, "out"),
    name="Connection397",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection398 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain15, "in"),
    end=_Load_CPL_CPL3_Junction74,
    name="Connection398",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection419 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch24, "in"),
    end=mdl.term(_Load_CPL_CPL3_Gain18, "out"),
    name="Connection419",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection420 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch24, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum8, "in"),
    name="Connection420",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection422 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain19, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch24, "in1"),
    name="Connection422",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection423 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product20, "out"),
    end=_Load_CPL_CPL3_Junction78,
    name="Connection423",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection424 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction78,
    end=mdl.term(_Load_CPL_CPL3_Gain18, "in"),
    name="Connection424",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection425 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain19, "in"),
    end=_Load_CPL_CPL3_Junction78,
    name="Connection425",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection430 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product19, "in2"),
    end=mdl.term(_Load_CPL_CPL3_Sign2, "out"),
    name="Connection430",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection444 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Limit11, "in"),
    end=_Load_CPL_CPL3_Junction82,
    name="Connection444",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection445 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction82,
    end=_Load_CPL_CPL3_Junction62,
    name="Connection445",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection446 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sum9, "out"),
    end=_Load_CPL_CPL3_Junction82,
    name="Connection446",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection461 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product21, "out"),
    end=_Load_CPL_CPL3_Junction84,
    name="Connection461",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection462 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction84,
    end=mdl.term(_Load_CPL_CPL3_Gain21, "in"),
    name="Connection462",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection463 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain22, "in"),
    end=_Load_CPL_CPL3_Junction84,
    name="Connection463",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection464 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain22, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch25, "in"),
    name="Connection464",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection468 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain21, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch25, "in1"),
    name="Connection468",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection509 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction92,
    end=mdl.term(_Load_CPL_CPL3_Gain2, "in"),
    name="Connection509",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection510 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product4, "in"),
    end=_Load_CPL_CPL3_Junction92,
    name="Connection510",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection511 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Comparator1, "in1"),
    end=mdl.term(_Load_CPL_CPL3_Abs2, "out"),
    name="Connection511",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection512 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Abs2, "in"),
    end=_Load_CPL_CPL3_Junction10,
    name="Connection512",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection513 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction11,
    end=mdl.term(_Load_CPL_CPL3_Abs3, "in"),
    name="Connection513",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection514 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Abs3, "out"),
    end=mdl.term(_Load_CPL_CPL3_Comparator1, "in2"),
    name="Connection514",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection515 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction92,
    end=mdl.term(_Load_CPL_CPL3_Sum8, "out"),
    name="Connection515",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection523 = mdl.create_connection(
    start=_Load_CPL_CPL3_From1,
    end=mdl.term(_Load_CPL_CPL3_Sum14, "in"),
    name="Connection523",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection524 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant19, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum14, "in1"),
    name="Connection524",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection525 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant20, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum15, "in"),
    name="Connection525",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection526 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain24, "in"),
    end=mdl.term(_Load_CPL_CPL3_Sum14, "out"),
    name="Connection526",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection527 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain24, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum15, "in1"),
    name="Connection527",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection529 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sum15, "out"),
    end=_Load_CPL_CPL3_Junction95,
    name="Connection529",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection532 = mdl.create_connection(
    start=_Load_CPL_CPL3_P,
    end=_Load_CPL_CPL3_Goto2,
    name="Connection532",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection533 = mdl.create_connection(
    start=_Load_CPL_CPL3_Q,
    end=_Load_CPL_CPL3_Goto3,
    name="Connection533",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection535 = mdl.create_connection(
    start=_Load_CPL_CPL3_From3,
    end=mdl.term(_Load_CPL_CPL3_Limit12, "in"),
    name="Connection535",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection538 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sign3, "in"),
    end=_Load_CPL_CPL3_Junction96,
    name="Connection538",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection539 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction96,
    end=mdl.term(_Load_CPL_CPL3_Product20, "in"),
    name="Connection539",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection540 = mdl.create_connection(
    start=_Load_CPL_CPL3_From5,
    end=_Load_CPL_CPL3_Junction96,
    name="Connection540",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection554 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch20, "out"),
    end=mdl.term(_Load_CPL_CPL3_Discrete_Transfer_Function1, "in"),
    name="Connection554",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection605 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant21, "out"),
    end=mdl.term(_Load_CPL_CPL3_C_function1, "Ts"),
    name="Connection605",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection607 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction101,
    end=mdl.term(_Load_CPL_CPL3_C_function1, "z"),
    name="Connection607",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection615 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Rate_Transition3, "in"),
    end=mdl.term(_Load_CPL_CPL3_Unit_Delay10, "out"),
    name="Connection615",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection616 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Rate_Transition2, "out"),
    end=mdl.term(_Load_CPL_CPL3_C_function1, "zi"),
    name="Connection616",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection617 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Rate_Transition3, "out"),
    end=mdl.term(_Load_CPL_CPL3_C_function1, "zii"),
    name="Connection617",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection618 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_C_function1, "sync"),
    end=mdl.term(_Load_CPL_CPL3_Edge_Detection1, "Out1"),
    name="Connection618",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection622 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Rate_Transition1, "in"),
    end=_Load_CPL_CPL3_Junction102,
    name="Connection622",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection624 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant22, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch28, "in2"),
    name="Connection624",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection649 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sum5, "out"),
    end=_Load_CPL_CPL3_Junction102,
    name="Connection649",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection653 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant23, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch29, "in2"),
    name="Connection653",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection660 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch28, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch29, "in"),
    name="Connection660",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection683 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction102,
    end=mdl.term(_Load_CPL_CPL3_Unit_Delay9, "in"),
    name="Connection683",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection684 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Rate_Transition2, "in"),
    end=_Load_CPL_CPL3_Junction109,
    name="Connection684",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection685 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction109,
    end=mdl.term(_Load_CPL_CPL3_Unit_Delay9, "out"),
    name="Connection685",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection686 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Unit_Delay10, "in"),
    end=_Load_CPL_CPL3_Junction109,
    name="Connection686",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection697 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction95,
    end=mdl.term(_Load_CPL_CPL3_Product21, "in1"),
    name="Connection697",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection701 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch27, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product22, "in1"),
    name="Connection701",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection704 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product21, "in"),
    end=_Load_CPL_CPL3_Junction112,
    name="Connection704",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection705 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction112,
    end=mdl.term(_Load_CPL_CPL3_Limit12, "out"),
    name="Connection705",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection706 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product22, "in"),
    end=_Load_CPL_CPL3_Junction112,
    name="Connection706",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection710 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product23, "in"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch26, "out"),
    name="Connection710",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection711 = mdl.create_connection(
    start=_Load_CPL_CPL3_From6,
    end=mdl.term(_Load_CPL_CPL3_Product23, "in1"),
    name="Connection711",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection713 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant24, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch30, "in"),
    name="Connection713",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection714 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant25, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch30, "in1"),
    name="Connection714",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection881 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Single_phase_PLL1, "f"),
    end=_Load_CPL_CPL3_Goto1,
    name="Connection881",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection718 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch30, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product24, "in"),
    name="Connection718",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection719 = mdl.create_connection(
    start=_Load_CPL_CPL3_From7,
    end=mdl.term(_Load_CPL_CPL3_Product24, "in1"),
    name="Connection719",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection882 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Single_phase_PLL1, "d"),
    end=mdl.term(_Load_CPL_CPL3_Termination70, "in"),
    name="Connection882",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection883 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Single_phase_PLL1, "q"),
    end=mdl.term(_Load_CPL_CPL3_Termination71, "in"),
    name="Connection883",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection721 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product20, "in1"),
    end=_Load_CPL_CPL3_Junction95,
    name="Connection721",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection884 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Single_phase_PLL1, "sin(wt)"),
    end=mdl.term(_Load_CPL_CPL3_Termination72, "in"),
    name="Connection884",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection724 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch28, "in"),
    end=mdl.term(_Load_CPL_CPL3_C_function1, "out"),
    name="Connection724",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection869 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain20, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum9, "in4"),
    name="Connection869",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection875 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant17, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch27, "in"),
    name="Connection875",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection876 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant18, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch27, "in1"),
    name="Connection876",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection878 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant14, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch26, "in"),
    name="Connection878",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection879 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant15, "out"),
    end=mdl.term(_Load_CPL_CPL3_Signal_switch26, "in1"),
    name="Connection879",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection767 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product3, "in"),
    end=mdl.term(_Load_CPL_CPL3_Product25, "out"),
    name="Connection767",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection771 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant26, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum16, "in1"),
    name="Connection771",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection772 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sum16, "out"),
    end=mdl.term(_Load_CPL_CPL3_Trigonometric_function2, "in"),
    name="Connection772",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection773 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Trigonometric_function1, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product25, "in1"),
    name="Connection773",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection837 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant28, "out"),
    end=mdl.term(_Load_CPL_CPL3_C_function1, "Ts_fast"),
    name="Connection837",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection838 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_R1, "p_node"),
    end=_Load_CPL_CPL3_Junction130,
    name="Connection838",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection843 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_R1, "n_node"),
    end=_Load_CPL_CPL3_Junction131,
    name="Connection843",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection786 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product25, "in"),
    end=_Load_CPL_CPL3_Junction121,
    name="Connection786",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection847 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Discrete_Transfer_Function4, "out"),
    end=_Load_CPL_CPL3_Junction133,
    name="Connection847",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection787 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction121,
    end=mdl.term(_Load_CPL_CPL3_Gain25, "out"),
    name="Connection787",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection849 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product17, "in"),
    end=_Load_CPL_CPL3_Junction133,
    name="Connection849",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection793 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Trigonometric_function2, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product26, "in"),
    name="Connection793",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection860 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product19, "in1"),
    end=_Load_CPL_CPL3_Junction133,
    name="Connection860",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection800 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Constant27, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum17, "in1"),
    name="Connection800",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection866 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction1,
    end=mdl.term(_Load_CPL_CPL3_Product2, "in"),
    name="Connection866",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection808 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sum17, "out"),
    end=mdl.term(_Load_CPL_CPL3_Trigonometric_function3, "in"),
    name="Connection808",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection809 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Trigonometric_function3, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product27, "in"),
    name="Connection809",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection813 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product26, "in1"),
    end=_Load_CPL_CPL3_Junction127,
    name="Connection813",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection814 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction127,
    end=_Load_CPL_CPL3_Junction121,
    name="Connection814",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection815 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product27, "in1"),
    end=_Load_CPL_CPL3_Junction127,
    name="Connection815",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection818 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product19, "in"),
    end=mdl.term(_Load_CPL_CPL3_Product26, "out"),
    name="Connection818",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection823 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Trigonometric_function1, "in"),
    end=_Load_CPL_CPL3_Junction129,
    name="Connection823",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection825 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Single_phase_PLL1, "wt"),
    end=_Load_CPL_CPL3_Junction129,
    name="Connection825",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection889 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product22, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum9, "in3"),
    name="Connection889",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection890 = mdl.create_connection(
    start=_Load_CPL_CPL3_From4,
    end=mdl.term(_Load_CPL_CPL3_Sum9, "in2"),
    name="Connection890",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection891 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch25, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum9, "in1"),
    name="Connection891",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection892 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product24, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum9, "in"),
    name="Connection892",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection894 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Gain26, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum8, "in3"),
    name="Connection894",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection896 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_C1, "n_node"),
    end=_Load_CPL_CPL3_Junction137,
    name="Connection896",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection897 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction137,
    end=_Load_CPL_CPL3_Junction131,
    name="Connection897",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection900 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_C1, "p_node"),
    end=_Load_CPL_CPL3_Junction138,
    name="Connection900",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection901 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction138,
    end=_Load_CPL_CPL3_Junction130,
    name="Connection901",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection904 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Varms, "n_node"),
    end=_Load_CPL_CPL3_Junction139,
    name="Connection904",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection905 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction139,
    end=_Load_CPL_CPL3_Junction137,
    name="Connection905",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection906 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Va, "n_node"),
    end=_Load_CPL_CPL3_Junction139,
    name="Connection906",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection908 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Varms, "p_node"),
    end=_Load_CPL_CPL3_Junction140,
    name="Connection908",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection909 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction140,
    end=_Load_CPL_CPL3_Junction138,
    name="Connection909",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection910 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Va, "p_node"),
    end=_Load_CPL_CPL3_Junction140,
    name="Connection910",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection914 = mdl.create_connection(
    start=_Load_CPL_CPL3_Goto4,
    end=mdl.term(_Load_CPL_CPL3_Va, "out"),
    name="Connection914",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection915 = mdl.create_connection(
    start=_Load_CPL_CPL3_From8,
    end=mdl.term(_Load_CPL_CPL3_Single_phase_PLL1, "In"),
    name="Connection915",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection917 = mdl.create_connection(
    start=_Load_CPL_CPL3_From9,
    end=mdl.term(_Load_CPL_CPL3_Gain25, "in"),
    name="Connection917",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection918 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Limit1, "in"),
    end=_Load_CPL_CPL3_From10,
    name="Connection918",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection919 = mdl.create_connection(
    start=_Load_CPL_CPL3_Goto5,
    end=mdl.term(_Load_CPL_CPL3_Varms, "out"),
    name="Connection919",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection921 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sum16, "in"),
    end=_Load_CPL_CPL3_Junction141,
    name="Connection921",
    breakpoints=[(8096, 8688)],
)
_Load_CPL_CPL3_Connection922 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction141,
    end=_Load_CPL_CPL3_Junction129,
    name="Connection922",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection923 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sum17, "in"),
    end=_Load_CPL_CPL3_Junction141,
    name="Connection923",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection925 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Sign1, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product17, "in1"),
    name="Connection925",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection926 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product27, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product17, "in2"),
    name="Connection926",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection931 = mdl.create_connection(
    start=_Load_CPL_CPL3_From11,
    end=mdl.term(_Load_CPL_CPL3_Product1, "in1"),
    name="Connection931",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection933 = mdl.create_connection(
    start=_Load_CPL_CPL3_From12,
    end=mdl.term(_Load_CPL_CPL3_Gain20, "in"),
    name="Connection933",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection935 = mdl.create_connection(
    start=_Load_CPL_CPL3_From13,
    end=mdl.term(_Load_CPL_CPL3_Gain26, "in"),
    name="Connection935",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection936 = mdl.create_connection(
    start=_Load_CPL_CPL3_Goto6,
    end=mdl.term(_Load_CPL_CPL3_Product2, "out"),
    name="Connection936",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection937 = mdl.create_connection(
    start=_Load_CPL_CPL3_From14,
    end=mdl.term(_Load_CPL_CPL3_Product14, "in1"),
    name="Connection937",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection942 = mdl.create_connection(
    start=_Load_CPL_CPL3_From15,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch25, "in2"),
    name="Connection942",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection944 = mdl.create_connection(
    start=_Load_CPL_CPL3_From16,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch30, "in2"),
    name="Connection944",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection946 = mdl.create_connection(
    start=_Load_CPL_CPL3_From17,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch27, "in2"),
    name="Connection946",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection947 = mdl.create_connection(
    start=_Load_CPL_CPL3_Goto7,
    end=mdl.term(_Load_CPL_CPL3_Sign3, "out"),
    name="Connection947",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection948 = mdl.create_connection(
    start=_Load_CPL_CPL3_From18,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch26, "in2"),
    name="Connection948",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection949 = mdl.create_connection(
    start=_Load_CPL_CPL3_From19,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch24, "in2"),
    name="Connection949",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection950 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product23, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum8, "in1"),
    name="Connection950",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection951 = mdl.create_connection(
    start=_Load_CPL_CPL3_From2,
    end=mdl.term(_Load_CPL_CPL3_Sum8, "in2"),
    name="Connection951",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection952 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product3, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum5, "in2"),
    name="Connection952",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection953 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product17, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum5, "in1"),
    name="Connection953",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection954 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Product19, "out"),
    end=mdl.term(_Load_CPL_CPL3_Sum5, "in"),
    name="Connection954",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection956 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction101,
    end=mdl.term(_Load_CPL_CPL3_Rate_Transition1, "out"),
    name="Connection956",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection957 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Signal_switch28, "in1"),
    end=_Load_CPL_CPL3_Junction142,
    name="Connection957",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection958 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction142,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch29, "in1"),
    name="Connection958",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection959 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction101,
    end=_Load_CPL_CPL3_Junction143,
    name="Connection959",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection960 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction143,
    end=mdl.term(_Load_CPL_CPL3_Edge_Detection1, "In1"),
    name="Connection960",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection961 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction142,
    end=_Load_CPL_CPL3_Junction143,
    name="Connection961",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection965 = mdl.create_connection(
    start=_Load_CPL_CPL3_Goto8,
    end=mdl.term(_Load_CPL_CPL3_Signal_switch29, "out"),
    name="Connection965",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection966 = mdl.create_connection(
    start=_Load_CPL_CPL3_From20,
    end=mdl.term(_Load_CPL_CPL3_Isp1, "in"),
    name="Connection966",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection969 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction131,
    end=_Load_CPL_CPL3_Junction144,
    name="Connection969",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection970 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction144,
    end=mdl.term(_Load_CPL_CPL3_Isp1, "p_node"),
    name="Connection970",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection971 = mdl.create_connection(
    start=_Load_CPL_CPL3_P2,
    end=_Load_CPL_CPL3_Junction144,
    name="Connection971",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection972 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction130,
    end=_Load_CPL_CPL3_Junction145,
    name="Connection972",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection973 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction145,
    end=mdl.term(_Load_CPL_CPL3_Isp1, "n_node"),
    name="Connection973",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection974 = mdl.create_connection(
    start=_Load_CPL_CPL3_P3,
    end=_Load_CPL_CPL3_Junction145,
    name="Connection974",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection9 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Limit1, "out"),
    end=_Load_CPL_CPL3_Junction1,
    name="Connection9",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection10 = mdl.create_connection(
    start=_Load_CPL_CPL3_Junction1,
    end=mdl.term(_Load_CPL_CPL3_Product2, "in1"),
    name="Connection10",
    breakpoints=[],
)
_Load_CPL_CPL3_Connection16 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3_Discrete_Transfer_Function1, "out"),
    end=mdl.term(_Load_CPL_CPL3_Product3, "in1"),
    name="Connection16",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection9 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Limit1, "out"),
    end=_Load_CPL_CPL2_Junction1,
    name="Connection9",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection10 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction1,
    end=mdl.term(_Load_CPL_CPL2_Product2, "in1"),
    name="Connection10",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection16 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Discrete_Transfer_Function1, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product3, "in1"),
    name="Connection16",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection44 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product1, "out"),
    end=mdl.term(_Load_CPL_CPL2_Limit2, "in"),
    name="Connection44",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection47 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain2, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product1, "in"),
    name="Connection47",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection54 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant2, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product4, "in1"),
    name="Connection54",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection57 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Comparator1, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch20, "in2"),
    name="Connection57",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection59 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction10,
    end=mdl.term(_Load_CPL_CPL2_Limit2, "out"),
    name="Connection59",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection60 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch20, "in1"),
    end=_Load_CPL_CPL2_Junction10,
    name="Connection60",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection62 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product4, "out"),
    end=_Load_CPL_CPL2_Junction11,
    name="Connection62",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection64 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch20, "in"),
    end=_Load_CPL_CPL2_Junction11,
    name="Connection64",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection299 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Limit10, "out"),
    end=mdl.term(_Load_CPL_CPL2_Gain16, "in"),
    name="Connection299",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection315 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain16, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sign1, "in"),
    name="Connection315",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection319 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Limit10, "in"),
    end=_Load_CPL_CPL2_Junction62,
    name="Connection319",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection320 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Limit11, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sign2, "in"),
    name="Connection320",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection227 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain15, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product14, "in"),
    name="Connection227",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection228 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product14, "out"),
    end=mdl.term(_Load_CPL_CPL2_Limit7, "in"),
    name="Connection228",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection229 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Comparator4, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch23, "in2"),
    name="Connection229",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection233 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Limit7, "out"),
    end=_Load_CPL_CPL2_Junction50,
    name="Connection233",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection234 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction50,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch23, "in1"),
    name="Connection234",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection235 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Comparator4, "in1"),
    end=_Load_CPL_CPL2_Junction50,
    name="Connection235",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection236 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch23, "in"),
    end=_Load_CPL_CPL2_Junction51,
    name="Connection236",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection238 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product15, "out"),
    end=_Load_CPL_CPL2_Junction51,
    name="Connection238",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection239 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant8, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product15, "in1"),
    name="Connection239",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection243 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch23, "out"),
    end=mdl.term(_Load_CPL_CPL2_Discrete_Transfer_Function4, "in"),
    name="Connection243",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection253 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction51,
    end=mdl.term(_Load_CPL_CPL2_Comparator4, "in2"),
    name="Connection253",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection395 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Abs1, "in"),
    end=_Load_CPL_CPL2_Junction62,
    name="Connection395",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection396 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product15, "in"),
    end=_Load_CPL_CPL2_Junction74,
    name="Connection396",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection397 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction74,
    end=mdl.term(_Load_CPL_CPL2_Abs1, "out"),
    name="Connection397",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection398 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain15, "in"),
    end=_Load_CPL_CPL2_Junction74,
    name="Connection398",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection419 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch24, "in"),
    end=mdl.term(_Load_CPL_CPL2_Gain18, "out"),
    name="Connection419",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection420 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch24, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum8, "in"),
    name="Connection420",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection422 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain19, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch24, "in1"),
    name="Connection422",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection423 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product20, "out"),
    end=_Load_CPL_CPL2_Junction78,
    name="Connection423",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection424 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction78,
    end=mdl.term(_Load_CPL_CPL2_Gain18, "in"),
    name="Connection424",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection425 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain19, "in"),
    end=_Load_CPL_CPL2_Junction78,
    name="Connection425",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection430 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product19, "in2"),
    end=mdl.term(_Load_CPL_CPL2_Sign2, "out"),
    name="Connection430",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection444 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Limit11, "in"),
    end=_Load_CPL_CPL2_Junction82,
    name="Connection444",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection445 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction82,
    end=_Load_CPL_CPL2_Junction62,
    name="Connection445",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection446 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sum9, "out"),
    end=_Load_CPL_CPL2_Junction82,
    name="Connection446",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection461 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product21, "out"),
    end=_Load_CPL_CPL2_Junction84,
    name="Connection461",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection462 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction84,
    end=mdl.term(_Load_CPL_CPL2_Gain21, "in"),
    name="Connection462",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection463 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain22, "in"),
    end=_Load_CPL_CPL2_Junction84,
    name="Connection463",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection464 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain22, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch25, "in"),
    name="Connection464",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection468 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain21, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch25, "in1"),
    name="Connection468",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection509 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction92,
    end=mdl.term(_Load_CPL_CPL2_Gain2, "in"),
    name="Connection509",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection510 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product4, "in"),
    end=_Load_CPL_CPL2_Junction92,
    name="Connection510",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection511 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Comparator1, "in1"),
    end=mdl.term(_Load_CPL_CPL2_Abs2, "out"),
    name="Connection511",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection512 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Abs2, "in"),
    end=_Load_CPL_CPL2_Junction10,
    name="Connection512",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection513 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction11,
    end=mdl.term(_Load_CPL_CPL2_Abs3, "in"),
    name="Connection513",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection514 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Abs3, "out"),
    end=mdl.term(_Load_CPL_CPL2_Comparator1, "in2"),
    name="Connection514",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection515 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction92,
    end=mdl.term(_Load_CPL_CPL2_Sum8, "out"),
    name="Connection515",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection523 = mdl.create_connection(
    start=_Load_CPL_CPL2_From1,
    end=mdl.term(_Load_CPL_CPL2_Sum14, "in"),
    name="Connection523",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection524 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant19, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum14, "in1"),
    name="Connection524",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection525 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant20, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum15, "in"),
    name="Connection525",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection526 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain24, "in"),
    end=mdl.term(_Load_CPL_CPL2_Sum14, "out"),
    name="Connection526",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection527 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain24, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum15, "in1"),
    name="Connection527",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection529 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sum15, "out"),
    end=_Load_CPL_CPL2_Junction95,
    name="Connection529",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection532 = mdl.create_connection(
    start=_Load_CPL_CPL2_P,
    end=_Load_CPL_CPL2_Goto2,
    name="Connection532",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection533 = mdl.create_connection(
    start=_Load_CPL_CPL2_Q,
    end=_Load_CPL_CPL2_Goto3,
    name="Connection533",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection535 = mdl.create_connection(
    start=_Load_CPL_CPL2_From3,
    end=mdl.term(_Load_CPL_CPL2_Limit12, "in"),
    name="Connection535",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection538 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sign3, "in"),
    end=_Load_CPL_CPL2_Junction96,
    name="Connection538",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection539 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction96,
    end=mdl.term(_Load_CPL_CPL2_Product20, "in"),
    name="Connection539",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection540 = mdl.create_connection(
    start=_Load_CPL_CPL2_From5,
    end=_Load_CPL_CPL2_Junction96,
    name="Connection540",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection554 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch20, "out"),
    end=mdl.term(_Load_CPL_CPL2_Discrete_Transfer_Function1, "in"),
    name="Connection554",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection605 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant21, "out"),
    end=mdl.term(_Load_CPL_CPL2_C_function1, "Ts"),
    name="Connection605",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection607 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction101,
    end=mdl.term(_Load_CPL_CPL2_C_function1, "z"),
    name="Connection607",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection615 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Rate_Transition3, "in"),
    end=mdl.term(_Load_CPL_CPL2_Unit_Delay10, "out"),
    name="Connection615",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection616 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Rate_Transition2, "out"),
    end=mdl.term(_Load_CPL_CPL2_C_function1, "zi"),
    name="Connection616",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection617 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Rate_Transition3, "out"),
    end=mdl.term(_Load_CPL_CPL2_C_function1, "zii"),
    name="Connection617",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection618 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_C_function1, "sync"),
    end=mdl.term(_Load_CPL_CPL2_Edge_Detection1, "Out1"),
    name="Connection618",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection622 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Rate_Transition1, "in"),
    end=_Load_CPL_CPL2_Junction102,
    name="Connection622",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection624 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant22, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch28, "in2"),
    name="Connection624",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection649 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sum5, "out"),
    end=_Load_CPL_CPL2_Junction102,
    name="Connection649",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection653 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant23, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch29, "in2"),
    name="Connection653",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection660 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch28, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch29, "in"),
    name="Connection660",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection683 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction102,
    end=mdl.term(_Load_CPL_CPL2_Unit_Delay9, "in"),
    name="Connection683",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection684 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Rate_Transition2, "in"),
    end=_Load_CPL_CPL2_Junction109,
    name="Connection684",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection685 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction109,
    end=mdl.term(_Load_CPL_CPL2_Unit_Delay9, "out"),
    name="Connection685",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection686 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Unit_Delay10, "in"),
    end=_Load_CPL_CPL2_Junction109,
    name="Connection686",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection697 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction95,
    end=mdl.term(_Load_CPL_CPL2_Product21, "in1"),
    name="Connection697",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection701 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch27, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product22, "in1"),
    name="Connection701",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection704 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product21, "in"),
    end=_Load_CPL_CPL2_Junction112,
    name="Connection704",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection705 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction112,
    end=mdl.term(_Load_CPL_CPL2_Limit12, "out"),
    name="Connection705",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection706 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product22, "in"),
    end=_Load_CPL_CPL2_Junction112,
    name="Connection706",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection710 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product23, "in"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch26, "out"),
    name="Connection710",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection711 = mdl.create_connection(
    start=_Load_CPL_CPL2_From6,
    end=mdl.term(_Load_CPL_CPL2_Product23, "in1"),
    name="Connection711",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection713 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant24, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch30, "in"),
    name="Connection713",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection714 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant25, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch30, "in1"),
    name="Connection714",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection881 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Single_phase_PLL1, "f"),
    end=_Load_CPL_CPL2_Goto1,
    name="Connection881",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection718 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch30, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product24, "in"),
    name="Connection718",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection719 = mdl.create_connection(
    start=_Load_CPL_CPL2_From7,
    end=mdl.term(_Load_CPL_CPL2_Product24, "in1"),
    name="Connection719",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection882 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Single_phase_PLL1, "d"),
    end=mdl.term(_Load_CPL_CPL2_Termination70, "in"),
    name="Connection882",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection883 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Single_phase_PLL1, "q"),
    end=mdl.term(_Load_CPL_CPL2_Termination71, "in"),
    name="Connection883",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection721 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product20, "in1"),
    end=_Load_CPL_CPL2_Junction95,
    name="Connection721",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection884 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Single_phase_PLL1, "sin(wt)"),
    end=mdl.term(_Load_CPL_CPL2_Termination72, "in"),
    name="Connection884",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection724 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch28, "in"),
    end=mdl.term(_Load_CPL_CPL2_C_function1, "out"),
    name="Connection724",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection869 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain20, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum9, "in4"),
    name="Connection869",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection875 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant17, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch27, "in"),
    name="Connection875",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection876 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant18, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch27, "in1"),
    name="Connection876",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection878 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant14, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch26, "in"),
    name="Connection878",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection879 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant15, "out"),
    end=mdl.term(_Load_CPL_CPL2_Signal_switch26, "in1"),
    name="Connection879",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection767 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product3, "in"),
    end=mdl.term(_Load_CPL_CPL2_Product25, "out"),
    name="Connection767",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection771 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant26, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum16, "in1"),
    name="Connection771",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection772 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sum16, "out"),
    end=mdl.term(_Load_CPL_CPL2_Trigonometric_function2, "in"),
    name="Connection772",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection773 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Trigonometric_function1, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product25, "in1"),
    name="Connection773",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection837 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant28, "out"),
    end=mdl.term(_Load_CPL_CPL2_C_function1, "Ts_fast"),
    name="Connection837",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection838 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_R1, "p_node"),
    end=_Load_CPL_CPL2_Junction130,
    name="Connection838",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection843 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_R1, "n_node"),
    end=_Load_CPL_CPL2_Junction131,
    name="Connection843",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection786 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product25, "in"),
    end=_Load_CPL_CPL2_Junction121,
    name="Connection786",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection847 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Discrete_Transfer_Function4, "out"),
    end=_Load_CPL_CPL2_Junction133,
    name="Connection847",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection787 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction121,
    end=mdl.term(_Load_CPL_CPL2_Gain25, "out"),
    name="Connection787",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection849 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product17, "in"),
    end=_Load_CPL_CPL2_Junction133,
    name="Connection849",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection793 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Trigonometric_function2, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product26, "in"),
    name="Connection793",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection860 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product19, "in1"),
    end=_Load_CPL_CPL2_Junction133,
    name="Connection860",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection800 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Constant27, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum17, "in1"),
    name="Connection800",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection866 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction1,
    end=mdl.term(_Load_CPL_CPL2_Product2, "in"),
    name="Connection866",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection808 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sum17, "out"),
    end=mdl.term(_Load_CPL_CPL2_Trigonometric_function3, "in"),
    name="Connection808",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection809 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Trigonometric_function3, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product27, "in"),
    name="Connection809",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection813 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product26, "in1"),
    end=_Load_CPL_CPL2_Junction127,
    name="Connection813",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection814 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction127,
    end=_Load_CPL_CPL2_Junction121,
    name="Connection814",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection815 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product27, "in1"),
    end=_Load_CPL_CPL2_Junction127,
    name="Connection815",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection818 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product19, "in"),
    end=mdl.term(_Load_CPL_CPL2_Product26, "out"),
    name="Connection818",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection823 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Trigonometric_function1, "in"),
    end=_Load_CPL_CPL2_Junction129,
    name="Connection823",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection825 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Single_phase_PLL1, "wt"),
    end=_Load_CPL_CPL2_Junction129,
    name="Connection825",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection889 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product22, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum9, "in3"),
    name="Connection889",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection890 = mdl.create_connection(
    start=_Load_CPL_CPL2_From4,
    end=mdl.term(_Load_CPL_CPL2_Sum9, "in2"),
    name="Connection890",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection891 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch25, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum9, "in1"),
    name="Connection891",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection892 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product24, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum9, "in"),
    name="Connection892",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection894 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Gain26, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum8, "in3"),
    name="Connection894",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection896 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_C1, "n_node"),
    end=_Load_CPL_CPL2_Junction137,
    name="Connection896",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection897 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction137,
    end=_Load_CPL_CPL2_Junction131,
    name="Connection897",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection900 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_C1, "p_node"),
    end=_Load_CPL_CPL2_Junction138,
    name="Connection900",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection901 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction138,
    end=_Load_CPL_CPL2_Junction130,
    name="Connection901",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection904 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Varms, "n_node"),
    end=_Load_CPL_CPL2_Junction139,
    name="Connection904",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection905 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction139,
    end=_Load_CPL_CPL2_Junction137,
    name="Connection905",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection906 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Va, "n_node"),
    end=_Load_CPL_CPL2_Junction139,
    name="Connection906",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection908 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Varms, "p_node"),
    end=_Load_CPL_CPL2_Junction140,
    name="Connection908",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection909 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction140,
    end=_Load_CPL_CPL2_Junction138,
    name="Connection909",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection910 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Va, "p_node"),
    end=_Load_CPL_CPL2_Junction140,
    name="Connection910",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection914 = mdl.create_connection(
    start=_Load_CPL_CPL2_Goto4,
    end=mdl.term(_Load_CPL_CPL2_Va, "out"),
    name="Connection914",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection915 = mdl.create_connection(
    start=_Load_CPL_CPL2_From8,
    end=mdl.term(_Load_CPL_CPL2_Single_phase_PLL1, "In"),
    name="Connection915",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection917 = mdl.create_connection(
    start=_Load_CPL_CPL2_From9,
    end=mdl.term(_Load_CPL_CPL2_Gain25, "in"),
    name="Connection917",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection918 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Limit1, "in"),
    end=_Load_CPL_CPL2_From10,
    name="Connection918",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection919 = mdl.create_connection(
    start=_Load_CPL_CPL2_Goto5,
    end=mdl.term(_Load_CPL_CPL2_Varms, "out"),
    name="Connection919",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection921 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sum16, "in"),
    end=_Load_CPL_CPL2_Junction141,
    name="Connection921",
    breakpoints=[(7816, 8752)],
)
_Load_CPL_CPL2_Connection922 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction141,
    end=_Load_CPL_CPL2_Junction129,
    name="Connection922",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection923 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sum17, "in"),
    end=_Load_CPL_CPL2_Junction141,
    name="Connection923",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection925 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Sign1, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product17, "in1"),
    name="Connection925",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection926 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product27, "out"),
    end=mdl.term(_Load_CPL_CPL2_Product17, "in2"),
    name="Connection926",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection931 = mdl.create_connection(
    start=_Load_CPL_CPL2_From11,
    end=mdl.term(_Load_CPL_CPL2_Product1, "in1"),
    name="Connection931",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection933 = mdl.create_connection(
    start=_Load_CPL_CPL2_From12,
    end=mdl.term(_Load_CPL_CPL2_Gain20, "in"),
    name="Connection933",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection935 = mdl.create_connection(
    start=_Load_CPL_CPL2_From13,
    end=mdl.term(_Load_CPL_CPL2_Gain26, "in"),
    name="Connection935",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection936 = mdl.create_connection(
    start=_Load_CPL_CPL2_Goto6,
    end=mdl.term(_Load_CPL_CPL2_Product2, "out"),
    name="Connection936",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection937 = mdl.create_connection(
    start=_Load_CPL_CPL2_From14,
    end=mdl.term(_Load_CPL_CPL2_Product14, "in1"),
    name="Connection937",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection942 = mdl.create_connection(
    start=_Load_CPL_CPL2_From15,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch25, "in2"),
    name="Connection942",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection944 = mdl.create_connection(
    start=_Load_CPL_CPL2_From16,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch30, "in2"),
    name="Connection944",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection946 = mdl.create_connection(
    start=_Load_CPL_CPL2_From17,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch27, "in2"),
    name="Connection946",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection947 = mdl.create_connection(
    start=_Load_CPL_CPL2_Goto7,
    end=mdl.term(_Load_CPL_CPL2_Sign3, "out"),
    name="Connection947",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection948 = mdl.create_connection(
    start=_Load_CPL_CPL2_From18,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch26, "in2"),
    name="Connection948",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection949 = mdl.create_connection(
    start=_Load_CPL_CPL2_From19,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch24, "in2"),
    name="Connection949",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection950 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product23, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum8, "in1"),
    name="Connection950",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection951 = mdl.create_connection(
    start=_Load_CPL_CPL2_From2,
    end=mdl.term(_Load_CPL_CPL2_Sum8, "in2"),
    name="Connection951",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection952 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product3, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum5, "in2"),
    name="Connection952",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection953 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product17, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum5, "in1"),
    name="Connection953",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection954 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Product19, "out"),
    end=mdl.term(_Load_CPL_CPL2_Sum5, "in"),
    name="Connection954",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection956 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction101,
    end=mdl.term(_Load_CPL_CPL2_Rate_Transition1, "out"),
    name="Connection956",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection957 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2_Signal_switch28, "in1"),
    end=_Load_CPL_CPL2_Junction142,
    name="Connection957",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection958 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction142,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch29, "in1"),
    name="Connection958",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection959 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction101,
    end=_Load_CPL_CPL2_Junction143,
    name="Connection959",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection960 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction143,
    end=mdl.term(_Load_CPL_CPL2_Edge_Detection1, "In1"),
    name="Connection960",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection961 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction142,
    end=_Load_CPL_CPL2_Junction143,
    name="Connection961",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection965 = mdl.create_connection(
    start=_Load_CPL_CPL2_Goto8,
    end=mdl.term(_Load_CPL_CPL2_Signal_switch29, "out"),
    name="Connection965",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection966 = mdl.create_connection(
    start=_Load_CPL_CPL2_From20,
    end=mdl.term(_Load_CPL_CPL2_Isp1, "in"),
    name="Connection966",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection969 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction131,
    end=_Load_CPL_CPL2_Junction144,
    name="Connection969",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection970 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction144,
    end=mdl.term(_Load_CPL_CPL2_Isp1, "p_node"),
    name="Connection970",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection971 = mdl.create_connection(
    start=_Load_CPL_CPL2_P2,
    end=_Load_CPL_CPL2_Junction144,
    name="Connection971",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection972 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction130,
    end=_Load_CPL_CPL2_Junction145,
    name="Connection972",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection973 = mdl.create_connection(
    start=_Load_CPL_CPL2_Junction145,
    end=mdl.term(_Load_CPL_CPL2_Isp1, "n_node"),
    name="Connection973",
    breakpoints=[],
)
_Load_CPL_CPL2_Connection974 = mdl.create_connection(
    start=_Load_CPL_CPL2_P3,
    end=_Load_CPL_CPL2_Junction145,
    name="Connection974",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection906 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Va, "n_node"),
    end=_Load_CPL_CPL1_Junction139,
    name="Connection906",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection907 = mdl.create_connection(
    start=_Load_CPL_CPL1_P3,
    end=_Load_CPL_CPL1_Junction97,
    name="Connection907",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection908 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Varms, "p_node"),
    end=_Load_CPL_CPL1_Junction140,
    name="Connection908",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection909 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction140,
    end=_Load_CPL_CPL1_Junction138,
    name="Connection909",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection910 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Va, "p_node"),
    end=_Load_CPL_CPL1_Junction140,
    name="Connection910",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection914 = mdl.create_connection(
    start=_Load_CPL_CPL1_Goto4,
    end=mdl.term(_Load_CPL_CPL1_Va, "out"),
    name="Connection914",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection915 = mdl.create_connection(
    start=_Load_CPL_CPL1_From8,
    end=mdl.term(_Load_CPL_CPL1_Single_phase_PLL1, "In"),
    name="Connection915",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection917 = mdl.create_connection(
    start=_Load_CPL_CPL1_From9,
    end=mdl.term(_Load_CPL_CPL1_Gain25, "in"),
    name="Connection917",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection918 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Limit1, "in"),
    end=_Load_CPL_CPL1_From10,
    name="Connection918",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection919 = mdl.create_connection(
    start=_Load_CPL_CPL1_Goto5,
    end=mdl.term(_Load_CPL_CPL1_Varms, "out"),
    name="Connection919",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection921 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sum16, "in"),
    end=_Load_CPL_CPL1_Junction141,
    name="Connection921",
    breakpoints=[(7984, 8336)],
)
_Load_CPL_CPL1_Connection922 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction141,
    end=_Load_CPL_CPL1_Junction129,
    name="Connection922",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection923 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sum17, "in"),
    end=_Load_CPL_CPL1_Junction141,
    name="Connection923",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection925 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sign1, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product17, "in1"),
    name="Connection925",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection926 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product27, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product17, "in2"),
    name="Connection926",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection931 = mdl.create_connection(
    start=_Load_CPL_CPL1_From11,
    end=mdl.term(_Load_CPL_CPL1_Product1, "in1"),
    name="Connection931",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection933 = mdl.create_connection(
    start=_Load_CPL_CPL1_From12,
    end=mdl.term(_Load_CPL_CPL1_Gain20, "in"),
    name="Connection933",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection935 = mdl.create_connection(
    start=_Load_CPL_CPL1_From13,
    end=mdl.term(_Load_CPL_CPL1_Gain26, "in"),
    name="Connection935",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection936 = mdl.create_connection(
    start=_Load_CPL_CPL1_Goto6,
    end=mdl.term(_Load_CPL_CPL1_Product2, "out"),
    name="Connection936",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection937 = mdl.create_connection(
    start=_Load_CPL_CPL1_From14,
    end=mdl.term(_Load_CPL_CPL1_Product14, "in1"),
    name="Connection937",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection942 = mdl.create_connection(
    start=_Load_CPL_CPL1_From15,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch25, "in2"),
    name="Connection942",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection944 = mdl.create_connection(
    start=_Load_CPL_CPL1_From16,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch30, "in2"),
    name="Connection944",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection946 = mdl.create_connection(
    start=_Load_CPL_CPL1_From17,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch27, "in2"),
    name="Connection946",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection947 = mdl.create_connection(
    start=_Load_CPL_CPL1_Goto7,
    end=mdl.term(_Load_CPL_CPL1_Sign3, "out"),
    name="Connection947",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection948 = mdl.create_connection(
    start=_Load_CPL_CPL1_From18,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch26, "in2"),
    name="Connection948",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection949 = mdl.create_connection(
    start=_Load_CPL_CPL1_From19,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch24, "in2"),
    name="Connection949",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection950 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product23, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum8, "in1"),
    name="Connection950",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection951 = mdl.create_connection(
    start=_Load_CPL_CPL1_From2,
    end=mdl.term(_Load_CPL_CPL1_Sum8, "in2"),
    name="Connection951",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection952 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product3, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum5, "in2"),
    name="Connection952",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection953 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product17, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum5, "in1"),
    name="Connection953",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection954 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product19, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum5, "in"),
    name="Connection954",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection956 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction101,
    end=mdl.term(_Load_CPL_CPL1_Rate_Transition1, "out"),
    name="Connection956",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection957 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch28, "in1"),
    end=_Load_CPL_CPL1_Junction142,
    name="Connection957",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection958 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction142,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch29, "in1"),
    name="Connection958",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection959 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction101,
    end=_Load_CPL_CPL1_Junction143,
    name="Connection959",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection960 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction143,
    end=mdl.term(_Load_CPL_CPL1_Edge_Detection1, "In1"),
    name="Connection960",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection961 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction142,
    end=_Load_CPL_CPL1_Junction143,
    name="Connection961",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection965 = mdl.create_connection(
    start=_Load_CPL_CPL1_Goto8,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch29, "out"),
    name="Connection965",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection966 = mdl.create_connection(
    start=_Load_CPL_CPL1_From20,
    end=mdl.term(_Load_CPL_CPL1_Isp1, "in"),
    name="Connection966",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection9 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Limit1, "out"),
    end=_Load_CPL_CPL1_Junction1,
    name="Connection9",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection10 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction1,
    end=mdl.term(_Load_CPL_CPL1_Product2, "in1"),
    name="Connection10",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection16 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Discrete_Transfer_Function1, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product3, "in1"),
    name="Connection16",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection44 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product1, "out"),
    end=mdl.term(_Load_CPL_CPL1_Limit2, "in"),
    name="Connection44",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection47 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain2, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product1, "in"),
    name="Connection47",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection54 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant2, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product4, "in1"),
    name="Connection54",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection57 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Comparator1, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch20, "in2"),
    name="Connection57",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection59 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction10,
    end=mdl.term(_Load_CPL_CPL1_Limit2, "out"),
    name="Connection59",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection60 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch20, "in1"),
    end=_Load_CPL_CPL1_Junction10,
    name="Connection60",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection62 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product4, "out"),
    end=_Load_CPL_CPL1_Junction11,
    name="Connection62",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection64 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch20, "in"),
    end=_Load_CPL_CPL1_Junction11,
    name="Connection64",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection299 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Limit10, "out"),
    end=mdl.term(_Load_CPL_CPL1_Gain16, "in"),
    name="Connection299",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection315 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain16, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sign1, "in"),
    name="Connection315",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection319 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Limit10, "in"),
    end=_Load_CPL_CPL1_Junction62,
    name="Connection319",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection320 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Limit11, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sign2, "in"),
    name="Connection320",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection227 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain15, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product14, "in"),
    name="Connection227",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection228 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product14, "out"),
    end=mdl.term(_Load_CPL_CPL1_Limit7, "in"),
    name="Connection228",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection229 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Comparator4, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch23, "in2"),
    name="Connection229",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection233 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Limit7, "out"),
    end=_Load_CPL_CPL1_Junction50,
    name="Connection233",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection234 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction50,
    end=mdl.term(_Load_CPL_CPL1_Signal_switch23, "in1"),
    name="Connection234",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection235 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Comparator4, "in1"),
    end=_Load_CPL_CPL1_Junction50,
    name="Connection235",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection236 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch23, "in"),
    end=_Load_CPL_CPL1_Junction51,
    name="Connection236",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection238 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product15, "out"),
    end=_Load_CPL_CPL1_Junction51,
    name="Connection238",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection239 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant8, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product15, "in1"),
    name="Connection239",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection243 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch23, "out"),
    end=mdl.term(_Load_CPL_CPL1_Discrete_Transfer_Function4, "in"),
    name="Connection243",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection253 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction51,
    end=mdl.term(_Load_CPL_CPL1_Comparator4, "in2"),
    name="Connection253",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection395 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Abs1, "in"),
    end=_Load_CPL_CPL1_Junction62,
    name="Connection395",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection396 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product15, "in"),
    end=_Load_CPL_CPL1_Junction74,
    name="Connection396",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection397 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction74,
    end=mdl.term(_Load_CPL_CPL1_Abs1, "out"),
    name="Connection397",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection398 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain15, "in"),
    end=_Load_CPL_CPL1_Junction74,
    name="Connection398",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection419 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch24, "in"),
    end=mdl.term(_Load_CPL_CPL1_Gain18, "out"),
    name="Connection419",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection420 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch24, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum8, "in"),
    name="Connection420",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection422 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain19, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch24, "in1"),
    name="Connection422",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection423 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product20, "out"),
    end=_Load_CPL_CPL1_Junction78,
    name="Connection423",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection424 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction78,
    end=mdl.term(_Load_CPL_CPL1_Gain18, "in"),
    name="Connection424",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection425 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain19, "in"),
    end=_Load_CPL_CPL1_Junction78,
    name="Connection425",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection430 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product19, "in2"),
    end=mdl.term(_Load_CPL_CPL1_Sign2, "out"),
    name="Connection430",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection444 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Limit11, "in"),
    end=_Load_CPL_CPL1_Junction82,
    name="Connection444",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection445 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction82,
    end=_Load_CPL_CPL1_Junction62,
    name="Connection445",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection446 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sum9, "out"),
    end=_Load_CPL_CPL1_Junction82,
    name="Connection446",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection461 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product21, "out"),
    end=_Load_CPL_CPL1_Junction84,
    name="Connection461",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection462 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction84,
    end=mdl.term(_Load_CPL_CPL1_Gain21, "in"),
    name="Connection462",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection463 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain22, "in"),
    end=_Load_CPL_CPL1_Junction84,
    name="Connection463",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection464 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain22, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch25, "in"),
    name="Connection464",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection468 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain21, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch25, "in1"),
    name="Connection468",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection509 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction92,
    end=mdl.term(_Load_CPL_CPL1_Gain2, "in"),
    name="Connection509",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection510 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product4, "in"),
    end=_Load_CPL_CPL1_Junction92,
    name="Connection510",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection511 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Comparator1, "in1"),
    end=mdl.term(_Load_CPL_CPL1_Abs2, "out"),
    name="Connection511",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection512 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Abs2, "in"),
    end=_Load_CPL_CPL1_Junction10,
    name="Connection512",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection513 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction11,
    end=mdl.term(_Load_CPL_CPL1_Abs3, "in"),
    name="Connection513",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection514 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Abs3, "out"),
    end=mdl.term(_Load_CPL_CPL1_Comparator1, "in2"),
    name="Connection514",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection515 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction92,
    end=mdl.term(_Load_CPL_CPL1_Sum8, "out"),
    name="Connection515",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection523 = mdl.create_connection(
    start=_Load_CPL_CPL1_From1,
    end=mdl.term(_Load_CPL_CPL1_Sum14, "in"),
    name="Connection523",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection524 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant19, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum14, "in1"),
    name="Connection524",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection525 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant20, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum15, "in"),
    name="Connection525",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection526 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain24, "in"),
    end=mdl.term(_Load_CPL_CPL1_Sum14, "out"),
    name="Connection526",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection527 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain24, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum15, "in1"),
    name="Connection527",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection529 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sum15, "out"),
    end=_Load_CPL_CPL1_Junction95,
    name="Connection529",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection532 = mdl.create_connection(
    start=_Load_CPL_CPL1_P,
    end=_Load_CPL_CPL1_Goto2,
    name="Connection532",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection533 = mdl.create_connection(
    start=_Load_CPL_CPL1_Q,
    end=_Load_CPL_CPL1_Goto3,
    name="Connection533",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection535 = mdl.create_connection(
    start=_Load_CPL_CPL1_From3,
    end=mdl.term(_Load_CPL_CPL1_Limit12, "in"),
    name="Connection535",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection538 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sign3, "in"),
    end=_Load_CPL_CPL1_Junction96,
    name="Connection538",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection539 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction96,
    end=mdl.term(_Load_CPL_CPL1_Product20, "in"),
    name="Connection539",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection540 = mdl.create_connection(
    start=_Load_CPL_CPL1_From5,
    end=_Load_CPL_CPL1_Junction96,
    name="Connection540",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection554 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch20, "out"),
    end=mdl.term(_Load_CPL_CPL1_Discrete_Transfer_Function1, "in"),
    name="Connection554",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection605 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant21, "out"),
    end=mdl.term(_Load_CPL_CPL1_C_function1, "Ts"),
    name="Connection605",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection607 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction101,
    end=mdl.term(_Load_CPL_CPL1_C_function1, "z"),
    name="Connection607",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection615 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Rate_Transition3, "in"),
    end=mdl.term(_Load_CPL_CPL1_Unit_Delay10, "out"),
    name="Connection615",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection616 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Rate_Transition2, "out"),
    end=mdl.term(_Load_CPL_CPL1_C_function1, "zi"),
    name="Connection616",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection617 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Rate_Transition3, "out"),
    end=mdl.term(_Load_CPL_CPL1_C_function1, "zii"),
    name="Connection617",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection618 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_C_function1, "sync"),
    end=mdl.term(_Load_CPL_CPL1_Edge_Detection1, "Out1"),
    name="Connection618",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection622 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Rate_Transition1, "in"),
    end=_Load_CPL_CPL1_Junction102,
    name="Connection622",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection624 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant22, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch28, "in2"),
    name="Connection624",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection649 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sum5, "out"),
    end=_Load_CPL_CPL1_Junction102,
    name="Connection649",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection653 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant23, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch29, "in2"),
    name="Connection653",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection660 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch28, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch29, "in"),
    name="Connection660",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection670 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Isp1, "p_node"),
    end=_Load_CPL_CPL1_Junction2,
    name="Connection670",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection669 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Isp1, "n_node"),
    end=_Load_CPL_CPL1_Junction97,
    name="Connection669",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection683 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction102,
    end=mdl.term(_Load_CPL_CPL1_Unit_Delay9, "in"),
    name="Connection683",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection684 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Rate_Transition2, "in"),
    end=_Load_CPL_CPL1_Junction109,
    name="Connection684",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection685 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction109,
    end=mdl.term(_Load_CPL_CPL1_Unit_Delay9, "out"),
    name="Connection685",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection686 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Unit_Delay10, "in"),
    end=_Load_CPL_CPL1_Junction109,
    name="Connection686",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection697 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction95,
    end=mdl.term(_Load_CPL_CPL1_Product21, "in1"),
    name="Connection697",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection701 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch27, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product22, "in1"),
    name="Connection701",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection704 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product21, "in"),
    end=_Load_CPL_CPL1_Junction112,
    name="Connection704",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection705 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction112,
    end=mdl.term(_Load_CPL_CPL1_Limit12, "out"),
    name="Connection705",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection706 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product22, "in"),
    end=_Load_CPL_CPL1_Junction112,
    name="Connection706",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection710 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product23, "in"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch26, "out"),
    name="Connection710",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection711 = mdl.create_connection(
    start=_Load_CPL_CPL1_From6,
    end=mdl.term(_Load_CPL_CPL1_Product23, "in1"),
    name="Connection711",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection713 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant24, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch30, "in"),
    name="Connection713",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection714 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant25, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch30, "in1"),
    name="Connection714",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection881 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Single_phase_PLL1, "f"),
    end=_Load_CPL_CPL1_Goto1,
    name="Connection881",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection718 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch30, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product24, "in"),
    name="Connection718",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection719 = mdl.create_connection(
    start=_Load_CPL_CPL1_From7,
    end=mdl.term(_Load_CPL_CPL1_Product24, "in1"),
    name="Connection719",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection882 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Single_phase_PLL1, "d"),
    end=mdl.term(_Load_CPL_CPL1_Termination70, "in"),
    name="Connection882",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection883 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Single_phase_PLL1, "q"),
    end=mdl.term(_Load_CPL_CPL1_Termination71, "in"),
    name="Connection883",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection721 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product20, "in1"),
    end=_Load_CPL_CPL1_Junction95,
    name="Connection721",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection884 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Single_phase_PLL1, "sin(wt)"),
    end=mdl.term(_Load_CPL_CPL1_Termination72, "in"),
    name="Connection884",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection724 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch28, "in"),
    end=mdl.term(_Load_CPL_CPL1_C_function1, "out"),
    name="Connection724",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection869 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain20, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum9, "in4"),
    name="Connection869",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection875 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant17, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch27, "in"),
    name="Connection875",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection876 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant18, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch27, "in1"),
    name="Connection876",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection878 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant14, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch26, "in"),
    name="Connection878",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection879 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant15, "out"),
    end=mdl.term(_Load_CPL_CPL1_Signal_switch26, "in1"),
    name="Connection879",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection767 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product3, "in"),
    end=mdl.term(_Load_CPL_CPL1_Product25, "out"),
    name="Connection767",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection771 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant26, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum16, "in1"),
    name="Connection771",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection772 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sum16, "out"),
    end=mdl.term(_Load_CPL_CPL1_Trigonometric_function2, "in"),
    name="Connection772",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection773 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Trigonometric_function1, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product25, "in1"),
    name="Connection773",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection837 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant28, "out"),
    end=mdl.term(_Load_CPL_CPL1_C_function1, "Ts_fast"),
    name="Connection837",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection838 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_R1, "p_node"),
    end=_Load_CPL_CPL1_Junction130,
    name="Connection838",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection839 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction130,
    end=_Load_CPL_CPL1_Junction97,
    name="Connection839",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection842 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction131,
    end=_Load_CPL_CPL1_Junction2,
    name="Connection842",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection843 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_R1, "n_node"),
    end=_Load_CPL_CPL1_Junction131,
    name="Connection843",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection786 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product25, "in"),
    end=_Load_CPL_CPL1_Junction121,
    name="Connection786",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection847 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Discrete_Transfer_Function4, "out"),
    end=_Load_CPL_CPL1_Junction133,
    name="Connection847",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection787 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction121,
    end=mdl.term(_Load_CPL_CPL1_Gain25, "out"),
    name="Connection787",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection849 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product17, "in"),
    end=_Load_CPL_CPL1_Junction133,
    name="Connection849",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection793 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Trigonometric_function2, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product26, "in"),
    name="Connection793",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection860 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product19, "in1"),
    end=_Load_CPL_CPL1_Junction133,
    name="Connection860",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection800 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Constant27, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum17, "in1"),
    name="Connection800",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection866 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction1,
    end=mdl.term(_Load_CPL_CPL1_Product2, "in"),
    name="Connection866",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection808 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Sum17, "out"),
    end=mdl.term(_Load_CPL_CPL1_Trigonometric_function3, "in"),
    name="Connection808",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection809 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Trigonometric_function3, "out"),
    end=mdl.term(_Load_CPL_CPL1_Product27, "in"),
    name="Connection809",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection813 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product26, "in1"),
    end=_Load_CPL_CPL1_Junction127,
    name="Connection813",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection814 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction127,
    end=_Load_CPL_CPL1_Junction121,
    name="Connection814",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection815 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product27, "in1"),
    end=_Load_CPL_CPL1_Junction127,
    name="Connection815",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection818 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product19, "in"),
    end=mdl.term(_Load_CPL_CPL1_Product26, "out"),
    name="Connection818",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection823 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Trigonometric_function1, "in"),
    end=_Load_CPL_CPL1_Junction129,
    name="Connection823",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection825 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Single_phase_PLL1, "wt"),
    end=_Load_CPL_CPL1_Junction129,
    name="Connection825",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection889 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product22, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum9, "in3"),
    name="Connection889",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection890 = mdl.create_connection(
    start=_Load_CPL_CPL1_From4,
    end=mdl.term(_Load_CPL_CPL1_Sum9, "in2"),
    name="Connection890",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection891 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Signal_switch25, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum9, "in1"),
    name="Connection891",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection892 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Product24, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum9, "in"),
    name="Connection892",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection894 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Gain26, "out"),
    end=mdl.term(_Load_CPL_CPL1_Sum8, "in3"),
    name="Connection894",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection896 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_C1, "n_node"),
    end=_Load_CPL_CPL1_Junction137,
    name="Connection896",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection897 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction137,
    end=_Load_CPL_CPL1_Junction131,
    name="Connection897",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection900 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_C1, "p_node"),
    end=_Load_CPL_CPL1_Junction138,
    name="Connection900",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection901 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction138,
    end=_Load_CPL_CPL1_Junction130,
    name="Connection901",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection903 = mdl.create_connection(
    start=_Load_CPL_CPL1_P2,
    end=_Load_CPL_CPL1_Junction2,
    name="Connection903",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection904 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1_Varms, "n_node"),
    end=_Load_CPL_CPL1_Junction139,
    name="Connection904",
    breakpoints=[],
)
_Load_CPL_CPL1_Connection905 = mdl.create_connection(
    start=_Load_CPL_CPL1_Junction139,
    end=_Load_CPL_CPL1_Junction137,
    name="Connection905",
    breakpoints=[],
)
_Load_CPL_Connection341 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Constant1, "out"),
    end=_Load_CPL_Goto3,
    name="Connection341",
    breakpoints=[],
)
_Load_CPL_Connection342 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Constant11, "out"),
    end=_Load_CPL_Goto4,
    name="Connection342",
    breakpoints=[],
)
_Load_CPL_Connection370 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Gain1, "out"),
    end=mdl.term(_Load_CPL_Rate_Transition1, "in"),
    name="Connection370",
    breakpoints=[],
)
_Load_CPL_Connection746 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Gain2, "out"),
    end=mdl.term(_Load_CPL_Rate_Transition2, "in"),
    name="Connection746",
    breakpoints=[],
)
_Load_CPL_Connection945 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Rate_Transition1, "out"),
    end=mdl.term(_Load_CPL_Rate_Limiter1, "in"),
    name="Connection945",
    breakpoints=[],
)
_Load_CPL_Connection1081 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Constant14, "out"),
    end=mdl.term(_Load_CPL_Product23, "in1"),
    name="Connection1081",
    breakpoints=[],
)
_Load_CPL_Connection1086 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Product23, "out"),
    end=mdl.term(_Load_CPL_Sum10, "in1"),
    name="Connection1086",
    breakpoints=[],
)
_Load_CPL_Connection1088 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Rate_Limiter1, "out"),
    end=_Load_CPL_Junction7,
    name="Connection1088",
    breakpoints=[],
)
_Load_CPL_Connection1089 = mdl.create_connection(
    start=_Load_CPL_Junction7,
    end=mdl.term(_Load_CPL_Product23, "in"),
    name="Connection1089",
    breakpoints=[],
)
_Load_CPL_Connection1090 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Sum10, "in"),
    end=_Load_CPL_Junction7,
    name="Connection1090",
    breakpoints=[],
)
_Load_CPL_Connection1091 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Sum10, "out"),
    end=_Load_CPL_Goto1,
    name="Connection1091",
    breakpoints=[],
)
_Load_CPL_Connection1092 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Rate_Transition2, "out"),
    end=mdl.term(_Load_CPL_Rate_Limiter2, "in"),
    name="Connection1092",
    breakpoints=[],
)
_Load_CPL_Connection1097 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Sign3, "out"),
    end=mdl.term(_Load_CPL_Signal_switch27, "in2"),
    name="Connection1097",
    breakpoints=[],
)
_Load_CPL_Connection1101 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Signal_switch27, "out"),
    end=mdl.term(_Load_CPL_Product24, "in1"),
    name="Connection1101",
    breakpoints=[],
)
_Load_CPL_Connection1102 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Product24, "out"),
    end=mdl.term(_Load_CPL_Sum14, "in1"),
    name="Connection1102",
    breakpoints=[],
)
_Load_CPL_Connection1106 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Constant17, "out"),
    end=mdl.term(_Load_CPL_Signal_switch27, "in"),
    name="Connection1106",
    breakpoints=[],
)
_Load_CPL_Connection1107 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Constant18, "out"),
    end=mdl.term(_Load_CPL_Signal_switch27, "in1"),
    name="Connection1107",
    breakpoints=[],
)
_Load_CPL_Connection1108 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Rate_Limiter2, "out"),
    end=_Load_CPL_Junction8,
    name="Connection1108",
    breakpoints=[],
)
_Load_CPL_Connection1110 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Sign3, "in"),
    end=_Load_CPL_Junction8,
    name="Connection1110",
    breakpoints=[],
)
_Load_CPL_Connection1114 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Sum14, "in"),
    end=_Load_CPL_Junction10,
    name="Connection1114",
    breakpoints=[],
)
_Load_CPL_Connection1116 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Product24, "in"),
    end=_Load_CPL_Junction10,
    name="Connection1116",
    breakpoints=[],
)
_Load_CPL_Connection1117 = mdl.create_connection(
    start=_Load_CPL_Junction10,
    end=_Load_CPL_Junction8,
    name="Connection1117",
    breakpoints=[],
)
_Load_CPL_Connection1118 = mdl.create_connection(
    start=mdl.term(_Load_CPL_Sum14, "out"),
    end=_Load_CPL_Goto2,
    name="Connection1118",
    breakpoints=[],
)
_Load_CPL_Connection1119 = mdl.create_connection(
    start=_Load_CPL_A1,
    end=mdl.term(_Load_CPL_CPL1, "P3"),
    name="Connection1119",
    breakpoints=[],
)
_Load_CPL_Connection1151 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1, "P2"),
    end=_Load_CPL_Junction11,
    name="Connection1151",
    breakpoints=[],
)
_Load_CPL_Connection1152 = mdl.create_connection(
    start=_Load_CPL_Junction11,
    end=_Load_CPL_N,
    name="Connection1152",
    breakpoints=[],
)
_Load_CPL_Connection1155 = mdl.create_connection(
    start=_Load_CPL_Junction12,
    end=_Load_CPL_Junction11,
    name="Connection1155",
    breakpoints=[],
)
_Load_CPL_Connection1159 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1, "P"),
    end=_Load_CPL_Junction13,
    name="Connection1159",
    breakpoints=[],
)
_Load_CPL_Connection1162 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL1, "Q"),
    end=_Load_CPL_Junction14,
    name="Connection1162",
    breakpoints=[],
)
_Load_CPL_Connection1165 = mdl.create_connection(
    start=_Load_CPL_Junction13,
    end=_Load_CPL_Junction15,
    name="Connection1165",
    breakpoints=[],
)
_Load_CPL_Connection1166 = mdl.create_connection(
    start=_Load_CPL_Junction15,
    end=_Load_CPL_From3,
    name="Connection1166",
    breakpoints=[],
)
_Load_CPL_Connection1168 = mdl.create_connection(
    start=_Load_CPL_Junction14,
    end=_Load_CPL_Junction16,
    name="Connection1168",
    breakpoints=[],
)
_Load_CPL_Connection1169 = mdl.create_connection(
    start=_Load_CPL_Junction16,
    end=_Load_CPL_From4,
    name="Connection1169",
    breakpoints=[],
)
_Load_CPL_ConnB = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2, "P3"),
    end=_Load_CPL_B1,
    name="ConnB",
    breakpoints=[],
)
_Load_CPL_ConnC = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3, "P3"),
    end=_Load_CPL_C1,
    name="ConnC",
    breakpoints=[],
)
_Load_CPL_Connection1164 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2, "Q"),
    end=_Load_CPL_Junction14,
    name="Connection1164",
    breakpoints=[],
)
_Load_CPL_Connection1161 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2, "P"),
    end=_Load_CPL_Junction13,
    name="Connection1161",
    breakpoints=[],
)
_Load_CPL_Connection1170 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3, "Q"),
    end=_Load_CPL_Junction16,
    name="Connection1170",
    breakpoints=[],
)
_Load_CPL_Connection1167 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3, "P"),
    end=_Load_CPL_Junction15,
    name="Connection1167",
    breakpoints=[],
)
_Load_CPL_Connection1154 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL2, "P2"),
    end=_Load_CPL_Junction12,
    name="Connection1154",
    breakpoints=[],
)
_Load_CPL_Connection1156 = mdl.create_connection(
    start=mdl.term(_Load_CPL_CPL3, "P2"),
    end=_Load_CPL_Junction12,
    name="Connection1156",
    breakpoints=[],
)
_Load_CPL_connP = mdl.create_connection(
    start=mdl.term(_Load_CPL_Gain1, "in"),
    end=_Load_CPL_From1,
    name="connP",
    breakpoints=[],
)
_Load_CPL_connQ = mdl.create_connection(
    start=mdl.term(_Load_CPL_Gain2, "in"),
    end=_Load_CPL_From2,
    name="connQ",
    breakpoints=[],
)
_Load_CIL_Connection17 = mdl.create_connection(
    start=mdl.term(_Load_CIL_Ra, "p_node"),
    end=_Load_CIL_JA0,
    name="Connection17",
    breakpoints=[],
)
_Load_CIL_ConnAA0 = mdl.create_connection(
    start=_Load_CIL_JA0,
    end=_Load_CIL_A1,
    name="ConnAA0",
    breakpoints=[],
)
_Load_CIL_ConnBB0 = mdl.create_connection(
    start=_Load_CIL_JB0,
    end=_Load_CIL_B1,
    name="ConnBB0",
    breakpoints=[],
)
_Load_CIL_Conn19 = mdl.create_connection(
    start=mdl.term(_Load_CIL_Rb, "p_node"),
    end=_Load_CIL_JB0,
    name="Conn19",
    breakpoints=[],
)
_Load_CIL_ConnCC0 = mdl.create_connection(
    start=_Load_CIL_JC0,
    end=_Load_CIL_C1,
    name="ConnCC0",
    breakpoints=[],
)
_Load_CIL_Conn21 = mdl.create_connection(
    start=mdl.term(_Load_CIL_Rc, "p_node"),
    end=_Load_CIL_JC0,
    name="Conn21",
    breakpoints=[],
)
_Load_CIL_Conn_AN = mdl.create_connection(
    start=_Load_CIL_JA1,
    end=_Load_CIL_JN,
    name="Conn_AN",
    breakpoints=[],
)
_Load_CIL_Conn_BN = mdl.create_connection(
    start=_Load_CIL_JB1,
    end=_Load_CIL_JN,
    name="Conn_BN",
    breakpoints=[],
)
_Load_CIL_Conn_CN = mdl.create_connection(
    start=_Load_CIL_JC1,
    end=_Load_CIL_JN,
    name="Conn_CN",
    breakpoints=[],
)
_Load_CIL_Conn_A0 = mdl.create_connection(
    start=mdl.term(_Load_CIL_Ra, "n_node"),
    end=mdl.term(_Load_CIL_La, "p_node"),
    name="Conn_A0",
    breakpoints=[],
)
_Load_CIL_Conn_B0 = mdl.create_connection(
    start=mdl.term(_Load_CIL_Rb, "n_node"),
    end=mdl.term(_Load_CIL_Lb, "p_node"),
    name="Conn_B0",
    breakpoints=[],
)
_Load_CIL_Conn_C0 = mdl.create_connection(
    start=mdl.term(_Load_CIL_Rc, "n_node"),
    end=mdl.term(_Load_CIL_Lc, "p_node"),
    name="Conn_C0",
    breakpoints=[],
)
_Load_CIL_Conn_A = mdl.create_connection(
    start=mdl.term(_Load_CIL_La, "n_node"),
    end=_Load_CIL_JA1,
    name="Conn_A",
    breakpoints=[],
)
_Load_CIL_Conn_B = mdl.create_connection(
    start=mdl.term(_Load_CIL_Lb, "n_node"),
    end=_Load_CIL_JB1,
    name="Conn_B",
    breakpoints=[],
)
_Load_CIL_Conn_C = mdl.create_connection(
    start=mdl.term(_Load_CIL_Lc, "n_node"),
    end=_Load_CIL_JC1,
    name="Conn_C",
    breakpoints=[],
)
_Load_CIL_Conn_N = mdl.create_connection(
    start=_Load_CIL_JN,
    end=_Load_CIL_N,
    name="Conn_N",
    breakpoints=[],
)
_Load_TS_module_Connection26 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Signal_switch1, "out"),
    end=mdl.term(_Load_TS_module_Signal_switch2, "in"),
    name="Connection26",
    breakpoints=[],
)
_Load_TS_module_Connection31 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Constant5, "out"),
    end=_Load_TS_module_Junction3,
    name="Connection31",
    breakpoints=[],
)
_Load_TS_module_Connection32 = mdl.create_connection(
    start=_Load_TS_module_Junction3,
    end=mdl.term(_Load_TS_module_Signal_switch1, "in1"),
    name="Connection32",
    breakpoints=[],
)
_Load_TS_module_Connection33 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Signal_switch2, "in1"),
    end=_Load_TS_module_Junction3,
    name="Connection33",
    breakpoints=[],
)
_Load_TS_module_Connection38 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Constant7, "out"),
    end=mdl.term(_Load_TS_module_Signal_switch3, "in2"),
    name="Connection38",
    breakpoints=[],
)
_Load_TS_module_Connection40 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Integrator1, "out"),
    end=mdl.term(_Load_TS_module_Signal_switch3, "in"),
    name="Connection40",
    breakpoints=[],
)
_Load_TS_module_Connection41 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_1D_look_up_table2, "addr"),
    end=_Load_TS_module_Junction4,
    name="Connection41",
    breakpoints=[],
)
_Load_TS_module_Connection43 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Signal_switch3, "out"),
    end=_Load_TS_module_Junction4,
    name="Connection43",
    breakpoints=[],
)
_Load_TS_module_Connection44 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Gain1, "out"),
    end=mdl.term(_Load_TS_module_Signal_switch3, "in1"),
    name="Connection44",
    breakpoints=[],
)
_Load_TS_module_Connection45 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Integrator1, "in"),
    end=mdl.term(_Load_TS_module_Signal_switch2, "out"),
    name="Connection45",
    breakpoints=[],
)
_Load_TS_module_Connection49 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_1D_look_up_table1, "addr"),
    end=_Load_TS_module_Junction4,
    name="Connection49",
    breakpoints=[],
)
_Load_TS_module_Connection1 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Clock1, "out"),
    end=mdl.term(_Load_TS_module_Comparator1, "in1"),
    name="Connection1",
    breakpoints=[],
)
_Load_TS_module_Connection2 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Constant1, "out"),
    end=mdl.term(_Load_TS_module_Comparator1, "in2"),
    name="Connection2",
    breakpoints=[],
)
_Load_TS_module_Connection530 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_d_rel, "in"),
    end=mdl.term(_Load_TS_module_Comparator1, "out"),
    name="Connection530",
    breakpoints=[],
)
_Load_TS_module_Connection3 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Signal_switch1, "in2"),
    end=mdl.term(_Load_TS_module_Comparator1, "out"),
    name="Connection3",
    breakpoints=[],
)
_Load_TS_module_Connection5 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Constant3, "out"),
    end=mdl.term(_Load_TS_module_Signal_switch1, "in"),
    name="Connection5",
    breakpoints=[],
)
_Load_TS_module_Connection7 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Constant4, "out"),
    end=mdl.term(_Load_TS_module_Comparator2, "in2"),
    name="Connection7",
    breakpoints=[],
)
_Load_TS_module_Connection8 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Comparator2, "out"),
    end=mdl.term(_Load_TS_module_Integrator1, "reset"),
    name="Connection8",
    breakpoints=[],
)
_Load_TS_module_Connection9 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Comparator2, "in1"),
    end=mdl.term(_Load_TS_module_Integrator1, "state_port"),
    name="Connection9",
    breakpoints=[(7208, 8232), (7392, 8232)],
)
_Load_TS_module_Connection10 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_1D_look_up_table1, "value"),
    end=_Load_TS_module_P,
    name="Connection10",
    breakpoints=[],
)
_Load_TS_module_Connection12 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_1D_look_up_table2, "value"),
    end=_Load_TS_module_Q,
    name="Connection12",
    breakpoints=[],
)
_Load_TS_module_Connection21 = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Constant6, "out"),
    end=mdl.term(_Load_TS_module_Signal_switch2, "in2"),
    name="Connection21",
    breakpoints=[],
)
_Load_TS_module_connT = mdl.create_connection(
    start=mdl.term(_Load_TS_module_Gain1, "in"),
    end=_Load_TS_module_T,
    name="connT",
    breakpoints=[],
)
_Load_T_switch_Connection15 = mdl.create_connection(
    start=_Load_T_switch_Junction3,
    end=_Load_T_switch_T_out,
    name="Connection15",
    breakpoints=[],
)
_Load_T_switch_Connection1 = mdl.create_connection(
    start=_Load_T_switch_mode,
    end=mdl.term(_Load_T_switch_Signal_switch1, "in2"),
    name="Connection1",
    breakpoints=[],
)
_Load_T_switch_Connection5 = mdl.create_connection(
    start=_Load_T_switch_T,
    end=_Load_T_switch_Junction1,
    name="Connection5",
    breakpoints=[],
)
_Load_T_switch_Connection6 = mdl.create_connection(
    start=_Load_T_switch_Junction1,
    end=mdl.term(_Load_T_switch_Signal_switch1, "in"),
    name="Connection6",
    breakpoints=[],
)
_Load_T_switch_Connection7 = mdl.create_connection(
    start=mdl.term(_Load_T_switch_Round1, "in"),
    end=_Load_T_switch_Junction1,
    name="Connection7",
    breakpoints=[],
)
_Load_T_switch_Connection8 = mdl.create_connection(
    start=mdl.term(_Load_T_switch_Round1, "out"),
    end=mdl.term(_Load_T_switch_Signal_switch1, "in1"),
    name="Connection8",
    breakpoints=[],
)
_Load_T_switch_Connection11 = mdl.create_connection(
    start=mdl.term(_Load_T_switch_Signal_switch1, "out"),
    end=_Load_T_switch_Junction2,
    name="Connection11",
    breakpoints=[],
)
_Load_T_switch_Connection12 = mdl.create_connection(
    start=_Load_T_switch_Junction2,
    end=mdl.term(_Load_T_switch_Limit1, "in"),
    name="Connection12",
    breakpoints=[],
)
_Load_T_switch_Connection14 = mdl.create_connection(
    start=mdl.term(_Load_T_switch_Limit1, "out"),
    end=_Load_T_switch_Junction3,
    name="Connection14",
    breakpoints=[],
)
_Load_ConnA1P = mdl.create_connection(
    start=_Load_A1,
    end=_Load_TagA1,
    name="ConnA1P",
    breakpoints=[],
)
_Load_ConnB1P = mdl.create_connection(
    start=_Load_B1,
    end=_Load_TagB1,
    name="ConnB1P",
    breakpoints=[],
)
_Load_ConnC1P = mdl.create_connection(
    start=_Load_C1,
    end=_Load_TagC1,
    name="ConnC1P",
    breakpoints=[],
)
_Load_Connection3 = mdl.create_connection(
    start=mdl.term(_Load_Constant1, "out"),
    end=mdl.term(_Load_T_switch, "mode"),
    name="Connection3",
    breakpoints=[],
)
_Load_Connection4 = mdl.create_connection(
    start=mdl.term(_Load_T_switch, "T_out"),
    end=mdl.term(_Load_TS_module, "T"),
    name="Connection4",
    breakpoints=[],
)
_Load_ConnA1CIL = mdl.create_connection(
    start=mdl.term(_Load_CIL, "A1"),
    end=_Load_TagA2,
    name="ConnA1CIL",
    breakpoints=[],
)
_Load_ConnB1CIL = mdl.create_connection(
    start=mdl.term(_Load_CIL, "B1"),
    end=_Load_TagB2,
    name="ConnB1CIL",
    breakpoints=[],
)
_Load_ConnC1CIL = mdl.create_connection(
    start=mdl.term(_Load_CIL, "C1"),
    end=_Load_TagC2,
    name="ConnC1CIL",
    breakpoints=[],
)
_Load_Conn_N0 = mdl.create_connection(
    start=_Load_JN,
    end=_Load_N1,
    name="Conn_N0",
    breakpoints=[],
)
_Load_Conn_AN = mdl.create_connection(
    start=mdl.term(_Load_CIL, "N"),
    end=_Load_JN,
    name="Conn_AN",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection271 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1, "In1"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_In1,
    name="Connection271",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection272 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Out2,
    name="Connection272",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection260 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Unit_Delay1, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "in1"),
    name="Connection260",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection264 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1, "Out1"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "in2"),
    name="Connection264",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection265 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30,
    name="Connection265",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection266 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Unit_Delay1, "in"),
    name="Connection266",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection267 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "in"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30,
    name="Connection267",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection268 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Clock1, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2,
    name="Connection268",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection269 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "in"),
    name="Connection269",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection270 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "in1"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2,
    name="Connection270",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection367 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Isec_A, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Goto6,
    name="Connection367",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection443 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Sign1, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_ABcomp, "in"),
    name="Connection443",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection444 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_ABcomp, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product2, "in"),
    name="Connection444",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection453 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_P1,
    end=_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag1,
    name="Connection453",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection457 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction53,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction10,
    name="Connection457",
    breakpoints=[(8256, 8784), (8256, 8784), (8256, 8784)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection459 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Lr_A, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_ET21a,
    name="Connection459",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection460 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag7,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_ILrms_A, "p_node"),
    name="Connection460",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection466 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_ET22a,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction55,
    name="Connection466",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection471 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product2, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Tap_Position, "in"),
    name="Connection471",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection494 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction11,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction60,
    name="Connection494",
    breakpoints=[(8256, 8656), (8256, 8656)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection496 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Vprim_A, "p_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction60,
    name="Connection496",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection498 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction61,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction53,
    name="Connection498",
    breakpoints=[(8368, 8784), (8368, 8784), (8368, 8784)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection499 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Vprim_A, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction61,
    name="Connection499",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection500 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_FromVLDC,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Gain4, "in"),
    name="Connection500",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection501 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Gain4, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum, "in"),
    name="Connection501",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection512 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Vsec_ins_A, "p_node"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rr_A, "p_node"),
    name="Connection512",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection524 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction63,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Vsec_ins_A, "n_node"),
    name="Connection524",
    breakpoints=[(8632, 8656), (8632, 8656)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection525 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Isp_A, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction63,
    name="Connection525",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection529 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Goto11,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Vprim_A, "out"),
    name="Connection529",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection526 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_From11,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product10, "in1"),
    name="Connection526",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection531 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_From1,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction64,
    name="Connection531",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection532 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction64,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product11, "in"),
    name="Connection532",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection533 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product10, "in"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction64,
    name="Connection533",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection534 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_From12,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product11, "in1"),
    name="Connection534",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection535 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Isp_A, "p_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction55,
    name="Connection535",
    breakpoints=[(8632, 8784)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection536 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_From13,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Isp_A, "in"),
    name="Connection536",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection539 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_From14,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Vsec_ins_A, "in"),
    name="Connection539",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection540 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product11, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Goto12,
    name="Connection540",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection541 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Goto13,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product10, "out"),
    name="Connection541",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection544 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_var_per_tap, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction65,
    name="Connection544",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection545 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction65,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product1, "in1"),
    name="Connection545",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection546 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_per_tap, "in"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction65,
    name="Connection546",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection551 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_pu_applied, "in"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum1, "out"),
    name="Connection551",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection552 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage3, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum1, "in"),
    name="Connection552",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection553 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product1, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction66,
    name="Connection553",
    breakpoints=[(9112, 8264)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection554 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction66,
    end=_Single_Phase_Transformer_Vreg_Auto1_Goto2,
    name="Connection554",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection555 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum1, "in1"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction66,
    name="Connection555",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection144 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Lr_A, "p_node"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rr_A, "n_node"),
    name="Connection144",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection561 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage4, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum2, "in"),
    name="Connection561",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection148 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rm_A, "p_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction8,
    name="Connection148",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection564 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Tap_Position, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction67,
    name="Connection564",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection150 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Lm_A, "p_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction8,
    name="Connection150",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection565 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction67,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Edge_Detection3, "In1"),
    name="Connection565",
    breakpoints=[(8896, 8256)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection154 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rm_A, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction10,
    name="Connection154",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection566 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product1, "in"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction68,
    name="Connection566",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection156 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Lm_A, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction10,
    name="Connection156",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection157 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction8,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction11,
    name="Connection157",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection567 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction68,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum2, "in1"),
    name="Connection567",
    breakpoints=[(8984, 8256)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection172 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rl_A, "n_node"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Ll_A, "p_node"),
    name="Connection172",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection568 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction67,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction68,
    name="Connection568",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection173 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Ll_A, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction11,
    name="Connection173",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection431 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Abs1, "in"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction42,
    name="Connection431",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection432 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction42,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum, "out"),
    name="Connection432",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection569 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_tap, "in"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum2, "out"),
    name="Connection569",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection433 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Sign1, "in"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction42,
    name="Connection433",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection725 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Gain1, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator1, "in1"),
    name="Connection725",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection434 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator2, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction43,
    name="Connection434",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection427 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction43,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator1, "in"),
    name="Connection427",
    breakpoints=[(8512, 8280)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection777 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator1, "in1"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator2, "out"),
    name="Connection777",
    breakpoints=[(8632, 8368), (8632, 8368), (8632, 8368), (8592, 8368)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection435 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time, "In1"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction43,
    name="Connection435",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection782 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_diff, "in"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction101,
    name="Connection782",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection436 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Elapsed_Time, "Out2"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator2, "in"),
    name="Connection436",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection783 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction101,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator1, "in"),
    name="Connection783",
    breakpoints=[(8152, 8248)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection250 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage1, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Gain1, "in"),
    name="Connection250",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection784 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Abs1, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction101,
    name="Connection784",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection252 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VSum, "in1"),
    name="Connection252",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection272 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_regulator_voltage2, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator2, "in1"),
    name="Connection272",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection280 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Edge_Detection3, "Out1"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator3, "in"),
    name="Connection280",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection281 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator3, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator2, "in1"),
    name="Connection281",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection295 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator1, "out"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Product2, "in1"),
    name="Connection295",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection785 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Logical_operator2, "in"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Relational_operator1, "out"),
    name="Connection785",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection301 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VLoad_A, "out"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Goto3,
    name="Connection301",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection786 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_JL2,
    end=_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag8,
    name="Connection786",
    breakpoints=[(9456, 8784), (9352, 8784), (9352, 8784)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection304 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VLoad_A, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_JL2,
    name="Connection304",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection307 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_VLoad_A, "p_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_JL1,
    name="Connection307",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection787 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_JL1,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Isec_A, "n_node"),
    name="Connection787",
    breakpoints=[(9456, 8656), (9352, 8656), (9352, 8656)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection339 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_ILrms_A, "n_node"),
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Isec_A, "p_node"),
    name="Connection339",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection793 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Electric_Tag2,
    end=_Single_Phase_Transformer_Vreg_Auto1_P2,
    name="Connection793",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection797 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_S2,
    end=_Single_Phase_Transformer_Vreg_Auto1_JL2,
    name="Connection797",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection825 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_ET11a,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction108,
    name="Connection825",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection826 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction108,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rl_A, "p_node"),
    name="Connection826",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection827 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rina, "p_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction108,
    name="Connection827",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection828 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_ET12a,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction109,
    name="Connection828",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection829 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction109,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction53,
    name="Connection829",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection830 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rina, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction109,
    name="Connection830",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection837 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction60,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction112,
    name="Connection837",
    breakpoints=[(8424, 8656)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection838 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction112,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction63,
    name="Connection838",
    breakpoints=[(8520, 8656), (8520, 8656)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection839 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rmida, "p_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction112,
    name="Connection839",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection840 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction55,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction113,
    name="Connection840",
    breakpoints=[(8568, 8784)],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection841 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_Junction113,
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction61,
    name="Connection841",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection842 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1_Rmida, "n_node"),
    end=_Single_Phase_Transformer_Vreg_Auto1_Junction113,
    name="Connection842",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Auto1_Connection856 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_Auto1_JL1,
    end=_Single_Phase_Transformer_Vreg_Auto1_S1,
    name="Connection856",
    breakpoints=[(9456, 8656), (9528, 8656)],
)
_Single_Phase_Transformer_Vreg_Connection172 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1, "S1"),
    end=_Single_Phase_Transformer_Vreg_RegA2,
    name="Connection172",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Connection173 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_Vreg_Auto1, "S2"),
    end=_Single_Phase_Transformer_Vreg_RegB2,
    name="Connection173",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Connection174 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_RegA1,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1, "P1"),
    name="Connection174",
    breakpoints=[],
)
_Single_Phase_Transformer_Vreg_Connection175 = mdl.create_connection(
    start=_Single_Phase_Transformer_Vreg_RegB1,
    end=mdl.term(_Single_Phase_Transformer_Vreg_Auto1, "P2"),
    name="Connection175",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection58 = mdl.create_connection(
    start=_Single_Phase_Transformer_TagRegA1,
    end=mdl.term(_Single_Phase_Transformer_Vreg, "RegA1"),
    name="Connection58",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection60 = mdl.create_connection(
    start=_Single_Phase_Transformer_TagRegB1,
    end=mdl.term(_Single_Phase_Transformer_Vreg, "RegB1"),
    name="Connection60",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection61 = mdl.create_connection(
    start=_Single_Phase_Transformer_TagRegA2,
    end=mdl.term(_Single_Phase_Transformer_Vreg, "RegA2"),
    name="Connection61",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection63 = mdl.create_connection(
    start=_Single_Phase_Transformer_TagRegB2,
    end=mdl.term(_Single_Phase_Transformer_Vreg, "RegB2"),
    name="Connection63",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection91 = mdl.create_connection(
    start=_Single_Phase_Transformer_A1,
    end=_Single_Phase_Transformer_TagA1,
    name="Connection91",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection92 = mdl.create_connection(
    start=_Single_Phase_Transformer_TagB1,
    end=_Single_Phase_Transformer_B1,
    name="Connection92",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection93 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_T1, "prm_1"),
    end=_Single_Phase_Transformer_TagTA1,
    name="Connection93",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection94 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_T1, "prm_2"),
    end=_Single_Phase_Transformer_TagTB1,
    name="Connection94",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection95 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_T1, "sec_1"),
    end=_Single_Phase_Transformer_TagTA2,
    name="Connection95",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection96 = mdl.create_connection(
    start=mdl.term(_Single_Phase_Transformer_T1, "sec_2"),
    end=_Single_Phase_Transformer_TagTB2,
    name="Connection96",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection97 = mdl.create_connection(
    start=_Single_Phase_Transformer_TagA2,
    end=_Single_Phase_Transformer_A2,
    name="Connection97",
    breakpoints=[],
)
_Single_Phase_Transformer_Connection98 = mdl.create_connection(
    start=_Single_Phase_Transformer_TagB2,
    end=_Single_Phase_Transformer_B2,
    name="Connection98",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection271 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1, "In1"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_In1,
    name="Connection271",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection272 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Out2,
    name="Connection272",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection260 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Unit_Delay1, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "in1"),
    name="Connection260",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection264 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Edge_Detection1, "Out1"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "in2"),
    name="Connection264",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection265 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30,
    name="Connection265",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection266 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Unit_Delay1, "in"),
    name="Connection266",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection267 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Junction30,
    name="Connection267",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection268 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Clock1, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2,
    name="Connection268",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection269 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Signal_switch1, "in"),
    name="Connection269",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Connection270 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_Sum2, "in1"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time_JL2,
    name="Connection270",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection539 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From14,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_A, "in"),
    name="Connection539",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection540 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product11, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto12,
    name="Connection540",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection541 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Goto13,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product10, "out"),
    name="Connection541",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection544 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_var_per_tap, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction65,
    name="Connection544",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection545 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction65,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product1, "in1"),
    name="Connection545",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection546 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_per_tap, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction65,
    name="Connection546",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection551 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_pu_applied, "in"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum1, "out"),
    name="Connection551",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection552 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage3, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum1, "in"),
    name="Connection552",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection553 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product1, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction66,
    name="Connection553",
    breakpoints=[(9112, 8264)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection554 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction66,
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto2,
    name="Connection554",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection555 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum1, "in1"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction66,
    name="Connection555",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection561 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage4, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum2, "in"),
    name="Connection561",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection564 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Tap_Position, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction67,
    name="Connection564",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection565 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction67,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Edge_Detection3, "In1"),
    name="Connection565",
    breakpoints=[(8896, 8256)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection566 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product1, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction68,
    name="Connection566",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection567 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction68,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum2, "in1"),
    name="Connection567",
    breakpoints=[(8984, 8256)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection568 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction67,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction68,
    name="Connection568",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection569 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_tap, "in"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum2, "out"),
    name="Connection569",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection570 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lr_B, "p_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rr_B, "n_node"),
    name="Connection570",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection571 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rm_B, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction69,
    name="Connection571",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection572 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lm_B, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction69,
    name="Connection572",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection573 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rm_B, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction70,
    name="Connection573",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection574 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lm_B, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction70,
    name="Connection574",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection575 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction69,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction71,
    name="Connection575",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection576 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rl_B, "n_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Ll_B, "p_node"),
    name="Connection576",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection577 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Ll_B, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction71,
    name="Connection577",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection582 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_B, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_JL4,
    name="Connection582",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection583 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ILrms_B, "n_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_B, "p_node"),
    name="Connection583",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection585 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_B, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto16,
    name="Connection585",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection590 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_P3,
    end=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag9,
    name="Connection590",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection592 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction73,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction70,
    name="Connection592",
    breakpoints=[(8272, 9264), (8272, 9264), (8272, 9264)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection593 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lr_B, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_ET21b,
    name="Connection593",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection594 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag11,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ILrms_B, "p_node"),
    name="Connection594",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection598 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_ET22b,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction75,
    name="Connection598",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection605 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction71,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction78,
    name="Connection605",
    breakpoints=[(8272, 9136), (8272, 9136)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection606 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_B, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction78,
    name="Connection606",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection608 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction79,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction73,
    name="Connection608",
    breakpoints=[(8384, 9264), (8384, 9264), (8384, 9264)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection609 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_B, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction79,
    name="Connection609",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection610 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_B, "p_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rr_B, "p_node"),
    name="Connection610",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection612 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction80,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_B, "n_node"),
    name="Connection612",
    breakpoints=[(8640, 9136), (8640, 9136)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection613 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_B, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction80,
    name="Connection613",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection614 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Goto18,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_B, "out"),
    name="Connection614",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection615 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_B, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction75,
    name="Connection615",
    breakpoints=[(8640, 9264)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection616 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From15,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_B, "in"),
    name="Connection616",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection617 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From16,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_B, "in"),
    name="Connection617",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection618 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lr_C, "p_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rr_C, "n_node"),
    name="Connection618",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection619 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rm_C, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction81,
    name="Connection619",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection620 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lm_C, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction81,
    name="Connection620",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection621 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rm_C, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction82,
    name="Connection621",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection622 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lm_C, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction82,
    name="Connection622",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection623 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction81,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction83,
    name="Connection623",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection624 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rl_C, "n_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Ll_C, "p_node"),
    name="Connection624",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection625 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Ll_C, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction83,
    name="Connection625",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection629 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_S5,
    end=_Three_Phase_Transformer_Vreg_Auto1_JL6,
    name="Connection629",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection630 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_C, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_JL6,
    name="Connection630",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection631 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ILrms_C, "n_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_C, "p_node"),
    name="Connection631",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection633 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_C, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto21,
    name="Connection633",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection638 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_P5,
    end=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag13,
    name="Connection638",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection640 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction85,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction82,
    name="Connection640",
    breakpoints=[(8280, 9688), (8280, 9688), (8280, 9688)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection641 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lr_C, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_ET21c,
    name="Connection641",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection642 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag15,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ILrms_C, "p_node"),
    name="Connection642",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection646 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_ET22c,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction87,
    name="Connection646",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection653 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction83,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction90,
    name="Connection653",
    breakpoints=[(8280, 9560), (8280, 9560)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection654 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_C, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction90,
    name="Connection654",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection656 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction91,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction85,
    name="Connection656",
    breakpoints=[(8392, 9688), (8392, 9688), (8392, 9688)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection657 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_C, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction91,
    name="Connection657",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection658 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_C, "p_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rr_C, "p_node"),
    name="Connection658",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection660 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction92,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_C, "n_node"),
    name="Connection660",
    breakpoints=[(8648, 9560), (8648, 9560)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection661 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_C, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction92,
    name="Connection661",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection662 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Goto23,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_C, "out"),
    name="Connection662",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection663 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_C, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction87,
    name="Connection663",
    breakpoints=[(8648, 9688)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection664 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From17,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_C, "in"),
    name="Connection664",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection665 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From18,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_C, "in"),
    name="Connection665",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection666 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From20,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product13, "in1"),
    name="Connection666",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection667 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From19,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction93,
    name="Connection667",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection668 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction93,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product12, "in"),
    name="Connection668",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection669 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product13, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction93,
    name="Connection669",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection670 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From21,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product12, "in1"),
    name="Connection670",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection671 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product12, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto24,
    name="Connection671",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection672 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Goto25,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product13, "out"),
    name="Connection672",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection673 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From23,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product15, "in1"),
    name="Connection673",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection674 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From22,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction94,
    name="Connection674",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection675 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction94,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product14, "in"),
    name="Connection675",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection676 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product15, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction94,
    name="Connection676",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection677 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From24,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product14, "in1"),
    name="Connection677",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection678 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product14, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto26,
    name="Connection678",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection679 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Goto27,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product15, "out"),
    name="Connection679",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection725 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Gain1, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator1, "in1"),
    name="Connection725",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection777 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator1, "in1"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator2, "out"),
    name="Connection777",
    breakpoints=[(8632, 8368), (8632, 8368), (8632, 8368), (8592, 8368)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection782 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_diff, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction101,
    name="Connection782",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection783 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction101,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator1, "in"),
    name="Connection783",
    breakpoints=[(8152, 8248)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection784 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Abs1, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction101,
    name="Connection784",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection785 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator2, "in"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator1, "out"),
    name="Connection785",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection786 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_JL2,
    end=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag8,
    name="Connection786",
    breakpoints=[(9456, 8784), (9352, 8784), (9352, 8784)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection787 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_JL1,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_A, "n_node"),
    name="Connection787",
    breakpoints=[(9456, 8656), (9352, 8656), (9352, 8656)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection789 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_JL4,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_B, "n_node"),
    name="Connection789",
    breakpoints=[(9464, 9136), (9360, 9136), (9360, 9136)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection791 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_C, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_JL6,
    name="Connection791",
    breakpoints=[(9368, 9560), (9368, 9560)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection793 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag2,
    end=_Three_Phase_Transformer_Vreg_Auto1_P2,
    name="Connection793",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection797 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_S2,
    end=_Three_Phase_Transformer_Vreg_Auto1_JL2,
    name="Connection797",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection798 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_P6,
    end=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag10,
    name="Connection798",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection799 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_P7,
    end=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag14,
    name="Connection799",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection800 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_B, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction102,
    name="Connection800",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection801 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction102,
    end=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag12,
    name="Connection801",
    breakpoints=[(9464, 9264), (9464, 9264), (9360, 9264), (9360, 9264), (9072, 9264)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection802 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_S6,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction102,
    name="Connection802",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection144 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lr_A, "p_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rr_A, "n_node"),
    name="Connection144",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection148 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rm_A, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction8,
    name="Connection148",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection150 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lm_A, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction8,
    name="Connection150",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection154 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rm_A, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction10,
    name="Connection154",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection156 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lm_A, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction10,
    name="Connection156",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection157 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction8,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction11,
    name="Connection157",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection172 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rl_A, "n_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Ll_A, "p_node"),
    name="Connection172",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection173 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Ll_A, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction11,
    name="Connection173",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection431 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Abs1, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction42,
    name="Connection431",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection432 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction42,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum, "out"),
    name="Connection432",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection433 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Sign1, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction42,
    name="Connection433",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection434 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator2, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction43,
    name="Connection434",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection427 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction43,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator1, "in"),
    name="Connection427",
    breakpoints=[(8512, 8280)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection435 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time, "In1"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction43,
    name="Connection435",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection436 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Elapsed_Time, "Out2"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator2, "in"),
    name="Connection436",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection250 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage1, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Gain1, "in"),
    name="Connection250",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection252 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum, "in1"),
    name="Connection252",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection272 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_regulator_voltage2, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Relational_operator2, "in1"),
    name="Connection272",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection280 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Edge_Detection3, "Out1"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator3, "in"),
    name="Connection280",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection281 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator3, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator2, "in1"),
    name="Connection281",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection295 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Logical_operator1, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product2, "in1"),
    name="Connection295",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection301 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_A, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto3,
    name="Connection301",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection304 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_A, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_JL2,
    name="Connection304",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection307 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_A, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_JL1,
    name="Connection307",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection339 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ILrms_A, "n_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_A, "p_node"),
    name="Connection339",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection367 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isec_A, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto6,
    name="Connection367",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection443 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Sign1, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ABcomp, "in"),
    name="Connection443",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection444 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ABcomp, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product2, "in"),
    name="Connection444",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection453 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_P1,
    end=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag1,
    name="Connection453",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection457 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction53,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction10,
    name="Connection457",
    breakpoints=[(8256, 8784), (8256, 8784), (8256, 8784)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection459 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Lr_A, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_ET21a,
    name="Connection459",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection460 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag7,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_ILrms_A, "p_node"),
    name="Connection460",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection466 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_ET22a,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction55,
    name="Connection466",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection471 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product2, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Tap_Position, "in"),
    name="Connection471",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection494 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction11,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction60,
    name="Connection494",
    breakpoints=[(8256, 8656), (8256, 8656)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection496 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_A, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction60,
    name="Connection496",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection498 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction61,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction53,
    name="Connection498",
    breakpoints=[(8368, 8784), (8368, 8784), (8368, 8784)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection499 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_A, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction61,
    name="Connection499",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection500 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_FromVLDC,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Gain4, "in"),
    name="Connection500",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection501 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Gain4, "out"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VSum, "in"),
    name="Connection501",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection512 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_A, "p_node"),
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rr_A, "p_node"),
    name="Connection512",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection524 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction63,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vsec_ins_A, "n_node"),
    name="Connection524",
    breakpoints=[(8632, 8656), (8632, 8656)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection525 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_A, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction63,
    name="Connection525",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection529 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Goto11,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Vprim_A, "out"),
    name="Connection529",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection526 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From11,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product10, "in1"),
    name="Connection526",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection531 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From1,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction64,
    name="Connection531",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection532 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction64,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product11, "in"),
    name="Connection532",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection533 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product10, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction64,
    name="Connection533",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection534 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From12,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Product11, "in1"),
    name="Connection534",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection535 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_A, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction55,
    name="Connection535",
    breakpoints=[(8632, 8784)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection536 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_From13,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Isp_A, "in"),
    name="Connection536",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection803 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Electric_Tag16,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction103,
    name="Connection803",
    breakpoints=[(9080, 9688), (9368, 9688), (9368, 9688)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection804 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction103,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_C, "n_node"),
    name="Connection804",
    breakpoints=[(9472, 9688), (9472, 9688), (9472, 9688)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection805 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_S7,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction103,
    name="Connection805",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection806 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_S3,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction104,
    name="Connection806",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection807 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction104,
    end=_Three_Phase_Transformer_Vreg_Auto1_JL4,
    name="Connection807",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection808 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_AB, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction104,
    name="Connection808",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection809 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_S1,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction105,
    name="Connection809",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection810 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction105,
    end=_Three_Phase_Transformer_Vreg_Auto1_JL1,
    name="Connection810",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection811 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_AB, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction105,
    name="Connection811",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection812 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_VLoad_AB, "out"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Goto28,
    name="Connection812",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection819 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_ET11b,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction106,
    name="Connection819",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection820 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction106,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rl_B, "p_node"),
    name="Connection820",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection821 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rinb, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction106,
    name="Connection821",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection822 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction73,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction107,
    name="Connection822",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection823 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction107,
    end=_Three_Phase_Transformer_Vreg_Auto1_ET12b,
    name="Connection823",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection824 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rinb, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction107,
    name="Connection824",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection825 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_ET11a,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction108,
    name="Connection825",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection826 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction108,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rl_A, "p_node"),
    name="Connection826",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection827 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rina, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction108,
    name="Connection827",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection828 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_ET12a,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction109,
    name="Connection828",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection829 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction109,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction53,
    name="Connection829",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection830 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rina, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction109,
    name="Connection830",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection831 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rl_C, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction110,
    name="Connection831",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection832 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction110,
    end=_Three_Phase_Transformer_Vreg_Auto1_ET11c,
    name="Connection832",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection833 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rinc, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction110,
    name="Connection833",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection834 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction85,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction111,
    name="Connection834",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection835 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction111,
    end=_Three_Phase_Transformer_Vreg_Auto1_ET12c,
    name="Connection835",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection836 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rinc, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction111,
    name="Connection836",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection837 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction60,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction112,
    name="Connection837",
    breakpoints=[(8424, 8656)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection838 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction112,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction63,
    name="Connection838",
    breakpoints=[(8520, 8656), (8520, 8656)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection839 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rmida, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction112,
    name="Connection839",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection840 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction55,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction113,
    name="Connection840",
    breakpoints=[(8568, 8784)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection841 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction113,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction61,
    name="Connection841",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection842 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rmida, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction113,
    name="Connection842",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection843 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction78,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction114,
    name="Connection843",
    breakpoints=[(8464, 9136)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection844 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction114,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction80,
    name="Connection844",
    breakpoints=[(8560, 9136), (8560, 9136)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection845 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rmidb, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction114,
    name="Connection845",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection846 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction75,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction115,
    name="Connection846",
    breakpoints=[(8608, 9264)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection847 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction115,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction79,
    name="Connection847",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection848 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rmidb, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction115,
    name="Connection848",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection849 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction90,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction116,
    name="Connection849",
    breakpoints=[(8472, 9560)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection850 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction116,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction92,
    name="Connection850",
    breakpoints=[(8568, 9560), (8568, 9560)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection851 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rmidc, "p_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction116,
    name="Connection851",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection852 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction87,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction117,
    name="Connection852",
    breakpoints=[(8616, 9688)],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection853 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_Auto1_Junction117,
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction91,
    name="Connection853",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection854 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Rmidc, "n_node"),
    end=_Three_Phase_Transformer_Vreg_Auto1_Junction117,
    name="Connection854",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Auto1_Connection855 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1_Termination1, "in"),
    end=_Three_Phase_Transformer_Vreg_Auto1_FromVLDC_unused,
    name="Connection855",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection154 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_RegA1,
    end=_Three_Phase_Transformer_Vreg_TagRegA1,
    name="Connection154",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection153 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagRegB1,
    end=_Three_Phase_Transformer_Vreg_RegB1,
    name="Connection153",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection152 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagRegC1,
    end=_Three_Phase_Transformer_Vreg_RegC1,
    name="Connection152",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection155 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto2A1,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "P3"),
    name="Connection155",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection156 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "S3"),
    end=_Three_Phase_Transformer_Vreg_TagAuto2A2,
    name="Connection156",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection157 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto3A1,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "P5"),
    name="Connection157",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection158 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto3A2,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "S5"),
    name="Connection158",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection172 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "S2"),
    end=_Three_Phase_Transformer_Vreg_TagAuto1B2,
    name="Connection172",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection171 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "P2"),
    end=_Three_Phase_Transformer_Vreg_TagAuto1B1,
    name="Connection171",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection173 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto2B2,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "S6"),
    name="Connection173",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection174 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto3B2,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "S7"),
    name="Connection174",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection175 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto3B1,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "P7"),
    name="Connection175",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection176 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto2B1,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "P6"),
    name="Connection176",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection151 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_RegN,
    end=_Three_Phase_Transformer_Vreg_TagRegN1,
    name="Connection151",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection55 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_TagAuto1A1,
    end=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "P1"),
    name="Connection55",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection69 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_RegA2,
    end=_Three_Phase_Transformer_Vreg_TagRegA2,
    name="Connection69",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection70 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_RegB2,
    end=_Three_Phase_Transformer_Vreg_TagRegB2,
    name="Connection70",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection71 = mdl.create_connection(
    start=_Three_Phase_Transformer_Vreg_RegC2,
    end=_Three_Phase_Transformer_Vreg_TagRegC2,
    name="Connection71",
    breakpoints=[],
)
_Three_Phase_Transformer_Vreg_Connection122 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg_Auto1, "S1"),
    end=_Three_Phase_Transformer_Vreg_TagAuto1A2,
    name="Connection122",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection42 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagA1,
    end=_Three_Phase_Transformer_A1,
    name="Connection42",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection43 = mdl.create_connection(
    start=_Three_Phase_Transformer_B1,
    end=_Three_Phase_Transformer_TagB1,
    name="Connection43",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection44 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagC1,
    end=_Three_Phase_Transformer_C1,
    name="Connection44",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection57 = mdl.create_connection(
    start=_Three_Phase_Transformer_Reg_N1,
    end=mdl.term(_Three_Phase_Transformer_Vreg, "RegN"),
    name="Connection57",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection58 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagRegA1,
    end=mdl.term(_Three_Phase_Transformer_Vreg, "RegA1"),
    name="Connection58",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection59 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_Vreg, "RegC1"),
    end=_Three_Phase_Transformer_TagRegC1,
    name="Connection59",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection60 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagRegB1,
    end=mdl.term(_Three_Phase_Transformer_Vreg, "RegB1"),
    name="Connection60",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection61 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagRegA2,
    end=mdl.term(_Three_Phase_Transformer_Vreg, "RegA2"),
    name="Connection61",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection62 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagRegC2,
    end=mdl.term(_Three_Phase_Transformer_Vreg, "RegC2"),
    name="Connection62",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection63 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagRegB2,
    end=mdl.term(_Three_Phase_Transformer_Vreg, "RegB2"),
    name="Connection63",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection64 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "prm_1"),
    end=_Three_Phase_Transformer_TagTA1,
    name="Connection64",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection65 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "prm_2"),
    end=_Three_Phase_Transformer_TagTB1,
    name="Connection65",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection66 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "prm_3"),
    end=_Three_Phase_Transformer_TagTC1,
    name="Connection66",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection67 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "sec_1"),
    end=_Three_Phase_Transformer_TagTA2,
    name="Connection67",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection68 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "sec_2"),
    end=_Three_Phase_Transformer_TagTB2,
    name="Connection68",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection69 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "sec_3"),
    end=_Three_Phase_Transformer_TagTC2,
    name="Connection69",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection70 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "n2"),
    end=_Three_Phase_Transformer_TagTN2,
    name="Connection70",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection71 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagA2,
    end=_Three_Phase_Transformer_A2,
    name="Connection71",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection72 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagB2,
    end=_Three_Phase_Transformer_B2,
    name="Connection72",
    breakpoints=[],
)
_Three_Phase_Transformer_Connection73 = mdl.create_connection(
    start=_Three_Phase_Transformer_TagC2,
    end=_Three_Phase_Transformer_C2,
    name="Connection73",
    breakpoints=[],
)
_Three_Phase_Transformer_N1n1 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "n1"),
    end=_Three_Phase_Transformer_N1,
    name="N1n1",
    breakpoints=[],
)
_Three_Phase_Transformer_N2n2 = mdl.create_connection(
    start=mdl.term(_Three_Phase_Transformer_T1, "n2"),
    end=_Three_Phase_Transformer_N2,
    name="N2n2",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection277 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Constant6, "out"),
    end=_VSConverter_Subsystem8_Junction40,
    name="Connection277",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection278 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction40,
    end=mdl.term(_VSConverter_Subsystem8_Sum19, "in1"),
    name="Connection278",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection279 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Comparator4, "in2"),
    end=_VSConverter_Subsystem8_Junction40,
    name="Connection279",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection283 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Comparator4, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch13, "in2"),
    name="Connection283",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection290 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction43,
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch13, "in"),
    name="Connection290",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection292 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Comparator5, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch14, "in2"),
    name="Connection292",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection294 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Signal_switch4, "out"),
    end=_VSConverter_Subsystem8_Junction43,
    name="Connection294",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection295 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Constant8, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Sum20, "in"),
    name="Connection295",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection296 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Comparator5, "in1"),
    end=_VSConverter_Subsystem8_Junction44,
    name="Connection296",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection297 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction44,
    end=_VSConverter_Subsystem8_Junction43,
    name="Connection297",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection299 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Constant9, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Sum21, "in"),
    name="Connection299",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection300 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Sum20, "in1"),
    end=_VSConverter_Subsystem8_Junction45,
    name="Connection300",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection301 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction45,
    end=_VSConverter_Subsystem8_Junction44,
    name="Connection301",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection302 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Sum21, "in1"),
    end=_VSConverter_Subsystem8_Junction45,
    name="Connection302",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection303 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Sum20, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch14, "in"),
    name="Connection303",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection304 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Sum21, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch14, "in1"),
    name="Connection304",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection305 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Constant10, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Comparator5, "in2"),
    name="Connection305",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection306 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Signal_switch14, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch13, "in1"),
    name="Connection306",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection307 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Angle,
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch13, "out"),
    name="Connection307",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection312 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Comparator4, "in1"),
    end=_VSConverter_Subsystem8_Junction33,
    name="Connection312",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection314 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Product7, "in"),
    end=_VSConverter_Subsystem8_Junction46,
    name="Connection314",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection315 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction46,
    end=_VSConverter_Subsystem8_Junction24,
    name="Connection315",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection316 = mdl.create_connection(
    start=_VSConverter_Subsystem8_q,
    end=_VSConverter_Subsystem8_Junction46,
    name="Connection316",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection222 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Product4, "in1"),
    end=_VSConverter_Subsystem8_Junction29,
    name="Connection222",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection224 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Product4, "in"),
    end=_VSConverter_Subsystem8_Junction29,
    name="Connection224",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection236 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Product4, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Sum16, "in1"),
    name="Connection236",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection228 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Product5, "in1"),
    end=_VSConverter_Subsystem8_Junction24,
    name="Connection228",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection235 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Product5, "in"),
    end=_VSConverter_Subsystem8_Junction24,
    name="Connection235",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection238 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction33,
    end=_VSConverter_Subsystem8_d,
    name="Connection238",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection234 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Mathematical_function2, "in"),
    end=mdl.term(_VSConverter_Subsystem8_Sum16, "out"),
    name="Connection234",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection231 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Sum16, "in"),
    end=mdl.term(_VSConverter_Subsystem8_Product5, "out"),
    name="Connection231",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection252 = mdl.create_connection(
    start=_VSConverter_Subsystem8_mag,
    end=_VSConverter_Subsystem8_Junction35,
    name="Connection252",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection253 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction35,
    end=mdl.term(_VSConverter_Subsystem8_Mathematical_function2, "out"),
    name="Connection253",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection255 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Constant5, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Relational_operator2, "in1"),
    name="Connection255",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection257 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction33,
    end=_VSConverter_Subsystem8_Junction29,
    name="Connection257",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection262 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Trigonometric_function4, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch4, "in1"),
    name="Connection262",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection263 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Relational_operator2, "out"),
    end=_VSConverter_Subsystem8_Junction37,
    name="Connection263",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection264 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction37,
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch4, "in2"),
    name="Connection264",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection265 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Signal_switch12, "in2"),
    end=_VSConverter_Subsystem8_Junction37,
    name="Connection265",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection266 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Product7, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Trigonometric_function4, "in"),
    name="Connection266",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection267 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Relational_operator2, "in"),
    end=_VSConverter_Subsystem8_Junction38,
    name="Connection267",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection268 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction38,
    end=_VSConverter_Subsystem8_Junction35,
    name="Connection268",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection270 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Signal_switch12, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Product7, "in1"),
    name="Connection270",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection271 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Signal_switch12, "in1"),
    end=_VSConverter_Subsystem8_Junction39,
    name="Connection271",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection272 = mdl.create_connection(
    start=_VSConverter_Subsystem8_Junction39,
    end=_VSConverter_Subsystem8_Junction38,
    name="Connection272",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection273 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Sum19, "in"),
    end=_VSConverter_Subsystem8_Junction39,
    name="Connection273",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection275 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Sum19, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch12, "in"),
    name="Connection275",
    breakpoints=[],
)
_VSConverter_Subsystem8_Connection276 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8_Constant7, "out"),
    end=mdl.term(_VSConverter_Subsystem8_Signal_switch4, "in"),
    name="Connection276",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection222 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Product4, "in1"),
    end=_VSConverter_Subsystem9_Junction29,
    name="Connection222",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection224 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Product4, "in"),
    end=_VSConverter_Subsystem9_Junction29,
    name="Connection224",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection236 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Product4, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Sum16, "in1"),
    name="Connection236",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection228 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Product5, "in1"),
    end=_VSConverter_Subsystem9_Junction24,
    name="Connection228",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection235 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Product5, "in"),
    end=_VSConverter_Subsystem9_Junction24,
    name="Connection235",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection238 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction33,
    end=_VSConverter_Subsystem9_d,
    name="Connection238",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection234 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Mathematical_function2, "in"),
    end=mdl.term(_VSConverter_Subsystem9_Sum16, "out"),
    name="Connection234",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection231 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Sum16, "in"),
    end=mdl.term(_VSConverter_Subsystem9_Product5, "out"),
    name="Connection231",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection252 = mdl.create_connection(
    start=_VSConverter_Subsystem9_mag,
    end=_VSConverter_Subsystem9_Junction35,
    name="Connection252",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection253 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction35,
    end=mdl.term(_VSConverter_Subsystem9_Mathematical_function2, "out"),
    name="Connection253",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection255 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Constant5, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Relational_operator2, "in1"),
    name="Connection255",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection257 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction33,
    end=_VSConverter_Subsystem9_Junction29,
    name="Connection257",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection262 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Trigonometric_function4, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch4, "in1"),
    name="Connection262",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection263 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Relational_operator2, "out"),
    end=_VSConverter_Subsystem9_Junction37,
    name="Connection263",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection264 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction37,
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch4, "in2"),
    name="Connection264",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection265 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Signal_switch12, "in2"),
    end=_VSConverter_Subsystem9_Junction37,
    name="Connection265",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection266 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Product7, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Trigonometric_function4, "in"),
    name="Connection266",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection267 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Relational_operator2, "in"),
    end=_VSConverter_Subsystem9_Junction38,
    name="Connection267",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection268 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction38,
    end=_VSConverter_Subsystem9_Junction35,
    name="Connection268",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection270 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Signal_switch12, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Product7, "in1"),
    name="Connection270",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection271 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Signal_switch12, "in1"),
    end=_VSConverter_Subsystem9_Junction39,
    name="Connection271",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection272 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction39,
    end=_VSConverter_Subsystem9_Junction38,
    name="Connection272",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection273 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Sum19, "in"),
    end=_VSConverter_Subsystem9_Junction39,
    name="Connection273",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection275 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Sum19, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch12, "in"),
    name="Connection275",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection276 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Constant7, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch4, "in"),
    name="Connection276",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection277 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Constant6, "out"),
    end=_VSConverter_Subsystem9_Junction40,
    name="Connection277",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection278 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction40,
    end=mdl.term(_VSConverter_Subsystem9_Sum19, "in1"),
    name="Connection278",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection279 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Comparator4, "in2"),
    end=_VSConverter_Subsystem9_Junction40,
    name="Connection279",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection283 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Comparator4, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch13, "in2"),
    name="Connection283",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection290 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction43,
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch13, "in"),
    name="Connection290",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection292 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Comparator5, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch14, "in2"),
    name="Connection292",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection294 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Signal_switch4, "out"),
    end=_VSConverter_Subsystem9_Junction43,
    name="Connection294",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection295 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Constant8, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Sum20, "in"),
    name="Connection295",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection296 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Comparator5, "in1"),
    end=_VSConverter_Subsystem9_Junction44,
    name="Connection296",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection297 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction44,
    end=_VSConverter_Subsystem9_Junction43,
    name="Connection297",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection299 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Constant9, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Sum21, "in"),
    name="Connection299",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection300 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Sum20, "in1"),
    end=_VSConverter_Subsystem9_Junction45,
    name="Connection300",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection301 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction45,
    end=_VSConverter_Subsystem9_Junction44,
    name="Connection301",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection302 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Sum21, "in1"),
    end=_VSConverter_Subsystem9_Junction45,
    name="Connection302",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection303 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Sum20, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch14, "in"),
    name="Connection303",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection304 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Sum21, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch14, "in1"),
    name="Connection304",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection305 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Constant10, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Comparator5, "in2"),
    name="Connection305",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection306 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Signal_switch14, "out"),
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch13, "in1"),
    name="Connection306",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection307 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Angle,
    end=mdl.term(_VSConverter_Subsystem9_Signal_switch13, "out"),
    name="Connection307",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection312 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Comparator4, "in1"),
    end=_VSConverter_Subsystem9_Junction33,
    name="Connection312",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection314 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9_Product7, "in"),
    end=_VSConverter_Subsystem9_Junction46,
    name="Connection314",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection315 = mdl.create_connection(
    start=_VSConverter_Subsystem9_Junction46,
    end=_VSConverter_Subsystem9_Junction24,
    name="Connection315",
    breakpoints=[],
)
_VSConverter_Subsystem9_Connection316 = mdl.create_connection(
    start=_VSConverter_Subsystem9_q,
    end=_VSConverter_Subsystem9_Junction46,
    name="Connection316",
    breakpoints=[],
)
_VSConverter_TS_module_Connection12 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_1D_look_up_table2, "value"),
    end=_VSConverter_TS_module_Q,
    name="Connection12",
    breakpoints=[],
)
_VSConverter_TS_module_Connection21 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Constant6, "out"),
    end=mdl.term(_VSConverter_TS_module_Signal_switch2, "in2"),
    name="Connection21",
    breakpoints=[],
)
_VSConverter_TS_module_Connection26 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Signal_switch1, "out"),
    end=mdl.term(_VSConverter_TS_module_Signal_switch2, "in"),
    name="Connection26",
    breakpoints=[],
)
_VSConverter_TS_module_Connection31 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Constant5, "out"),
    end=_VSConverter_TS_module_Junction3,
    name="Connection31",
    breakpoints=[],
)
_VSConverter_TS_module_Connection32 = mdl.create_connection(
    start=_VSConverter_TS_module_Junction3,
    end=mdl.term(_VSConverter_TS_module_Signal_switch1, "in1"),
    name="Connection32",
    breakpoints=[],
)
_VSConverter_TS_module_Connection33 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Signal_switch2, "in1"),
    end=_VSConverter_TS_module_Junction3,
    name="Connection33",
    breakpoints=[],
)
_VSConverter_TS_module_Connection38 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Constant7, "out"),
    end=mdl.term(_VSConverter_TS_module_Signal_switch3, "in2"),
    name="Connection38",
    breakpoints=[],
)
_VSConverter_TS_module_Connection40 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Integrator1, "out"),
    end=mdl.term(_VSConverter_TS_module_Signal_switch3, "in"),
    name="Connection40",
    breakpoints=[],
)
_VSConverter_TS_module_Connection41 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_1D_look_up_table2, "addr"),
    end=_VSConverter_TS_module_Junction4,
    name="Connection41",
    breakpoints=[],
)
_VSConverter_TS_module_Connection43 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Signal_switch3, "out"),
    end=_VSConverter_TS_module_Junction4,
    name="Connection43",
    breakpoints=[],
)
_VSConverter_TS_module_Connection44 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Gain1, "out"),
    end=mdl.term(_VSConverter_TS_module_Signal_switch3, "in1"),
    name="Connection44",
    breakpoints=[],
)
_VSConverter_TS_module_Connection45 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Integrator1, "in"),
    end=mdl.term(_VSConverter_TS_module_Signal_switch2, "out"),
    name="Connection45",
    breakpoints=[],
)
_VSConverter_TS_module_Connection49 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_1D_look_up_table1, "addr"),
    end=_VSConverter_TS_module_Junction4,
    name="Connection49",
    breakpoints=[],
)
_VSConverter_TS_module_Connection1 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Clock1, "out"),
    end=mdl.term(_VSConverter_TS_module_Comparator1, "in1"),
    name="Connection1",
    breakpoints=[],
)
_VSConverter_TS_module_Connection2 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Constant1, "out"),
    end=mdl.term(_VSConverter_TS_module_Comparator1, "in2"),
    name="Connection2",
    breakpoints=[],
)
_VSConverter_TS_module_Connection530 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_d_rel, "in"),
    end=mdl.term(_VSConverter_TS_module_Comparator1, "out"),
    name="Connection530",
    breakpoints=[],
)
_VSConverter_TS_module_Connection3 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Signal_switch1, "in2"),
    end=mdl.term(_VSConverter_TS_module_Comparator1, "out"),
    name="Connection3",
    breakpoints=[],
)
_VSConverter_TS_module_Connection5 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Constant3, "out"),
    end=mdl.term(_VSConverter_TS_module_Signal_switch1, "in"),
    name="Connection5",
    breakpoints=[],
)
_VSConverter_TS_module_Connection7 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Constant4, "out"),
    end=mdl.term(_VSConverter_TS_module_Comparator2, "in2"),
    name="Connection7",
    breakpoints=[],
)
_VSConverter_TS_module_Connection8 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Comparator2, "out"),
    end=mdl.term(_VSConverter_TS_module_Integrator1, "reset"),
    name="Connection8",
    breakpoints=[],
)
_VSConverter_TS_module_Connection9 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Comparator2, "in1"),
    end=mdl.term(_VSConverter_TS_module_Integrator1, "state_port"),
    name="Connection9",
    breakpoints=[(7208, 8232), (7392, 8232)],
)
_VSConverter_TS_module_Connection10 = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_1D_look_up_table1, "value"),
    end=_VSConverter_TS_module_P,
    name="Connection10",
    breakpoints=[],
)
_VSConverter_TS_module_connT = mdl.create_connection(
    start=mdl.term(_VSConverter_TS_module_Gain1, "in"),
    end=_VSConverter_TS_module_T,
    name="connT",
    breakpoints=[],
)
_VSConverter_T_switch_Connection6 = mdl.create_connection(
    start=_VSConverter_T_switch_Junction1,
    end=mdl.term(_VSConverter_T_switch_Signal_switch1, "in"),
    name="Connection6",
    breakpoints=[],
)
_VSConverter_T_switch_Connection7 = mdl.create_connection(
    start=mdl.term(_VSConverter_T_switch_Round1, "in"),
    end=_VSConverter_T_switch_Junction1,
    name="Connection7",
    breakpoints=[],
)
_VSConverter_T_switch_Connection8 = mdl.create_connection(
    start=mdl.term(_VSConverter_T_switch_Round1, "out"),
    end=mdl.term(_VSConverter_T_switch_Signal_switch1, "in1"),
    name="Connection8",
    breakpoints=[],
)
_VSConverter_T_switch_Connection11 = mdl.create_connection(
    start=mdl.term(_VSConverter_T_switch_Signal_switch1, "out"),
    end=_VSConverter_T_switch_Junction2,
    name="Connection11",
    breakpoints=[],
)
_VSConverter_T_switch_Connection12 = mdl.create_connection(
    start=_VSConverter_T_switch_Junction2,
    end=mdl.term(_VSConverter_T_switch_Limit1, "in"),
    name="Connection12",
    breakpoints=[],
)
_VSConverter_T_switch_Connection14 = mdl.create_connection(
    start=mdl.term(_VSConverter_T_switch_Limit1, "out"),
    end=_VSConverter_T_switch_Junction3,
    name="Connection14",
    breakpoints=[],
)
_VSConverter_T_switch_Connection15 = mdl.create_connection(
    start=_VSConverter_T_switch_Junction3,
    end=_VSConverter_T_switch_T_out,
    name="Connection15",
    breakpoints=[],
)
_VSConverter_T_switch_Connection1 = mdl.create_connection(
    start=_VSConverter_T_switch_mode,
    end=mdl.term(_VSConverter_T_switch_Signal_switch1, "in2"),
    name="Connection1",
    breakpoints=[],
)
_VSConverter_T_switch_Connection5 = mdl.create_connection(
    start=_VSConverter_T_switch_T,
    end=_VSConverter_T_switch_Junction1,
    name="Connection5",
    breakpoints=[],
)
_VSConverter_Connection136 = mdl.create_connection(
    start=mdl.term(_VSConverter_Integrator3, "out"),
    end=mdl.term(_VSConverter_Sum8, "in1"),
    name="Connection136",
    breakpoints=[],
)
_VSConverter_Connection142 = mdl.create_connection(
    start=_VSConverter_From5,
    end=mdl.term(_VSConverter_Signal_switch3, "in2"),
    name="Connection142",
    breakpoints=[],
)
_VSConverter_Connection146 = mdl.create_connection(
    start=_VSConverter_Junction13,
    end=mdl.term(_VSConverter_Signal_switch3, "in1"),
    name="Connection146",
    breakpoints=[],
)
_VSConverter_Connection147 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch4, "in1"),
    end=_VSConverter_Junction13,
    name="Connection147",
    breakpoints=[],
)
_VSConverter_Connection148 = mdl.create_connection(
    start=_VSConverter_From6,
    end=mdl.term(_VSConverter_Signal_switch4, "in2"),
    name="Connection148",
    breakpoints=[],
)
_VSConverter_Connection158 = mdl.create_connection(
    start=mdl.term(_VSConverter_Integrator4, "out"),
    end=mdl.term(_VSConverter_Sum10, "in1"),
    name="Connection158",
    breakpoints=[],
)
_VSConverter_Connection160 = mdl.create_connection(
    start=_VSConverter_From8,
    end=mdl.term(_VSConverter_Signal_switch5, "in2"),
    name="Connection160",
    breakpoints=[],
)
_VSConverter_Connection161 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch5, "out"),
    end=mdl.term(_VSConverter_Signal_switch6, "in"),
    name="Connection161",
    breakpoints=[],
)
_VSConverter_Connection162 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant5, "out"),
    end=_VSConverter_Junction15,
    name="Connection162",
    breakpoints=[],
)
_VSConverter_Connection163 = mdl.create_connection(
    start=_VSConverter_Junction15,
    end=mdl.term(_VSConverter_Signal_switch5, "in1"),
    name="Connection163",
    breakpoints=[],
)
_VSConverter_Connection164 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch6, "in1"),
    end=_VSConverter_Junction15,
    name="Connection164",
    breakpoints=[],
)
_VSConverter_Connection165 = mdl.create_connection(
    start=_VSConverter_From9,
    end=mdl.term(_VSConverter_Signal_switch6, "in2"),
    name="Connection165",
    breakpoints=[],
)
_VSConverter_Connection251 = mdl.create_connection(
    start=mdl.term(_VSConverter_V_gen, "in"),
    end=_VSConverter_Junction23,
    name="Connection251",
    breakpoints=[],
)
_VSConverter_Connection252 = mdl.create_connection(
    start=_VSConverter_Junction23,
    end=mdl.term(_VSConverter_Gain23, "out"),
    name="Connection252",
    breakpoints=[],
)
_VSConverter_Connection282 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain24, "out"),
    end=mdl.term(_VSConverter_Signal_switch13, "in"),
    name="Connection282",
    breakpoints=[],
)
_VSConverter_Connection283 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain25, "out"),
    end=mdl.term(_VSConverter_Signal_switch13, "in1"),
    name="Connection283",
    breakpoints=[],
)
_VSConverter_Connection287 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain24, "in"),
    end=_VSConverter_Junction29,
    name="Connection287",
    breakpoints=[],
)
_VSConverter_Connection290 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch13, "out"),
    end=mdl.term(_VSConverter_Sum8, "in"),
    name="Connection290",
    breakpoints=[],
)
_VSConverter_Connection292 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain26, "out"),
    end=mdl.term(_VSConverter_Signal_switch14, "in"),
    name="Connection292",
    breakpoints=[],
)
_VSConverter_Connection293 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain27, "out"),
    end=mdl.term(_VSConverter_Signal_switch14, "in1"),
    name="Connection293",
    breakpoints=[],
)
_VSConverter_Connection300 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch14, "out"),
    end=mdl.term(_VSConverter_Integrator3, "in"),
    name="Connection300",
    breakpoints=[],
)
_VSConverter_Connection309 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function1, "dED_sel"),
    end=_VSConverter_Goto14,
    name="Connection309",
    breakpoints=[],
)
_VSConverter_Connection315 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant9, "out"),
    end=mdl.term(_VSConverter_C_function1, "mode_external"),
    name="Connection315",
    breakpoints=[],
)
_VSConverter_Connection316 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant13, "out"),
    end=mdl.term(_VSConverter_C_function1, "Mode_select_int"),
    name="Connection316",
    breakpoints=[],
)
_VSConverter_Connection318 = mdl.create_connection(
    start=_VSConverter_From18,
    end=mdl.term(_VSConverter_Signal_switch13, "in2"),
    name="Connection318",
    breakpoints=[],
)
_VSConverter_Connection319 = mdl.create_connection(
    start=_VSConverter_From19,
    end=mdl.term(_VSConverter_Signal_switch14, "in2"),
    name="Connection319",
    breakpoints=[],
)
_VSConverter_Connection323 = mdl.create_connection(
    start=_VSConverter_From20,
    end=mdl.term(_VSConverter_Sum14, "in1"),
    name="Connection323",
    breakpoints=[],
)
_VSConverter_Connection329 = mdl.create_connection(
    start=_VSConverter_From17,
    end=mdl.term(_VSConverter_Signal_switch15, "in2"),
    name="Connection329",
    breakpoints=[],
)
_VSConverter_Connection331 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain28, "out"),
    end=mdl.term(_VSConverter_Signal_switch15, "in1"),
    name="Connection331",
    breakpoints=[],
)
_VSConverter_Connection332 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain14, "in"),
    end=_VSConverter_Junction33,
    name="Connection332",
    breakpoints=[],
)
_VSConverter_Connection334 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain28, "in"),
    end=_VSConverter_Junction33,
    name="Connection334",
    breakpoints=[],
)
_VSConverter_Connection335 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain29, "out"),
    end=mdl.term(_VSConverter_Signal_switch16, "in1"),
    name="Connection335",
    breakpoints=[],
)
_VSConverter_Connection336 = mdl.create_connection(
    start=_VSConverter_From23,
    end=mdl.term(_VSConverter_Signal_switch16, "in2"),
    name="Connection336",
    breakpoints=[],
)
_VSConverter_Connection341 = mdl.create_connection(
    start=_VSConverter_Junction34,
    end=mdl.term(_VSConverter_Gain13, "in"),
    name="Connection341",
    breakpoints=[],
)
_VSConverter_Connection342 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain29, "in"),
    end=_VSConverter_Junction34,
    name="Connection342",
    breakpoints=[],
)
_VSConverter_Connection349 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch17, "out"),
    end=mdl.term(_VSConverter_Signal_switch5, "in"),
    name="Connection349",
    breakpoints=[],
)
_VSConverter_Connection368 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain32, "out"),
    end=mdl.term(_VSConverter_C_function1, "Mode_select_ext"),
    name="Connection368",
    breakpoints=[],
)
_VSConverter_Connection374 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant14, "out"),
    end=_VSConverter_Goto19,
    name="Connection374",
    breakpoints=[],
)
_VSConverter_Connection382 = mdl.create_connection(
    start=_VSConverter_Junction13,
    end=mdl.term(_VSConverter_Constant4, "out"),
    name="Connection382",
    breakpoints=[],
)
_VSConverter_Connection381 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch3, "in"),
    end=mdl.term(_VSConverter_Signal_switch12, "out"),
    name="Connection381",
    breakpoints=[],
)
_VSConverter_Connection393 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain14, "out"),
    end=mdl.term(_VSConverter_Signal_switch15, "in"),
    name="Connection393",
    breakpoints=[],
)
_VSConverter_Connection394 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch15, "out"),
    end=mdl.term(_VSConverter_Sum10, "in"),
    name="Connection394",
    breakpoints=[],
)
_VSConverter_Connection395 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch16, "in"),
    end=mdl.term(_VSConverter_Gain13, "out"),
    name="Connection395",
    breakpoints=[],
)
_VSConverter_Connection396 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch16, "out"),
    end=mdl.term(_VSConverter_Integrator4, "in"),
    name="Connection396",
    breakpoints=[],
)
_VSConverter_Connection399 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function1, "dEQ_sel"),
    end=_VSConverter_Goto15,
    name="Connection399",
    breakpoints=[],
)
_VSConverter_Connection419 = mdl.create_connection(
    start=_VSConverter_Junction35,
    end=mdl.term(_VSConverter_Vinv_b, "n_node"),
    name="Connection419",
    breakpoints=[],
)
_VSConverter_Connection421 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vinv_a, "p_node"),
    end=mdl.term(_VSConverter_Ra, "p_node"),
    name="Connection421",
    breakpoints=[],
)
_VSConverter_Connection422 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vinv_b, "p_node"),
    end=mdl.term(_VSConverter_Rb, "p_node"),
    name="Connection422",
    breakpoints=[],
)
_VSConverter_Connection423 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vinv_c, "p_node"),
    end=mdl.term(_VSConverter_Rc, "p_node"),
    name="Connection423",
    breakpoints=[],
)
_VSConverter_Connection424 = mdl.create_connection(
    start=mdl.term(_VSConverter_Ra, "n_node"),
    end=mdl.term(_VSConverter_La, "p_node"),
    name="Connection424",
    breakpoints=[],
)
_VSConverter_Connection425 = mdl.create_connection(
    start=mdl.term(_VSConverter_Rb, "n_node"),
    end=mdl.term(_VSConverter_Lb, "p_node"),
    name="Connection425",
    breakpoints=[],
)
_VSConverter_Connection426 = mdl.create_connection(
    start=mdl.term(_VSConverter_Rc, "n_node"),
    end=mdl.term(_VSConverter_Lc, "p_node"),
    name="Connection426",
    breakpoints=[],
)
_VSConverter_Connection427 = mdl.create_connection(
    start=mdl.term(_VSConverter_La, "n_node"),
    end=mdl.term(_VSConverter_Ia, "p_node"),
    name="Connection427",
    breakpoints=[],
)
_VSConverter_Connection428 = mdl.create_connection(
    start=mdl.term(_VSConverter_Lb, "n_node"),
    end=mdl.term(_VSConverter_Ib, "p_node"),
    name="Connection428",
    breakpoints=[],
)
_VSConverter_Connection429 = mdl.create_connection(
    start=mdl.term(_VSConverter_Lc, "n_node"),
    end=mdl.term(_VSConverter_Ic, "p_node"),
    name="Connection429",
    breakpoints=[],
)
_VSConverter_Connection439 = mdl.create_connection(
    start=_VSConverter_Goto20,
    end=mdl.term(_VSConverter_Ia, "out"),
    name="Connection439",
    breakpoints=[],
)
_VSConverter_Connection443 = mdl.create_connection(
    start=mdl.term(_VSConverter_Ia, "n_node"),
    end=_VSConverter_Junction39,
    name="Connection443",
    breakpoints=[],
)
_VSConverter_Connection444 = mdl.create_connection(
    start=_VSConverter_Junction39,
    end=_VSConverter_A1,
    name="Connection444",
    breakpoints=[],
)
_VSConverter_Connection445 = mdl.create_connection(
    start=mdl.term(_VSConverter_Va, "p_node"),
    end=_VSConverter_Junction39,
    name="Connection445",
    breakpoints=[],
)
_VSConverter_Connection446 = mdl.create_connection(
    start=mdl.term(_VSConverter_Ib, "n_node"),
    end=_VSConverter_Junction40,
    name="Connection446",
    breakpoints=[],
)
_VSConverter_Connection447 = mdl.create_connection(
    start=_VSConverter_Junction40,
    end=_VSConverter_B1,
    name="Connection447",
    breakpoints=[],
)
_VSConverter_Connection448 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vb, "p_node"),
    end=_VSConverter_Junction40,
    name="Connection448",
    breakpoints=[],
)
_VSConverter_Connection449 = mdl.create_connection(
    start=mdl.term(_VSConverter_Ic, "n_node"),
    end=_VSConverter_Junction41,
    name="Connection449",
    breakpoints=[],
)
_VSConverter_Connection450 = mdl.create_connection(
    start=_VSConverter_Junction41,
    end=_VSConverter_C1,
    name="Connection450",
    breakpoints=[],
)
_VSConverter_Connection451 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vc, "p_node"),
    end=_VSConverter_Junction41,
    name="Connection451",
    breakpoints=[],
)
_VSConverter_Connection452 = mdl.create_connection(
    start=_VSConverter_Goto21,
    end=mdl.term(_VSConverter_Ib, "out"),
    name="Connection452",
    breakpoints=[],
)
_VSConverter_Connection453 = mdl.create_connection(
    start=_VSConverter_Goto22,
    end=mdl.term(_VSConverter_Ic, "out"),
    name="Connection453",
    breakpoints=[],
)
_VSConverter_Connection454 = mdl.create_connection(
    start=_VSConverter_Goto23,
    end=mdl.term(_VSConverter_Va, "out"),
    name="Connection454",
    breakpoints=[],
)
_VSConverter_Connection455 = mdl.create_connection(
    start=_VSConverter_Goto24,
    end=mdl.term(_VSConverter_Vb, "out"),
    name="Connection455",
    breakpoints=[],
)
_VSConverter_Connection456 = mdl.create_connection(
    start=_VSConverter_Goto25,
    end=mdl.term(_VSConverter_Vc, "out"),
    name="Connection456",
    breakpoints=[],
)
_VSConverter_Connection457 = mdl.create_connection(
    start=_VSConverter_From26,
    end=mdl.term(_VSConverter_Sum15, "in"),
    name="Connection457",
    breakpoints=[],
)
_VSConverter_Connection458 = mdl.create_connection(
    start=_VSConverter_From27,
    end=mdl.term(_VSConverter_Sum15, "in1"),
    name="Connection458",
    breakpoints=[],
)
_VSConverter_Connection459 = mdl.create_connection(
    start=_VSConverter_From28,
    end=mdl.term(_VSConverter_Sum16, "in"),
    name="Connection459",
    breakpoints=[],
)
_VSConverter_Connection460 = mdl.create_connection(
    start=_VSConverter_From29,
    end=mdl.term(_VSConverter_Sum16, "in1"),
    name="Connection460",
    breakpoints=[],
)
_VSConverter_Connection461 = mdl.create_connection(
    start=_VSConverter_From30,
    end=mdl.term(_VSConverter_Sum17, "in"),
    name="Connection461",
    breakpoints=[],
)
_VSConverter_Connection462 = mdl.create_connection(
    start=_VSConverter_From31,
    end=mdl.term(_VSConverter_Sum17, "in1"),
    name="Connection462",
    breakpoints=[],
)
_VSConverter_Connection463 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum15, "out"),
    end=mdl.term(_VSConverter_Vab, "in"),
    name="Connection463",
    breakpoints=[],
)
_VSConverter_Connection464 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum16, "out"),
    end=mdl.term(_VSConverter_Vbc, "in"),
    name="Connection464",
    breakpoints=[],
)
_VSConverter_Connection465 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum17, "out"),
    end=mdl.term(_VSConverter_Vca, "in"),
    name="Connection465",
    breakpoints=[],
)
_VSConverter_Connection469 = mdl.create_connection(
    start=_VSConverter_From35,
    end=mdl.term(_VSConverter_abc_to_dq2, "va"),
    name="Connection469",
    breakpoints=[],
)
_VSConverter_Connection470 = mdl.create_connection(
    start=_VSConverter_From36,
    end=mdl.term(_VSConverter_abc_to_dq2, "vb"),
    name="Connection470",
    breakpoints=[],
)
_VSConverter_Connection471 = mdl.create_connection(
    start=_VSConverter_From37,
    end=mdl.term(_VSConverter_abc_to_dq2, "vc"),
    name="Connection471",
    breakpoints=[],
)
_VSConverter_Connection475 = mdl.create_connection(
    start=_VSConverter_Goto13,
    end=_VSConverter_Junction23,
    name="Connection475",
    breakpoints=[],
)
_VSConverter_Connection485 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8, "Angle"),
    end=_VSConverter_Goto27,
    name="Connection485",
    breakpoints=[],
)
_VSConverter_Connection489 = mdl.create_connection(
    start=_VSConverter_From38,
    end=mdl.term(_VSConverter_abc_to_dq2, "wt"),
    name="Connection489",
    breakpoints=[],
)
_VSConverter_Connection4875 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant21, "out"),
    end=mdl.term(_VSConverter_Comparator1, "in2"),
    name="Connection4875",
    breakpoints=[],
)
_VSConverter_Connection5040 = mdl.create_connection(
    start=_VSConverter_Goto9,
    end=_VSConverter_Junction47,
    name="Connection5040",
    breakpoints=[],
)
_VSConverter_Connection5041 = mdl.create_connection(
    start=_VSConverter_Junction47,
    end=mdl.term(_VSConverter_Comparator1, "out"),
    name="Connection5041",
    breakpoints=[],
)
_VSConverter_Connection5048 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant24, "out"),
    end=_VSConverter_Goto16,
    name="Connection5048",
    breakpoints=[],
)
_VSConverter_Connection5054 = mdl.create_connection(
    start=mdl.term(_VSConverter_dq_to_abc1, "phase_a"),
    end=_VSConverter_Goto30,
    name="Connection5054",
    breakpoints=[],
)
_VSConverter_Connection5055 = mdl.create_connection(
    start=mdl.term(_VSConverter_dq_to_abc1, "phase_b"),
    end=_VSConverter_Goto31,
    name="Connection5055",
    breakpoints=[],
)
_VSConverter_Connection5056 = mdl.create_connection(
    start=mdl.term(_VSConverter_dq_to_abc1, "phase_c"),
    end=_VSConverter_Goto32,
    name="Connection5056",
    breakpoints=[],
)
_VSConverter_Connection5073 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8, "mag"),
    end=_VSConverter_Junction50,
    name="Connection5073",
    breakpoints=[],
)
_VSConverter_Connection5074 = mdl.create_connection(
    start=_VSConverter_Junction50,
    end=_VSConverter_Goto26,
    name="Connection5074",
    breakpoints=[],
)
_VSConverter_Connection5075 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain23, "in"),
    end=_VSConverter_Junction50,
    name="Connection5075",
    breakpoints=[],
)
_VSConverter_Connection5080 = mdl.create_connection(
    start=_VSConverter_From46,
    end=mdl.term(_VSConverter_Product1, "in"),
    name="Connection5080",
    breakpoints=[],
)
_VSConverter_Connection5081 = mdl.create_connection(
    start=_VSConverter_From45,
    end=mdl.term(_VSConverter_Product1, "in1"),
    name="Connection5081",
    breakpoints=[],
)
_VSConverter_Connection5082 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product1, "out"),
    end=mdl.term(_VSConverter_Gain9, "in"),
    name="Connection5082",
    breakpoints=[],
)
_VSConverter_Connection5085 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product4, "out"),
    end=mdl.term(_VSConverter_Gain10, "in"),
    name="Connection5085",
    breakpoints=[],
)
_VSConverter_Connection5090 = mdl.create_connection(
    start=_VSConverter_From47,
    end=mdl.term(_VSConverter_Product4, "in"),
    name="Connection5090",
    breakpoints=[],
)
_VSConverter_Connection5091 = mdl.create_connection(
    start=_VSConverter_From48,
    end=mdl.term(_VSConverter_Product4, "in1"),
    name="Connection5091",
    breakpoints=[],
)
_VSConverter_Connection5103 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain33, "out"),
    end=mdl.term(_VSConverter_C_function2, "in"),
    name="Connection5103",
    breakpoints=[],
)
_VSConverter_Connection5105 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant28, "out"),
    end=mdl.term(_VSConverter_C_function2, "reset_level"),
    name="Connection5105",
    breakpoints=[],
)
_VSConverter_Connection5122 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant31, "out"),
    end=mdl.term(_VSConverter_Sum19, "in1"),
    name="Connection5122",
    breakpoints=[],
)
_VSConverter_Connection5189 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8, "d"),
    end=mdl.term(_VSConverter_abc_to_dq1, "d_axis"),
    name="Connection5189",
    breakpoints=[],
)
_VSConverter_Connection5190 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem8, "q"),
    end=mdl.term(_VSConverter_abc_to_dq1, "q_axis"),
    name="Connection5190",
    breakpoints=[],
)
_VSConverter_Connection5199 = mdl.create_connection(
    start=_VSConverter_From50,
    end=mdl.term(_VSConverter_Sum23, "in1"),
    name="Connection5199",
    breakpoints=[],
)
_VSConverter_Connection5206 = mdl.create_connection(
    start=mdl.term(_VSConverter_Limit2, "out"),
    end=_VSConverter_Goto34,
    name="Connection5206",
    breakpoints=[],
)
_VSConverter_Connection5216 = mdl.create_connection(
    start=_VSConverter_From49,
    end=mdl.term(_VSConverter_Sum24, "in"),
    name="Connection5216",
    breakpoints=[],
)
_VSConverter_Connection5238 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant30, "out"),
    end=mdl.term(_VSConverter_C_function2, "dt"),
    name="Connection5238",
    breakpoints=[],
)
_VSConverter_Connection5241 = mdl.create_connection(
    start=_VSConverter_Goto39,
    end=_VSConverter_Junction68,
    name="Connection5241",
    breakpoints=[],
)
_VSConverter_Connection5242 = mdl.create_connection(
    start=_VSConverter_Junction68,
    end=mdl.term(_VSConverter_C_function2, "out"),
    name="Connection5242",
    breakpoints=[],
)
_VSConverter_Connection5243 = mdl.create_connection(
    start=mdl.term(_VSConverter_abc_to_dq1, "wt"),
    end=_VSConverter_Junction68,
    name="Connection5243",
    breakpoints=[],
)
_VSConverter_Connection5245 = mdl.create_connection(
    start=_VSConverter_From61,
    end=mdl.term(_VSConverter_Sum25, "in1"),
    name="Connection5245",
    breakpoints=[],
)
_VSConverter_Connection5263 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum10, "out"),
    end=mdl.term(_VSConverter_Limit1, "in"),
    name="Connection5263",
    breakpoints=[],
)
_VSConverter_Connection5272 = mdl.create_connection(
    start=_VSConverter_From7,
    end=mdl.term(_VSConverter_Sum26, "in1"),
    name="Connection5272",
    breakpoints=[],
)
_VSConverter_Connection5273 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant38, "out"),
    end=mdl.term(_VSConverter_Sum9, "in1"),
    name="Connection5273",
    breakpoints=[],
)
_VSConverter_Connection5274 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum26, "out"),
    end=mdl.term(_VSConverter_Signal_switch17, "in"),
    name="Connection5274",
    breakpoints=[],
)
_VSConverter_Connection5277 = mdl.create_connection(
    start=_VSConverter_Junction33,
    end=_VSConverter_Junction72,
    name="Connection5277",
    breakpoints=[],
)
_VSConverter_Connection5278 = mdl.create_connection(
    start=_VSConverter_Junction72,
    end=_VSConverter_Junction34,
    name="Connection5278",
    breakpoints=[],
)
_VSConverter_Connection5279 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch6, "out"),
    end=_VSConverter_Junction72,
    name="Connection5279",
    breakpoints=[],
)
_VSConverter_Connection5281 = mdl.create_connection(
    start=mdl.term(_VSConverter_Rate_Limiter1, "out"),
    end=mdl.term(_VSConverter_Sum26, "in"),
    name="Connection5281",
    breakpoints=[],
)
_VSConverter_Connection5286 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum27, "out"),
    end=mdl.term(_VSConverter_Signal_switch12, "in"),
    name="Connection5286",
    breakpoints=[],
)
_VSConverter_Connection5287 = mdl.create_connection(
    start=_VSConverter_From4,
    end=mdl.term(_VSConverter_Sum27, "in1"),
    name="Connection5287",
    breakpoints=[],
)
_VSConverter_Connection5288 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant39, "out"),
    end=mdl.term(_VSConverter_Sum7, "in1"),
    name="Connection5288",
    breakpoints=[],
)
_VSConverter_Connection5289 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum27, "in"),
    end=mdl.term(_VSConverter_Rate_Limiter4, "out"),
    name="Connection5289",
    breakpoints=[],
)
_VSConverter_Connection5290 = mdl.create_connection(
    start=mdl.term(_VSConverter_Rate_Limiter4, "in"),
    end=mdl.term(_VSConverter_Sum7, "out"),
    name="Connection5290",
    breakpoints=[],
)
_VSConverter_Connection5291 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch3, "out"),
    end=mdl.term(_VSConverter_Signal_switch4, "in"),
    name="Connection5291",
    breakpoints=[],
)
_VSConverter_Connection5334 = mdl.create_connection(
    start=_VSConverter_Goto29,
    end=mdl.term(_VSConverter_abc_to_dq2, "q_axis"),
    name="Connection5334",
    breakpoints=[],
)
_VSConverter_Connection5335 = mdl.create_connection(
    start=mdl.term(_VSConverter_abc_to_dq2, "d_axis"),
    end=_VSConverter_Goto28,
    name="Connection5335",
    breakpoints=[],
)
_VSConverter_Connection5347 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum19, "out"),
    end=mdl.term(_VSConverter_dq_to_abc1, "wt"),
    name="Connection5347",
    breakpoints=[],
)
_VSConverter_Connection5361 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch4, "out"),
    end=_VSConverter_Junction88,
    name="Connection5361",
    breakpoints=[],
)
_VSConverter_Connection5362 = mdl.create_connection(
    start=_VSConverter_Junction88,
    end=_VSConverter_Junction29,
    name="Connection5362",
    breakpoints=[],
)
_VSConverter_Connection5364 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain26, "in"),
    end=_VSConverter_Junction89,
    name="Connection5364",
    breakpoints=[],
)
_VSConverter_Connection5365 = mdl.create_connection(
    start=_VSConverter_Junction89,
    end=_VSConverter_Junction88,
    name="Connection5365",
    breakpoints=[],
)
_VSConverter_Connection5366 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain27, "in"),
    end=_VSConverter_Junction89,
    name="Connection5366",
    breakpoints=[],
)
_VSConverter_Connection5381 = mdl.create_connection(
    start=mdl.term(_VSConverter_Isp1, "n_node"),
    end=_VSConverter_Junction94,
    name="Connection5381",
    breakpoints=[],
)
_VSConverter_Connection5383 = mdl.create_connection(
    start=mdl.term(_VSConverter_Va1, "n_node"),
    end=_VSConverter_Junction94,
    name="Connection5383",
    breakpoints=[],
)
_VSConverter_Connection5384 = mdl.create_connection(
    start=mdl.term(_VSConverter_Isp1, "p_node"),
    end=_VSConverter_Junction95,
    name="Connection5384",
    breakpoints=[],
)
_VSConverter_Connection5386 = mdl.create_connection(
    start=mdl.term(_VSConverter_Va1, "p_node"),
    end=_VSConverter_Junction95,
    name="Connection5386",
    breakpoints=[],
)
_VSConverter_Connection5390 = mdl.create_connection(
    start=_VSConverter_From67,
    end=mdl.term(_VSConverter_C_function3, "Eb"),
    name="Connection5390",
    breakpoints=[],
)
_VSConverter_Connection5391 = mdl.create_connection(
    start=_VSConverter_From68,
    end=mdl.term(_VSConverter_C_function3, "Ec"),
    name="Connection5391",
    breakpoints=[],
)
_VSConverter_Connection5392 = mdl.create_connection(
    start=_VSConverter_From63,
    end=mdl.term(_VSConverter_C_function3, "ia"),
    name="Connection5392",
    breakpoints=[],
)
_VSConverter_Connection5393 = mdl.create_connection(
    start=_VSConverter_From64,
    end=mdl.term(_VSConverter_C_function3, "ib"),
    name="Connection5393",
    breakpoints=[],
)
_VSConverter_Connection5394 = mdl.create_connection(
    start=_VSConverter_From65,
    end=mdl.term(_VSConverter_C_function3, "ic"),
    name="Connection5394",
    breakpoints=[],
)
_VSConverter_Connection5400 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function3, "idc"),
    end=_VSConverter_Junction97,
    name="Connection5400",
    breakpoints=[],
)
_VSConverter_Connection5401 = mdl.create_connection(
    start=_VSConverter_Junction97,
    end=mdl.term(_VSConverter_DC_C, "in"),
    name="Connection5401",
    breakpoints=[],
)
_VSConverter_Connection5402 = mdl.create_connection(
    start=_VSConverter_Goto42,
    end=_VSConverter_Junction97,
    name="Connection5402",
    breakpoints=[],
)
_VSConverter_Connection5403 = mdl.create_connection(
    start=_VSConverter_From69,
    end=mdl.term(_VSConverter_Isp1, "in"),
    name="Connection5403",
    breakpoints=[],
)
_VSConverter_Connection5404 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function3, "Ea"),
    end=_VSConverter_From66,
    name="Connection5404",
    breakpoints=[],
)
_VSConverter_Connection5405 = mdl.create_connection(
    start=_VSConverter_Goto41,
    end=_VSConverter_Junction98,
    name="Connection5405",
    breakpoints=[],
)
_VSConverter_Connection5406 = mdl.create_connection(
    start=_VSConverter_Junction98,
    end=mdl.term(_VSConverter_Va1, "out"),
    name="Connection5406",
    breakpoints=[],
)
_VSConverter_Connection5407 = mdl.create_connection(
    start=mdl.term(_VSConverter_DC_VDC, "in"),
    end=_VSConverter_Junction98,
    name="Connection5407",
    breakpoints=[],
)
_VSConverter_Connection5408 = mdl.create_connection(
    start=_VSConverter_From70,
    end=mdl.term(_VSConverter_C_function3, "Vdc"),
    name="Connection5408",
    breakpoints=[],
)
_VSConverter_Connection5409 = mdl.create_connection(
    start=_VSConverter_From71,
    end=mdl.term(_VSConverter_C_function3, "va"),
    name="Connection5409",
    breakpoints=[],
)
_VSConverter_Connection5410 = mdl.create_connection(
    start=_VSConverter_From72,
    end=mdl.term(_VSConverter_C_function3, "vb"),
    name="Connection5410",
    breakpoints=[],
)
_VSConverter_Connection5411 = mdl.create_connection(
    start=_VSConverter_From73,
    end=mdl.term(_VSConverter_C_function3, "vc"),
    name="Connection5411",
    breakpoints=[],
)
_VSConverter_Connection5416 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain25, "in"),
    end=_VSConverter_Junction29,
    name="Connection5416",
    breakpoints=[],
)
_VSConverter_Connection5419 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant27, "out"),
    end=mdl.term(_VSConverter_dq_to_abc1, "zero_input"),
    name="Connection5419",
    breakpoints=[],
)
_VSConverter_Connection5421 = mdl.create_connection(
    start=mdl.term(_VSConverter_Clock1, "out"),
    end=mdl.term(_VSConverter_Comparator1, "in1"),
    name="Connection5421",
    breakpoints=[],
)
_VSConverter_Connection5422 = mdl.create_connection(
    start=_VSConverter_From59,
    end=mdl.term(_VSConverter_Sum19, "in"),
    name="Connection5422",
    breakpoints=[],
)
_VSConverter_Connection5432 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9, "mag"),
    end=mdl.term(_VSConverter_Limit4, "in"),
    name="Connection5432",
    breakpoints=[],
)
_VSConverter_Connection5435 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product12, "out"),
    end=mdl.term(_VSConverter_Limit5, "in"),
    name="Connection5435",
    breakpoints=[],
)
_VSConverter_Connection5446 = mdl.create_connection(
    start=_VSConverter_Junction99,
    end=mdl.term(_VSConverter_Limit5, "out"),
    name="Connection5446",
    breakpoints=[],
)
_VSConverter_Connection5447 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product14, "in"),
    end=_VSConverter_Junction99,
    name="Connection5447",
    breakpoints=[],
)
_VSConverter_Connection5448 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum23, "out"),
    end=_VSConverter_Junction100,
    name="Connection5448",
    breakpoints=[],
)
_VSConverter_Connection5450 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9, "d"),
    end=_VSConverter_Junction100,
    name="Connection5450",
    breakpoints=[],
)
_VSConverter_Connection5459 = mdl.create_connection(
    start=_VSConverter_Junction100,
    end=_VSConverter_Junction103,
    name="Connection5459",
    breakpoints=[],
)
_VSConverter_Connection5460 = mdl.create_connection(
    start=_VSConverter_Junction103,
    end=mdl.term(_VSConverter_Product13, "in"),
    name="Connection5460",
    breakpoints=[],
)
_VSConverter_Connection5461 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch18, "in1"),
    end=_VSConverter_Junction103,
    name="Connection5461",
    breakpoints=[],
)
_VSConverter_Connection5462 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch18, "in"),
    end=mdl.term(_VSConverter_Product13, "out"),
    name="Connection5462",
    breakpoints=[],
)
_VSConverter_Connection5463 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch18, "out"),
    end=mdl.term(_VSConverter_dq_to_abc1, "d_input"),
    name="Connection5463",
    breakpoints=[],
)
_VSConverter_Connection5466 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product14, "out"),
    end=mdl.term(_VSConverter_Signal_switch19, "in"),
    name="Connection5466",
    breakpoints=[],
)
_VSConverter_Connection5467 = mdl.create_connection(
    start=mdl.term(_VSConverter_Subsystem9, "q"),
    end=_VSConverter_Junction104,
    name="Connection5467",
    breakpoints=[],
)
_VSConverter_Connection5468 = mdl.create_connection(
    start=_VSConverter_Junction104,
    end=mdl.term(_VSConverter_Sum24, "out"),
    name="Connection5468",
    breakpoints=[],
)
_VSConverter_Connection5470 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product14, "in1"),
    end=_VSConverter_Junction105,
    name="Connection5470",
    breakpoints=[],
)
_VSConverter_Connection5471 = mdl.create_connection(
    start=_VSConverter_Junction105,
    end=_VSConverter_Junction104,
    name="Connection5471",
    breakpoints=[],
)
_VSConverter_Connection5472 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch19, "in1"),
    end=_VSConverter_Junction105,
    name="Connection5472",
    breakpoints=[],
)
_VSConverter_Connection5473 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch19, "out"),
    end=mdl.term(_VSConverter_dq_to_abc1, "q_input"),
    name="Connection5473",
    breakpoints=[],
)
_VSConverter_Connection5474 = mdl.create_connection(
    start=_VSConverter_From74,
    end=mdl.term(_VSConverter_Gain35, "in"),
    name="Connection5474",
    breakpoints=[],
)
_VSConverter_Connection5475 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain35, "out"),
    end=mdl.term(_VSConverter_Limit3, "in"),
    name="Connection5475",
    breakpoints=[],
)
_VSConverter_Connection5481 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product13, "in1"),
    end=_VSConverter_Junction99,
    name="Connection5481",
    breakpoints=[],
)
_VSConverter_Connection5482 = mdl.create_connection(
    start=mdl.term(_VSConverter_Limit3, "out"),
    end=_VSConverter_Junction106,
    name="Connection5482",
    breakpoints=[],
)
_VSConverter_Connection5483 = mdl.create_connection(
    start=_VSConverter_Junction106,
    end=mdl.term(_VSConverter_Product12, "in"),
    name="Connection5483",
    breakpoints=[],
)
_VSConverter_Connection5484 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product15, "in1"),
    end=_VSConverter_Junction106,
    name="Connection5484",
    breakpoints=[],
)
_VSConverter_Connection5485 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product12, "in1"),
    end=_VSConverter_Junction107,
    name="Connection5485",
    breakpoints=[],
)
_VSConverter_Connection5486 = mdl.create_connection(
    start=_VSConverter_Junction107,
    end=mdl.term(_VSConverter_Limit4, "out"),
    name="Connection5486",
    breakpoints=[],
)
_VSConverter_Connection5487 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product15, "in"),
    end=_VSConverter_Junction107,
    name="Connection5487",
    breakpoints=[],
)
_VSConverter_Connection5488 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product15, "out"),
    end=mdl.term(_VSConverter_Limit6, "in"),
    name="Connection5488",
    breakpoints=[],
)
_VSConverter_Connection5489 = mdl.create_connection(
    start=mdl.term(_VSConverter_Limit6, "out"),
    end=_VSConverter_Goto43,
    name="Connection5489",
    breakpoints=[],
)
_VSConverter_Connection5491 = mdl.create_connection(
    start=_VSConverter_From76,
    end=mdl.term(_VSConverter_Signal_switch19, "in2"),
    name="Connection5491",
    breakpoints=[],
)
_VSConverter_Connection5492 = mdl.create_connection(
    start=_VSConverter_From75,
    end=mdl.term(_VSConverter_Signal_switch18, "in2"),
    name="Connection5492",
    breakpoints=[],
)
_VSConverter_Connection5493 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function3, "Ea1"),
    end=_VSConverter_Goto44,
    name="Connection5493",
    breakpoints=[],
)
_VSConverter_Connection5494 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function3, "Eb1"),
    end=_VSConverter_Goto45,
    name="Connection5494",
    breakpoints=[],
)
_VSConverter_Connection5495 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function3, "Ec1"),
    end=_VSConverter_Goto46,
    name="Connection5495",
    breakpoints=[],
)
_VSConverter_Connection5500 = mdl.create_connection(
    start=_VSConverter_From77,
    end=_VSConverter_Junction108,
    name="Connection5500",
    breakpoints=[],
)
_VSConverter_Connection5501 = mdl.create_connection(
    start=_VSConverter_Junction108,
    end=mdl.term(_VSConverter_C_function3, "mc"),
    name="Connection5501",
    breakpoints=[],
)
_VSConverter_Connection5502 = mdl.create_connection(
    start=mdl.term(_VSConverter_DC_m0, "in"),
    end=_VSConverter_Junction108,
    name="Connection5502",
    breakpoints=[],
)
_VSConverter_Connection5503 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant43, "out"),
    end=mdl.term(_VSConverter_C_function3, "con_en"),
    name="Connection5503",
    breakpoints=[],
)
_VSConverter_Connection5504 = mdl.create_connection(
    start=_VSConverter_From79,
    end=mdl.term(_VSConverter_Product16, "in"),
    name="Connection5504",
    breakpoints=[],
)
_VSConverter_Connection5505 = mdl.create_connection(
    start=_VSConverter_From80,
    end=mdl.term(_VSConverter_Product16, "in1"),
    name="Connection5505",
    breakpoints=[],
)
_VSConverter_Connection5506 = mdl.create_connection(
    start=mdl.term(_VSConverter_Product16, "out"),
    end=mdl.term(_VSConverter_Gain36, "in"),
    name="Connection5506",
    breakpoints=[],
)
_VSConverter_Connection5507 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain36, "out"),
    end=mdl.term(_VSConverter_DC_Pow, "in"),
    name="Connection5507",
    breakpoints=[],
)
_VSConverter_Connection5508 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain30, "out"),
    end=mdl.term(_VSConverter_Sum14, "in"),
    name="Connection5508",
    breakpoints=[],
)
_VSConverter_Connection5509 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant44, "out"),
    end=_VSConverter_Goto47,
    name="Connection5509",
    breakpoints=[],
)
_VSConverter_Connection5510 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant25, "out"),
    end=mdl.term(_VSConverter_Gain37, "in"),
    name="Connection5510",
    breakpoints=[],
)
_VSConverter_Connection5511 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain37, "out"),
    end=_VSConverter_Goto12,
    name="Connection5511",
    breakpoints=[],
)
_VSConverter_Connection5513 = mdl.create_connection(
    start=mdl.term(_VSConverter_abc_to_dq1, "va"),
    end=_VSConverter_From32,
    name="Connection5513",
    breakpoints=[],
)
_VSConverter_Connection5515 = mdl.create_connection(
    start=_VSConverter_From33,
    end=mdl.term(_VSConverter_abc_to_dq1, "vb"),
    name="Connection5515",
    breakpoints=[],
)
_VSConverter_Connection5512 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum25, "out"),
    end=_VSConverter_Goto40,
    name="Connection5512",
    breakpoints=[],
)
_VSConverter_Connection5514 = mdl.create_connection(
    start=mdl.term(_VSConverter_abc_to_dq1, "vc"),
    end=_VSConverter_From34,
    name="Connection5514",
    breakpoints=[],
)
_VSConverter_Connection5522 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum14, "out"),
    end=mdl.term(_VSConverter_Gain38, "in"),
    name="Connection5522",
    breakpoints=[],
)
_VSConverter_Connection5530 = mdl.create_connection(
    start=_VSConverter_From16,
    end=mdl.term(_VSConverter_Signal_switch12, "in2"),
    name="Connection5530",
    breakpoints=[],
)
_VSConverter_Connection5531 = mdl.create_connection(
    start=_VSConverter_From24,
    end=mdl.term(_VSConverter_Signal_switch17, "in2"),
    name="Connection5531",
    breakpoints=[],
)
_VSConverter_Connection5536 = mdl.create_connection(
    start=_VSConverter_Junction110,
    end=_VSConverter_Junction95,
    name="Connection5536",
    breakpoints=[],
)
_VSConverter_Connection5537 = mdl.create_connection(
    start=mdl.term(_VSConverter_R_SN, "p_node"),
    end=_VSConverter_Junction110,
    name="Connection5537",
    breakpoints=[],
)
_VSConverter_Connection5539 = mdl.create_connection(
    start=_VSConverter_Junction111,
    end=_VSConverter_Junction94,
    name="Connection5539",
    breakpoints=[],
)
_VSConverter_Connection5540 = mdl.create_connection(
    start=mdl.term(_VSConverter_R_SN, "n_node"),
    end=_VSConverter_Junction111,
    name="Connection5540",
    breakpoints=[],
)
_VSConverter_Connection5541 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain38, "out"),
    end=mdl.term(_VSConverter_Signal_switch17, "in1"),
    name="Connection5541",
    breakpoints=[],
)
_VSConverter_Connection5542 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant3, "out"),
    end=mdl.term(_VSConverter_C_function2, "ang_init"),
    name="Connection5542",
    breakpoints=[],
)
_VSConverter_Connection5543 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum11, "out"),
    end=mdl.term(_VSConverter_Gain39, "in"),
    name="Connection5543",
    breakpoints=[],
)
_VSConverter_Connection5544 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain39, "out"),
    end=mdl.term(_VSConverter_Signal_switch12, "in1"),
    name="Connection5544",
    breakpoints=[],
)
_VSConverter_Connection5545 = mdl.create_connection(
    start=_VSConverter_From14,
    end=mdl.term(_VSConverter_Gain40, "in"),
    name="Connection5545",
    breakpoints=[],
)
_VSConverter_Connection5546 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain40, "out"),
    end=mdl.term(_VSConverter_Sum11, "in1"),
    name="Connection5546",
    breakpoints=[],
)
_VSConverter_Connection5547 = mdl.create_connection(
    start=mdl.term(_VSConverter_C_function1, "GF_en"),
    end=_VSConverter_Goto48,
    name="Connection5547",
    breakpoints=[],
)
_VSConverter_Connection5548 = mdl.create_connection(
    start=_VSConverter_From81,
    end=mdl.term(_VSConverter_Signal_switch20, "in2"),
    name="Connection5548",
    breakpoints=[],
)
_VSConverter_Connection5550 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch20, "out"),
    end=_VSConverter_Goto8,
    name="Connection5550",
    breakpoints=[],
)
_VSConverter_Connection5554 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant45, "out"),
    end=mdl.term(_VSConverter_Signal_switch20, "in"),
    name="Connection5554",
    breakpoints=[],
)
_VSConverter_Connection5563 = mdl.create_connection(
    start=_VSConverter_From82,
    end=mdl.term(_VSConverter_Signal_switch21, "in2"),
    name="Connection5563",
    breakpoints=[],
)
_VSConverter_Connection5565 = mdl.create_connection(
    start=_VSConverter_From60,
    end=mdl.term(_VSConverter_Signal_switch21, "in1"),
    name="Connection5565",
    breakpoints=[],
)
_VSConverter_Connection5566 = mdl.create_connection(
    start=mdl.term(_VSConverter_Unit_Delay1, "out"),
    end=mdl.term(_VSConverter_Signal_switch21, "in"),
    name="Connection5566",
    breakpoints=[],
)
_VSConverter_Connection5567 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch21, "out"),
    end=_VSConverter_Junction113,
    name="Connection5567",
    breakpoints=[],
)
_VSConverter_Connection5568 = mdl.create_connection(
    start=_VSConverter_Junction113,
    end=mdl.term(_VSConverter_Sum25, "in"),
    name="Connection5568",
    breakpoints=[],
)
_VSConverter_Connection5569 = mdl.create_connection(
    start=mdl.term(_VSConverter_Unit_Delay1, "in"),
    end=_VSConverter_Junction113,
    name="Connection5569",
    breakpoints=[],
)
_VSConverter_Connection5570 = mdl.create_connection(
    start=mdl.term(_VSConverter_Limit2, "in"),
    end=mdl.term(_VSConverter_Sum8, "out"),
    name="Connection5570",
    breakpoints=[],
)
_VSConverter_Connection5571 = mdl.create_connection(
    start=mdl.term(_VSConverter_Limit1, "out"),
    end=_VSConverter_Goto33,
    name="Connection5571",
    breakpoints=[],
)
_VSConverter_Connection5574 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vinv_b, "in"),
    end=_VSConverter_From42,
    name="Connection5574",
    breakpoints=[],
)
_VSConverter_Connection5573 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vinv_a, "in"),
    end=_VSConverter_From41,
    name="Connection5573",
    breakpoints=[],
)
_VSConverter_Connection5572 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vinv_c, "in"),
    end=_VSConverter_From43,
    name="Connection5572",
    breakpoints=[],
)
_VSConverter_Connection5577 = mdl.create_connection(
    start=mdl.term(_VSConverter_abc_to_dq2, "zero_axis"),
    end=mdl.term(_VSConverter_Termination100, "in"),
    name="Connection5577",
    breakpoints=[],
)
_VSConverter_Connection5578 = mdl.create_connection(
    start=mdl.term(_VSConverter_Termination101, "in"),
    end=mdl.term(_VSConverter_abc_to_dq1, "zero_axis"),
    name="Connection5578",
    breakpoints=[],
)
_VSConverter_Connection5579 = mdl.create_connection(
    start=mdl.term(_VSConverter_Termination102, "in"),
    end=mdl.term(_VSConverter_Subsystem9, "Angle"),
    name="Connection5579",
    breakpoints=[],
)
_VSConverter_Connection5582 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain21, "in"),
    end=mdl.term(_VSConverter_Gain9, "out"),
    name="Connection5582",
    breakpoints=[],
)
_VSConverter_Connection5583 = mdl.create_connection(
    start=mdl.term(_VSConverter_P_gen, "in"),
    end=_VSConverter_Junction114,
    name="Connection5583",
    breakpoints=[],
)
_VSConverter_Connection5584 = mdl.create_connection(
    start=_VSConverter_Junction114,
    end=mdl.term(_VSConverter_Gain21, "out"),
    name="Connection5584",
    breakpoints=[],
)
_VSConverter_Connection5585 = mdl.create_connection(
    start=_VSConverter_Goto5,
    end=_VSConverter_Junction114,
    name="Connection5585",
    breakpoints=[],
)
_VSConverter_Connection5586 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain10, "out"),
    end=mdl.term(_VSConverter_Gain22, "in"),
    name="Connection5586",
    breakpoints=[],
)
_VSConverter_Connection5587 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain22, "out"),
    end=_VSConverter_Junction115,
    name="Connection5587",
    breakpoints=[],
)
_VSConverter_Connection5588 = mdl.create_connection(
    start=_VSConverter_Junction115,
    end=mdl.term(_VSConverter_Q_gen, "in"),
    name="Connection5588",
    breakpoints=[],
)
_VSConverter_Connection5589 = mdl.create_connection(
    start=_VSConverter_Goto6,
    end=_VSConverter_Junction115,
    name="Connection5589",
    breakpoints=[],
)
_VSConverter_Connection5591 = mdl.create_connection(
    start=_VSConverter_Junction35,
    end=mdl.term(_VSConverter_Vinv_a, "n_node"),
    name="Connection5591",
    breakpoints=[],
)
_VSConverter_Connection5597 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vc, "n_node"),
    end=_VSConverter_Junction116,
    name="Connection5597",
    breakpoints=[],
)
_VSConverter_Connection5598 = mdl.create_connection(
    start=_VSConverter_Junction116,
    end=mdl.term(_VSConverter_Vb, "n_node"),
    name="Connection5598",
    breakpoints=[],
)
_VSConverter_Connection5600 = mdl.create_connection(
    start=mdl.term(_VSConverter_Va, "n_node"),
    end=_VSConverter_Junction117,
    name="Connection5600",
    breakpoints=[],
)
_VSConverter_Connection5601 = mdl.create_connection(
    start=_VSConverter_Junction117,
    end=_VSConverter_Junction116,
    name="Connection5601",
    breakpoints=[],
)
_VSConverter_Connection5602 = mdl.create_connection(
    start=mdl.term(_VSConverter_Vinv_c, "n_node"),
    end=_VSConverter_Junction118,
    name="Connection5602",
    breakpoints=[],
)
_VSConverter_Connection5603 = mdl.create_connection(
    start=_VSConverter_Junction118,
    end=_VSConverter_Junction35,
    name="Connection5603",
    breakpoints=[],
)
_VSConverter_Connection5604 = mdl.create_connection(
    start=_VSConverter_Junction117,
    end=_VSConverter_Junction118,
    name="Connection5604",
    breakpoints=[],
)
_VSConverter_Connection5605 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum9, "out"),
    end=mdl.term(_VSConverter_Rate_Limiter1, "in"),
    name="Connection5605",
    breakpoints=[],
)
_VSConverter_Connection5607 = mdl.create_connection(
    start=_VSConverter_Junction47,
    end=_VSConverter_Junction119,
    name="Connection5607",
    breakpoints=[],
)
_VSConverter_Connection5608 = mdl.create_connection(
    start=_VSConverter_Junction119,
    end=_VSConverter_Goto7,
    name="Connection5608",
    breakpoints=[],
)
_VSConverter_Connection5609 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch20, "in1"),
    end=_VSConverter_Junction119,
    name="Connection5609",
    breakpoints=[],
)
_VSConverter_Connection5610 = mdl.create_connection(
    start=_VSConverter_DC_,
    end=_VSConverter_Junction120,
    name="Connection5610",
    breakpoints=[],
)
_VSConverter_Connection5611 = mdl.create_connection(
    start=_VSConverter_Junction120,
    end=_VSConverter_Junction111,
    name="Connection5611",
    breakpoints=[],
)
_VSConverter_Connection5612 = mdl.create_connection(
    start=_VSConverter_DC_,
    end=_VSConverter_Junction121,
    name="Connection5612",
    breakpoints=[],
)
_VSConverter_Connection5613 = mdl.create_connection(
    start=_VSConverter_Junction121,
    end=_VSConverter_Junction110,
    name="Connection5613",
    breakpoints=[],
)
_VSConverter_dcConnp = mdl.create_connection(
    start=mdl.term(_VSConverter_dccap, "p_node"),
    end=_VSConverter_Junction121,
    name="dcConnp",
    breakpoints=[],
)
_VSConverter_dcConnn = mdl.create_connection(
    start=mdl.term(_VSConverter_dccap, "n_node"),
    end=_VSConverter_Junction120,
    name="dcConnn",
    breakpoints=[],
)
_VSConverter_Connection5644 = mdl.create_connection(
    start=mdl.term(_VSConverter_Discrete_Transfer_Function1, "out"),
    end=mdl.term(_VSConverter_Sum29, "in"),
    name="Connection5644",
    breakpoints=[],
)
_VSConverter_Connection5645 = mdl.create_connection(
    start=mdl.term(_VSConverter_Discrete_Transfer_Function1, "in"),
    end=mdl.term(_VSConverter_Sum28, "out"),
    name="Connection5645",
    breakpoints=[],
)
_VSConverter_Connection5647 = mdl.create_connection(
    start=_VSConverter_Junction126,
    end=mdl.term(_VSConverter_Sum28, "in1"),
    name="Connection5647",
    breakpoints=[],
)
_VSConverter_Connection5648 = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum29, "in1"),
    end=_VSConverter_Junction126,
    name="Connection5648",
    breakpoints=[],
)
_VSConverter_Connection5650 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant47, "out"),
    end=mdl.term(_VSConverter_Gain42, "in"),
    name="Connection5650",
    breakpoints=[],
)
_VSConverter_Connection5651 = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain42, "out"),
    end=_VSConverter_Junction126,
    name="Connection5651",
    breakpoints=[],
)
_VSConverter_Connection5652 = mdl.create_connection(
    start=_VSConverter_From85,
    end=mdl.term(_VSConverter_Signal_switch24, "in2"),
    name="Connection5652",
    breakpoints=[],
)
_VSConverter_Connection5653 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch24, "in"),
    end=mdl.term(_VSConverter_Sum29, "out"),
    name="Connection5653",
    breakpoints=[],
)
_VSConverter_Connection5654 = mdl.create_connection(
    start=_VSConverter_From39,
    end=_VSConverter_Junction127,
    name="Connection5654",
    breakpoints=[],
)
_VSConverter_Connection5655 = mdl.create_connection(
    start=_VSConverter_Junction127,
    end=mdl.term(_VSConverter_Sum28, "in"),
    name="Connection5655",
    breakpoints=[],
)
_VSConverter_Connection5656 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch24, "in1"),
    end=_VSConverter_Junction127,
    name="Connection5656",
    breakpoints=[],
)
_VSConverter_Connection5657 = mdl.create_connection(
    start=mdl.term(_VSConverter_Signal_switch24, "out"),
    end=mdl.term(_VSConverter_Sum23, "in"),
    name="Connection5657",
    breakpoints=[],
)
_VSConverter_Connection3 = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant102, "out"),
    end=mdl.term(_VSConverter_T_switch, "mode"),
    name="Connection3",
    breakpoints=[],
)
_VSConverter_Connection5658 = mdl.create_connection(
    start=mdl.term(_VSConverter_T_switch, "T_out"),
    end=mdl.term(_VSConverter_TS_module, "T"),
    name="Connection5658",
    breakpoints=[],
)
_VSConverter_connmode = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain32, "in"),
    end=_VSConverter_From25,
    name="connmode",
    breakpoints=[],
)
_VSConverter_connP = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum9, "in"),
    end=_VSConverter_From11,
    name="connP",
    breakpoints=[],
)
_VSConverter_connQ = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum7, "in"),
    end=_VSConverter_From10,
    name="connQ",
    breakpoints=[],
)
_VSConverter_connV = mdl.create_connection(
    start=mdl.term(_VSConverter_Sum11, "in"),
    end=_VSConverter_From15,
    name="connV",
    breakpoints=[],
)
_VSConverter_connw = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain30, "in"),
    end=_VSConverter_From22,
    name="connw",
    breakpoints=[],
)
_VSConverter_connfs = mdl.create_connection(
    start=mdl.term(_VSConverter_Gain33, "in"),
    end=_VSConverter_From44,
    name="connfs",
    breakpoints=[],
)
_VSConverter_connPint = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant22, "out"),
    end=_VSConverter_Goto10,
    name="connPint",
    breakpoints=[],
)
_VSConverter_connQint = mdl.create_connection(
    start=mdl.term(_VSConverter_Constant23, "out"),
    end=_VSConverter_Goto11,
    name="connQint",
    breakpoints=[],
)
_Vsource_Connection25 = mdl.create_connection(
    start=mdl.term(_Vsource_Vb, "p_node"),
    end=mdl.term(_Vsource_TL1, "b_in"),
    name="Connection25",
    breakpoints=[],
)
_Vsource_Connection26 = mdl.create_connection(
    start=mdl.term(_Vsource_Va, "p_node"),
    end=mdl.term(_Vsource_TL1, "a_in"),
    name="Connection26",
    breakpoints=[],
)
_Vsource_Connection27 = mdl.create_connection(
    start=mdl.term(_Vsource_Vc, "p_node"),
    end=mdl.term(_Vsource_TL1, "c_in"),
    name="Connection27",
    breakpoints=[],
)
_Vsource_Connection28 = mdl.create_connection(
    start=mdl.term(_Vsource_TL1, "a_out"),
    end=_Vsource_A1,
    name="Connection28",
    breakpoints=[],
)
_Vsource_Connection29 = mdl.create_connection(
    start=_Vsource_B1,
    end=mdl.term(_Vsource_TL1, "b_out"),
    name="Connection29",
    breakpoints=[],
)
_Vsource_Connection30 = mdl.create_connection(
    start=mdl.term(_Vsource_TL1, "c_out"),
    end=_Vsource_C1,
    name="Connection30",
    breakpoints=[],
)
_Vsource_Connection31 = mdl.create_connection(
    start=mdl.term(_Vsource_gnd1, "node"),
    end=mdl.term(_Vsource_Va, "n_node"),
    name="Connection31",
    breakpoints=[],
)
_Vsource_Connection32 = mdl.create_connection(
    start=mdl.term(_Vsource_Vc, "n_node"),
    end=mdl.term(_Vsource_gnd1, "node"),
    name="Connection32",
    breakpoints=[],
)
_Vsource_Connection33 = mdl.create_connection(
    start=mdl.term(_Vsource_Vb, "n_node"),
    end=mdl.term(_Vsource_gnd1, "node"),
    name="Connection33",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2881 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator2, "in"),
    end=_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Junction560,
    name="Connection2881",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2882 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Logical_operator1, "in"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator1, "out"),
    name="Connection2882",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2883 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator2, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Logical_operator1, "in1"),
    name="Connection2883",
    breakpoints=[(8216, 8240), (8216, 8200)],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2884 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Junction560,
    end=_Storage_Inverter_Power_Reference_Constant_Z_mode_check_v_line,
    name="Connection2884",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2885 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Logical_operator1, "out"),
    end=_Storage_Inverter_Power_Reference_Constant_Z_mode_check_constant_z_mode,
    name="Connection2885",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2877 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vmaxpu, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator1, "in1"),
    name="Connection2877",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2878 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_vminpu, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator2, "in1"),
    name="Connection2878",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Connection2879 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Relational_operator1, "in"),
    end=_Storage_Inverter_Power_Reference_Constant_Z_mode_check_Junction560,
    name="Connection2879",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection47 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_kvar_calculation_kvar_out,
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "out"),
    name="Connection47",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection74 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_kvar_calculation_dispatch_int,
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "ctrl"),
    name="Connection74",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection101 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kwrated, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_Gain1, "in"),
    name="Connection101",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection103 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "in"),
    end=_Storage_Inverter_Power_Reference_kvar_calculation_Junction1,
    name="Connection103",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection104 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_kvar_calculation_Junction1,
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_unit_pf, "out"),
    name="Connection104",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection105 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "in3"),
    end=_Storage_Inverter_Power_Reference_kvar_calculation_Junction1,
    name="Connection105",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection107 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_Gain1, "out"),
    end=_Storage_Inverter_Power_Reference_kvar_calculation_Junction2,
    name="Connection107",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection108 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_kvar_calculation_Junction2,
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "in1"),
    name="Connection108",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection109 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "in4"),
    end=_Storage_Inverter_Power_Reference_kvar_calculation_Junction2,
    name="Connection109",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection111 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kvar_kvar, "out"),
    end=_Storage_Inverter_Power_Reference_kvar_calculation_Junction3,
    name="Connection111",
    breakpoints=[(8800, 8352)],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection112 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_kvar_calculation_Junction3,
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "in2"),
    name="Connection112",
    breakpoints=[(8800, 8240)],
)
_Storage_Inverter_Power_Reference_kvar_calculation_Connection113 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation_kVAr, "in5"),
    end=_Storage_Inverter_Power_Reference_kvar_calculation_Junction3,
    name="Connection113",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3376 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Data_Type_Conversion1, "out"),
    end=_Storage_Inverter_Power_Reference_Junction568,
    name="Connection3376",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3377 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Bus_Join1, "out"),
    end=_Storage_Inverter_Power_Reference_inv_inputs,
    name="Connection3377",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3112 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_dispatch_mode_int,
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation, "dispatch_int"),
    name="Connection3112",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3148 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product18, "in1"),
    end=_Storage_Inverter_Power_Reference_Junction18,
    name="Connection3148",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3150 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product18, "in"),
    end=_Storage_Inverter_Power_Reference_Junction18,
    name="Connection3150",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3155 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_vmax, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch4, "in"),
    name="Connection3155",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3156 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_vmin, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch4, "in1"),
    name="Connection3156",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3157 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction18,
    end=_Storage_Inverter_Power_Reference_Junction20,
    name="Connection3157",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3161 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product19, "in"),
    end=_Storage_Inverter_Power_Reference_Junction21,
    name="Connection3161",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3162 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction21,
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch4, "out"),
    name="Connection3162",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3163 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product19, "in1"),
    end=_Storage_Inverter_Power_Reference_Junction21,
    name="Connection3163",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3173 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product18, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Product16, "in1"),
    name="Connection3173",
    breakpoints=[(7208, 7864), (7208, 7768)],
)
_Storage_Inverter_Power_Reference_Connection3174 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_v_line,
    end=_Storage_Inverter_Power_Reference_Junction20,
    name="Connection3174",
    breakpoints=[(6800, 7872), (6800, 7872), (6800, 7872)],
)
_Storage_Inverter_Power_Reference_Connection3178 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product21, "in1"),
    end=mdl.term(_Storage_Inverter_Power_Reference_kvar_calculation, "kvar_out"),
    name="Connection3178",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection2900 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check, "constant_z_mode"),
    end=_Storage_Inverter_Power_Reference_Junction562,
    name="Connection2900",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection2901 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction562,
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch2, "in2"),
    name="Connection2901",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection2902 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_ctZ, "in"),
    end=_Storage_Inverter_Power_Reference_Junction562,
    name="Connection2902",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3183 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch4, "in2"),
    end=_Storage_Inverter_Power_Reference_Junction563,
    name="Connection3183",
    breakpoints=[(7024, 7616)],
)
_Storage_Inverter_Power_Reference_Connection3184 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction563,
    end=_Storage_Inverter_Power_Reference_Junction20,
    name="Connection3184",
    breakpoints=[(6800, 7688), (6800, 7712), (6800, 7832)],
)
_Storage_Inverter_Power_Reference_Connection3185 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant_Z_mode_check, "v_line"),
    end=_Storage_Inverter_Power_Reference_Junction563,
    name="Connection3185",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3188 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_const_p_mult, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch2, "in1"),
    name="Connection3188",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3189 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product20, "in"),
    end=_Storage_Inverter_Power_Reference_Junction564,
    name="Connection3189",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3190 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction564,
    end=mdl.term(_Storage_Inverter_Power_Reference_Product21, "in"),
    name="Connection3190",
    breakpoints=[(7536, 7904)],
)
_Storage_Inverter_Power_Reference_Connection3191 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch2, "out"),
    end=_Storage_Inverter_Power_Reference_Junction564,
    name="Connection3191",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3193 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_active_status,
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch3, "in2"),
    name="Connection3193",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3194 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Constant1, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch3, "in1"),
    name="Connection3194",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3195 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch3, "in"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Product20, "out"),
    name="Connection3195",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3203 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product19, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Product16, "in"),
    name="Connection3203",
    breakpoints=[(7208, 7688)],
)
_Storage_Inverter_Power_Reference_Connection3204 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Product16, "out"),
    end=_Storage_Inverter_Power_Reference_Junction566,
    name="Connection3204",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3205 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction566,
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch2, "in"),
    name="Connection3205",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3206 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_ctz_multiplier, "in"),
    end=_Storage_Inverter_Power_Reference_Junction566,
    name="Connection3206",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3208 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Data_Type_Conversion1, "in"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Product21, "out"),
    name="Connection3208",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3210 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Limit1, "in"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Signal_switch3, "out"),
    name="Connection3210",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3216 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_enable_inverter, "out"),
    end=mdl.term(_Storage_Inverter_Power_Reference_Bus_Join1, "in"),
    name="Connection3216",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3368 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_dss_kw,
    end=mdl.term(_Storage_Inverter_Power_Reference_Product20, "in1"),
    name="Connection3368",
    breakpoints=[(7360, 7920)],
)
_Storage_Inverter_Power_Reference_Connection3371 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Inverter_P_Reference, "in"),
    end=_Storage_Inverter_Power_Reference_Junction567,
    name="Connection3371",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3372 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction567,
    end=mdl.term(_Storage_Inverter_Power_Reference_Bus_Join1, "in1"),
    name="Connection3372",
    breakpoints=[(8056, 7936)],
)
_Storage_Inverter_Power_Reference_Connection3373 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Limit1, "out"),
    end=_Storage_Inverter_Power_Reference_Junction567,
    name="Connection3373",
    breakpoints=[],
)
_Storage_Inverter_Power_Reference_Connection3374 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference_Bus_Join1, "in2"),
    end=_Storage_Inverter_Power_Reference_Junction568,
    name="Connection3374",
    breakpoints=[(8056, 8000)],
)
_Storage_Inverter_Power_Reference_Connection3375 = mdl.create_connection(
    start=_Storage_Inverter_Power_Reference_Junction568,
    end=mdl.term(_Storage_Inverter_Power_Reference_Inverter_Q_Reference, "in"),
    name="Connection3375",
    breakpoints=[(8056, 8064), (8056, 8064)],
)
_Storage_Active_status_Connection3 = mdl.create_connection(
    start=mdl.term(_Storage_Active_status_Logical_operator1, "out"),
    end=mdl.term(_Storage_Active_status_bool_to_real, "in"),
    name="Connection3",
    breakpoints=[],
)
_Storage_Active_status_Connection4 = mdl.create_connection(
    start=mdl.term(_Storage_Active_status_bool_to_real, "out"),
    end=_Storage_Active_status_Out3,
    name="Connection4",
    breakpoints=[],
)
_Storage_Active_status_Connection2 = mdl.create_connection(
    start=mdl.term(_Storage_Active_status_Logical_operator1, "in"),
    end=_Storage_Active_status_In1,
    name="Connection2",
    breakpoints=[],
)
_Storage_Active_status_Connection1 = mdl.create_connection(
    start=mdl.term(_Storage_Active_status_Logical_operator1, "in1"),
    end=_Storage_Active_status_In2,
    name="Connection1",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3282 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Abs1, "in"),
    end=_Storage_Ch___Dch_Losses_Current_Calc_Junction1,
    name="Connection3282",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3193 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch3, "out"),
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Power1, "in"),
    name="Connection3193",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3214 = mdl.create_connection(
    start=_Storage_Ch___Dch_Losses_Current_Calc_i_ch_dch_losses,
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch4, "out"),
    name="Connection3214",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3215 = mdl.create_connection(
    start=_Storage_Ch___Dch_Losses_Current_Calc_active_bat,
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch4, "in2"),
    name="Connection3215",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3216 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Constant1, "out"),
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch4, "in1"),
    name="Connection3216",
    breakpoints=[(8864, 8320), (8864, 8256)],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3228 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_charge_losses, "out"),
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch3, "in"),
    name="Connection3228",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3229 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_discharge_losses, "out"),
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch3, "in1"),
    name="Connection3229",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3249 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Abs1, "out"),
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Power1, "in1"),
    name="Connection3249",
    breakpoints=[(8360, 8400), (8360, 8208)],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3269 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Power1, "out"),
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch4, "in"),
    name="Connection3269",
    breakpoints=[],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3280 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc_Signal_switch3, "in2"),
    end=_Storage_Ch___Dch_Losses_Current_Calc_Junction1,
    name="Connection3280",
    breakpoints=[(8240, 8064), (8240, 8064)],
)
_Storage_Ch___Dch_Losses_Current_Calc_Connection3281 = mdl.create_connection(
    start=_Storage_Ch___Dch_Losses_Current_Calc_Junction1,
    end=_Storage_Ch___Dch_Losses_Current_Calc_i_minus_idle,
    name="Connection3281",
    breakpoints=[(7960, 8064), (7944, 8064), (7944, 8064), (7944, 8064)],
)
_Storage_Dispatch_Mode_Integer_Connection95 = mdl.create_connection(
    start=_Storage_Dispatch_Mode_Integer_dispatch_mode_int,
    end=mdl.term(_Storage_Dispatch_Mode_Integer_kw_mode, "out"),
    name="Connection95",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3225 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Signal_switch3, "in"),
    end=_Storage_Battery_Energy_Junction611,
    name="Connection3225",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3227 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Constant1, "out"),
    end=mdl.term(_Storage_Battery_Energy_Signal_switch3, "in1"),
    name="Connection3227",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3389 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_E_meas_sw, "in"),
    end=mdl.term(_Storage_Battery_Energy_Signal_switch3, "out"),
    name="Connection3389",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3390 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_E_meas_sw, "in1"),
    end=mdl.term(_Storage_Battery_Energy_Step1, "out"),
    name="Connection3390",
    breakpoints=[(8080, 8256), (8080, 8336)],
)
_Storage_Battery_Energy_Connection3402 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Energy, "out"),
    end=_Storage_Battery_Energy_Junction627,
    name="Connection3402",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3404 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Gain3, "in"),
    end=_Storage_Battery_Energy_Junction627,
    name="Connection3404",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3405 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_E_meas_sw, "out"),
    end=mdl.term(_Storage_Battery_Energy_Gain4, "in"),
    name="Connection3405",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3412 = mdl.create_connection(
    start=_Storage_Battery_Energy_Junction627,
    end=_Storage_Battery_Energy_Battery_Energy,
    name="Connection3412",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3411 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Signal_switch3, "in2"),
    end=_Storage_Battery_Energy_In3,
    name="Connection3411",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3413 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Power, "in"),
    end=_Storage_Battery_Energy_Vbat,
    name="Connection3413",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3410 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Power, "in1"),
    end=_Storage_Battery_Energy_Ibat,
    name="Connection3410",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3414 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Energy, "in"),
    end=mdl.term(_Storage_Battery_Energy_Gain4, "out"),
    name="Connection3414",
    breakpoints=[(8248, 8248)],
)
_Storage_Battery_Energy_Connection2733 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_SOC, "in"),
    end=mdl.term(_Storage_Battery_Energy_Gain3, "out"),
    name="Connection2733",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3223 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Energy_Power, "out"),
    end=_Storage_Battery_Energy_Junction611,
    name="Connection3223",
    breakpoints=[],
)
_Storage_Battery_Energy_Connection3224 = mdl.create_connection(
    start=_Storage_Battery_Energy_Junction611,
    end=mdl.term(_Storage_Battery_Energy_Battery_Power, "in"),
    name="Connection3224",
    breakpoints=[(7936, 8224), (7936, 8224), (7936, 8128)],
)
_Storage_Loadshape_Point_Selector_Connection2 = mdl.create_connection(
    start=_Storage_Loadshape_Point_Selector_point,
    end=mdl.term(_Storage_Loadshape_Point_Selector_Selector, "point"),
    name="Connection2",
    breakpoints=[],
)
_Storage_Loadshape_Point_Selector_Connection14 = mdl.create_connection(
    start=mdl.term(_Storage_Loadshape_Point_Selector_Selector, "out"),
    end=_Storage_Loadshape_Point_Selector_Junction1,
    name="Connection14",
    breakpoints=[],
)
_Storage_Loadshape_Point_Selector_Connection15 = mdl.create_connection(
    start=_Storage_Loadshape_Point_Selector_Junction1,
    end=mdl.term(_Storage_Loadshape_Point_Selector_Loadshape_Value, "in"),
    name="Connection15",
    breakpoints=[(8464, 8208)],
)
_Storage_Loadshape_Point_Selector_Connection16 = mdl.create_connection(
    start=_Storage_Loadshape_Point_Selector_loadshape_point,
    end=_Storage_Loadshape_Point_Selector_Junction1,
    name="Connection16",
    breakpoints=[],
)
_Storage_Loadshape_Point_Selector_Connection1 = mdl.create_connection(
    start=mdl.term(_Storage_Loadshape_Point_Selector_loadshape, "out"),
    end=mdl.term(_Storage_Loadshape_Point_Selector_Selector, "loadshape"),
    name="Connection1",
    breakpoints=[],
)
_Storage_Connection26 = mdl.create_connection(
    start=mdl.term(_Storage_dchtrigger, "out"),
    end=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "dchtrigger"),
    name="Connection26",
    breakpoints=[],
)
_Storage_Connection27 = mdl.create_connection(
    start=mdl.term(_Storage_chtrigger, "out"),
    end=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "chtrigger"),
    name="Connection27",
    breakpoints=[],
)
_Storage_Connection2952 = mdl.create_connection(
    start=_Storage_From7,
    end=mdl.term(_Storage_Active_status, "In1"),
    name="Connection2952",
    breakpoints=[],
)
_Storage_Connection2953 = mdl.create_connection(
    start=_Storage_From12,
    end=mdl.term(_Storage_Active_status, "In2"),
    name="Connection2953",
    breakpoints=[],
)
_Storage_Connection3009 = mdl.create_connection(
    start=mdl.term(_Storage_Active_status, "Out3"),
    end=_Storage_Junction581,
    name="Connection3009",
    breakpoints=[],
)
_Storage_Connection3010 = mdl.create_connection(
    start=_Storage_Junction581,
    end=_Storage_Goto9,
    name="Connection3010",
    breakpoints=[],
)
_Storage_Connection3011 = mdl.create_connection(
    start=mdl.term(_Storage_Battery_Active, "in"),
    end=_Storage_Junction581,
    name="Connection3011",
    breakpoints=[],
)
_Storage_Connection3178 = mdl.create_connection(
    start=mdl.term(_Storage_i_ch_dch_losses, "p_node"),
    end=_Storage_Junction603,
    name="Connection3178",
    breakpoints=[],
)
_Storage_Connection3189 = mdl.create_connection(
    start=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc, "i_ch|dch_losses"),
    end=mdl.term(_Storage_i_ch_dch_losses, "in"),
    name="Connection3189",
    breakpoints=[(8344, 8192), (8344, 8304)],
)
_Storage_Connection3228 = mdl.create_connection(
    start=_Storage_From19,
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc, "active_bat"),
    name="Connection3228",
    breakpoints=[],
)
_Storage_Connection3266 = mdl.create_connection(
    start=mdl.term(_Storage_Three_phase_Meter1, "A+"),
    end=mdl.term(_Storage_Simple_Battery_inverter__Average_1, "A"),
    name="Connection3266",
    breakpoints=[],
)
_Storage_Connection3267 = mdl.create_connection(
    start=mdl.term(_Storage_Simple_Battery_inverter__Average_1, "B"),
    end=mdl.term(_Storage_Three_phase_Meter1, "B+"),
    name="Connection3267",
    breakpoints=[],
)
_Storage_Connection3269 = mdl.create_connection(
    start=mdl.term(_Storage_Simple_Battery_inverter__Average_1, "C"),
    end=mdl.term(_Storage_Three_phase_Meter1, "C+"),
    name="Connection3269",
    breakpoints=[],
)
_Storage_Connection3271 = mdl.create_connection(
    start=mdl.term(_Storage_Meter_Split1, "Input"),
    end=mdl.term(_Storage_Three_phase_Meter1, "Out"),
    name="Connection3271",
    breakpoints=[],
)
_Storage_Connection3278 = mdl.create_connection(
    start=_Storage_A1,
    end=mdl.term(_Storage_Three_phase_Meter1, "A-"),
    name="Connection3278",
    breakpoints=[],
)
_Storage_Connection3281 = mdl.create_connection(
    start=_Storage_C1,
    end=mdl.term(_Storage_Three_phase_Meter1, "C-"),
    name="Connection3281",
    breakpoints=[],
)
_Storage_Connection3280 = mdl.create_connection(
    start=_Storage_B1,
    end=mdl.term(_Storage_Three_phase_Meter1, "B-"),
    name="Connection3280",
    breakpoints=[],
)
_Storage_Connection3282 = mdl.create_connection(
    start=mdl.term(_Storage_Q, "in"),
    end=mdl.term(_Storage_Meter_Split1, "POWER_Q"),
    name="Connection3282",
    breakpoints=[],
)
_Storage_Connection3283 = mdl.create_connection(
    start=mdl.term(_Storage_pf, "in"),
    end=mdl.term(_Storage_Meter_Split1, "POWER_PF"),
    name="Connection3283",
    breakpoints=[],
)
_Storage_Connection3284 = mdl.create_connection(
    start=mdl.term(_Storage_P, "in"),
    end=mdl.term(_Storage_Meter_Split1, "POWER_P"),
    name="Connection3284",
    breakpoints=[],
)
_Storage_Connection3291 = mdl.create_connection(
    start=_Storage_Junction616,
    end=mdl.term(_Storage_Meter_Split1, "VLL_RMS"),
    name="Connection3291",
    breakpoints=[],
)
_Storage_Connection3292 = mdl.create_connection(
    start=mdl.term(_Storage_Vline, "in"),
    end=_Storage_Junction616,
    name="Connection3292",
    breakpoints=[],
)
_Storage_Connection3295 = mdl.create_connection(
    start=mdl.term(_Storage_pct_charge, "out"),
    end=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "pct_charge"),
    name="Connection3295",
    breakpoints=[],
)
_Storage_Connection3296 = mdl.create_connection(
    start=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "pct_discharge"),
    end=mdl.term(_Storage_pct_discharge, "out"),
    name="Connection3296",
    breakpoints=[],
)
_Storage_Connection3297 = mdl.create_connection(
    start=mdl.term(_Storage_kwrated, "out"),
    end=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "kwrated"),
    name="Connection3297",
    breakpoints=[],
)
_Storage_Connection3299 = mdl.create_connection(
    start=mdl.term(_Storage_DSS_kW_Reference, "in"),
    end=_Storage_Junction617,
    name="Connection3299",
    breakpoints=[],
)
_Storage_Connection3300 = mdl.create_connection(
    start=_Storage_Junction617,
    end=_Storage_Goto5,
    name="Connection3300",
    breakpoints=[],
)
_Storage_Connection3301 = mdl.create_connection(
    start=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "kwref"),
    end=_Storage_Junction617,
    name="Connection3301",
    breakpoints=[],
)
_Storage_Connection3316 = mdl.create_connection(
    start=mdl.term(_Storage_Enable_Inverter, "in"),
    end=_Storage_Junction619,
    name="Connection3316",
    breakpoints=[],
)
_Storage_Connection3317 = mdl.create_connection(
    start=_Storage_Junction619,
    end=_Storage_Goto8,
    name="Connection3317",
    breakpoints=[],
)
_Storage_Connection3318 = mdl.create_connection(
    start=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "close_contactor"),
    end=_Storage_Junction619,
    name="Connection3318",
    breakpoints=[],
)
_Storage_Connection3341 = mdl.create_connection(
    start=mdl.term(_Storage_Dispatch_Mode_Integer, "dispatch_mode_int"),
    end=_Storage_Junction622,
    name="Connection3341",
    breakpoints=[],
)
_Storage_Connection3343 = mdl.create_connection(
    start=_Storage_Goto10,
    end=_Storage_Junction622,
    name="Connection3343",
    breakpoints=[],
)
_Storage_Connection3356 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference, "v_line"),
    end=_Storage_Junction616,
    name="Connection3356",
    breakpoints=[],
)
_Storage_Connection3357 = mdl.create_connection(
    start=_Storage_From4,
    end=mdl.term(_Storage_Inverter_Power_Reference, "dispatch_mode_int"),
    name="Connection3357",
    breakpoints=[],
)
_Storage_Connection3369 = mdl.create_connection(
    start=_Storage_From21,
    end=mdl.term(_Storage_Inverter_Power_Reference, "active_status"),
    name="Connection3369",
    breakpoints=[],
)
_Storage_Connection3370 = mdl.create_connection(
    start=_Storage_From22,
    end=mdl.term(_Storage_Inverter_Power_Reference, "dss_kw"),
    name="Connection3370",
    breakpoints=[],
)
_Storage_Connection3393 = mdl.create_connection(
    start=_Storage_Junction603,
    end=_Storage_Junction626,
    name="Connection3393",
    breakpoints=[],
)
_Storage_Connection3394 = mdl.create_connection(
    start=_Storage_Junction626,
    end=mdl.term(_Storage_Simple_Battery_inverter__Average_1, "DC-"),
    name="Connection3394",
    breakpoints=[],
)
_Storage_Connection3395 = mdl.create_connection(
    start=mdl.term(_Storage_R1, "n_node"),
    end=_Storage_Junction626,
    name="Connection3395",
    breakpoints=[],
)
_Storage_Connection_batt = mdl.create_connection(
    start=mdl.term(_Storage_Vdc, "out"),
    end=mdl.term(_Storage_Ideal_Bat, "in"),
    name="Connection_batt",
    breakpoints=[],
)
_Storage_Connection3421 = mdl.create_connection(
    start=mdl.term(_Storage_Vbat, "out"),
    end=mdl.term(_Storage_Battery_Energy, "Vbat"),
    name="Connection3421",
    breakpoints=[],
)
_Storage_Connection3418 = mdl.create_connection(
    start=mdl.term(_Storage_Ibat, "out"),
    end=mdl.term(_Storage_Battery_Energy, "Ibat"),
    name="Connection3418",
    breakpoints=[],
)
_Storage_Connection3424 = mdl.create_connection(
    start=mdl.term(_Storage_Ideal_Bat, "p_node"),
    end=_Storage_Junction631,
    name="Connection3424",
    breakpoints=[],
)
_Storage_Connection3425 = mdl.create_connection(
    start=_Storage_Junction631,
    end=mdl.term(_Storage_Ibat, "n_node"),
    name="Connection3425",
    breakpoints=[],
)
_Storage_Connection3426 = mdl.create_connection(
    start=mdl.term(_Storage_Vbat, "p_node"),
    end=_Storage_Junction631,
    name="Connection3426",
    breakpoints=[],
)
_Storage_Connection3427 = mdl.create_connection(
    start=_Storage_Junction603,
    end=_Storage_Junction632,
    name="Connection3427",
    breakpoints=[],
)
_Storage_Connection3428 = mdl.create_connection(
    start=_Storage_Junction632,
    end=mdl.term(_Storage_Ideal_Bat, "n_node"),
    name="Connection3428",
    breakpoints=[],
)
_Storage_Connection3429 = mdl.create_connection(
    start=mdl.term(_Storage_Vbat, "n_node"),
    end=_Storage_Junction632,
    name="Connection3429",
    breakpoints=[],
)
_Storage_Connection3435 = mdl.create_connection(
    start=_Storage_From23,
    end=mdl.term(_Storage_Battery_Energy, "In3"),
    name="Connection3435",
    breakpoints=[],
)
_Storage_Connection3437 = mdl.create_connection(
    start=mdl.term(_Storage_Simple_Battery_inverter__Average_1, "DC+"),
    end=mdl.term(_Storage_Idc, "p_node"),
    name="Connection3437",
    breakpoints=[],
)
_Storage_Connection3439 = mdl.create_connection(
    start=mdl.term(_Storage_I_idl_losses, "n_node"),
    end=mdl.term(_Storage_R1, "p_node"),
    name="Connection3439",
    breakpoints=[],
)
_Storage_Connection3440 = mdl.create_connection(
    start=mdl.term(_Storage_Sum1, "out"),
    end=mdl.term(_Storage_Ch___Dch_Losses_Current_Calc, "i_minus_idle"),
    name="Connection3440",
    breakpoints=[],
)
_Storage_Connection3441 = mdl.create_connection(
    start=mdl.term(_Storage_Idc, "n_node"),
    end=_Storage_Junction633,
    name="Connection3441",
    breakpoints=[],
)
_Storage_Connection3442 = mdl.create_connection(
    start=_Storage_Junction633,
    end=mdl.term(_Storage_I_idl_losses, "p_node"),
    name="Connection3442",
    breakpoints=[],
)
_Storage_Connection3443 = mdl.create_connection(
    start=mdl.term(_Storage_Ibat, "p_node"),
    end=_Storage_Junction634,
    name="Connection3443",
    breakpoints=[],
)
_Storage_Connection3444 = mdl.create_connection(
    start=_Storage_Junction634,
    end=mdl.term(_Storage_i_ch_dch_losses, "n_node"),
    name="Connection3444",
    breakpoints=[],
)
_Storage_Connection3445 = mdl.create_connection(
    start=_Storage_Junction633,
    end=_Storage_Junction634,
    name="Connection3445",
    breakpoints=[],
)
_Storage_Connection3446 = mdl.create_connection(
    start=mdl.term(_Storage_Sum1, "in1"),
    end=mdl.term(_Storage_I_idl_losses, "out"),
    name="Connection3446",
    breakpoints=[],
)
_Storage_Connection3447 = mdl.create_connection(
    start=mdl.term(_Storage_Sum1, "in"),
    end=mdl.term(_Storage_Idc, "out"),
    name="Connection3447",
    breakpoints=[],
)
_Storage_Connection2716 = mdl.create_connection(
    start=mdl.term(_Storage_kwhrated, "out"),
    end=mdl.term(_Storage_Disconnect_if_on_reserve_or_charged, "kwhrated"),
    name="Connection2716",
    breakpoints=[],
)
_Storage_Connection2717 = mdl.create_connection(
    start=mdl.term(_Storage_pct_reserve, "out"),
    end=mdl.term(_Storage_Disconnect_if_on_reserve_or_charged, "pct_reserve"),
    name="Connection2717",
    breakpoints=[],
)
_Storage_Connection3137 = mdl.create_connection(
    start=_Storage_From3,
    end=mdl.term(_Storage_Disconnect_if_on_reserve_or_charged, "kwref"),
    name="Connection3137",
    breakpoints=[],
)
_Storage_Connection3229 = mdl.create_connection(
    start=_Storage_From20,
    end=mdl.term(_Storage_Disconnect_if_on_reserve_or_charged, "active_inverter"),
    name="Connection3229",
    breakpoints=[],
)
_Storage_Connection3434 = mdl.create_connection(
    start=mdl.term(_Storage_Disconnect_if_on_reserve_or_charged, "connect_battery"),
    end=_Storage_Goto4,
    name="Connection3434",
    breakpoints=[(7664, 7400)],
)
_Storage_Connection3448 = mdl.create_connection(
    start=_Storage_From24,
    end=mdl.term(_Storage_Disconnect_if_on_reserve_or_charged, "energy"),
    name="Connection3448",
    breakpoints=[],
)
_Storage_Connection3449 = mdl.create_connection(
    start=_Storage_Goto11,
    end=mdl.term(_Storage_Battery_Energy, "Battery Energy"),
    name="Connection3449",
    breakpoints=[],
)
_Storage_Connection3450 = mdl.create_connection(
    start=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "dispatch_mode"),
    end=_Storage_Junction622,
    name="Connection3450",
    breakpoints=[(8096, 7488)],
)
_Storage_Connection3451 = mdl.create_connection(
    start=mdl.term(_Storage_Termination2, "in"),
    end=mdl.term(_Storage_Simple_Battery_inverter__Average_1, "Outputs"),
    name="Connection3451",
    breakpoints=[],
)
_Storage_Connection3452 = mdl.create_connection(
    start=mdl.term(_Storage_Dispatch_kW_Reference_Calculation, "loadshape_point"),
    end=mdl.term(_Storage_Loadshape_Point_Selector, "loadshape_point"),
    name="Connection3452",
    breakpoints=[],
)
_Storage_Connection3453 = mdl.create_connection(
    start=_Storage_Load_point,
    end=mdl.term(_Storage_Loadshape_Point_Selector, "point"),
    name="Connection3453",
    breakpoints=[],
)
_Storage_Connection3454 = mdl.create_connection(
    start=mdl.term(_Storage_Inverter_Power_Reference, "inv_inputs"),
    end=mdl.term(_Storage_Simple_Battery_inverter__Average_1, "Inputs"),
    name="Connection3454",
    breakpoints=[],
)
