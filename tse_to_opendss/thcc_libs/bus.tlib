// Edit only the code, do not open and save from TSE.
// See the file "tse_component_edit.tlib" if you want to edit this component on TSE.
library "OpenDSS" {

    component Subsystem Root {
         component Subsystem Bus {
            layout = static
            component "core/Ground" gnd1 {
            }
            [
                position = 7592, 8352
                hide_name = True
            ]

            component "core/Open Circuit" OCB {
            }
            [
                position = 7512, 8000
                hide_name = True
            ]

            component "core/Open Circuit" OCA {
            }
            [
                position = 7512, 7904
                hide_name = True
            ]

            component "core/Three-phase Meter" meter_3ph {
                IA = "False"
                IB = "False"
                IC = "False"
                VAn = "False"
                VBn = "False"
                VCn = "False"
                enable_out = "False"
            }
            [
                position = 7672, 7952
                size = 56, 240
            ]

            component "core/Open Circuit" OCC {
            }
            [
                position = 7512, 8096
                hide_name = True
            ]

            port B1 {
                position = -8, 0
                kind = pe
                direction =  out
            }
            [
                position = 7400, 7952
            ]

            port B2 {
                position = 8, 0
                kind = pe
                direction =  out
            }
            [
                position = 7792, 7952
                scale = -1, 1
            ]

            port A1 {
                position = -8, -32
                kind = pe
                direction =  out
            }
            [
                position = 7400, 7856
            ]

            port A2 {
                position = 8, -32
                kind = pe
                direction =  out
            }
            [
                position = 7792, 7856
                scale = -1, 1
            ]

            port C1 {
                position = -8, 32
                kind = pe
                direction =  out
            }
            [
                position = 7400, 8048
            ]

            port C2 {
                position = 8, 32
                kind = pe
                direction =  out
            }
            [
                position = 7792, 8048
                scale = -1, 1
            ]

            tag "Electric Tag1" {
                value = "ground"
                scope = local
                kind = pe
            }
            [
                position = 7592, 8272
                rotation = right
                hide_name = True
                size = 60, 20
            ]

            tag tag_ph_B {
                value = "ground"
                scope = local
                kind = pe
            }
            [
                position = 7416, 8000
                hide_name = True
                size = 60, 20
            ]

            tag tag_ph_A {
                value = "ground"
                scope = local
                kind = pe
            }
            [
                position = 7416, 7904
                hide_name = True
                size = 60, 20
            ]

            tag tag_3ph {
                value = "ground"
                scope = local
                kind = pe
            }
            [
                position = 7720, 8112
                rotation = down
                hide_name = True
                size = 60, 20
            ]

            tag tag_ph_C {
                value = "ground"
                scope = local
                kind = pe
            }
            [
                position = 7416, 8096
                hide_name = True
                size = 60, 20
            ]

            junction jun_B pe
            [
                position = 7560, 7952
            ]

            junction jun_A pe
            [
                position = 7560, 7856
            ]

            junction jun_C pe
            [
                position = 7560, 8048
            ]

            connect "Electric Tag1" gnd1.node as Connection61
            connect B1 jun_B as Connection116
            connect jun_B OCB.n_node as Connection117
            connect OCB.p_node tag_ph_B as Connection118
            connect A1 jun_A as Connection124
            connect jun_A OCA.n_node as Connection125
            connect OCA.p_node tag_ph_A as Connection126
            connect meter_3ph.GND tag_3ph as Connection142
            connect C1 jun_C as Connection143
            connect jun_C OCC.n_node as Connection144
            connect OCC.p_node tag_ph_C as Connection145
            connect jun_A meter_3ph.A+ as Connection146
            connect meter_3ph.A- A2 as Connection147
            connect jun_B meter_3ph.B+ as Connection148
            connect meter_3ph.B- B2 as Connection149
            connect jun_C meter_3ph.C+ as Connection150
            connect meter_3ph.C- C2 as Connection151

            phase_n = "False"
            type_prop = "ABC"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component represents a Bus Circuit Element from the OpenDSS and should be connected between any other circuit elements. Terminals from different buses cannot be connected directly.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For Typhoon HIL Toolchain purposes, the Bus Component has internal meters from which electrical measurements can be accessed. At this moment only the three-phase meter is available, thus, measurements are only available when the phases 'ABC' are selected.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                type_prop {
                    label = "Type"
                    widget = combo
                    combo_values = "ABC", "AB", "AC", "BC", "A", "B", "C", "ABCN", "ABN", "ACN", "BCN", "AN", "BN", "CN", "N"
                    type = string
                    default_value = "ABCN"
                    nonvisible
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                phase_a {
                    label = "Phase A"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle, caller_handle="value_edited")
                    ENDCODE
                }

                phase_b {
                    label = "Phase B"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle, caller_handle="value_edited")
                    ENDCODE
                }

                phase_c {
                    label = "Phase C"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle, caller_handle="value_edited")
                    ENDCODE
                }

                phase_n {
                    label = "Phase N"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.set_bus_phases(mdl, container_handle, caller_handle="value_edited")
                    ENDCODE
                }

                conf {
                    label = "Configuration"
                    widget = combo
                    combo_values = "on both sides", "on one side"
                    type = string
                    default_value = "on both sides"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                i_rms_meas {
                    label = "Line Currents  - RMS"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                i_inst_meas {
                    label = " Instantaneous"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    keepline
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_line_rms_meas {
                    label = "Line Voltages  - RMS"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_line_inst_meas {
                    label = " instantaneous"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    keepline
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_phase_rms_meas {
                    label = "Phase Voltage - RMS"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_phase_inst_meas {
                    label = " instantaneous"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    keepline
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                freq_meas {
                    label = "Frequency"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                power_meas {
                    label = "Power"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle,
                                                         init= new_value == old_value)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                execution_rate {
                    label = "Execution Rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                }

                enable_output {
                    label = "Enable Output"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.circuit_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_bus as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4512, 4032
            size = 16, 96
        ]

    }

}