library "OpenDSS" {

    component Subsystem Root {
        component Subsystem Bus {
            layout = static
            component "core/Open Circuit" vAB_RMS {
            }
            [
                position = 7568, 8200
            ]

            component "core/Open Circuit" vBC_RMS {
            }
            [
                position = 7680, 8200
            ]

            component "core/Open Circuit" vCA_RMS {
            }
            [
                position = 7624, 8400
                scale = -1, 1
            ]

            port A1 {
                position = -8.0, -32.0
                kind = pe
                direction =  in
            }
            [
                position = 7400, 7856
            ]

            port A2 {
                position = 8.0, -32.0
                kind = pe
                direction =  in
            }
            [
                position = 7904, 7856
                rotation = down
            ]

            port B1 {
                position = -8.0, 0
                kind = pe
                direction =  in
            }
            [
                position = 7400, 7952
            ]

            port B2 {
                position = 8.0, 0
                kind = pe
                direction =  in
            }
            [
                position = 7904, 7952
                rotation = down
            ]

            port C1 {
                position = -8.0, 32.0
                kind = pe
                direction =  in
            }
            [
                position = 7400, 8048
            ]

            port C2 {
                position = 8.0, 32.0
                kind = pe
                direction =  in
            }
            [
                position = 7904, 8048
                rotation = down
            ]

            junction Aj pe
            [
                position = 7504, 7856
            ]

            junction Bj pe
            [
                position = 7624, 7952
            ]

            junction Cj pe
            [
                position = 7744, 8048
            ]

            junction A_imeas_j pe
            [
                position = 7848, 7856
            ]

            junction B_imeas_j pe
            [
                position = 7848, 7952
            ]

            junction C_imeas_j pe
            [
                position = 7848, 8048
            ]

            junction jA_vmeas pe
            [
                position = 7504, 8200
            ]

            junction jAB_vmeas pe
            [
                position = 7624, 8200
            ]

            junction jB_vmeas pe
            [
                position = 7744, 8200
            ]

            connect A1 Aj as Connection1
            connect A2 A_imeas_j as Connection2
            connect B1 Bj as Connection3
            connect B2 B_imeas_j as Connection4
            connect C1 Cj as Connection5
            connect C2 C_imeas_j as Connection6
            connect Aj jA_vmeas as verticalA
            connect Bj jAB_vmeas as verticalB
            connect Cj jB_vmeas as verticalC
            connect vAB_RMS.p_node jA_vmeas as Connection7
            connect vAB_RMS.n_node jAB_vmeas as Connection8
            connect vBC_RMS.p_node jAB_vmeas as Connection9
            connect vBC_RMS.n_node jB_vmeas as Connection10
            connect vCA_RMS.p_node jB_vmeas as Connection11
            connect vCA_RMS.n_node jA_vmeas as Connection12
            connect Aj A_imeas_j as sc_imeas_A
            connect Bj B_imeas_j as sc_imeas_B
            connect Cj C_imeas_j as sc_imeas_C

            conf = "on both sides"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">While buses are discrete components in the Schematic Editor, they are not objects in OpenDSS. They however define the connections in OpenDSS syntax and thus must be added between between circuit elements.<br><br>Terminals from different buses cannot be directly connected.<br><br>Only up to three phases are supported at the moment.</p></body></html>"

                type {
                    label = "Type"
                    widget = combo
                    combo_values = "ABC", "AB", "AC", "BC", "A", "B", "C"
                    type = string
                    default_value = "ABC"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        conf = mdl.get_property_value(mdl.prop(container_handle, "conf"))
                        created_ports , _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
                        comp_script.type_value_changed(mdl, container_handle, new_value, created_ports)
                        comp_script.ground_open_circuit(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                ground {
                    label = "Show DSS ground terminal (0)"
                    widget = checkbox
                    type = string
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports , _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
                        comp_script.ground_open_circuit(mdl, container_handle, created_ports)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                i_meas {
                    label = "RMS Current Measurements"
                    widget = checkbox
                    type = string
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.i_meas_changed(mdl, container_handle, new_value)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                v_meas {
                    label = "RMS Voltage Measurements"
                    widget = checkbox
                    type = string
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.v_meas_changed(mdl, container_handle, new_value)
                    ENDCODE
                }

                conf {
                    label = "Configuration"
                    widget = combo
                    combo_values = "on one side", "on both sides"
                    type = string
                    default_value = "on one side"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        type = mdl.get_property_value(mdl.prop(container_handle, "type"))
                        created_ports , _ = comp_script.port_dynamics(mdl, container_handle, prop_handle)
                        comp_script.type_value_changed(mdl, container_handle, type, created_ports)
                        comp_script.ground_open_circuit(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import os
                    import sys
                    import importlib

                    lib_path = mdl.get_library_resource_dir_path(item_handle)
                    comp_scripts_path = os.path.join(os.path.realpath(lib_path), "component_scripts")

                    if not comp_scripts_path in sys.path:
                        sys.path.append(comp_scripts_path)

                    import comp_bus as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4480, 4064
            size = 16, 96
        ]

    }

}