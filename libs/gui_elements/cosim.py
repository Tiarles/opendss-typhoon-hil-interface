# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cosim.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import re


class Ui_CoSimulation(object):
    def setupUi(self, CoSimulation):
        CoSimulation.setObjectName("CoSimulation")
        CoSimulation.resize(332, 500)
        CoSimulation.setMinimumSize(QtCore.QSize(332, 500))
        CoSimulation.setMaximumSize(QtCore.QSize(332, 500))
        self.button_apply = QtWidgets.QPushButton(CoSimulation)
        self.button_apply.setGeometry(QtCore.QRect(60, 460, 100, 23))
        self.button_apply.setObjectName("button_apply")
        self.button_cancel = QtWidgets.QPushButton(CoSimulation)
        self.button_cancel.setGeometry(QtCore.QRect(170, 460, 100, 23))
        self.button_cancel.setObjectName("button_cancel")
        self.button_load = QtWidgets.QPushButton(CoSimulation)
        self.button_load.setGeometry(QtCore.QRect(20, 10, 91, 23))
        self.button_load.setObjectName("button_load")
        self.label_filter = QtWidgets.QLabel(CoSimulation)
        self.label_filter.setGeometry(QtCore.QRect(20, 410, 120, 16))
        self.label_filter.setAlignment(QtCore.Qt.AlignCenter)
        self.label_filter.setObjectName("label_filter")
        self.list_available_buses = QtWidgets.QListWidget(CoSimulation)
        self.list_available_buses.setGeometry(QtCore.QRect(20, 80, 120, 300))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.list_available_buses.sizePolicy().hasHeightForWidth())
        self.list_available_buses.setSizePolicy(sizePolicy)
        self.list_available_buses.setObjectName("list_available_buses")
        self.edit_search = QtWidgets.QLineEdit(CoSimulation)
        self.edit_search.setGeometry(QtCore.QRect(20, 390, 120, 20))
        self.edit_search.setObjectName("edit_search")
        self.label_selected_buses = QtWidgets.QLabel(CoSimulation)
        self.label_selected_buses.setGeometry(QtCore.QRect(190, 60, 120, 16))
        self.label_selected_buses.setAlignment(QtCore.Qt.AlignCenter)
        self.label_selected_buses.setObjectName("label_selected_buses")
        self.list_selected_buses = QtWidgets.QListWidget(CoSimulation)
        self.list_selected_buses.setGeometry(QtCore.QRect(190, 80, 120, 300))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.list_selected_buses.sizePolicy().hasHeightForWidth())
        self.list_selected_buses.setSizePolicy(sizePolicy)
        self.list_selected_buses.setObjectName("list_selected_buses")
        self.label_available_buses = QtWidgets.QLabel(CoSimulation)
        self.label_available_buses.setGeometry(QtCore.QRect(20, 60, 120, 16))
        self.label_available_buses.setAlignment(QtCore.Qt.AlignCenter)
        self.label_available_buses.setObjectName("label_available_buses")
        self.label_load_status = QtWidgets.QLabel(CoSimulation)
        self.label_load_status.setGeometry(QtCore.QRect(120, 10, 191, 23))
        self.label_load_status.setObjectName("label_load_status")
        self.button_remove = QtWidgets.QPushButton(CoSimulation)
        self.button_remove.setGeometry(QtCore.QRect(150, 130, 30, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_remove.sizePolicy().hasHeightForWidth())
        self.button_remove.setSizePolicy(sizePolicy)
        self.button_remove.setMaximumSize(QtCore.QSize(30, 16777215))
        self.button_remove.setObjectName("button_remove")
        self.button_add = QtWidgets.QPushButton(CoSimulation)
        self.button_add.setGeometry(QtCore.QRect(150, 80, 30, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_add.sizePolicy().hasHeightForWidth())
        self.button_add.setSizePolicy(sizePolicy)
        self.button_add.setMaximumSize(QtCore.QSize(30, 16777215))
        self.button_add.setObjectName("button_add")
        self.edit_freq = QtWidgets.QLineEdit(CoSimulation)
        self.edit_freq.setGeometry(QtCore.QRect(246, 390, 48, 20))
        self.edit_freq.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edit_freq.setClearButtonEnabled(False)
        self.edit_freq.setObjectName("edit_freq")
        self.label_freq = QtWidgets.QLabel(CoSimulation)
        self.label_freq.setGeometry(QtCore.QRect(190, 390, 51, 20))
        self.label_freq.setAlignment(QtCore.Qt.AlignCenter)
        self.label_freq.setObjectName("label_freq")
        self.label_hz = QtWidgets.QLabel(CoSimulation)
        self.label_hz.setGeometry(QtCore.QRect(298, 390, 21, 20))
        self.label_hz.setAlignment(QtCore.Qt.AlignVCenter)
        self.label_hz.setObjectName("label_hz")
        self.edit_rate = QtWidgets.QLineEdit(CoSimulation)
        self.edit_rate.setGeometry(QtCore.QRect(246, 415, 48, 20))
        self.edit_rate.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.edit_rate.setClearButtonEnabled(False)
        self.edit_rate.setObjectName("edit_rate")
        self.label_rate = QtWidgets.QLabel(CoSimulation)
        self.label_rate.setGeometry(QtCore.QRect(190, 415, 51, 20))
        self.label_rate.setAlignment(QtCore.Qt.AlignCenter)
        self.label_rate.setObjectName("label_rate")
        self.label_rate_s = QtWidgets.QLabel(CoSimulation)
        self.label_rate_s.setGeometry(QtCore.QRect(298, 415, 21, 20))
        self.label_rate_s.setAlignment(QtCore.Qt.AlignVCenter)
        self.label_rate_s.setObjectName("label_rate_s")

        self.retranslateUi(CoSimulation)
        QtCore.QMetaObject.connectSlotsByName(CoSimulation)

    def retranslateUi(self, CoSimulation):
        _translate = QtCore.QCoreApplication.translate
        CoSimulation.setWindowTitle(_translate("CoSimulation", "Select the interface points"))
        self.button_apply.setText(_translate("CoSimulation", "Apply"))
        self.button_cancel.setText(_translate("CoSimulation", "Cancel"))
        self.button_load.setText(_translate("CoSimulation", "Load .dss model"))
        self.label_filter.setText(_translate("CoSimulation", "Filter"))
        self.label_selected_buses.setText(_translate("CoSimulation", "Selected buses"))
        self.label_available_buses.setText(_translate("CoSimulation", "Available buses"))
        self.label_load_status.setText(_translate("CoSimulation", "No DSS model loaded."))
        self.button_remove.setText(_translate("CoSimulation", "<"))
        self.button_add.setText(_translate("CoSimulation", ">"))
        self.edit_freq.setText(_translate("CoSimulation", "60"))
        self.label_freq.setText(_translate("CoSimulation", "Frequency"))
        self.label_hz.setText(_translate("CoSimulation", "Hz"))
        self.edit_rate.setText(_translate("CoSimulation", "100e-6"))
        self.label_rate.setText(_translate("CoSimulation", "Exec. rate"))
        self.label_rate_s.setText(_translate("CoSimulation", "s"))
        self.edit()

    def edit(self):
        txt = f"""<body>
            <h4 style='color:black; margin: 4'>Select an OpenDSS circuit file</h2>
            </body>"""
        self.label_load_status.setText(txt)
        self.edit_freq.setDisabled(True)
        self.edit_freq.setText("-")

        self.double_validator = QtGui.QDoubleValidator()
        self.edit_freq.setValidator(self.double_validator)

    def event(self, event):
        if event.type() == QtCore.QEvent.EnterWhatsThisMode:
            QtWidgets.QWhatsThis.leaveWhatsThisMode()
            help = QtWidgets.QMessageBox()
            help.setWindowTitle("OpenDSS co-simulation interface")
            help.setText('''This component creates an interface between power flow simulations in OpenDSS and the HIL simulation.
            
            
Select an OpenDSS model. If loaded successfully, the available buses in the model will show. Add the desired interface buses (up to four) to the list on the right side.


On the SCADA panel, add the Co-simulation widget from the OpenDSS library.
Start the simulation then click on the macro button to begin the OpenDSS snapshots.''')
            help.exec()
            return True
        return QtWidgets.QDialog.event(self, event)

class CoSimulation(QtWidgets.QDialog, Ui_CoSimulation):

    def __init__(self, dss, selected_interface_points, dss_model, execution_rate):
        super().__init__()
        self.setupUi(self)

        self.selected_interface_points = selected_interface_points
        self.dss = dss
        self.available_interface_points = {}
        self.dss_model = dss_model
        self.frequency = 0
        self.execution_rate = execution_rate
        self.edit_rate.setText(self.execution_rate)

        self.button_apply.clicked.connect(self.apply_changes)
        self.button_cancel.clicked.connect(self.reject)
        self.button_load.clicked.connect(self.load_dss_model_button)

        self.edit_search.textEdited.connect(self.populate_available_buses_list)

        self.list_available_buses.itemDoubleClicked.connect(self.add_bus)
        self.button_add.clicked.connect(self.add_bus_btn)
        self.list_selected_buses.itemDoubleClicked.connect(self.remove_bus)
        self.button_remove.clicked.connect(self.remove_bus_btn)

        self.load_dss_model(self.dss_model)

    def apply_changes(self):
        selected_interface_points = []
        for bus in self.selected_interface_points:
            if self.available_interface_points.get(str(bus)):
                selected_interface_points.append(str(bus))
        self.selected_interface_points = selected_interface_points
        self.execution_rate = self.edit_rate.text()
        self.accept()

    def load_dss_model_button(self):
        filter = "(*.dss);"
        file_name = QtWidgets.QFileDialog()
        file_name.setFileMode(QtWidgets.QFileDialog.ExistingFile)
        located_file = file_name.getOpenFileName(self, "Select a file", "C:\Program Files\OpenDSS\Examples",
                                                 filter)
        if located_file[0]:
            self.load_dss_model(located_file[0])

    def read_model_basefrequency(self):
        solve_summary = self.dss.utils.run_command(f'Summary')
        match_frequency = re.search(r'Frequency = (\d+) Hz', solve_summary, re.IGNORECASE)
        f = match_frequency.group(1)
        return f

    def load_dss_model(self, dss_model):
        import pathlib

        self.dss_model = dss_model
        self.dss.utils.run_command(f'clear')
        self.available_interface_points = {}

        if dss_model:
            try:
                self.dss.Basic.AllowEditor(0)
                self.dss.utils.run_command(f'Compile "{dss_model}"')
                self.dss.Basic.AllowEditor(1)
                all_bus_names = self.dss.Circuit.AllBusNames()
                for bus in all_bus_names:
                    self.dss.Circuit.SetActiveBus(bus)
                    self.available_interface_points.update({bus: self.dss.Bus.Nodes()})
                self.populate_available_buses_list()
                self.populate_selected_buses_list()
                txt = f"""<body>
                    <h4 style='color:green; margin: 4'>Loaded: {pathlib.Path(dss_model).stem}.dss</h2>
                    </body>"""
                self.label_load_status.setText(f"{txt}")
                self.frequency = self.read_model_basefrequency()
                self.edit_freq.setText(self.frequency)
            except:
                txt = f"""<body>
                        <h4 style='color:red; margin: 4'>Failed: {pathlib.Path(dss_model).stem}.dss</h2>
                        </body>"""
                self.label_load_status.setText(txt)
                self.selected_interface_points = []
                self.populate_available_buses_list()
                self.populate_selected_buses_list()

    def populate_available_buses_list(self):
        all_buses_list = list(self.available_interface_points.keys())
        all_buses_list = [bus for bus in all_buses_list if bus not in self.selected_interface_points]
        all_buses_list = self.filter_buses_list(all_buses_list)
        all_buses_list.sort()
        self.list_available_buses.clear()
        self.list_available_buses.addItems(
            [f"{bus} ({len(self.available_interface_points[bus])}ph)" for bus in all_buses_list]
        )

    def populate_selected_buses_list(self):
        all_buses_list = [bus for bus in self.selected_interface_points if bus in self.available_interface_points]
        all_buses_list.sort()
        self.list_selected_buses.clear()
        self.list_selected_buses.addItems(
            [f"{bus} ({len(self.available_interface_points[bus])}ph)" for bus in all_buses_list]
        )

    def filter_buses_list(self, input_list):
        filter_text = self.edit_search.text().lower()
        filtered_list = []
        for item in input_list:
            if filter_text in item.lower():
                filtered_list.append(item)
        return filtered_list

    def add_bus(self, selected_bus):
        selected_bus_with_numphases = selected_bus.text()
        for bus in self.available_interface_points:
            bus_with_numphases = f"{bus} ({len(self.available_interface_points[bus])}ph)"
            if selected_bus_with_numphases == bus_with_numphases:
                self.selected_interface_points.append(str(bus))
                self.populate_selected_buses_list()
                self.populate_available_buses_list()
                break

    def remove_bus(self, selected_bus):
        selected_bus_with_numphases = selected_bus.text()
        for bus in self.available_interface_points:
            bus_with_numphases = f"{bus} ({len(self.available_interface_points[bus])}ph)"
            if selected_bus_with_numphases == bus_with_numphases:
                self.selected_interface_points.remove(str(bus))
                self.populate_selected_buses_list()
                self.populate_available_buses_list()
                break

    def add_bus_btn(self):
        selected_bus = self.list_available_buses.currentItem()
        if selected_bus:
            self.add_bus(selected_bus)

    def remove_bus_btn(self):
        selected_bus = self.list_selected_buses.currentItem()
        if selected_bus:
            self.remove_bus(selected_bus)


if __name__ == "__main__":
    import sys
    import traceback
    import opendssdirect as dss

    # Show tracebacks #
    if QtCore.QT_VERSION >= 0x50501:
        def excepthook(type_, value, traceback_):
            traceback.print_exception(type_, value, traceback_)
            QtCore.qFatal('')
    sys.excepthook = excepthook


    app = QtWidgets.QApplication(sys.argv)
    selected = ['611']
    dss_model = "C:\Program Files\OpenDSS\Examples\Microgrid\Master.dss"
    f_info = {"global": True, "value": "50"}

    #mainwindow = CoSimulation(dss, selected, dss_model)
    mainwindow = CoSimulation(dss, selected, None, "100e-6")
    mainwindow.show()
    output = app.exec()
    print(mainwindow.selected_interface_points)
