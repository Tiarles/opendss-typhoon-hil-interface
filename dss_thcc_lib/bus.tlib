// Edit only the code, do not open and save from TSE.
// See the file "tse_component_edit.tlib" if you want to edit this component on TSE.
library "OpenDSS" {

    component Subsystem Root {
        component Subsystem Bus {
            layout = static
            component "core/el_bus" 1_bus {
            }
            [
                position = 7800, 8192
                scale = -1, 1
            ]

            component "core/el_bus" 2_bus {
            }
            [
                position = 8584, 8192
            ]

            port 1 {
                position = -8, 0
                kind = pe
                direction =  in
            }
            [
                position = 7704, 8192
            ]

            port 2 {
                position = 8, 0
                kind = pe
                direction =  in
            }
            [
                position = 8680, 8192
                scale = -1, 1
            ]

            tag A1_repl_1 {
                value = "A1_repl"
                scope = local
                kind = pe
            }
            [
                position = 7992, 7992
                hide_name = True
                size = 60, 20
            ]

            tag B1_repl_1 {
                value = "B1_repl"
                scope = local
                kind = pe
            }
            [
                position = 7992, 8192
                hide_name = True
                size = 60, 20
            ]

            tag C1_repl_1 {
                value = "C1_repl"
                scope = local
                kind = pe
            }
            [
                position = 7992, 8392
                hide_name = True
                size = 60, 20
            ]

            tag A2_repl_1 {
                value = "A2_repl"
                scope = local
                kind = pe
            }
            [
                position = 8392, 7992
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag B2_repl_1 {
                value = "B2_repl"
                scope = local
                kind = pe
            }
            [
                position = 8392, 8192
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag C2_repl_1 {
                value = "C2_repl"
                scope = local
                kind = pe
            }
            [
                position = 8392, 8392
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag A1_repl_2 {
                value = "A1_repl"
                scope = local
                kind = pe
            }
            [
                position = 7896, 8144
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag B1_repl_2 {
                value = "B1_repl"
                scope = local
                kind = pe
            }
            [
                position = 7896, 8192
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag C1_repl_2 {
                value = "C1_repl"
                scope = local
                kind = pe
            }
            [
                position = 7896, 8240
                hide_name = True
                scale = -1, 1
                size = 60, 20
            ]

            tag A2_repl_2 {
                value = "A2_repl"
                scope = local
                kind = pe
            }
            [
                position = 8488, 8144
                hide_name = True
                size = 60, 20
            ]

            tag B2_repl_2 {
                value = "B2_repl"
                scope = local
                kind = pe
            }
            [
                position = 8488, 8192
                hide_name = True
                size = 60, 20
            ]

            tag C2_repl_2 {
                value = "C2_repl"
                scope = local
                kind = pe
            }
            [
                position = 8488, 8240
                hide_name = True
                size = 60, 20
            ]

            connect A2_repl_1 A1_repl_1 as Connection4
            connect B2_repl_1 B1_repl_1 as Connection5
            connect C2_repl_1 C1_repl_1 as Connection6
            connect A1_repl_2 1_bus.t1 as Connection7
            connect B1_repl_2 1_bus.t2 as Connection8
            connect C1_repl_2 1_bus.t3 as Connection9
            connect 1 1_bus.multi_dim as Connection10
            connect A2_repl_2 2_bus.t1 as Connection11
            connect B2_repl_2 2_bus.t2 as Connection12
            connect C2_repl_2 2_bus.t3 as Connection13
            connect 2 2_bus.multi_dim as Connection14

            phase_n = "False"
            sld_mode = "True"
            type_prop = "ABC"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component represents a Bus Circuit Element from the OpenDSS and should be connected between any other circuit elements. Terminals from different buses cannot be connected directly.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For Typhoon HIL Toolchain purposes, the Bus Component has internal meters from which electrical measurements can be accessed. At this moment only the three-phase meter is available, thus, measurements are only available when the phases \'ABC\' are selected.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                sld_mode {
                    label = "Single-line representation"
                    widget = checkbox
                    type = bool
                    default_value = "True"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                type_prop {
                    label = "Type"
                    widget = combo
                    combo_values = "ABC", "AB", "AC", "BC", "A", "B", "C", "ABCN", "ABN", "ACN", "BCN", "AN", "BN", "CN", "N"
                    type = string
                    default_value = "ABCN"
                    nonvisible
                    disabled
                    no_evaluate
                }

                phase_a {
                    label = "Phase A"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                phase_b {
                    label = "Phase B"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                phase_c {
                    label = "Phase C"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                phase_n {
                    label = "Phase N"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                conf {
                    label = "Configuration"
                    widget = combo
                    combo_values = "on both sides", "on one side"
                    type = string
                    default_value = "on both sides"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                second_side_is_multiline {
                    label = "Second side is multiline"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.mask_dialog_dynamics(mdl, item_handle, "", "")

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                ENDCODE

                CODE define_icon
                    import dss_thcc_lib.component_scripts.comp_bus as comp_script
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import importlib

                    import dss_thcc_lib.component_scripts.comp_bus as comp_script

                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.retro_compatibility(mdl, item_handle)
                    comp_script.topology_dynamics(mdl, item_handle, prop_handle=None, new_value="init", old_value="")
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4512, 4032
            size = 16, 32
        ]

    }

}