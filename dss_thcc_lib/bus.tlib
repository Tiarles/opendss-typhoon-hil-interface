// Edit only the code, do not open and save from TSE.
// See the file "tse_component_edit.tlib" if you want to edit this component on TSE.
library "OpenDSS" {

    component Subsystem Root {
         component Subsystem Bus {
            layout = static

            port B1 {
                position = -8, 0
                kind = pe
                direction =  out
            }
            [
                position = 7400, 7952
            ]

            port B2 {
                position = 8, 0
                kind = pe
                direction =  out
            }
            [
                position = 7792, 7952
                scale = -1, 1
            ]

            port A1 {
                position = -8, -32
                kind = pe
                direction =  out
            }
            [
                position = 7400, 7856
            ]

            port A2 {
                position = 8, -32
                kind = pe
                direction =  out
            }
            [
                position = 7792, 7856
                scale = -1, 1
            ]

            port C1 {
                position = -8, 32
                kind = pe
                direction =  out
            }
            [
                position = 7400, 8048
            ]

            port C2 {
                position = 8, 32
                kind = pe
                direction =  out
            }
            [
                position = 7792, 8048
                scale = -1, 1
            ]

            connect A1 A2 as ConnectionA1A2
            connect B1 B2 as ConnectionB1B2
            connect C1 C2 as ConnectionC1C2

            phase_n = "False"
            type_prop = "ABC"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component represents a Bus Circuit Element from the OpenDSS and should be connected between any other circuit elements. Terminals from different buses cannot be connected directly.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For Typhoon HIL Toolchain purposes, the Bus Component has internal meters from which electrical measurements can be accessed. At this moment only the three-phase meter is available, thus, measurements are only available when the phases 'ABC' are selected.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                type_prop {
                    label = "Type"
                    widget = combo
                    combo_values = "ABC", "AB", "AC", "BC", "A", "B", "C", "ABCN", "ABN", "ACN", "BCN", "AN", "BN", "CN", "N"
                    type = string
                    default_value = "ABCN"
                    nonvisible
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.retro_compatibility(mdl, container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                phase_a {
                    label = "Phase A"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                phase_b {
                    label = "Phase B"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                phase_c {
                    label = "Phase C"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                phase_n {
                    label = "Phase N"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                conf {
                    label = "Configuration"
                    widget = combo
                    combo_values = "on both sides", "on one side"
                    type = string
                    default_value = "on both sides"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                i_rms_meas {
                    label = "Line Currents  - RMS"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                i_inst_meas {
                    label = " Instantaneous"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    keepline
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_line_rms_meas {
                    label = "Line Voltages  - RMS"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_line_inst_meas {
                    label = " instantaneous"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    keepline
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_phase_rms_meas {
                    label = "Phase Voltage - RMS"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                v_phase_inst_meas {
                    label = " instantaneous"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    keepline
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                freq_meas {
                    label = "Frequency"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                power_meas {
                    label = "Power"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                execution_rate {
                    label = "Execution Rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                }

                enable_output {
                    label = "Enable Output"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Measurements:2"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                    ENDCODE
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE model_load
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.circuit_dynamics(mdl, item_handle)
                ENDCODE

                CODE before_change
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.circuit_dynamics(mdl, item_handle, prop_entered_values)
                ENDCODE

                CODE init
                    import importlib

                    import dss_thcc_lib.component_scripts.comp_bus as comp_script

                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4512, 4032
            size = 16, 96
        ]

    }

}