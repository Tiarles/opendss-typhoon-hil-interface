version = 4.2

//
// Saved by sw version: 2023.2
//

model "ieee_33bus" {
    configuration {
        hil_device = "HIL604"
        hil_configuration_id = 5
        simulation_method = exact
        simulation_time_step = 10e-6
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = False
        cpl_stb = True
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = True
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        excluded_resource_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
    }

    component Subsystem Root {
        component "OpenDSS/Bus" Bus1 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 7960, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus2 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 8240, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus3 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 8592, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus4 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 8864, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus5 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9104, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus6 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9560, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus7 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9840, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus8 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 10112, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus9 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 10600, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus10 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 10872, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus11 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 11216, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus12 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 11488, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus13 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 11816, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus14 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 12088, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus15 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 12376, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus16 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 12648, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus17 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 12976, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus18 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 13272, 8272
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus19 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 8600, 8672
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus20 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 8880, 8672
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus21 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9160, 8672
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus22 {
            conf = "on one side"
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9432, 8672
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus23 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 8712, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus24 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 8976, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus25 {
            conf = "on one side"
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9256, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus26 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9696, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus27 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9968, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus28 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 10240, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus29 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 10496, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus30 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 10784, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus31 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 11056, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus32 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 11328, 7888
            size = 16, 96
        ]

        component "OpenDSS/Bus" Bus33 {
            conf = "on one side"
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 11600, 7888
            size = 16, 96
        ]

        component "OpenDSS/Line" Line1_2 {
            Length = "branch_data[\"Line1_2\"][\"length\"]"
            R0 = "branch_data[\"Line1_2\"][\"R\"]"
            R1 = "branch_data[\"Line1_2\"][\"R\"]"
            X0 = "branch_data[\"Line1_2\"][\"X\"]"
            X1 = "branch_data[\"Line1_2\"][\"X\"]"
            dC0 = "branch_data[\"Line1_2\"][\"C\"]"
            dC1 = "branch_data[\"Line1_2\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8064, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line2_3 {
            Length = "branch_data[\"Line2_3\"][\"length\"]"
            R0 = "branch_data[\"Line2_3\"][\"R\"]"
            R1 = "branch_data[\"Line2_3\"][\"R\"]"
            X0 = "branch_data[\"Line2_3\"][\"X\"]"
            X1 = "branch_data[\"Line2_3\"][\"X\"]"
            dC0 = "branch_data[\"Line2_3\"][\"C\"]"
            dC1 = "branch_data[\"Line2_3\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8408, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line3_4 {
            Length = "branch_data[\"Line3_4\"][\"length\"]"
            R0 = "branch_data[\"Line3_4\"][\"R\"]"
            R1 = "branch_data[\"Line3_4\"][\"R\"]"
            X0 = "branch_data[\"Line3_4\"][\"X\"]"
            X1 = "branch_data[\"Line3_4\"][\"X\"]"
            dC0 = "branch_data[\"Line3_4\"][\"C\"]"
            dC1 = "branch_data[\"Line3_4\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8680, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line4_5 {
            Length = "branch_data[\"Line4_5\"][\"length\"]"
            R0 = "branch_data[\"Line4_5\"][\"R\"]"
            R1 = "branch_data[\"Line4_5\"][\"R\"]"
            X0 = "branch_data[\"Line4_5\"][\"X\"]"
            X1 = "branch_data[\"Line4_5\"][\"X\"]"
            dC0 = "branch_data[\"Line4_5\"][\"C\"]"
            dC1 = "branch_data[\"Line4_5\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8944, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line5_6 {
            Length = "branch_data[\"Line5_6\"][\"length\"]"
            R0 = "branch_data[\"Line5_6\"][\"R\"]"
            R1 = "branch_data[\"Line5_6\"][\"R\"]"
            X0 = "branch_data[\"Line5_6\"][\"X\"]"
            X1 = "branch_data[\"Line5_6\"][\"X\"]"
            dC0 = "branch_data[\"Line5_6\"][\"C\"]"
            dC1 = "branch_data[\"Line5_6\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 9208, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line6_7 {
            Length = "branch_data[\"Line6_7\"][\"length\"]"
            R0 = "branch_data[\"Line6_7\"][\"R\"]"
            R1 = "branch_data[\"Line6_7\"][\"R\"]"
            X0 = "branch_data[\"Line6_7\"][\"X\"]"
            X1 = "branch_data[\"Line6_7\"][\"X\"]"
            dC0 = "branch_data[\"Line6_7\"][\"C\"]"
            dC1 = "branch_data[\"Line6_7\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 9656, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line7_8 {
            Length = "branch_data[\"Line7_8\"][\"length\"]"
            R0 = "branch_data[\"Line7_8\"][\"R\"]"
            R1 = "branch_data[\"Line7_8\"][\"R\"]"
            X0 = "branch_data[\"Line7_8\"][\"X\"]"
            X1 = "branch_data[\"Line7_8\"][\"X\"]"
            dC0 = "branch_data[\"Line7_8\"][\"C\"]"
            dC1 = "branch_data[\"Line7_8\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 9920, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line8_9 {
            Length = "branch_data[\"Line8_9\"][\"length\"]"
            R0 = "branch_data[\"Line8_9\"][\"R\"]"
            R1 = "branch_data[\"Line8_9\"][\"R\"]"
            X0 = "branch_data[\"Line8_9\"][\"X\"]"
            X1 = "branch_data[\"Line8_9\"][\"X\"]"
            dC0 = "branch_data[\"Line8_9\"][\"C\"]"
            dC1 = "branch_data[\"Line8_9\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 10400, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line9_10 {
            Length = "branch_data[\"Line9_10\"][\"length\"]"
            R0 = "branch_data[\"Line9_10\"][\"R\"]"
            R1 = "branch_data[\"Line9_10\"][\"R\"]"
            X0 = "branch_data[\"Line9_10\"][\"X\"]"
            X1 = "branch_data[\"Line9_10\"][\"X\"]"
            dC0 = "branch_data[\"Line9_10\"][\"C\"]"
            dC1 = "branch_data[\"Line9_10\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 10680, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line10_11 {
            Length = "branch_data[\"Line10_11\"][\"length\"]"
            R0 = "branch_data[\"Line10_11\"][\"R\"]"
            R1 = "branch_data[\"Line10_11\"][\"R\"]"
            X0 = "branch_data[\"Line10_11\"][\"X\"]"
            X1 = "branch_data[\"Line10_11\"][\"X\"]"
            dC0 = "branch_data[\"Line10_11\"][\"C\"]"
            dC1 = "branch_data[\"Line10_11\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 11024, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line11_12 {
            Length = "branch_data[\"Line11_12\"][\"length\"]"
            R0 = "branch_data[\"Line11_12\"][\"R\"]"
            R1 = "branch_data[\"Line11_12\"][\"R\"]"
            X0 = "branch_data[\"Line11_12\"][\"X\"]"
            X1 = "branch_data[\"Line11_12\"][\"X\"]"
            dC0 = "branch_data[\"Line11_12\"][\"C\"]"
            dC1 = "branch_data[\"Line11_12\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 11296, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line12_13 {
            Length = "branch_data[\"Line12_13\"][\"length\"]"
            R0 = "branch_data[\"Line12_13\"][\"R\"]"
            R1 = "branch_data[\"Line12_13\"][\"R\"]"
            X0 = "branch_data[\"Line12_13\"][\"X\"]"
            X1 = "branch_data[\"Line12_13\"][\"X\"]"
            dC0 = "branch_data[\"Line12_13\"][\"C\"]"
            dC1 = "branch_data[\"Line12_13\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 11624, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line13_14 {
            Length = "branch_data[\"Line13_14\"][\"length\"]"
            R0 = "branch_data[\"Line13_14\"][\"R\"]"
            R1 = "branch_data[\"Line13_14\"][\"R\"]"
            X0 = "branch_data[\"Line13_14\"][\"X\"]"
            X1 = "branch_data[\"Line13_14\"][\"X\"]"
            dC0 = "branch_data[\"Line13_14\"][\"C\"]"
            dC1 = "branch_data[\"Line13_14\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 11896, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line14_15 {
            Length = "branch_data[\"Line14_15\"][\"length\"]"
            R0 = "branch_data[\"Line14_15\"][\"R\"]"
            R1 = "branch_data[\"Line14_15\"][\"R\"]"
            X0 = "branch_data[\"Line14_15\"][\"X\"]"
            X1 = "branch_data[\"Line14_15\"][\"X\"]"
            dC0 = "branch_data[\"Line14_15\"][\"C\"]"
            dC1 = "branch_data[\"Line14_15\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 12168, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line15_16 {
            Length = "branch_data[\"Line15_16\"][\"length\"]"
            R0 = "branch_data[\"Line15_16\"][\"R\"]"
            R1 = "branch_data[\"Line15_16\"][\"R\"]"
            X0 = "branch_data[\"Line15_16\"][\"X\"]"
            X1 = "branch_data[\"Line15_16\"][\"X\"]"
            dC0 = "branch_data[\"Line15_16\"][\"C\"]"
            dC1 = "branch_data[\"Line15_16\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 12456, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line16_17 {
            Length = "branch_data[\"Line16_17\"][\"length\"]"
            R0 = "branch_data[\"Line16_17\"][\"R\"]"
            R1 = "branch_data[\"Line16_17\"][\"R\"]"
            X0 = "branch_data[\"Line16_17\"][\"X\"]"
            X1 = "branch_data[\"Line16_17\"][\"X\"]"
            dC0 = "branch_data[\"Line16_17\"][\"C\"]"
            dC1 = "branch_data[\"Line16_17\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 12728, 8272
            size = 64, 96
        ]

        component "OpenDSS/Line" Line17_18 {
            Length = "branch_data[\"Line17_18\"][\"length\"]"
            R0 = "branch_data[\"Line17_18\"][\"R\"]"
            R1 = "branch_data[\"Line17_18\"][\"R\"]"
            X0 = "branch_data[\"Line17_18\"][\"X\"]"
            X1 = "branch_data[\"Line17_18\"][\"X\"]"
            dC0 = "branch_data[\"Line17_18\"][\"C\"]"
            dC1 = "branch_data[\"Line17_18\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 13056, 8272
            size = 64, 96
        ]

        component "OpenDSS/Load" Load2 {
            Sn_3ph = "load_data[\"Load2\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load2\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load2\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 8192, 8392
            size = 128, 48
        ]

        component "OpenDSS/Load" Load3 {
            Sn_3ph = "load_data[\"Load3\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load3\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load3\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 8544, 8392
            size = 128, 48
        ]

        component "OpenDSS/Load" Load4 {
            Sn_3ph = "load_data[\"Load4\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load4\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load4\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 8816, 8392
            size = 128, 48
        ]

        component "OpenDSS/Load" Load5 {
            Sn_3ph = "load_data[\"Load5\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load5\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load5\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9056, 8392
            size = 128, 48
        ]

        component "OpenDSS/Load" Load6 {
            Sn_3ph = "load_data[\"Load6\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load6\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load6\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9512, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load7 {
            Sn_3ph = "load_data[\"Load7\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load7\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load7\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9792, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load8 {
            Sn_3ph = "load_data[\"Load8\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load8\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load8\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 10064, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load9 {
            Sn_3ph = "load_data[\"Load9\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load9\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load9\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 10552, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load10 {
            Sn_3ph = "load_data[\"Load10\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load10\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load10\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 10824, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load11 {
            Sn_3ph = "load_data[\"Load11\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load11\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load11\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 11168, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load12 {
            Sn_3ph = "load_data[\"Load12\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load12\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load12\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 11432, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load13 {
            Sn_3ph = "load_data[\"Load13\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load13\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load13\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 11768, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load14 {
            Sn_3ph = "load_data[\"Load14\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load14\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load14\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 12040, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load15 {
            Sn_3ph = "load_data[\"Load15\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load15\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load15\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 12328, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load16 {
            Sn_3ph = "load_data[\"Load16\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load16\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load16\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 12600, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load17 {
            Sn_3ph = "load_data[\"Load17\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load17\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load17\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 12928, 8384
            size = 128, 48
        ]

        component "OpenDSS/Load" Load18 {
            Sn_3ph = "load_data[\"Load18\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load18\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            enable_monitoring = "True"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load18\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 13224, 8384
            size = 128, 48
        ]

        component "OpenDSS/Line" Line3_23 {
            Length = "branch_data[\"Line3_23\"][\"length\"]"
            R0 = "branch_data[\"Line3_23\"][\"R\"]"
            R1 = "branch_data[\"Line3_23\"][\"R\"]"
            X0 = "branch_data[\"Line3_23\"][\"X\"]"
            X1 = "branch_data[\"Line3_23\"][\"X\"]"
            dC0 = "branch_data[\"Line3_23\"][\"C\"]"
            dC1 = "branch_data[\"Line3_23\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8528, 8072
            rotation = left
            size = 64, 96
        ]

        component "OpenDSS/Line" Line23_24 {
            Length = "branch_data[\"Line23_24\"][\"length\"]"
            R0 = "branch_data[\"Line23_24\"][\"R\"]"
            R1 = "branch_data[\"Line23_24\"][\"R\"]"
            X0 = "branch_data[\"Line23_24\"][\"X\"]"
            X1 = "branch_data[\"Line23_24\"][\"X\"]"
            dC0 = "branch_data[\"Line23_24\"][\"C\"]"
            dC1 = "branch_data[\"Line23_24\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8792, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line24_25 {
            Length = "branch_data[\"Line24_25\"][\"length\"]"
            R0 = "branch_data[\"Line24_25\"][\"R\"]"
            R1 = "branch_data[\"Line24_25\"][\"R\"]"
            X0 = "branch_data[\"Line24_25\"][\"X\"]"
            X1 = "branch_data[\"Line24_25\"][\"X\"]"
            dC0 = "branch_data[\"Line24_25\"][\"C\"]"
            dC1 = "branch_data[\"Line24_25\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 9056, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line6_26 {
            global_basefreq = "False"
        }
        [
            position = 9496, 8016
            rotation = left
            size = 64, 96
        ]

        component "OpenDSS/Line" Line26_27 {
            Length = "branch_data[\"Line26_27\"][\"length\"]"
            R0 = "branch_data[\"Line26_27\"][\"R\"]"
            R1 = "branch_data[\"Line26_27\"][\"R\"]"
            X0 = "branch_data[\"Line26_27\"][\"X\"]"
            X1 = "branch_data[\"Line26_27\"][\"X\"]"
            dC0 = "branch_data[\"Line26_27\"][\"C\"]"
            dC1 = "branch_data[\"Line26_27\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 9768, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line27_28 {
            Length = "branch_data[\"Line27_28\"][\"length\"]"
            R0 = "branch_data[\"Line27_28\"][\"R\"]"
            R1 = "branch_data[\"Line27_28\"][\"R\"]"
            X0 = "branch_data[\"Line27_28\"][\"X\"]"
            X1 = "branch_data[\"Line27_28\"][\"X\"]"
            dC0 = "branch_data[\"Line27_28\"][\"C\"]"
            dC1 = "branch_data[\"Line27_28\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 10040, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line28_29 {
            Length = "branch_data[\"Line28_29\"][\"length\"]"
            R0 = "branch_data[\"Line28_29\"][\"R\"]"
            R1 = "branch_data[\"Line28_29\"][\"R\"]"
            X0 = "branch_data[\"Line28_29\"][\"X\"]"
            X1 = "branch_data[\"Line28_29\"][\"X\"]"
            dC0 = "branch_data[\"Line28_29\"][\"C\"]"
            dC1 = "branch_data[\"Line28_29\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 10312, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line29_30 {
            Length = "branch_data[\"Line29_30\"][\"length\"]"
            R0 = "branch_data[\"Line29_30\"][\"R\"]"
            R1 = "branch_data[\"Line29_30\"][\"R\"]"
            X0 = "branch_data[\"Line29_30\"][\"X\"]"
            X1 = "branch_data[\"Line29_30\"][\"X\"]"
            dC0 = "branch_data[\"Line29_30\"][\"C\"]"
            dC1 = "branch_data[\"Line29_30\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 10576, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line30_31 {
            Length = "branch_data[\"Line30_31\"][\"length\"]"
            R0 = "branch_data[\"Line30_31\"][\"R\"]"
            R1 = "branch_data[\"Line30_31\"][\"R\"]"
            X0 = "branch_data[\"Line30_31\"][\"X\"]"
            X1 = "branch_data[\"Line30_31\"][\"X\"]"
            dC0 = "branch_data[\"Line30_31\"][\"C\"]"
            dC1 = "branch_data[\"Line30_31\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 10864, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line31_32 {
            Length = "branch_data[\"Line31_32\"][\"length\"]"
            R0 = "branch_data[\"Line31_32\"][\"R\"]"
            R1 = "branch_data[\"Line31_32\"][\"R\"]"
            X0 = "branch_data[\"Line31_32\"][\"X\"]"
            X1 = "branch_data[\"Line31_32\"][\"X\"]"
            dC0 = "branch_data[\"Line31_32\"][\"C\"]"
            dC1 = "branch_data[\"Line31_32\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 11128, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line32_33 {
            Length = "branch_data[\"Line32_33\"][\"length\"]"
            R0 = "branch_data[\"Line32_33\"][\"R\"]"
            R1 = "branch_data[\"Line32_33\"][\"R\"]"
            X0 = "branch_data[\"Line32_33\"][\"X\"]"
            X1 = "branch_data[\"Line32_33\"][\"X\"]"
            dC0 = "branch_data[\"Line32_33\"][\"C\"]"
            dC1 = "branch_data[\"Line32_33\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 11408, 7888
            size = 64, 96
        ]

        component "OpenDSS/Line" Line2_19 {
            Length = "branch_data[\"Line2_19\"][\"length\"]"
            R0 = "branch_data[\"Line2_19\"][\"R\"]"
            R1 = "branch_data[\"Line2_19\"][\"R\"]"
            X0 = "branch_data[\"Line2_19\"][\"X\"]"
            X1 = "branch_data[\"Line2_19\"][\"X\"]"
            dC0 = "branch_data[\"Line2_19\"][\"C\"]"
            dC1 = "branch_data[\"Line2_19\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8416, 8672
            size = 64, 96
        ]

        component "OpenDSS/Line" Line19_20 {
            Length = "branch_data[\"Line19_20\"][\"length\"]"
            R0 = "branch_data[\"Line19_20\"][\"R\"]"
            R1 = "branch_data[\"Line19_20\"][\"R\"]"
            X0 = "branch_data[\"Line19_20\"][\"X\"]"
            X1 = "branch_data[\"Line19_20\"][\"X\"]"
            dC0 = "branch_data[\"Line19_20\"][\"C\"]"
            dC1 = "branch_data[\"Line19_20\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8688, 8672
            size = 64, 96
        ]

        component "OpenDSS/Line" Line20_21 {
            Length = "branch_data[\"Line20_21\"][\"length\"]"
            R0 = "branch_data[\"Line20_21\"][\"R\"]"
            R1 = "branch_data[\"Line20_21\"][\"R\"]"
            X0 = "branch_data[\"Line20_21\"][\"X\"]"
            X1 = "branch_data[\"Line20_21\"][\"X\"]"
            dC0 = "branch_data[\"Line20_21\"][\"C\"]"
            dC1 = "branch_data[\"Line20_21\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 8952, 8672
            size = 64, 96
        ]

        component "OpenDSS/Line" Line21_22 {
            Length = "branch_data[\"Line21_22\"][\"length\"]"
            R0 = "branch_data[\"Line21_22\"][\"R\"]"
            R1 = "branch_data[\"Line21_22\"][\"R\"]"
            X0 = "branch_data[\"Line21_22\"][\"X\"]"
            X1 = "branch_data[\"Line21_22\"][\"X\"]"
            dC0 = "branch_data[\"Line21_22\"][\"C\"]"
            dC1 = "branch_data[\"Line21_22\"][\"C\"]"
            global_basefreq = "False"
        }
        [
            position = 9240, 8672
            size = 64, 96
        ]

        component "OpenDSS/Load" Load19 {
            Sn_3ph = "load_data[\"Load19\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load19\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load19\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 8552, 8792
            size = 128, 48
        ]

        component "OpenDSS/Load" Load20 {
            Sn_3ph = "load_data[\"Load20\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load20\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load20\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 8832, 8792
            size = 128, 48
        ]

        component "OpenDSS/Load" Load21 {
            Sn_3ph = "load_data[\"Load21\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load21\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load21\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9112, 8800
            size = 128, 48
        ]

        component "OpenDSS/Load" Load22 {
            Sn_3ph = "load_data[\"Load22\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load22\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            global_basefreq = "False"
            pf_3ph = "load_data[\"Load22\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9384, 8792
            size = 128, 48
        ]

        component "OpenDSS/Vsource" V1 {
            basekv = "12.66"
            global_basefreq = "True"
            r0 = "1e-3"
            r1 = "1e-3"
            x0 = "1e-3"
            x1 = "1e-3"
        }
        [
            position = 7872, 8272
            size = 64, 96
        ]

        component "OpenDSS/SimDSS" SimDSS1 {
            sim_counter = "12"
            sim_status = "Sim12 complete"
            voltagebases = "[12.66, 0.48]"
        }
        [
            position = 9464, 7656
            size = 96, 96
        ]

        component "OpenDSS/Load" Load23 {
            Sn_3ph = "load_data[\"Load23\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load23\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load23\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 8656, 8000
            size = 128, 48
        ]

        component "OpenDSS/Load" Load24 {
            Sn_3ph = "load_data[\"Load24\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load24\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load24\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 8928, 8000
            size = 128, 48
        ]

        component "OpenDSS/Load" Load25 {
            Sn_3ph = "load_data[\"Load25\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load25\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load25\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9208, 8000
            size = 128, 48
        ]

        component "OpenDSS/Load" Load26 {
            Sn_3ph = "load_data[\"Load26\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load26\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load26\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9648, 8000
            size = 128, 48
        ]

        component "OpenDSS/Load" Load27 {
            Sn_3ph = "load_data[\"Load27\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load27\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load27\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 9920, 8000
            size = 128, 48
        ]

        component "OpenDSS/Load" Load28 {
            Sn_3ph = "load_data[\"Load28\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load28\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load28\"][\"PF\"]"
            tp_connection_combo_values = "[\'Y - Grounded\', \'Y\', \'Δ\']"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 10192, 8000
            size = 128, 48
        ]

        component "OpenDSS/Load" Load29 {
            Sn_3ph = "load_data[\"Load29\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load29\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load29\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 10448, 7992
            size = 128, 48
        ]

        component "OpenDSS/Load" Load30 {
            Sn_3ph = "load_data[\"Load30\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load30\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load30\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 10736, 7992
            size = 128, 48
        ]

        component "OpenDSS/Load" Load31 {
            Sn_3ph = "load_data[\"Load31\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load31\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load31\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 11016, 7992
            size = 128, 48
        ]

        component "OpenDSS/Load" Load32 {
            Sn_3ph = "load_data[\"Load32\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load32\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load32\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 11280, 7992
            size = 128, 48
        ]

        component "OpenDSS/Load" Load33 {
            Sn_3ph = "load_data[\"Load33\"][\"S\"]/1e3"
            Vn_3ph = "load_data[\"Load33\"][\"V\"]/1e3"
            ZIPV = "[0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0]"
            pf_3ph = "load_data[\"Load33\"][\"PF\"]"
            zip_internal = "[0.0, 0.0, 1.0]"
            zip_internal_Q = "[0.0, 0.0, 1.0]"
            zip_internal_n = "[0.0, 0.0, 1.0]"
            zip_internal_n_Q = "[0.0, 0.0, 1.0]"
        }
        [
            position = 11552, 7992
            size = 128, 48
        ]

        component Subsystem Storage {
            layout = static
            component Subsystem EPC {
                layout = dynamic
                component "core/Constant" C5 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 7392, 7616
                    hide_name = True
                ]

                component "core/Probe" 0_0V {
                    signal_type = "voltage"
                }
                [
                    position = 7456, 7616
                ]

                component "core/Probe" 0_0A {
                    signal_type = "current"
                }
                [
                    position = 7568, 7616
                ]

                component "core/Constant" C3 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 7504, 7616
                    hide_name = True
                ]

                component "core/Termination" TRM2 {
                }
                [
                    position = 7752, 7616
                    hide_name = True
                ]

                component "core/SCADA Input" EPC-CONNECT-GEN {
                    def_value = "EPC_CONNECT_GEN"
                    execution_rate = "Ts"
                    format = "uint"
                    max = "EPC_CONNECT_GEN"
                    min = "EPC_CONNECT_GEN"
                    signal_type = "uint"
                    unit = ""
                }
                [
                    position = 7664, 7616
                ]

                component "core/Signal switch" "Signal switch1" {
                    criterion = "ctrl >= threshold"
                }
                [
                    position = 8576, 8320
                    hide_name = True
                ]

                component "core/SCADA Input" en_mod {
                    execution_rate = "Ts"
                    max = "1"
                    min = "-0"
                    unit = ""
                }
                [
                    position = 8496, 8240
                ]

                component "core/Constant" Constant1 {
                    execution_rate = "Ts"
                    value = "0"
                }
                [
                    position = 8512, 8368
                    hide_name = True
                ]

                component "core/Square Wave Source" "Square Wave Source1" {
                    execution_rate = "Ts"
                    frequency = "0.1"
                }
                [
                    position = 8512, 8304
                    hide_name = True
                ]

                component "core/Current Measurement" Ibat {
                    bw_limit = "True"
                    frequency = "100e3"
                }
                [
                    position = 9400, 7712
                    rotation = down
                    size = 64, 32
                ]

                component Subsystem Cf {
                    layout = dynamic
                    component "core/Capacitor" Ca {
                        capacitance = "mCc"
                    }
                    [
                        position = 8152, 8128
                        rotation = right
                    ]

                    component "core/Capacitor" Cb {
                        capacitance = "mCc"
                    }
                    [
                        position = 8272, 8128
                        rotation = right
                    ]

                    component "core/Capacitor" Cc {
                        capacitance = "mCc"
                    }
                    [
                        position = 8392, 8128
                        rotation = right
                    ]

                    component "core/Resistor" Rds_a {
                        resistance = "mRds"
                    }
                    [
                        position = 8152, 8008
                        rotation = right
                    ]

                    component "core/Resistor" Rds_b {
                        resistance = "mRds"
                    }
                    [
                        position = 8272, 8008
                        rotation = right
                    ]

                    component "core/Resistor" Rds_c {
                        resistance = "mRds"
                    }
                    [
                        position = 8392, 8008
                        rotation = right
                    ]

                    port A {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 8152, 7912
                        rotation = right
                    ]

                    port B {
                        position = left:2
                        kind = pe
                    }
                    [
                        position = 8272, 7912
                        rotation = right
                        scale = -1, 1
                    ]

                    port C {
                        position = left:3
                        kind = pe
                    }
                    [
                        position = 8392, 7912
                        rotation = right
                        scale = -1, 1
                    ]

                    port a {
                        position = right:1
                        kind = pe
                    }
                    [
                        position = 8208, 7912
                        rotation = right
                    ]

                    port b {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 8328, 7912
                        rotation = right
                        scale = -1, 1
                    ]

                    port c {
                        position = right:3
                        kind = pe
                    }
                    [
                        position = 8448, 7912
                        rotation = right
                        scale = -1, 1
                    ]

                    port N {
                        position = bottom:auto
                        kind = pe
                    }
                    [
                        position = 8464, 8272
                        scale = -1, 1
                    ]

                    junction Junction5 pe
                    [
                        position = 8272, 8272
                    ]

                    junction Junction8 pe
                    [
                        position = 8152, 7952
                    ]

                    junction Junction9 pe
                    [
                        position = 8272, 7952
                    ]

                    junction Junction10 pe
                    [
                        position = 8392, 7952
                    ]

                    junction Junction11 pe
                    [
                        position = 8392, 8272
                    ]

                    connect A Junction8 as Connection29
                    connect B Junction9 as Connection32
                    connect C Junction10 as Connection35
                    connect Cb.n_node Junction5 as Connection19
                    connect Cb.p_node Rds_b.n_node as Connection43
                    [
                        breakpoints = 8272, 8072
                    ]
                    connect Cc.p_node Rds_c.n_node as Connection46
                    [
                        breakpoints = 8392, 8072
                    ]
                    connect Junction10 Rds_c.p_node as Connection36
                    connect Junction11 Cc.n_node as Connection39
                    connect Junction5 Ca.n_node as Connection44
                    [
                        breakpoints = 8272, 8272; 8224, 8272; 8224, 8272; 8152, 8272
                    ]
                    connect Junction5 Junction11 as Connection45
                    [
                        breakpoints = 8272, 8272; 8344, 8272
                    ]
                    connect Junction8 Rds_a.p_node as Connection30
                    connect Junction9 Rds_b.p_node as Connection33
                    connect N Junction11 as Connection40
                    connect Rds_a.n_node Ca.p_node as Connection42
                    [
                        breakpoints = 8152, 8072
                    ]
                    connect a Junction8 as Connection31
                    connect b Junction9 as Connection34
                    connect c Junction10 as Connection37

                    mCc = "Cf"
                    mRds = "Rf"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                        mRds {
                            label = "Series Damping Resistance"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        mRdp {
                            label = "Parallel Damping Resistance"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        mCc {
                            label = "Capacitance"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7920, 7808
                    scale = -1, 1
                    size = 120, 240
                ]

                component Subsystem Lg {
                    layout = dynamic
                    component "core/Inductor" La {
                        inductance = "mLl"
                    }
                    [
                        position = 8144, 8096
                    ]

                    component "core/Inductor" Lb {
                        inductance = "mLl"
                    }
                    [
                        position = 8144, 8192
                    ]

                    component "core/Inductor" Lc {
                        inductance = "mLl"
                    }
                    [
                        position = 8144, 8288
                    ]

                    component "core/Resistor" Ra {
                        resistance = "mLr"
                    }
                    [
                        position = 8248, 8096
                    ]

                    component "core/Resistor" Rb {
                        resistance = "mLr"
                    }
                    [
                        position = 8248, 8192
                    ]

                    component "core/Resistor" Rc {
                        resistance = "mLr"
                    }
                    [
                        position = 8248, 8288
                    ]

                    port A {
                        position = right:1
                        kind = pe
                    }
                    [
                        position = 8328, 8096
                        rotation = down
                    ]

                    port a {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 8064, 8096
                    ]

                    port B {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 8328, 8192
                        rotation = down
                    ]

                    port b {
                        position = left:2
                        kind = pe
                    }
                    [
                        position = 8064, 8192
                    ]

                    port C {
                        position = right:3
                        kind = pe
                    }
                    [
                        position = 8328, 8288
                        rotation = down
                    ]

                    port c {
                        position = left:3
                        kind = pe
                    }
                    [
                        position = 8064, 8288
                    ]

                    connect La.n_node Ra.p_node as Connection1135
                    connect La.p_node a as Connection1143
                    connect Lb.n_node Rb.p_node as Connection1137
                    connect Lb.p_node b as Connection1140
                    connect Lc.n_node Rc.p_node as Connection1139
                    connect Lc.p_node c as Connection1144
                    connect Ra.n_node A as Connection1141
                    connect Rb.n_node B as Connection1142
                    connect Rc.n_node C as Connection1145

                    mLl = "Lg"
                    mLr = "Rg"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                        mLl {
                            label = "Inductance"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        mLr {
                            label = "Resistance"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 7736, 7808
                    size = 120, 240
                ]

                component "core/Three Phase Inverter" INV1 {
                    Sa_bot = "10"
                    Sa_top = "9"
                    Sb_bot = "6"
                    Sb_top = "5"
                    Sc_bot = "2"
                    Sc_top = "1"
                    fvd_def_method = "LUT"
                }
                [
                    position = 8768, 7808
                    scale = -1, 1
                    size = 127, 256
                ]

                component "core/Current Measurement" I_ac {
                    frequency = "100e3"
                }
                [
                    position = 9016, 7712
                    rotation = down
                    size = 64, 32
                ]

                component Subsystem "INV1-DC Link" {
                    layout = dynamic
                    component "core/Resistor" Rbld {
                        resistance = "1000"
                    }
                    [
                        position = 8032, 8216
                        rotation = left
                    ]

                    component "core/Resistor" Rdc {
                        resistance = "50e-6"
                    }
                    [
                        position = 7952, 8328
                        rotation = right
                    ]

                    component "core/Capacitor" Cdc {
                        capacitance = "Cdc"
                    }
                    [
                        position = 7952, 8216
                        rotation = right
                    ]

                    component "core/Probe" vFbNo {
                        signal_type = "voltage"
                    }
                    [
                        position = 8392, 8216
                    ]

                    component "core/Voltage Measurement" Vdc {
                        execution_rate = "20e-6"
                        sig_output = "True"
                    }
                    [
                        position = 8192, 8216
                        rotation = right
                        size = 64, 32
                    ]

                    component "core/Current Measurement" Idc {
                        frequency = "100e3"
                    }
                    [
                        position = 7952, 8096
                        rotation = left
                        scale = -1, -1
                        size = 64, 32
                    ]

                    component Subsystem "DC Stuff" {
                        layout = dynamic
                        component "core/Resistor" Rfb4 {
                            resistance = "415"
                        }
                        [
                            position = 8272, 8080
                        ]

                        component "core/Resistor" Rfb3 {
                            resistance = "470e3 * 3"
                        }
                        [
                            position = 7936, 8304
                            rotation = right
                        ]

                        component "core/Capacitor" Cfb3 {
                            capacitance = "0.022e-6 / 3"
                        }
                        [
                            position = 8032, 8304
                            rotation = right
                        ]

                        component "core/Capacitor" Cfb4 {
                            capacitance = "1500e-10"
                        }
                        [
                            position = 8352, 8144
                            rotation = right
                        ]

                        component "core/Resistor" Rfb1 {
                            resistance = "3*(470e3)"
                        }
                        [
                            position = 7936, 8016
                            rotation = right
                        ]

                        component "core/Capacitor" Cfb2 {
                            capacitance = "2200e-12"
                        }
                        [
                            position = 8032, 8144
                            rotation = right
                        ]

                        component "core/Resistor" Rfb2 {
                            resistance = "6.65e3"
                        }
                        [
                            position = 7936, 8144
                            rotation = right
                        ]

                        component "core/Voltage Measurement" Vdc_bs {
                        }
                        [
                            position = 8480, 8136
                            rotation = right
                            size = 64, 32
                        ]

                        component "core/Voltage Controlled Voltage Source" VCVS1 {
                            control_gain = "1"
                            control_label = "DC Link.DC Stuff.Cfb2"
                        }
                        [
                            position = 8200, 8144
                            rotation = right
                            size = 64, 48
                        ]

                        port DC+ {
                            position = top:1
                            kind = pe
                        }
                        [
                            position = 7936, 7936
                            rotation = right
                        ]

                        port DC- {
                            position = bottom:1
                            kind = pe
                        }
                        [
                            position = 7936, 8416
                            rotation = left
                        ]

                        junction Junction274 pe
                        [
                            position = 7936, 8080
                        ]

                        junction Junction290 pe
                        [
                            position = 8032, 8192
                        ]

                        junction Junction292 pe
                        [
                            position = 8352, 8192
                        ]

                        junction Junction293 pe
                        [
                            position = 8352, 8080
                        ]

                        junction Junction708 pe
                        [
                            position = 7936, 8192
                        ]

                        junction Junction709 pe
                        [
                            position = 7936, 8240
                        ]

                        junction Junction710 pe
                        [
                            position = 7936, 8368
                        ]

                        junction Junction711 pe
                        [
                            position = 8200, 8192
                        ]

                        connect Cfb2.p_node Junction274 as Connection1705
                        connect Cfb2.n_node Junction290 as Connection1787
                        connect Cfb3.n_node Junction710 as Connection4359
                        connect Cfb4.n_node Junction292 as Connection1798
                        connect Cfb4.p_node Junction293 as Connection1801
                        connect Junction274 Rfb2.p_node as Connection1704
                        connect Junction290 Junction708 as Connection4351
                        connect Junction290 Junction711 as Connection4363
                        connect Junction293 Rfb4.n_node as Connection1802
                        connect Junction708 Junction709 as Connection4355
                        connect Junction708 Rfb2.n_node as Connection4352
                        connect Junction709 Cfb3.p_node as Connection4354
                        connect Junction710 DC- as Connection4361
                        connect Junction711 Junction292 as Connection4364
                        connect Rfb1.p_node DC+ as Connection4360
                        connect Rfb1.n_node Junction274 as Connection1703
                        connect Rfb3.p_node Junction709 as Connection4353
                        connect Rfb3.n_node Junction710 as Connection4357
                        connect VCVS1.n_node Junction711 as Connection4365
                        connect VCVS1.p_node Rfb4.p_node as Connection4366
                        connect Vdc_bs.n_node Junction292 as Connection1800
                        connect Vdc_bs.p_node Junction293 as Connection1803

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                            
                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()
                                
                            ENDCODE

                            CODE pre_compile
                                comp_handle = mdl.get_sub_level_handle(item_handle)
                                
                                VCVS1 = mdl.get_item('VCVS1', parent=comp_handle)
                                Cfb2 = mdl.get_item('Cfb2', parent=comp_handle)
                                
                                Cfb_fqn = mdl.get_fqn(Cfb2)
                                control_label_prop = mdl.prop(VCVS1, 'control_label')
                                
                                mdl.set_property_value(control_label_prop, Cfb_fqn)
                            ENDCODE
                        }
                    }
                    [
                        position = 8112, 8216
                        size = 48, 48
                    ]

                    component "core/Discrete Transfer Function" "Poor Feedback" {
                        a_coeff = "[1, 167704, 8.15735e9, 9.34178e13, 1.77241e16]"
                        b_coeff = "[2.21468e9, 1.83482e14, 1.77241e16]"
                        domain = "S-domain"
                    }
                    [
                        position = 8296, 8216
                    ]

                    port DC+ {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 7904, 8000
                    ]

                    port DC- {
                        position = left:2
                        kind = pe
                    }
                    [
                        position = 7904, 8416
                    ]

                    port +DC {
                        position = right:1
                        kind = pe
                    }
                    [
                        position = 8240, 8000
                        rotation = down
                    ]

                    port -DC {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 8240, 8416
                        rotation = down
                    ]

                    junction Junction433 pe
                    [
                        position = 8112, 8416
                    ]

                    junction Junction434 pe
                    [
                        position = 8112, 8000
                    ]

                    junction Junction441 pe
                    [
                        position = 8192, 8000
                    ]

                    junction Junction442 pe
                    [
                        position = 8192, 8416
                    ]

                    junction Junction443 pe
                    [
                        position = 8032, 8000
                    ]

                    junction Junction444 pe
                    [
                        position = 8032, 8416
                    ]

                    junction Junction445 pe
                    [
                        position = 7952, 8000
                    ]

                    junction Junction446 pe
                    [
                        position = 7952, 8416
                    ]

                    connect Cdc.p_node Idc.n_node as Connection2691
                    connect Cdc.n_node Rdc.p_node as Connection1273
                    connect "DC Stuff.DC-" Junction433 as Connection2837
                    connect "DC Stuff.DC+" Junction434 as Connection2840
                    connect Idc.p_node Junction445 as Connection2969
                    connect Junction433 Junction442 as Connection2937
                    connect Junction434 Junction441 as Connection2933
                    [
                        breakpoints = 8112, 8000
                    ]
                    connect Junction434 Junction443 as Connection2952
                    connect Junction441 +DC as Connection2984
                    connect Junction441 Vdc.p_node as Connection2934
                    connect Junction442 -DC as Connection2983
                    connect Junction442 Vdc.n_node as Connection2938
                    connect Junction444 Junction433 as Connection2956
                    connect Junction444 Junction446 as Connection2979
                    [
                        breakpoints = 8032, 8416
                    ]
                    connect Junction445 DC+ as Connection2981
                    connect Junction445 Junction443 as Connection2970
                    [
                        breakpoints = 7952, 8000
                    ]
                    connect Junction446 DC- as Connection2982
                    connect Junction446 Rdc.n_node as Connection2980
                    [
                        breakpoints = 7952, 8416
                    ]
                    connect Rbld.n_node Junction443 as Connection2954
                    connect Rbld.p_node Junction444 as Connection2957
                    connect "Poor Feedback.out" vFbNo.in as Connection2131
                    connect Vdc.out "Poor Feedback.in" as Connection2985
                }
                [
                    position = 9144, 7808
                    size = 120, 240
                ]

                component Subsystem Lc {
                    layout = dynamic
                    component "core/Inductor" La {
                        inductance = "mLl"
                    }
                    [
                        position = 8144, 8096
                    ]

                    component "core/Inductor" Lb {
                        inductance = "mLl"
                    }
                    [
                        position = 8144, 8192
                    ]

                    component "core/Inductor" Lc {
                        inductance = "mLl"
                    }
                    [
                        position = 8144, 8288
                    ]

                    component "core/Resistor" Ra {
                        resistance = "mLr"
                    }
                    [
                        position = 8248, 8096
                    ]

                    component "core/Resistor" Rb {
                        resistance = "mLr"
                    }
                    [
                        position = 8248, 8192
                    ]

                    component "core/Resistor" Rc {
                        resistance = "mLr"
                    }
                    [
                        position = 8248, 8288
                    ]

                    port A {
                        position = right:1
                        kind = pe
                    }
                    [
                        position = 8328, 8096
                        rotation = down
                    ]

                    port a {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 8064, 8096
                    ]

                    port B {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 8328, 8192
                        rotation = down
                    ]

                    port b {
                        position = left:2
                        kind = pe
                    }
                    [
                        position = 8064, 8192
                    ]

                    port C {
                        position = right:3
                        kind = pe
                    }
                    [
                        position = 8328, 8288
                        rotation = down
                    ]

                    port c {
                        position = left:3
                        kind = pe
                    }
                    [
                        position = 8064, 8288
                    ]

                    connect La.n_node Ra.p_node as Connection1135
                    connect La.p_node a as Connection1143
                    connect Lb.n_node Rb.p_node as Connection1137
                    connect Lb.p_node b as Connection1140
                    connect Lc.n_node Rc.p_node as Connection1139
                    connect Lc.p_node c as Connection1144
                    connect Ra.n_node A as Connection1141
                    connect Rb.n_node B as Connection1142
                    connect Rc.n_node C as Connection1145

                    mLl = "Li"
                    mLr = "Ri"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                        mLl {
                            label = "Inductance"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        mLr {
                            label = "Resistance"
                            widget = edit
                            type = generic
                            default_value = "0"
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 8200, 7808
                    size = 120, 240
                ]

                component "core/Triple Pole Single Throw Contactor AI Controlled" INV1-MX1 {
                    ctrl_ai_pin_addr = "3"
                    off_delay = "mx1_tOff"
                    on_delay = "mx1_tOn"
                    threshold_value = "2.5"
                }
                [
                    position = 7584, 7808
                    size = 64, 256
                ]

                component Subsystem "INV1-DC Precharge" {
                    layout = dynamic
                    component "core/Resistor" Rpc {
                        resistance = "Rpc"
                    }
                    [
                        position = 8296, 8160
                        scale = -1, 1
                    ]

                    component "core/Single Pole Single Throw Contactor AI Controlled" Kbat {
                        ctrl_ai_pin_addr = "8"
                        threshold_value = "2.5"
                    }
                    [
                        position = 8192, 8224
                        size = 64, 32
                    ]

                    component "core/Single Pole Single Throw Contactor AI Controlled" Kpc {
                        ctrl_ai_pin_addr = "7"
                        threshold_value = "2.5"
                    }
                    [
                        position = 8192, 8160
                        size = 64, 32
                    ]

                    port S1 {
                        position = right:1
                        kind = pe
                    }
                    [
                        position = 8400, 8224
                        rotation = down
                        scale = 1, -1
                    ]

                    port S2 {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 8096, 8224
                    ]

                    junction Junction439 pe
                    [
                        position = 8144, 8224
                    ]

                    junction Junction440 pe
                    [
                        position = 8344, 8224
                    ]

                    connect Junction439 S2 as Connection3001
                    connect Junction440 S1 as Connection3006
                    connect Kbat.a_in Junction439 as Connection2995
                    connect Kbat.a_out Junction440 as Connection3005
                    connect Kpc.a_in Junction439 as Connection2997
                    connect Kpc.a_out Rpc.n_node as Connection3004
                    connect Rpc.p_node Junction440 as Connection3007
                }
                [
                    position = 9304, 7712
                    size = 48, 48
                ]

                component "core/Three-phase Meter" MTR-GRID {
                    P_meas = "True"
                    Ts = "Ts"
                    VAB = "True"
                    VBC = "True"
                    VCA = "True"
                    VLL_avg_rms = "True"
                    VLL_rms = "True"
                    VLn_rms = "True"
                    enable_out = "False"
                    freq = "True"
                }
                [
                    position = 7320, 7808
                    size = 56, 240
                ]

                component Subsystem MTR-INV1 {
                    layout = dynamic
                    component "core/Constant" zero {
                        execution_rate = "Ts"
                        value = "0"
                    }
                    [
                        position = 7152, 7944
                    ]

                    component "core/Bus Join" output_bus {
                        inputs = "30"
                    }
                    [
                        position = 8872, 7224
                        rotation = left
                    ]

                    component "core/Bus Join" extra_output_bus {
                        inputs = "12"
                    }
                    [
                        position = 9976, 7224
                        rotation = left
                    ]

                    component "core/Termination" POWER_PA {
                    }
                    [
                        position = 10152, 7784
                        hide_name = True
                    ]

                    component "core/Termination" POWER_PB {
                    }
                    [
                        position = 10152, 7864
                        hide_name = True
                    ]

                    component "core/Termination" POWER_PC {
                    }
                    [
                        position = 10152, 7944
                        hide_name = True
                    ]

                    component "core/Termination" POWER_QA {
                    }
                    [
                        position = 10152, 8024
                        hide_name = True
                    ]

                    component "core/Termination" POWER_QB {
                    }
                    [
                        position = 10152, 8104
                        hide_name = True
                    ]

                    component "core/Termination" POWER_QC {
                    }
                    [
                        position = 10152, 8184
                        hide_name = True
                    ]

                    component "core/Termination" POWER_SA {
                    }
                    [
                        position = 10152, 8264
                        hide_name = True
                    ]

                    component "core/Termination" POWER_SB {
                    }
                    [
                        position = 10152, 8344
                        hide_name = True
                    ]

                    component "core/Termination" POWER_SC {
                    }
                    [
                        position = 10152, 8424
                        hide_name = True
                    ]

                    component "core/Termination" POWER_PFA {
                    }
                    [
                        position = 10152, 8496
                        hide_name = True
                    ]

                    component "core/Termination" POWER_PFB {
                    }
                    [
                        position = 10152, 8576
                        hide_name = True
                    ]

                    component "core/Termination" POWER_PFC {
                    }
                    [
                        position = 10152, 8656
                        hide_name = True
                    ]

                    component "core/Termination" extra_out {
                    }
                    [
                        position = 9976, 7144
                        rotation = left
                    ]

                    component "core/Termination" TRMd {
                    }
                    [
                        position = 7976, 7792
                        rotation = left
                        hide_name = True
                    ]

                    component "core/Termination" TRMq {
                    }
                    [
                        position = 8000, 7840
                        rotation = left
                        hide_name = True
                    ]

                    component "core/Termination" TRMz {
                    }
                    [
                        position = 8032, 7880
                        rotation = left
                        hide_name = True
                    ]

                    component "core/Termination" TRMwt {
                    }
                    [
                        position = 8032, 8064
                        rotation = right
                        hide_name = True
                    ]

                    component "core/Termination" TRMsin {
                    }
                    [
                        position = 8000, 8016
                        rotation = right
                        hide_name = True
                    ]

                    component "core/Three phase PLL" PLL {
                    }
                    [
                        position = 7896, 7944
                        size = 64, 128
                    ]

                    component "core/Meter_SM_and_dFract" measSM {
                        Ts = "Ts"
                        n_cycles = "n_cycles"
                    }
                    [
                        position = 7896, 8496
                        size = 96, 112
                    ]

                    component "core/Termination" termSubMode {
                    }
                    [
                        position = 7968, 8592
                        rotation = right
                    ]

                    component "core/Three-phase RMS variable frequency" VLn_RMS_calc {
                        Ts = "Ts"
                        internal_sm = "False"
                    }
                    [
                        position = 8416, 7904
                        size = 144, 184
                    ]

                    component "core/Three-phase RMS variable frequency" VLL_RMS_calc {
                        Ts = "Ts"
                        internal_sm = "False"
                    }
                    [
                        position = 8416, 8312
                        size = 144, 184
                    ]

                    component "core/Sum" sumVLL_RMS {
                        signs = "3"
                    }
                    [
                        position = 8952, 8072
                        hide_name = True
                    ]

                    component "core/Gain" gainVLL_RMS {
                        gain = "1/3"
                    }
                    [
                        position = 9080, 8072
                        hide_name = True
                    ]

                    component "core/Power Meter" "Power Meter" {
                        enable_inst_ports = "False"
                        filter_order = "second order"
                    }
                    [
                        position = 8984, 8624
                    ]

                    component "core/Termination" Out {
                    }
                    [
                        position = 8872, 7144
                        rotation = left
                    ]

                    component "core/Resistor" Ra {
                        resistance = "R"
                    }
                    [
                        position = 6584, 8016
                        rotation = right
                    ]

                    component "core/Resistor" Rb {
                        resistance = "R"
                    }
                    [
                        position = 6528, 8016
                        rotation = right
                    ]

                    component "core/Resistor" Rc {
                        resistance = "R"
                    }
                    [
                        position = 6472, 8016
                        rotation = right
                    ]

                    component "core/Voltage Measurement" VAn {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 6784, 7896
                        rotation = right
                    ]

                    component "core/Voltage Measurement" VBn {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 6728, 7960
                        rotation = right
                    ]

                    component "core/Voltage Measurement" VCn {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 6672, 8024
                        rotation = right
                    ]

                    component "core/Voltage Measurement" VAB {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 6912, 7680
                        rotation = right
                    ]

                    component "core/Voltage Measurement" VBC {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 6928, 7776
                        rotation = right
                    ]

                    component "core/Voltage Measurement" VCA {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 7240, 7776
                        rotation = left
                    ]

                    component "core/Current Measurement" IA {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 7416, 7632
                    ]

                    component "core/Current Measurement" IB {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 7416, 7728
                    ]

                    component "core/Current Measurement" IC {
                        execution_rate = "Ts"
                        sig_output = "True"
                    }
                    [
                        position = 7416, 7824
                    ]

                    component "core/Probe" Freq {
                    }
                    [
                        position = 9640, 7784
                    ]

                    component "core/Probe" VAn_RMS {
                    }
                    [
                        position = 9640, 7864
                    ]

                    component "core/Probe" VBn_RMS {
                    }
                    [
                        position = 9640, 7944
                    ]

                    component "core/Probe" VCn_RMS {
                    }
                    [
                        position = 9640, 8024
                    ]

                    component "core/Probe" VAB_RMS {
                    }
                    [
                        position = 9640, 8104
                    ]

                    component "core/Probe" VBC_RMS {
                    }
                    [
                        position = 9640, 8184
                    ]

                    component "core/Probe" VCA_RMS {
                    }
                    [
                        position = 9640, 8264
                    ]

                    component "core/Termination" VLn_RMS {
                    }
                    [
                        position = 9896, 8024
                        hide_name = True
                    ]

                    component "core/Probe" VLL_RMS {
                    }
                    [
                        position = 9896, 8104
                    ]

                    component "core/Termination" IA_RMS {
                    }
                    [
                        position = 9896, 7784
                        hide_name = True
                    ]

                    component "core/Termination" IB_RMS {
                    }
                    [
                        position = 9896, 7864
                        hide_name = True
                    ]

                    component "core/Termination" IC_RMS {
                    }
                    [
                        position = 9896, 7944
                        hide_name = True
                    ]

                    component "core/Termination" I_RMS {
                    }
                    [
                        position = 9896, 8184
                        hide_name = True
                    ]

                    component "core/Probe" POWER_P {
                    }
                    [
                        position = 9896, 8264
                    ]

                    component "core/Probe" POWER_Q {
                    }
                    [
                        position = 9896, 8344
                    ]

                    component "core/Probe" POWER_S {
                    }
                    [
                        position = 9896, 8424
                    ]

                    component "core/Probe" POWER_PF {
                    }
                    [
                        position = 9896, 8504
                    ]

                    port GND {
                        position = bottom:1
                        kind = pe
                    }
                    [
                        position = 6784, 8208
                        rotation = left
                    ]

                    port A+ {
                        position = left:1
                        kind = pe
                    }
                    [
                        position = 6376, 7632
                        rotation = down
                        scale = -1, 1
                    ]

                    port B+ {
                        position = left:2
                        kind = pe
                    }
                    [
                        position = 6376, 7728
                        rotation = down
                        scale = -1, 1
                    ]

                    port C+ {
                        position = left:3
                        kind = pe
                    }
                    [
                        position = 6376, 7824
                        rotation = down
                        scale = -1, 1
                    ]

                    port A- {
                        position = right:1
                        kind = pe
                    }
                    [
                        position = 7576, 7632
                        rotation = down
                    ]

                    port B- {
                        position = right:2
                        kind = pe
                    }
                    [
                        position = 7576, 7728
                        rotation = down
                    ]

                    port C- {
                        position = right:3
                        kind = pe
                    }
                    [
                        position = 7576, 7824
                        rotation = down
                    ]

                    tag fromIB {
                        value = "IB"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8560, 7448
                        size = 60, 20
                    ]

                    tag fromVAB {
                        value = "VAB"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8560, 7352
                        size = 60, 20
                    ]

                    tag fromVABRMS {
                        value = "VAB_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7624
                        size = 60, 20
                    ]

                    tag GoToZero {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7256, 7944
                        size = 60, 20
                    ]

                    tag fromIC {
                        value = "IC"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7480
                        size = 60, 20
                    ]

                    tag fromVBCRMS {
                        value = "VBC_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7624
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromICRMS {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9176, 7496
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromI_RMS {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7480
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromPF4 {
                        value = "POWER_PF"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 8504
                        size = 60, 20
                    ]

                    tag fromVCARMS {
                        value = "VCA_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9176, 7592
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromPF {
                        value = "POWER_PF"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7384
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromVCnRMS {
                        value = "VCn_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7576
                        size = 60, 20
                    ]

                    tag fromVN {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9176, 7352
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromFreq {
                        value = "Freq"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8560, 7496
                        size = 60, 20
                    ]

                    tag fromVBC {
                        value = "VBC"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7384
                        size = 60, 20
                    ]

                    tag fromVLn_RMS {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8560, 7592
                        size = 60, 20
                    ]

                    tag fromVAn {
                        value = "VAn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7288
                        size = 60, 20
                    ]

                    tag fromS4 {
                        value = "POWER_S"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 8424
                        size = 60, 20
                    ]

                    tag fromFreq4 {
                        value = "Freq"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9536, 7784
                        size = 60, 20
                    ]

                    tag fromVCn {
                        value = "VCn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7336
                        size = 60, 20
                    ]

                    tag fromVCnRMS4 {
                        value = "VCn_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9536, 8024
                        size = 60, 20
                    ]

                    tag fromVAnRMS {
                        value = "VAn_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7528
                        size = 60, 20
                    ]

                    tag fromICRMS4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 7944
                        size = 60, 20
                    ]

                    tag fromVLL_RMS {
                        value = "VLL_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7576
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromIARMS {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9176, 7544
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromIBRMS {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7528
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromVBnRMS {
                        value = "VBn_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8560, 7544
                        size = 60, 20
                    ]

                    tag fromS {
                        value = "POWER_S"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9176, 7400
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromVAnRMS4 {
                        value = "VAn_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9536, 7864
                        size = 60, 20
                    ]

                    tag fromVBnRMS4 {
                        value = "VBn_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9536, 7944
                        size = 60, 20
                    ]

                    tag fromVBCRMS4 {
                        value = "VBC_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9536, 8184
                        size = 60, 20
                    ]

                    tag fromP {
                        value = "POWER_P"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9176, 7448
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromVBn {
                        value = "VBn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8560, 7304
                        size = 59, 20
                    ]

                    tag fromVABRMS4 {
                        value = "VAB_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9536, 8104
                        size = 60, 20
                    ]

                    tag fromVLn_RMS4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 8024
                        size = 60, 20
                    ]

                    tag fromIA {
                        value = "IA"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8464, 7432
                        size = 60, 20
                    ]

                    tag fromP4 {
                        value = "POWER_P"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 8264
                        size = 60, 20
                    ]

                    tag fromQ {
                        value = "POWER_Q"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7432
                        scale = -1, 1
                        size = 63, 20
                    ]

                    tag fromIN {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9176, 7304
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromVCARMS4 {
                        value = "VCA_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9536, 8264
                        size = 60, 20
                    ]

                    tag fromVCA {
                        value = "VCA"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8560, 7400
                        size = 60, 20
                    ]

                    tag fromI_RMS4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 8184
                        size = 60, 20
                    ]

                    tag fromIBRMS4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 7864
                        size = 60, 20
                    ]

                    tag fromIARMS4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 7784
                        size = 60, 20
                    ]

                    tag fromQ4 {
                        value = "POWER_Q"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 8344
                        size = 60, 20
                    ]

                    tag fromVNRMS {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7336
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromVLL_RMS4 {
                        value = "VLL_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9792, 8104
                        size = 60, 20
                    ]

                    tag fromINRMS {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9272, 7288
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromPA4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 7784
                        size = 60, 20
                    ]

                    tag fromSC4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8424
                        size = 60, 20
                    ]

                    tag fromQA4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8024
                        size = 60, 20
                    ]

                    tag fromPB4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 7864
                        size = 60, 20
                    ]

                    tag fromSB4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8344
                        size = 60, 20
                    ]

                    tag fromQC4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8184
                        size = 60, 20
                    ]

                    tag fromQB4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8104
                        size = 60, 20
                    ]

                    tag fromPC4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 7944
                        size = 60, 20
                    ]

                    tag fromSA4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8264
                        size = 60, 20
                    ]

                    tag fromPB {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9832, 7296
                        size = 59, 20
                    ]

                    tag fromQB {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9736, 7376
                        size = 60, 20
                    ]

                    tag fromQC {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9832, 7392
                        size = 60, 20
                    ]

                    tag fromSA {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10120, 7392
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromPC {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9736, 7328
                        size = 60, 20
                    ]

                    tag fromSC {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10120, 7344
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromSB {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10216, 7376
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromQA {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9832, 7344
                        size = 60, 20
                    ]

                    tag fromPA {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 9736, 7280
                        size = 60, 20
                    ]

                    tag fromPFC {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10216, 7280
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromPFA {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10216, 7328
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromPFB {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10120, 7296
                        scale = -1, 1
                        size = 60, 20
                    ]

                    tag fromPFA4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8496
                        size = 60, 20
                    ]

                    tag fromPFB4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8576
                        size = 60, 20
                    ]

                    tag fromPFC4 {
                        value = "zero"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 10048, 8656
                        size = 60, 20
                    ]

                    tag GoToVAn {
                        value = "VAn"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6880, 7896
                        size = 60, 20
                    ]

                    tag GoToVBn {
                        value = "VBn"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6880, 7960
                        size = 60, 20
                    ]

                    tag GoToVCn {
                        value = "VCn"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 6880, 8024
                        size = 60, 20
                    ]

                    tag GoToIA {
                        value = "IA"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7472, 7592
                        size = 60, 20
                    ]

                    tag GoToIB {
                        value = "IB"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7472, 7688
                        size = 60, 20
                    ]

                    tag GoToIC {
                        value = "IC"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7472, 7784
                        size = 60, 20
                    ]

                    tag GoToVAB {
                        value = "VAB"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7008, 7680
                        size = 60, 20
                    ]

                    tag GoToVBC {
                        value = "VBC"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7024, 7776
                        size = 60, 20
                    ]

                    tag GoToVCA {
                        value = "VCA"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7144, 7776
                        rotation = down
                        size = 60, 20
                    ]

                    tag fromVAn1 {
                        value = "VAn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7800, 7880
                        size = 60, 20
                    ]

                    tag fromVBn1 {
                        value = "VBn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7800, 7944
                        size = 60, 20
                    ]

                    tag fromVCn1 {
                        value = "VCn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7800, 8008
                        size = 60, 20
                    ]

                    tag GoToFreq {
                        value = "Freq"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8096, 7944
                        size = 60, 20
                    ]

                    tag fromFreq2 {
                        value = "Freq"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 7776, 8496
                        size = 60, 20
                    ]

                    tag GoTodFract {
                        value = "dFract"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 7968, 8400
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToMode {
                        value = "mode"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8040, 8496
                        size = 60, 20
                    ]

                    tag fromModeVLn_RMS {
                        value = "mode"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8320, 7760
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVAn2 {
                        value = "VAn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8296, 7808
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVBn2 {
                        value = "VBn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8272, 7856
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVCn2 {
                        value = "VCn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8272, 8096
                        rotation = left
                        size = 60, 20
                    ]

                    tag fromdFractVLn_RMS {
                        value = "dFract"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8296, 8048
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToVAnRMS {
                        value = "VAn_RMS"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8560, 7784
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToVBnRMS {
                        value = "VBn_RMS"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8592, 7904
                        size = 60, 20
                    ]

                    tag GoToVCnRMS {
                        value = "VCn_RMS"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8560, 8024
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromModeVLL_RMS {
                        value = "mode"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8320, 8168
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVAB2 {
                        value = "VAB"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8296, 8216
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVBC2 {
                        value = "VBC"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8272, 8264
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVCA2 {
                        value = "VCA"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8272, 8504
                        rotation = left
                        size = 60, 20
                    ]

                    tag fromdFractVLL_RMS {
                        value = "dFract"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8296, 8456
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToVABRMS {
                        value = "VAB_RMS"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8560, 8192
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToVBCRMS {
                        value = "VBC_RMS"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8592, 8312
                        size = 60, 20
                    ]

                    tag GoToVCARMS {
                        value = "VCA_RMS"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 8560, 8432
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVABRMS3 {
                        value = "VAB_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8824, 8024
                        size = 60, 20
                    ]

                    tag fromVBCRMS3 {
                        value = "VBC_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8824, 8072
                        size = 60, 20
                    ]

                    tag fromVCARMS3 {
                        value = "VCA_RMS"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8824, 8120
                        size = 60, 20
                    ]

                    tag GoToVLL_RMS {
                        value = "VLL_RMS"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9200, 8072
                        size = 60, 20
                    ]

                    tag fromVAn3 {
                        value = "VAn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8880, 8488
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVBn3 {
                        value = "VBn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8856, 8528
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromVCn3 {
                        value = "VCn"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8832, 8568
                        rotation = right
                        size = 60, 20
                    ]

                    tag fromIA3 {
                        value = "IA"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8832, 8792
                        rotation = left
                        size = 60, 20
                    ]

                    tag fromIB3 {
                        value = "IB"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8856, 8752
                        rotation = left
                        size = 60, 20
                    ]

                    tag fromIC3 {
                        value = "IC"
                        scope = local
                        kind = sp
                        direction = out
                    }
                    [
                        position = 8880, 8712
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToP {
                        value = "POWER_P"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9064, 8504
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToQ {
                        value = "POWER_Q"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9088, 8544
                        rotation = left
                        size = 60, 20
                    ]

                    tag GoToS {
                        value = "POWER_S"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9088, 8760
                        rotation = right
                        size = 60, 20
                    ]

                    tag GoToPF {
                        value = "POWER_PF"
                        scope = local
                        kind = sp
                        direction = in
                    }
                    [
                        position = 9064, 8720
                        rotation = right
                        size = 60, 20
                    ]

                    junction JunAB+ pe
                    [
                        position = 6912, 7632
                    ]

                    junction JunAn+ pe
                    [
                        position = 6784, 7632
                    ]

                    junction JunBC+ pe
                    [
                        position = 6928, 7728
                    ]

                    junction JunBn+ pe
                    [
                        position = 6728, 7728
                    ]

                    junction JunCA+ pe
                    [
                        position = 7240, 7824
                    ]

                    junction JunCn+ pe
                    [
                        position = 6672, 7824
                    ]

                    junction Junction219 pe
                    [
                        position = 6472, 7824
                    ]

                    junction Junction220 pe
                    [
                        position = 6528, 7728
                    ]

                    junction Junction221 pe
                    [
                        position = 6584, 7632
                    ]

                    junction Junction225 pe
                    [
                        position = 6528, 8096
                    ]

                    junction Junction230 pe
                    [
                        position = 6584, 8096
                    ]

                    junction JunCn- pe
                    [
                        position = 6672, 8096
                    ]

                    junction JunCA- pe
                    [
                        position = 7240, 7632
                    ]

                    junction JunBn- pe
                    [
                        position = 6728, 8096
                    ]

                    junction JunBC- pe
                    [
                        position = 6928, 7824
                    ]

                    junction JunAn- pe
                    [
                        position = 6784, 8096
                    ]

                    junction JunAB- pe
                    [
                        position = 6912, 7728
                    ]

                    junction JunIC pe
                    [
                        position = 7296, 7824
                    ]

                    junction JunIA pe
                    [
                        position = 7296, 7632
                    ]

                    junction JunIB pe
                    [
                        position = 7296, 7728
                    ]

                    connect A+ Junction221 as Connection3033
                    connect C+ Junction219 as Connection3027
                    connect GoToZero zero.out as Connection3194
                    connect JunAn+ JunAB+ as Connection3109
                    connect JunBn+ Junction220 as Connection3078
                    connect Junction219 JunCn+ as Connection3080
                    connect Junction220 B+ as Connection3031
                    connect Junction221 JunAn+ as Connection3074
                    connect Junction225 Junction230 as Connection3087
                    connect fromFreq output_bus.in9 as Connection3140
                    connect fromIA output_bus.in6 as Connection3137
                    connect fromIARMS output_bus.in18 as Connection3157
                    connect fromIB output_bus.in7 as Connection3138
                    connect fromIBRMS output_bus.in19 as Connection3156
                    connect fromIC output_bus.in8 as Connection3139
                    connect fromICRMS output_bus.in20 as Connection3155
                    connect fromIN output_bus.in28 as Connection3192
                    connect fromINRMS output_bus.in29 as Connection3193
                    connect fromI_RMS output_bus.in21 as Connection3154
                    connect fromP output_bus.in22 as Connection3186
                    connect fromPF output_bus.in25 as Connection3189
                    connect fromQ output_bus.in23 as Connection3187
                    connect fromS output_bus.in24 as Connection3188
                    connect fromVAB output_bus.in3 as Connection3134
                    connect fromVABRMS output_bus.in14 as Connection3145
                    connect fromVAn output_bus.in as Connection3162
                    connect fromVAnRMS output_bus.in10 as Connection3141
                    connect fromVBC output_bus.in4 as Connection3135
                    connect fromVBCRMS output_bus.in15 as Connection3160
                    connect fromVBn output_bus.in1 as Connection3132
                    connect fromVBnRMS output_bus.in11 as Connection3142
                    connect fromVCA output_bus.in5 as Connection3136
                    connect fromVCARMS output_bus.in16 as Connection3159
                    connect fromVCn output_bus.in2 as Connection3133
                    connect fromVCnRMS output_bus.in12 as Connection3143
                    connect fromVLL_RMS output_bus.in17 as Connection3158
                    connect fromVLn_RMS output_bus.in13 as Connection3144
                    connect fromVN output_bus.in26 as Connection3190
                    connect fromVNRMS output_bus.in27 as Connection3191
                    connect JunCn- JunBn- as Connection3093
                    connect JunCn+ JunBC- as Connection3113
                    connect JunBC- JunCA+ as Connection3117
                    connect JunCn- Junction230 as Connection3102
                    connect JunAn- GND as Connection3163
                    connect JunBC+ JunAB- as Connection3120
                    connect JunAn- JunBn- as Connection3107
                    connect JunAB+ JunCA- as Connection3115
                    connect JunAB- JunBn+ as Connection3112
                    connect fromQB extra_output_bus.in4 as Connection3204
                    connect fromPB extra_output_bus.in1 as Connection3201
                    connect fromPC extra_output_bus.in2 as Connection3202
                    connect fromPA extra_output_bus.in as Connection3200
                    connect fromQC extra_output_bus.in5 as Connection3205
                    connect fromQA extra_output_bus.in3 as Connection3203
                    connect fromSB extra_output_bus.in7 as Connection3207
                    connect fromSA extra_output_bus.in6 as Connection3206
                    connect JunCA+ JunIC as Connection3199
                    connect JunBC+ JunIB as Connection3197
                    connect JunCA- JunIA as Connection3195
                    connect fromSC extra_output_bus.in8 as Connection3208
                    connect fromPFA extra_output_bus.in9 as Connection3210
                    connect fromPFB extra_output_bus.in10 as Connection3211
                    connect fromPFC extra_output_bus.in11 as Connection3212
                    connect fromPA4 POWER_PA.in as ConnPAprobe
                    connect fromPB4 POWER_PB.in as ConnPBprobe
                    connect fromPC4 POWER_PC.in as ConnPCprobe
                    connect fromQA4 POWER_QA.in as ConnQAprobe
                    connect fromQB4 POWER_QB.in as ConnQBprobe
                    connect fromQC4 POWER_QC.in as ConnQCprobe
                    connect fromSA4 POWER_SA.in as ConnSAprobe
                    connect fromSB4 POWER_SB.in as ConnSBprobe
                    connect fromSC4 POWER_SC.in as ConnSCprobe
                    connect fromPFA4 POWER_PFA.in as ConnPFAprobe
                    connect fromPFB4 POWER_PFB.in as ConnPFBprobe
                    connect fromPFC4 POWER_PFC.in as ConnPFCprobe
                    connect extra_output_bus.out extra_out.in as conn_extra_out
                    connect fromVAn1 PLL.va as ConnAPLL
                    connect fromVBn1 PLL.vb as ConnBPLL
                    connect fromVCn1 PLL.vc as ConnCPLL
                    connect PLL.d_axis TRMd.in as ConnDPLL
                    connect PLL.q_axis TRMq.in as ConnQPLL
                    connect PLL.zero_axis TRMz.in as ConnZPLL
                    connect PLL.theta TRMwt.in as ConnWTPLL
                    connect PLL.sin_theta TRMsin.in as ConnSINPLL
                    connect PLL.freq GoToFreq as ConnFPLL
                    connect fromFreq2 measSM.Freq as connFreq2
                    connect measSM.dFract GoTodFract as conndFract
                    connect measSM.mode GoToMode as connMode
                    connect measSM.submode termSubMode.in as connSubMode
                    connect fromModeVLn_RMS VLn_RMS_calc.mode as ConnModeVLn_RMS
                    connect fromVAn2 VLn_RMS_calc.A as ConnVAnRMS
                    connect VLn_RMS_calc.B fromVBn2 as ConnVBnRMS
                    connect VLn_RMS_calc.C fromVCn2 as ConnVCnRMS
                    connect fromdFractVLn_RMS VLn_RMS_calc.dFract as ConndFVLn_RMS
                    connect GoToVAnRMS VLn_RMS_calc.RMSa as ConnVAnRMS1
                    connect VLn_RMS_calc.RMSb GoToVBnRMS as ConnVBnRMS1
                    connect GoToVCnRMS VLn_RMS_calc.RMSc as ConnVCnRMS1
                    connect fromModeVLL_RMS VLL_RMS_calc.mode as ConnModeVLL_RMS
                    connect fromVAB2 VLL_RMS_calc.A as ConnVABRMS
                    connect VLL_RMS_calc.B fromVBC2 as ConnVBCRMS
                    connect VLL_RMS_calc.C fromVCA2 as ConnVCARMS
                    connect fromdFractVLL_RMS VLL_RMS_calc.dFract as ConndFVLL_RMS
                    connect GoToVABRMS VLL_RMS_calc.RMSa as ConnVABRMS1
                    connect VLL_RMS_calc.RMSb GoToVBCRMS as ConnVBCRMS1
                    connect GoToVCARMS VLL_RMS_calc.RMSc as ConnVCARMS1
                    connect fromVABRMS3 sumVLL_RMS.in as ConnVABRMS3
                    connect fromVBCRMS3 sumVLL_RMS.in1 as ConnVBCRMS3
                    connect fromVCARMS3 sumVLL_RMS.in2 as ConnVCARMS3
                    connect sumVLL_RMS.out gainVLL_RMS.in as ConnVLL_RMS1
                    connect gainVLL_RMS.out GoToVLL_RMS as ConnVLL_RMS2
                    connect fromVAn3 "Power Meter.va" as ConnVAPM
                    connect fromVBn3 "Power Meter.vb" as ConnVBPM
                    connect fromVCn3 "Power Meter.vc" as ConnVCPM
                    connect fromIA3 "Power Meter.ia" as ConnIAPM
                    connect fromIB3 "Power Meter.ib" as ConnIBPM
                    connect fromIC3 "Power Meter.ic" as ConnICPM
                    connect "Power Meter.Pdc" GoToP as ConnPMPdc
                    connect "Power Meter.Qdc" GoToQ as ConnPMQdc
                    connect "Power Meter.apparent" GoToS as ConnPMS
                    connect "Power Meter.k_factor" GoToPF as ConnPMPF
                    connect output_bus.out Out.in as conn_Out
                    connect Junction221 Ra.p_node as Connection3035
                    connect Ra.n_node Junction230 as Connection3088
                    connect Junction220 Rb.p_node as Connection3032
                    connect Rb.n_node Junction225 as Connection3070
                    connect Junction219 Rc.p_node as Connection3029
                    connect Rc.n_node Junction225 as Connection3068
                    connect JunAn+ VAn.p_node as ConnAn+
                    connect JunAn- VAn.n_node as ConnAn-
                    connect VAn.out GoToVAn as ConnAnSP
                    connect JunBn+ VBn.p_node as ConnBn+
                    connect JunBn- VBn.n_node as ConnBn-
                    connect VBn.out GoToVBn as ConnBnSP
                    connect JunCn+ VCn.p_node as ConnCn+
                    connect JunCn- VCn.n_node as ConnCn-
                    connect VCn.out GoToVCn as ConnCnSP
                    connect JunAB+ VAB.p_node as ConnAB+
                    connect JunAB- VAB.n_node as ConnAB-
                    connect VAB.out GoToVAB as ConnABSP
                    connect JunBC+ VBC.p_node as ConnBC+
                    connect JunBC- VBC.n_node as ConnBC-
                    connect VBC.out GoToVBC as ConnBCSP
                    connect JunCA+ VCA.p_node as ConnCA+
                    connect JunCA- VCA.n_node as ConnCA-
                    connect VCA.out GoToVCA as ConnCASP
                    connect JunIA IA.p_node as ConnIA+
                    connect IA.n_node A- as ConnIA-
                    connect IA.out GoToIA as ConnIASP
                    connect JunIB IB.p_node as ConnIB+
                    connect IB.n_node B- as ConnIB-
                    connect IB.out GoToIB as ConnIBSP
                    connect JunIC IC.p_node as ConnIC+
                    connect IC.n_node C- as ConnIC-
                    connect IC.out GoToIC as ConnICSP
                    connect fromFreq4 Freq.in as ConnFreqprobe
                    connect fromVAnRMS4 VAn_RMS.in as ConnVAnRMSprobe
                    connect fromVBnRMS4 VBn_RMS.in as ConnVBnRMSprobe
                    connect fromVCnRMS4 VCn_RMS.in as ConnVCnRMSprobe
                    connect fromVABRMS4 VAB_RMS.in as ConnVABRMSprobe
                    connect fromVBCRMS4 VBC_RMS.in as ConnVBCRMSprobe
                    connect fromVCARMS4 VCA_RMS.in as ConnVCARMSprobe
                    connect fromVLn_RMS4 VLn_RMS.in as ConnVLn_RMSprobe
                    connect fromVLL_RMS4 VLL_RMS.in as ConnVLL_RMSprobe
                    connect fromIARMS4 IA_RMS.in as ConnIARMSprobe
                    connect fromIBRMS4 IB_RMS.in as ConnIBRMSprobe
                    connect fromICRMS4 IC_RMS.in as ConnICRMSprobe
                    connect fromI_RMS4 I_RMS.in as ConnI_RMSprobe
                    connect fromP4 POWER_P.in as ConnPprobe
                    connect fromQ4 POWER_Q.in as ConnQprobe
                    connect fromS4 POWER_S.in as ConnSprobe
                    connect fromPF4 POWER_PF.in as ConnPFprobe

                    P_meas = "True"
                    Ts = "Ts"
                    VAB = "True"
                    VBC = "True"
                    VCA = "True"
                    VLL_avg_rms = "True"
                    VLL_rms = "True"
                    VLn_rms = "True"
                    enable_out = "False"
                    freq = "True"

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Three-phase Meter block. </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Line voltages, phase voltages, currents, frequency, RMS and power measurements are selectable through mask.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Measurements are available as SCADA probes and also through the component output buses. The \"Meter Split\" component used together with \"Three-phase Meter\" enables easy signal selection.</p></body></html>"
                        help_file = "three_phase_meter.html"

                        R {
                            label = "Snubber resistance"
                            widget = edit
                            type = generic
                            default_value = "1e5"
                            unit = "Ω"
                            group = "General:1"
                        }

                        n_cycles {
                            label = "Number of cycles to average on RMS calculation"
                            widget = edit
                            type = generic
                            default_value = "1"
                            unit = " (integer)"
                            group = "General"
                        }

                        Ts {
                            label = "Execution rate"
                            widget = edit
                            type = generic
                            default_value = "100e-6"
                            unit = "s"
                            group = "General"
                        }

                        enable_probes {
                            label = "Enable internal probes"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "General"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                if new_value:
                                    freq = mdl.get_property_value(mdl.prop(container_handle, "freq"))
                                    if freq == True:
                                        place_probe(mdl, comp_handle, new_value, "Freq", "Freq")
                                    VLn_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_rms"))
                                    if VLn_rms == True:
                                        place_probe(mdl, comp_handle, new_value, "VAnRMS", "VAn_RMS")
                                        place_probe(mdl, comp_handle, new_value, "VBnRMS", "VBn_RMS")
                                        place_probe(mdl, comp_handle, new_value, "VCnRMS", "VCn_RMS")
                                    VLL_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_rms"))
                                    if VLL_rms == True:
                                        place_probe(mdl, comp_handle, new_value, "VABRMS", "VAB_RMS")
                                        place_probe(mdl, comp_handle, new_value, "VBCRMS", "VBC_RMS")
                                        place_probe(mdl, comp_handle, new_value, "VCARMS", "VCA_RMS")
                                    I_rms = mdl.get_property_value(mdl.prop(container_handle, "I_rms"))
                                    if I_rms == True:
                                        place_probe(mdl, comp_handle, new_value, "IARMS", "IA_RMS")
                                        place_probe(mdl, comp_handle, new_value, "IBRMS", "IB_RMS")
                                        place_probe(mdl, comp_handle, new_value, "ICRMS", "IC_RMS")
                                    VLn_avg_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_avg_rms"))
                                    if VLn_avg_rms == True:
                                        place_probe(mdl, comp_handle, new_value, "VLn_RMS", "VLn_RMS")
                                    VLL_avg_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_avg_rms"))
                                    if VLL_avg_rms == True:
                                        place_probe(mdl, comp_handle, new_value, "VLL_RMS", "VLL_RMS")
                                    I_avg_rms = mdl.get_property_value(mdl.prop(container_handle, "I_avg_rms"))
                                    if I_avg_rms == True:
                                        place_probe(mdl, comp_handle, new_value, "I_RMS", "I_RMS")
                                    P_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                    if P_meas == True:
                                        place_probe(mdl, comp_handle, new_value, "P", "POWER_P")
                                        place_probe(mdl, comp_handle, new_value, "Q", "POWER_Q")
                                        place_probe(mdl, comp_handle, new_value, "S", "POWER_S")
                                        place_probe(mdl, comp_handle, new_value, "PF", "POWER_PF")
                            
                                        p_method = mdl.get_property_value(mdl.prop(container_handle, "P_method"))
                                        if p_method == "RMS based":
                                            place_probe(mdl, comp_handle, new_value, "PA", "POWER_PA")
                                            place_probe(mdl, comp_handle, new_value, "PB", "POWER_PB")
                                            place_probe(mdl, comp_handle, new_value, "PC", "POWER_PC")
                                            place_probe(mdl, comp_handle, new_value, "QA", "POWER_QA")
                                            place_probe(mdl, comp_handle, new_value, "QB", "POWER_QB")
                                            place_probe(mdl, comp_handle, new_value, "QC", "POWER_QC")
                                            place_probe(mdl, comp_handle, new_value, "SA", "POWER_SA")
                                            place_probe(mdl, comp_handle, new_value, "SB", "POWER_SB")
                                            place_probe(mdl, comp_handle, new_value, "SC", "POWER_SC")
                                            place_probe(mdl, comp_handle, new_value, "PFA", "POWER_PFA")
                                            place_probe(mdl, comp_handle, new_value, "PFB", "POWER_PFB")
                                            place_probe(mdl, comp_handle, new_value, "PFC", "POWER_PFC")
                                else:
                                    place_probe(mdl, comp_handle, new_value, "Freq", "Freq")
                                    place_probe(mdl, comp_handle, new_value, "VAnRMS", "VAn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VBnRMS", "VBn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VCnRMS", "VCn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VABRMS", "VAB_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VBCRMS", "VBC_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VCARMS", "VCA_RMS")
                                    place_probe(mdl, comp_handle, new_value, "IARMS", "IA_RMS")
                                    place_probe(mdl, comp_handle, new_value, "IBRMS", "IB_RMS")
                                    place_probe(mdl, comp_handle, new_value, "ICRMS", "IC_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VLn_RMS", "VLn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VLL_RMS", "VLL_RMS")
                                    place_probe(mdl, comp_handle, new_value, "I_RMS", "I_RMS")
                                    place_probe(mdl, comp_handle, new_value, "P", "POWER_P")
                                    place_probe(mdl, comp_handle, new_value, "PA", "POWER_PA")
                                    place_probe(mdl, comp_handle, new_value, "PB", "POWER_PB")
                                    place_probe(mdl, comp_handle, new_value, "PC", "POWER_PC")
                                    place_probe(mdl, comp_handle, new_value, "Q", "POWER_Q")
                                    place_probe(mdl, comp_handle, new_value, "QA", "POWER_QA")
                                    place_probe(mdl, comp_handle, new_value, "QB", "POWER_QB")
                                    place_probe(mdl, comp_handle, new_value, "QC", "POWER_QC")
                                    place_probe(mdl, comp_handle, new_value, "S", "POWER_S")
                                    place_probe(mdl, comp_handle, new_value, "SA", "POWER_SA")
                                    place_probe(mdl, comp_handle, new_value, "SB", "POWER_SB")
                                    place_probe(mdl, comp_handle, new_value, "SC", "POWER_SC")
                                    place_probe(mdl, comp_handle, new_value, "PF", "POWER_PF")
                                    place_probe(mdl, comp_handle, new_value, "PFA", "POWER_PFA")
                                    place_probe(mdl, comp_handle, new_value, "PFB", "POWER_PFB")
                                    place_probe(mdl, comp_handle, new_value, "PFC", "POWER_PFC")
                            ENDCODE
                        }

                        enable_out {
                            label = "Enable output port"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "General"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                placePort(mdl, comp_handle, new_value, "Out", "output_bus", "1")
                            ENDCODE
                        }

                        remove_snubber {
                            label = "Remove snubbers"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "General"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                removeSnubber(mdl, comp_handle, new_value)
                                if new_value:
                                    mdl.warning("Removing snubbers may cause degeneration and result in incorrect measurements. Be sure to connect the ground port to a valid reference.", context=prop_handle)
                                    mdl.disable_property(mdl.prop(container_handle, "R"))
                                else:
                                    mdl.enable_property(mdl.prop(container_handle, "R"))
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    mdl.disable_property(mdl.prop(container_handle, "R"))
                                else:
                                    mdl.enable_property(mdl.prop(container_handle, "R"))
                            ENDCODE
                        }

                        VAn {
                            label = "Phase voltage measurement (A)"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Voltage:2"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Vmeas(mdl, comp_handle, new_value, "An", (6784, 7896))
                            ENDCODE
                        }

                        VBn {
                            label = "Phase voltage measurement (B)"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Voltage"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Vmeas(mdl, comp_handle, new_value, "Bn", (6728, 7960), tag_xoffset=156)
                            ENDCODE
                        }

                        VCn {
                            label = "Phase voltage measurement (C)"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Voltage"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Vmeas(mdl, comp_handle, new_value, "Cn", (6672, 8024), tag_xoffset=212)
                            ENDCODE
                        }

                        VAB {
                            label = "Line voltage measurement (AB)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Voltage"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Vmeas(mdl, comp_handle, new_value, "AB", (6912, 7680))
                            ENDCODE
                        }

                        VBC {
                            label = "Line voltage measurement (BC)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Voltage"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Vmeas(mdl, comp_handle, new_value, "BC", (6928, 7776))
                            ENDCODE
                        }

                        VCA {
                            label = "Line voltage measurement (CA)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Voltage"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Vmeas(mdl, comp_handle, new_value, "CA", (7240, 7776), rotate="left",
                                                rotate_tag="down", tag_xoffset=-96)
                            ENDCODE
                        }

                        IA {
                            label = "Phase current measurement (A)"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Current:3"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Imeas(mdl, comp_handle, new_value, "A", (7416, 7632))
                            ENDCODE
                        }

                        IB {
                            label = "Phase current measurement (B)"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Current"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Imeas(mdl, comp_handle, new_value, "B", (7416, 7728))
                            ENDCODE
                        }

                        IC {
                            label = "Phase current measurement (C)"
                            widget = checkbox
                            type = bool
                            default_value = "True"
                            group = "Current"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_Imeas(mdl, comp_handle, new_value, "C", (7416, 7824))
                            ENDCODE
                        }

                        freq {
                            label = "Frequency measurement"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Frequency:4"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                else:
                                    P_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                    if not P_meas:
                                        pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_PLL(mdl, comp_handle, new_value)
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "Freq", "Freq")
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                else:
                                    P_meas = mdl.get_property_disp_value(mdl.prop(container_handle, "P_meas"))
                                    if not P_meas:
                                        pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                            ENDCODE
                        }

                        VLn_rms {
                            label = "Phase voltage RMS measurements (VAn, VBn, VCn)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Voltage RMS:5"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    place_measSM(mdl, comp_handle, new_value)
                                else:
                                    VLL_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_rms"))
                                    I_rms = mdl.get_property_value(mdl.prop(container_handle, "I_rms"))
                                    if not ((VLL_rms == True) or (I_rms == True)):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                        place_measSM(mdl, comp_handle, new_value)
                                
                                place_3phRMS(mdl, comp_handle, new_value, "VLn_RMS", (8416, 7904), ("VAn", "VBn", "VCn"))
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "VAnRMS", "VAn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VBnRMS", "VBn_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VCnRMS", "VCn_RMS")
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                else:
                                    VLL_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLL_rms"))
                                    I_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "I_rms"))
                                    if not (VLL_rms or I_rms):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                            ENDCODE
                        }

                        VLL_rms {
                            label = "Line voltage RMS measurements (VAB, VBC, VCA)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Voltage RMS"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                    VLn_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_rms"))
                                    I_rms = mdl.get_property_value(mdl.prop(container_handle, "I_rms"))
                                    if not (VLn_rms or I_rms):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                        place_measSM(mdl, comp_handle, new_value)
                                else:
                                    VLn_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_rms"))
                                    I_rms = mdl.get_property_value(mdl.prop(container_handle, "I_rms"))
                                    if not (VLn_rms or I_rms):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                        place_measSM(mdl, comp_handle, new_value)
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                
                                
                                
                                place_3phRMS(mdl, comp_handle, new_value, "VLL_RMS", (8416, 8314), ("VAB", "VBC", "VCA"))
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "VABRMS", "VAB_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VBCRMS", "VBC_RMS")
                                    place_probe(mdl, comp_handle, new_value, "VCARMS", "VCA_RMS")
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                else:
                                    VLn_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLn_rms"))
                                    I_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "I_rms"))
                                    if not (VLn_rms or I_rms):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                            ENDCODE
                        }

                        VLn_avg_rms {
                            label = "Average phase voltage RMS measurement (VLn)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Voltage RMS"
                            no_evaluate

                            CODE property_value_changed
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                else:
                                    p_method = mdl.get_property_value(mdl.prop(container_handle, "P_method"))
                                    p_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                    if not ((p_method == "RMS based") and p_meas):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                
                                
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_avg_rms(mdl, comp_handle, new_value, "VLn_RMS", (8952, 7824), ("VAn", "VBn", "VCn"))
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "VLn_RMS", "VLn_RMS")
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                else:
                                    p_method = mdl.get_property_disp_value(mdl.prop(container_handle, "P_method"))
                                    p_meas = mdl.get_property_disp_value(mdl.prop(container_handle, "P_meas"))
                                    if not ((p_method == "RMS based") and p_meas):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                            ENDCODE
                        }

                        VLL_avg_rms {
                            label = "Average line voltage RMS measurement (VLL)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Voltage RMS"
                            no_evaluate

                            CODE property_value_changed
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                                else:
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                                
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_avg_rms(mdl, comp_handle, new_value, "VLL_RMS", (8952, 8074), ("VAB", "VBC", "VCA"))
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "VLL_RMS", "VLL_RMS")
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAB", "VBC", "VCA"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                                else:
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLL_rms")
                            ENDCODE
                        }

                        I_rms {
                            label = "Phase current RMS measurements (IA, IB, IC)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Current RMS:6"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    place_measSM(mdl, comp_handle, new_value)
                                else:
                                    VLn_rms = mdl.get_property_value(mdl.prop(container_handle, "VLn_rms"))
                                    VLL_rms = mdl.get_property_value(mdl.prop(container_handle, "VLL_rms"))
                                    if not (VLn_rms or VLL_rms):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                        place_measSM(mdl, comp_handle, new_value)
                                    P_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                    if not P_meas:
                                        pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                
                                
                                place_3phRMS(mdl, comp_handle, new_value, "I_RMS", (8416, 8724), ("IA", "IB", "IC"))
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "IARMS", "IA_RMS")
                                    place_probe(mdl, comp_handle, new_value, "IBRMS", "IB_RMS")
                                    place_probe(mdl, comp_handle, new_value, "ICRMS", "IC_RMS")
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                else:
                                    VLn_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLn_rms"))
                                    VLL_rms = mdl.get_property_disp_value(mdl.prop(container_handle, "VLL_rms"))
                                    if not (VLn_rms or VLL_rms):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    P_meas = mdl.get_property_disp_value(mdl.prop(container_handle, "P_meas"))
                                    if not P_meas:
                                        pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                            ENDCODE
                        }

                        I_avg_rms {
                            label = "Average phase current RMS measurement (I)"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Current RMS"
                            no_evaluate

                            CODE property_value_changed
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                else:
                                    p_method = mdl.get_property_value(mdl.prop(container_handle, "P_method"))
                                    p_meas = mdl.get_property_value(mdl.prop(container_handle, "P_meas"))
                                    if not ((p_method == "RMS based") and p_meas):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                place_avg_rms(mdl, comp_handle, new_value, "I_RMS", (8952, 8324), ("IA", "IB", "IC"))
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "I_RMS", "I_RMS")
                            ENDCODE

                            CODE property_value_edited
                                if new_value:
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                    sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                else:
                                    p_method = mdl.get_property_disp_value(mdl.prop(container_handle, "P_method"))
                                    p_meas = mdl.get_property_disp_value(mdl.prop(container_handle, "P_meas"))
                                    if not ((p_method == "RMS based") and p_meas):
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                            ENDCODE
                        }

                        P_method {
                            label = "Power measurement method"
                            widget = combo
                            combo_values = "alpha-beta", "RMS based"
                            type = string
                            default_value = "alpha-beta"
                            group = "Power:7"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                if new_value == "alpha-beta":
                                    mdl.set_property_value(mdl.prop(container_handle, "enable_extra_out"), False)
                                    mdl.disable_property(mdl.prop(container_handle, "enable_extra_out"))
                                else:
                                    mdl.enable_property(mdl.prop(container_handle, "enable_extra_out"))
                            ENDCODE

                            CODE property_value_edited
                                mdl.set_property_disp_value(mdl.prop(container_handle, "P_meas"), False)
                                mdl.set_property_value(mdl.prop(container_handle, "P_meas"), False)
                                
                                if new_value == "alpha-beta":
                                    mdl.set_property_disp_value(mdl.prop(container_handle, "enable_extra_out"), False)
                                    mdl.set_property_value(mdl.prop(container_handle, "enable_extra_out"), False)
                                    mdl.disable_property(mdl.prop(container_handle, "enable_extra_out"))
                                else:
                                    mdl.enable_property(mdl.prop(container_handle, "enable_extra_out"))
                            ENDCODE
                        }

                        enable_extra_out {
                            label = "Enable extra output port"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Power"
                            disabled
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                placePort(mdl, comp_handle, new_value, "extra_out", "extra_output_bus", 2)
                            ENDCODE
                        }

                        P_meas {
                            label = "Power measurements"
                            widget = checkbox
                            type = bool
                            default_value = "False"
                            group = "Power"
                            no_evaluate

                            CODE property_value_changed
                                comp_handle = mdl.get_sub_level_handle(container_handle)
                                p_method = mdl.get_property_value(mdl.prop(container_handle, "P_method"))
                                if new_value:
                                    mdl.disable_property(mdl.prop(container_handle, "P_method"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                    if p_method == "RMS based":
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                        place_measSM(mdl, comp_handle, new_value)
                                        placeSubModetag(mdl, comp_handle, new_value)
                                else:
                                    mdl.enable_property(mdl.prop(container_handle, "P_method"))
                                    if p_method == "RMS based":
                                        VLnAVG = mdl.get_property_value(mdl.prop(container_handle, "VLn_avg_rms"))
                                        if not VLnAVG:
                                            sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                        IAVG = mdl.get_property_value(mdl.prop(container_handle, "I_avg_rms"))
                                        if not IAVG:
                                            sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                        placeSubModetag(mdl, comp_handle, new_value)
                                
                                if p_method == "RMS based":
                                    place_RMS_power_meter(mdl, comp_handle, new_value)
                                else:
                                    place_AB_power_meter(mdl, comp_handle, new_value)
                                
                                enable_probes = mdl.get_property_value(mdl.prop(container_handle, "enable_probes"))
                                if enable_probes == True:
                                    place_probe(mdl, comp_handle, new_value, "P", "POWER_P")
                                    place_probe(mdl, comp_handle, new_value, "Q", "POWER_Q")
                                    place_probe(mdl, comp_handle, new_value, "S", "POWER_S")
                                    place_probe(mdl, comp_handle, new_value, "PF", "POWER_PF")
                                    
                                    if p_method == "RMS based":
                                        place_probe(mdl, comp_handle, new_value, "PA", "POWER_PA")
                                        place_probe(mdl, comp_handle, new_value, "PB", "POWER_PB")
                                        place_probe(mdl, comp_handle, new_value, "PC", "POWER_PC")
                                        place_probe(mdl, comp_handle, new_value, "QA", "POWER_QA")
                                        place_probe(mdl, comp_handle, new_value, "QB", "POWER_QB")
                                        place_probe(mdl, comp_handle, new_value, "QC", "POWER_QC")
                                        place_probe(mdl, comp_handle, new_value, "SA", "POWER_SA")
                                        place_probe(mdl, comp_handle, new_value, "SB", "POWER_SB")
                                        place_probe(mdl, comp_handle, new_value, "SC", "POWER_SC")
                                        place_probe(mdl, comp_handle, new_value, "PFA", "POWER_PFA")
                                        place_probe(mdl, comp_handle, new_value, "PFB", "POWER_PFB")
                                        place_probe(mdl, comp_handle, new_value, "PFC", "POWER_PFC")
                            ENDCODE

                            CODE property_value_edited
                                p_method = mdl.get_property_disp_value(mdl.prop(container_handle, "P_method"))
                                
                                if new_value:
                                    mdl.disable_property(mdl.prop(container_handle, "P_method"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("VAn", "VBn", "VCn"))
                                    pe_meas_dependent_checkbox(mdl, container_handle, new_value, ("IA", "IB", "IC"))
                                    if p_method == "RMS based":
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "freq")
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                        sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                                else:
                                    mdl.enable_property(mdl.prop(container_handle, "P_method"))
                                    if p_method == "RMS based":
                                        VLnAVG = mdl.get_property_disp_value(mdl.prop(container_handle, "VLn_avg_rms"))
                                        if not VLnAVG:
                                            sp_meas_dependent_checkbox(mdl, container_handle, new_value, "VLn_rms")
                                        IAVG = mdl.get_property_disp_value(mdl.prop(container_handle, "I_avg_rms"))
                                        if not IAVG:
                                            sp_meas_dependent_checkbox(mdl, container_handle, new_value, "I_rms")
                            ENDCODE
                        }

                        CODE init
                            def place_Vmeas(mdl, comp_handle, new_value, phaseID, position, tag_xoffset=96, rotate="right",
                                            rotate_tag="up"):
                                if new_value:
                                    V = mdl.get_item("V{}".format(phaseID), parent=comp_handle, item_type="component")
                                    if V:
                                        mdl.delete_item(V)
                                    V = mdl.create_component("Voltage Measurement", parent=comp_handle,
                                                             name="V{}".format(phaseID),
                                                             position=position, rotation=rotate)
                                    mdl.set_property_value(mdl.prop(V, "sig_output"), "True")
                                    mdl.set_property_value(mdl.prop(V, "execution_rate"), "Ts")
                            
                                    GoToV = mdl.get_item("GoToV{}".format(phaseID), parent=comp_handle, item_type="tag")
                                    if not GoToV:
                                        GoToV = mdl.create_tag("V{}".format(phaseID), name="GoToV{}".format(phaseID),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation=rotate_tag,
                                                               position=(position[0] + tag_xoffset, position[1]))
                            
                                    jun_p = mdl.get_item("Jun{}+".format(phaseID), parent=comp_handle, item_type="junction")
                                    jun_n = mdl.get_item("Jun{}-".format(phaseID), parent=comp_handle, item_type="junction")
                            
                                    conn_p = mdl.get_item("Conn{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_p:
                                        conn_p = mdl.create_connection(jun_p, mdl.term(V, "p_node"), name="Conn{}+".format(phaseID))
                                    conn_n = mdl.get_item("Conn{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_n:
                                        conn_n = mdl.create_connection(jun_n, mdl.term(V, "n_node"), name="Conn{}-".format(phaseID))
                                    conn_sp = mdl.get_item("Conn{}SP".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_sp:
                                        conn_sp = mdl.create_connection(mdl.term(V, "out"), GoToV, name="Conn{}SP".format(phaseID))
                                    tag = mdl.get_item("fromV{}".format(phaseID), parent=comp_handle,
                                                       item_type="tag")
                                    mdl.set_tag_properties(tag, value="V{}".format(phaseID))
                                else:
                                    V = mdl.get_item("V{}".format(phaseID), parent=comp_handle, item_type="component")
                                    if V:
                                        mdl.delete_item(V)
                                    V = mdl.create_component("Open Circuit", parent=comp_handle,
                                                             name="V{}".format(phaseID),
                                                             position=position, rotation=rotate)
                                    GoToV = mdl.get_item("GoToV{}".format(phaseID), parent=comp_handle, item_type="tag")
                                    if GoToV:
                                        mdl.delete_item(GoToV)
                                    tag = mdl.get_item("fromV{}".format(phaseID), parent=comp_handle,
                                                       item_type="tag")
                                    mdl.set_tag_properties(tag, value="zero")
                                    
                                    jun_p = mdl.get_item("Jun{}+".format(phaseID), parent=comp_handle, item_type="junction")
                                    jun_n = mdl.get_item("Jun{}-".format(phaseID), parent=comp_handle, item_type="junction")
                            
                                    conn_p = mdl.get_item("Conn{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_p:
                                        conn_p = mdl.create_connection(jun_p, mdl.term(V, "p_node"), name="Conn{}+".format(phaseID))
                                    conn_n = mdl.get_item("Conn{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_n:
                                        conn_n = mdl.create_connection(jun_n, mdl.term(V, "n_node"), name="Conn{}-".format(phaseID))
                            
                            
                            def place_Imeas(mdl, comp_handle, new_value, phaseID, position):
                                if new_value:
                            
                                    I = mdl.get_item("I{}".format(phaseID), parent=comp_handle, item_type="component")
                                    if I:
                                        mdl.delete_item(I)
                                    I = mdl.create_component("Current Measurement", parent=comp_handle,
                                                             name="I{}".format(phaseID),
                                                             position=position, rotation="up")
                                    mdl.set_property_value(mdl.prop(I, "sig_output"), "True")
                                    mdl.set_property_value(mdl.prop(I, "execution_rate"), "Ts")
                            
                                    GoToI = mdl.get_item("GoToI{}".format(phaseID), parent=comp_handle, item_type="tag")
                                    if not GoToI:
                                        GoToI = mdl.create_tag("I{}".format(phaseID), name="GoToI{}".format(phaseID),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="up",
                                                               position=(position[0] + 56, position[1] - 40))
                            
                                    jun_p = mdl.get_item("JunI{}".format(phaseID), parent=comp_handle, item_type="junction")
                                    port = mdl.get_item("{}-".format(phaseID), parent=comp_handle, item_type="port")
                            
                                    conn_p = mdl.get_item("ConnI{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_p:
                                        conn_p = mdl.create_connection(jun_p, mdl.term(I, "p_node"), name="ConnI{}+".format(phaseID))
                                    conn_n = mdl.get_item("ConnI{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_n:
                                        conn_n = mdl.create_connection(mdl.term(I, "n_node"), port, name="ConnI{}-".format(phaseID))
                                    conn_sp = mdl.get_item("ConnI{}SP".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_sp:
                                        conn_sp = mdl.create_connection(mdl.term(I, "out"), GoToI, name="ConnI{}SP".format(phaseID))
                            
                                    tag = mdl.get_item("fromI{}".format(phaseID), parent=comp_handle,
                                                       item_type="tag")
                                    mdl.set_tag_properties(tag, value="I{}".format(phaseID))
                                else:
                                    I = mdl.get_item("I{}".format(phaseID), parent=comp_handle, item_type="component")
                                    if I:
                                        mdl.delete_item(I)
                                    I = mdl.create_component("Short Circuit", parent=comp_handle,
                                                             name="I{}".format(phaseID),
                                                             position=position, rotation="up")
                                    GoToI = mdl.get_item("GoToI{}".format(phaseID), parent=comp_handle, item_type="tag")
                                    if GoToI:
                                        mdl.delete_item(GoToI)
                            
                                    jun_p = mdl.get_item("JunI{}".format(phaseID), parent=comp_handle, item_type="junction")
                                    port = mdl.get_item("{}-".format(phaseID), parent=comp_handle, item_type="port")
                                    
                                    conn_p = mdl.get_item("ConnI{}+".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_p:
                                        conn_p = mdl.create_connection(jun_p, mdl.term(I, "p_node"), name="ConnI{}+".format(phaseID))
                                    conn_n = mdl.get_item("ConnI{}-".format(phaseID), parent=comp_handle, item_type="connection")
                                    if not conn_n:
                                        conn_n = mdl.create_connection(mdl.term(I, "n_node"), port, name="ConnI{}-".format(phaseID))
                            
                                    tag = mdl.get_item("fromI{}".format(phaseID), parent=comp_handle,
                                                       item_type="tag")
                                    mdl.set_tag_properties(tag, value="zero")
                            
                            
                            def place_PLL(mdl, comp_handle, new_value):
                                if new_value:
                                    fromVAn = mdl.get_item("fromVAn1", parent=comp_handle, item_type="tag")
                                    if not fromVAn:
                                        fromVAn = mdl.create_tag("VAn", name="fromVAn1", parent=comp_handle,
                                                                 scope="local", kind="sp", direction="out",
                                                                 rotation="up", position=(7800, 7880))
                                    fromVBn = mdl.get_item("fromVBn1", parent=comp_handle, item_type="tag")
                                    if not fromVBn:
                                        fromVBn = mdl.create_tag("VBn", name="fromVBn1", parent=comp_handle,
                                                                 scope="local", kind="sp", direction="out",
                                                                 rotation="up", position=(7800, 7944))
                                    fromVCn = mdl.get_item("fromVCn1", parent=comp_handle, item_type="tag")
                                    if not fromVCn:
                                        fromVCn = mdl.create_tag("VCn", name="fromVCn1", parent=comp_handle,
                                                                 scope="local", kind="sp", direction="out",
                                                                 rotation="up", position=(7800, 8008))
                                    GoToFreq = mdl.get_item("GoToFreq", parent=comp_handle, item_type="tag")
                                    if not GoToFreq:
                                        GoToFreq = mdl.create_tag("Freq", name="GoToFreq", parent=comp_handle,
                                                                  scope="local", kind="sp", direction="in",
                                                                  rotation="up", position=(8096, 7944))
                            
                                    TRMd = mdl.get_item("TRMd", parent=comp_handle, item_type="component")
                                    if not TRMd:
                                        TRMd = mdl.create_component("Termination", parent=comp_handle,
                                                                    name="TRMd", position=(7976, 7792),
                                                                    rotation="left", hide_name=True)
                                    TRMq = mdl.get_item("TRMq", parent=comp_handle, item_type="component")
                                    if not TRMq:
                                        TRMq = mdl.create_component("Termination", parent=comp_handle,
                                                                    name="TRMq", position=(8000, 7840),
                                                                    rotation="left", hide_name=True)
                                    TRMz = mdl.get_item("TRMz", parent=comp_handle, item_type="component")
                                    if not TRMz:
                                        TRMz = mdl.create_component("Termination", parent=comp_handle,
                                                                    name="TRMz", position=(8032, 7880),
                                                                    rotation="left", hide_name=True)
                                    TRMwt = mdl.get_item("TRMwt", parent=comp_handle, item_type="component")
                                    if not TRMwt:
                                        TRMwt = mdl.create_component("Termination", parent=comp_handle,
                                                                     name="TRMwt", position=(8032, 8064),
                                                                     rotation="right", hide_name=True)
                                    TRMsin = mdl.get_item("TRMsin", parent=comp_handle, item_type="component")
                                    if not TRMsin:
                                        TRMsin = mdl.create_component("Termination", parent=comp_handle,
                                                                      name="TRMsin", position=(8000, 8016),
                                                                      rotation="right", hide_name=True)
                            
                                    PLL = mdl.get_item("PLL", parent=comp_handle, item_type="component")
                                    if not PLL:
                                        PLL = mdl.create_component("Three phase PLL", parent=comp_handle,
                                                                   name="PLL", position=(7896, 7944),
                                                                   rotation="up")
                            
                                    connA = mdl.get_item("ConnAPLL", parent=comp_handle, item_type="connection")
                                    if not connA:
                                        connA = mdl.create_connection(fromVAn, mdl.term(PLL, "va"), name="ConnAPLL")
                                    connB = mdl.get_item("ConnBPLL", parent=comp_handle, item_type="connection")
                                    if not connB:
                                        connB = mdl.create_connection(fromVBn, mdl.term(PLL, "vb"), name="ConnBPLL")
                                    connC = mdl.get_item("ConnCPLL", parent=comp_handle, item_type="connection")
                                    if not connC:
                                        connC = mdl.create_connection(fromVCn, mdl.term(PLL, "vc"), name="ConnCPLL")
                                    connD = mdl.get_item("ConnDPLL", parent=comp_handle, item_type="connection")
                                    if not connD:
                                        connD = mdl.create_connection(mdl.term(PLL, "d_axis"), mdl.term(TRMd, "in"),
                                                                      name="ConnDPLL")
                                    connQ = mdl.get_item("ConnQPLL", parent=comp_handle, item_type="connection")
                                    if not connQ:
                                        connQ = mdl.create_connection(mdl.term(PLL, "q_axis"), mdl.term(TRMq, "in"),
                                                                      name="ConnQPLL")
                                    connZ = mdl.get_item("ConnZPLL", parent=comp_handle, item_type="connection")
                                    if not connZ:
                                        connZ = mdl.create_connection(mdl.term(PLL, "zero_axis"), mdl.term(TRMz, "in"),
                                                                      name="ConnZPLL")
                                    connWT = mdl.get_item("ConnWTPLL", parent=comp_handle, item_type="connection")
                                    if not connWT:
                                        connWT = mdl.create_connection(mdl.term(PLL, "theta"), mdl.term(TRMwt, "in"),
                                                                       name="ConnWTPLL")
                                    connSIN = mdl.get_item("ConnSINPLL", parent=comp_handle, item_type="connection")
                                    if not connSIN:
                                        connSIN = mdl.create_connection(mdl.term(PLL, "sin_theta"), mdl.term(TRMsin, "in"),
                                                                        name="ConnSINPLL")
                                    connFreq = mdl.get_item("ConnFPLL", parent=comp_handle, item_type="connection")
                                    if not connFreq:
                                        connFreq = mdl.create_connection(mdl.term(PLL, "freq"), GoToFreq,
                                                                         name="ConnFPLL")
                                    tag = mdl.get_item("fromFreq", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tag, value="Freq")
                            
                                else:
                                    fromVAn = mdl.get_item("fromVAn1", parent=comp_handle, item_type="tag")
                                    if fromVAn:
                                        mdl.delete_item(fromVAn)
                                    fromVBn = mdl.get_item("fromVBn1", parent=comp_handle, item_type="tag")
                                    if fromVBn:
                                        mdl.delete_item(fromVBn)
                                    fromVCn = mdl.get_item("fromVCn1", parent=comp_handle, item_type="tag")
                                    if fromVCn:
                                        mdl.delete_item(fromVCn)
                                    GoToFreq = mdl.get_item("GoToFreq", parent=comp_handle, item_type="tag")
                                    if GoToFreq:
                                        mdl.delete_item(GoToFreq)
                            
                                    TRMd = mdl.get_item("TRMd", parent=comp_handle, item_type="component")
                                    if TRMd:
                                        mdl.delete_item(TRMd)
                                    TRMq = mdl.get_item("TRMq", parent=comp_handle, item_type="component")
                                    if TRMq:
                                        mdl.delete_item(TRMq)
                                    TRMz = mdl.get_item("TRMz", parent=comp_handle, item_type="component")
                                    if TRMz:
                                        mdl.delete_item(TRMz)
                                    TRMwt = mdl.get_item("TRMwt", parent=comp_handle, item_type="component")
                                    if TRMwt:
                                        mdl.delete_item(TRMwt)
                                    TRMsin = mdl.get_item("TRMsin", parent=comp_handle, item_type="component")
                                    if TRMsin:
                                        mdl.delete_item(TRMsin)
                            
                                    PLL = mdl.get_item("PLL", parent=comp_handle, item_type="component")
                                    if PLL:
                                        mdl.delete_item(PLL)
                                    tag = mdl.get_item("fromFreq", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tag, value="zero")
                            
                            
                            def place_3phRMS(mdl, comp_handle, new_value, name, position, phaseIDs):
                                if new_value:
                                    rms = mdl.get_item("{}_calc".format(name), parent=comp_handle,
                                                       item_type="component")
                                    if not rms:
                                        rms = mdl.create_component("Three-phase RMS variable frequency",
                                                                   parent=comp_handle,
                                                                   name="{}_calc".format(name), position=position,
                                                                   rotation="up")
                                        mdl.set_property_value(mdl.prop(rms, "Ts"), "Ts")
                                        mdl.set_property_value(mdl.prop(rms, "internal_sm"), "False")
                                    
                                    fromMode = mdl.get_item("fromMode{}".format(name), parent=comp_handle, item_type="tag")
                                    if not fromMode:
                                        fromMode = mdl.create_tag("mode", name="fromMode{}".format(name),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="right",
                                                               position=(position[0] - 96, position[1] - 144))
                            
                                    fromA = mdl.get_item("from{}2".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="tag")
                                    if not fromA:
                                        fromA = mdl.create_tag(phaseIDs[0], name="from{}2".format(phaseIDs[0]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="right",
                                                               position=(position[0] - 120, position[1] - 96))
                                    fromB = mdl.get_item("from{}2".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="tag")
                                    if not fromB:
                                        fromB = mdl.create_tag(phaseIDs[1], name="from{}2".format(phaseIDs[1]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="right",
                                                               position=(position[0] - 144, position[1] - 48))
                                    fromC = mdl.get_item("from{}2".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="tag")
                                    if not fromC:
                                        fromC = mdl.create_tag(phaseIDs[2], name="from{}2".format(phaseIDs[2]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="left",
                                                               position=(position[0] - 144, position[1] + 192))
                                    fromdF = mdl.get_item("fromdFract{}".format(name), parent=comp_handle, item_type="tag")
                                    if not fromdF:
                                        fromdF = mdl.create_tag("dFract", name="fromdFract{}".format(name),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="left",
                                                               position=(position[0] - 120, position[1] + 144))
                            
                                    GoToA = mdl.get_item("GoTo{}RMS".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="tag")
                                    if not GoToA:
                                        GoToA = mdl.create_tag("{}_RMS".format(phaseIDs[0]),
                                                               name="GoTo{}RMS".format(phaseIDs[0]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(position[0] + 144, position[1] - 120))
                                    GoToB = mdl.get_item("GoTo{}RMS".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="tag")
                                    if not GoToB:
                                        GoToB = mdl.create_tag("{}_RMS".format(phaseIDs[1]),
                                                               name="GoTo{}RMS".format(phaseIDs[1]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="up",
                                                               position=(position[0] + 176, position[1]))
                                    GoToC = mdl.get_item("GoTo{}RMS".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="tag")
                                    if not GoToC:
                                        GoToC = mdl.create_tag("{}_RMS".format(phaseIDs[2]),
                                                               name="GoTo{}RMS".format(phaseIDs[2]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(position[0] + 144, position[1] + 120))
                            
                                    connMode = mdl.get_item("ConnMode{}".format(name),
                                                         parent=comp_handle, item_type="connection")
                                    if not connMode:
                                        connMode = mdl.create_connection(fromMode, mdl.term(rms, "mode"),
                                                                      name="ConnMode{}".format(name))
                                    connA = mdl.get_item("Conn{}RMS".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="connection")
                                    if not connA:
                                        connA = mdl.create_connection(fromA, mdl.term(rms, "A"),
                                                                      name="Conn{}RMS".format(phaseIDs[0]))
                                    connB = mdl.get_item("Conn{}RMS".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="connection")
                                    if not connB:
                                        connB = mdl.create_connection(mdl.term(rms, "B"), fromB,
                                                                      name="Conn{}RMS".format(phaseIDs[1]))
                                    connC = mdl.get_item("Conn{}RMS".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="connection")
                                    if not connC:
                                        connC = mdl.create_connection(mdl.term(rms, "C"), fromC,
                                                                      name="Conn{}RMS".format(phaseIDs[2]))
                                    conndF = mdl.get_item("ConndF{}".format(name),
                                                         parent=comp_handle, item_type="connection")
                                    if not conndF:
                                        conndF = mdl.create_connection(fromdF, mdl.term(rms, "dFract"),
                                                                      name="ConndF{}".format(name))
                                    connA1 = mdl.get_item("Conn{}RMS1".format(phaseIDs[0]),
                                                          parent=comp_handle, item_type="connection")
                                    if not connA1:
                                        connA1 = mdl.create_connection(GoToA, mdl.term(rms, "RMSa"),
                                                                       name="Conn{}RMS1".format(phaseIDs[0]))
                                    connB1 = mdl.get_item("Conn{}RMS1".format(phaseIDs[1]),
                                                          parent=comp_handle, item_type="connection")
                                    if not connB1:
                                        connB1 = mdl.create_connection(mdl.term(rms, "RMSb"), GoToB,
                                                                       name="Conn{}RMS1".format(phaseIDs[1]))
                                    connC1 = mdl.get_item("Conn{}RMS1".format(phaseIDs[2]),
                                                          parent=comp_handle, item_type="connection")
                                    if not connC1:
                                        connC1 = mdl.create_connection(GoToC, mdl.term(rms, "RMSc"),
                                                                       name="Conn{}RMS1".format(phaseIDs[2]))
                                    tagA = mdl.get_item("from{}RMS".format(phaseIDs[0]), parent=comp_handle,
                                                        item_type="tag")
                                    mdl.set_tag_properties(tagA, value="{}_RMS".format(phaseIDs[0]))
                                    tagB = mdl.get_item("from{}RMS".format(phaseIDs[1]), parent=comp_handle,
                                                        item_type="tag")
                                    mdl.set_tag_properties(tagB, value="{}_RMS".format(phaseIDs[1]))
                                    tagC = mdl.get_item("from{}RMS".format(phaseIDs[2]), parent=comp_handle,
                                                        item_type="tag")
                                    mdl.set_tag_properties(tagC, value="{}_RMS".format(phaseIDs[2]))
                            
                                else:
                                    rms = mdl.get_item("{}_calc".format(name), parent=comp_handle,
                                                       item_type="component")
                                    if rms:
                                        mdl.delete_item(rms)
                            
                                    fromMode = mdl.get_item("fromMode{}".format(name),
                                                         parent=comp_handle, item_type="tag")
                                    if fromMode:
                                        mdl.delete_item(fromMode)
                                    fromA = mdl.get_item("from{}2".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="tag")
                                    if fromA:
                                        mdl.delete_item(fromA)
                                    fromB = mdl.get_item("from{}2".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="tag")
                                    if fromB:
                                        mdl.delete_item(fromB)
                                    fromC = mdl.get_item("from{}2".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="tag")
                                    if fromC:
                                        mdl.delete_item(fromC)
                                    fromdF = mdl.get_item("fromdFract{}".format(name),
                                                         parent=comp_handle, item_type="tag")
                                    if fromdF:
                                        mdl.delete_item(fromdF)
                            
                                    GoToA = mdl.get_item("GoTo{}RMS".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="tag")
                                    if GoToA:
                                        mdl.delete_item(GoToA)
                                    GoToB = mdl.get_item("GoTo{}RMS".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="tag")
                                    if GoToB:
                                        mdl.delete_item(GoToB)
                                    GoToC = mdl.get_item("GoTo{}RMS".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="tag")
                                    if GoToC:
                                        mdl.delete_item(GoToC)
                                    tagA = mdl.get_item("from{}RMS".format(phaseIDs[0]), parent=comp_handle,
                                                        item_type="tag")
                                    mdl.set_tag_properties(tagA, value="zero")
                                    tagB = mdl.get_item("from{}RMS".format(phaseIDs[1]), parent=comp_handle,
                                                        item_type="tag")
                                    mdl.set_tag_properties(tagB, value="zero")
                                    tagC = mdl.get_item("from{}RMS".format(phaseIDs[2]), parent=comp_handle,
                                                        item_type="tag")
                                    mdl.set_tag_properties(tagC, value="zero")
                            
                            
                            def place_avg_rms(mdl, comp_handle, new_value, name, position, phaseIDs):
                                if new_value:
                                    fromA = mdl.get_item("from{}RMS3".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="tag")
                                    if not fromA:
                                        fromA = mdl.create_tag("{}_RMS".format(phaseIDs[0]),
                                                               name="from{}RMS3".format(phaseIDs[0]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="up",
                                                               position=(position[0] - 128, position[1] - 48))
                                    fromB = mdl.get_item("from{}RMS3".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="tag")
                                    if not fromB:
                                        fromB = mdl.create_tag("{}_RMS".format(phaseIDs[1]),
                                                               name="from{}RMS3".format(phaseIDs[1]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="up",
                                                               position=(position[0] - 128, position[1]))
                                    fromC = mdl.get_item("from{}RMS3".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="tag")
                                    if not fromC:
                                        fromC = mdl.create_tag("{}_RMS".format(phaseIDs[2]),
                                                               name="from{}RMS3".format(phaseIDs[2]),
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="up",
                                                               position=(position[0] - 128, position[1] + 48))
                            
                                    sum3ph = mdl.get_item("sum{}".format(name), parent=comp_handle, item_type="component")
                                    if not sum3ph:
                                        sum3ph = mdl.create_component("Sum", parent=comp_handle,
                                                                      name="sum{}".format(name),
                                                                      position=position, rotation="up", hide_name=True)
                                        mdl.set_property_value(mdl.prop(sum3ph, "signs"), "3")
                                    gain = mdl.get_item("gain{}".format(name), parent=comp_handle, item_type="component")
                                    if not gain:
                                        gain = mdl.create_component("Gain", parent=comp_handle,
                                                                    name="gain{}".format(name),
                                                                    position=(position[0] + 128, position[1]),
                                                                    rotation="up", hide_name=True)
                                        mdl.set_property_value(mdl.prop(gain, "gain"), "1/3")
                            
                                    GoTo = mdl.get_item("GoTo{}".format(name), parent=comp_handle, item_type="tag")
                                    if not GoTo:
                                        GoTo = mdl.create_tag(name, name="GoTo{}".format(name),
                                                              parent=comp_handle, scope="local", kind="sp",
                                                              direction="in", rotation="up",
                                                              position=(position[0] + 248, position[1]))
                            
                                    connA = mdl.get_item("Conn{}RMS3".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="connection")
                                    if not connA:
                                        connA = mdl.create_connection(fromA, mdl.term(sum3ph, "in"),
                                                                      "Conn{}RMS3".format(phaseIDs[0]))
                                    connB = mdl.get_item("Conn{}RMS3".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="connection")
                                    if not connB:
                                        connB = mdl.create_connection(fromB, mdl.term(sum3ph, "in1"),
                                                                      "Conn{}RMS3".format(phaseIDs[1]))
                                    connC = mdl.get_item("Conn{}RMS3".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="connection")
                                    if not connC:
                                        connC = mdl.create_connection(fromC, mdl.term(sum3ph, "in2"),
                                                                      "Conn{}RMS3".format(phaseIDs[2]))
                                    connS = mdl.get_item("Conn{}1".format(name),
                                                         parent=comp_handle, item_type="connection")
                                    if not connS:
                                        connS = mdl.create_connection(mdl.term(sum3ph, "out"), mdl.term(gain, "in"),
                                                                      "Conn{}1".format(name))
                                    connG = mdl.get_item("Conn{}2".format(name),
                                                         parent=comp_handle, item_type="connection")
                                    if not connG:
                                        connS = mdl.create_connection(mdl.term(gain, "out"), GoTo,
                                                                      "Conn{}2".format(name))
                                    tag = mdl.get_item("from{}".format(name), parent=comp_handle,
                                                       item_type="tag")
                                    mdl.set_tag_properties(tag, value=name)
                                else:
                                    fromA = mdl.get_item("from{}RMS3".format(phaseIDs[0]),
                                                         parent=comp_handle, item_type="tag")
                                    if fromA:
                                        mdl.delete_item(fromA)
                                    fromB = mdl.get_item("from{}RMS3".format(phaseIDs[1]),
                                                         parent=comp_handle, item_type="tag")
                                    if fromB:
                                        mdl.delete_item(fromB)
                                    fromC = mdl.get_item("from{}RMS3".format(phaseIDs[2]),
                                                         parent=comp_handle, item_type="tag")
                                    if fromC:
                                        mdl.delete_item(fromC)
                            
                                    sum3ph = mdl.get_item("sum{}".format(name), parent=comp_handle, item_type="component")
                                    if sum3ph:
                                        mdl.delete_item(sum3ph)
                                    gain = mdl.get_item("gain{}".format(name), parent=comp_handle, item_type="component")
                                    if gain:
                                        mdl.delete_item(gain)
                            
                                    GoTo = mdl.get_item("GoTo{}".format(name), parent=comp_handle, item_type="tag")
                                    if GoTo:
                                        mdl.delete_item(GoTo)
                                    tag = mdl.get_item("from{}".format(name), parent=comp_handle,
                                                       item_type="tag")
                                    mdl.set_tag_properties(tag, value="zero")
                            
                            
                            def pe_meas_dependent_checkbox(mdl, mask_handle, new_value, measIDs):
                                if new_value:
                                    for id in range(len(measIDs)):
                                        mdl.set_property_value(mdl.prop(mask_handle, measIDs[id]), True)
                                        mdl.disable_property(mdl.prop(mask_handle, measIDs[id]))
                                else:
                                    for id in range(len(measIDs)):
                                        mdl.enable_property(mdl.prop(mask_handle, measIDs[id]))
                            
                            
                            def sp_meas_dependent_checkbox(mdl, mask_handle, new_value, measID):
                                if new_value:
                                    mdl.set_property_value(mdl.prop(mask_handle, measID), True)
                                    mdl.disable_property(mdl.prop(mask_handle, measID))
                                else:
                                    mdl.enable_property(mdl.prop(mask_handle, measID))
                            
                            
                            def place_probe(mdl, comp_handle, new_value, tag_name, probe_name):
                                if new_value:
                                    tag = mdl.get_item("from{}4".format(tag_name),
                                                       parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tag, value=probe_name)
                                    term = mdl.get_item(probe_name, parent=comp_handle, item_type="component")
                                    position = mdl.get_position(term)
                                    if term:
                                        mdl.delete_item(term)
                                    probe = mdl.create_component("Probe", parent=comp_handle,
                                                                 name=probe_name,
                                                                 position=position,
                                                                 rotation="up")
                                    conn = mdl.create_connection(tag, mdl.term(probe, "in"),
                                                                 "Conn{}probe".format(tag_name))
                                else:
                                    tag = mdl.get_item("from{}4".format(tag_name),
                                                       parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tag, value="zero")
                                    probe = mdl.get_item(probe_name, parent=comp_handle, item_type="component")
                                    position = mdl.get_position(probe)
                                    if probe:
                                        mdl.delete_item(probe)
                                    term = mdl.create_component("Termination", parent=comp_handle,
                                                                name=probe_name,
                                                                position=position,
                                                                rotation="up", hide_name=True)
                                    conn = mdl.create_connection(tag, mdl.term(term, "in"),
                                                                 "Conn{}probe".format(tag_name))
                            
                            
                            def place_RMS_power_meter(mdl, comp_handle, new_value):
                                pos = (9312, 8928)
                                if new_value:
                                    fromMode = mdl.get_item("fromMode3", parent=comp_handle, item_type="tag")
                                    if not fromMode:
                                        fromMode = mdl.create_tag("mode", name="fromMode3",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="out", rotation="right",
                                                                   position=(pos[0] - 192, pos[1] - 384))
                                    fromSubMode = mdl.get_item("fromSubMode3", parent=comp_handle, item_type="tag")
                                    if not fromSubMode:
                                        fromSubMode = mdl.create_tag("submode", name="fromSubMode3",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="out", rotation="right",
                                                                   position=(pos[0] - 216, pos[1] - 336))
                                    fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                    if not fromVA:
                                        fromVA = mdl.create_tag("VAn", name="fromVAn3",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="out", rotation="right",
                                                                   position=(pos[0] - 240, pos[1] - 288))
                                    fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                    if not fromVB:
                                        fromVB = mdl.create_tag("VBn", name="fromVBn3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="right",
                                                                position=(pos[0] - 264, pos[1] - 240))
                                    fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                    if not fromVC:
                                        fromVC = mdl.create_tag("VCn", name="fromVCn3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="right",
                                                                position=(pos[0] - 288, pos[1] - 192))
                                    fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                    if not fromIA:
                                        fromIA = mdl.create_tag("IA", name="fromIA3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="right",
                                                                position=(pos[0] - 312, pos[1] - 144))
                                    fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                    if not fromIB:
                                        fromIB = mdl.create_tag("IB", name="fromIB3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="right",
                                                                position=(pos[0] - 336, pos[1] - 96))
                                    fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                    if not fromIC:
                                        fromIC = mdl.create_tag("IC", name="fromIC3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="right",
                                                                position=(pos[0] - 360, pos[1] - 48))
                                    fromVArms = mdl.get_item("fromVAnRMS5", parent=comp_handle, item_type="tag")
                                    if not fromVArms:
                                        fromVArms = mdl.create_tag("VAn_RMS", name="fromVAnRMS5",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="out", rotation="left",
                                                                   position=(pos[0] - 360, pos[1] + 576))
                                    fromVBrms = mdl.get_item("fromVBnRMS5", parent=comp_handle, item_type="tag")
                                    if not fromVBrms:
                                        fromVBrms = mdl.create_tag("VBn_RMS", name="fromVBnRMS5",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(pos[0] - 336, pos[1] + 528))
                                    fromVCrms = mdl.get_item("fromVCnRMS5", parent=comp_handle, item_type="tag")
                                    if not fromVCrms:
                                        fromVCrms = mdl.create_tag("VCn_RMS", name="fromVCnRMS5",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(pos[0] - 312, pos[1] + 480))
                                    fromIArms = mdl.get_item("fromIARMS5", parent=comp_handle, item_type="tag")
                                    if not fromIArms:
                                        fromIArms = mdl.create_tag("IA_RMS", name="fromIARMS5",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(pos[0] - 288, pos[1] + 432))
                                    fromIBrms = mdl.get_item("fromIBRMS5", parent=comp_handle, item_type="tag")
                                    if not fromIBrms:
                                        fromIBrms = mdl.create_tag("IB_RMS", name="fromIBRMS5",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(pos[0] - 264, pos[1] + 384))
                                    fromICrms = mdl.get_item("fromICRMS5", parent=comp_handle, item_type="tag")
                                    if not fromICrms:
                                        fromICrms = mdl.create_tag("IC_RMS", name="fromICRMS5",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(pos[0] - 240, pos[1] + 336))
                                    fromdFract = mdl.get_item("fromdFract3", parent=comp_handle, item_type="tag")
                                    if not fromdFract:
                                        fromdFract = mdl.create_tag("dFract", name="fromdFract3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(pos[0] - 216, pos[1] + 288))
                            
                                    power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                    if not power_meter:
                                        power_meter = mdl.create_component("Three-phase POWER variable frequency",
                                                                           parent=comp_handle, name="Power Meter",
                                                                           position=pos, rotation="up")
                                        mdl.set_property_value(mdl.prop(power_meter, "Ts"), "Ts")
                                        mdl.set_property_value(mdl.prop(power_meter, "internal_sm"), "False")
                            
                                    GoToPa = mdl.get_item("GoToPa", parent=comp_handle, item_type="tag")
                                    if not GoToPa:
                                        GoToPa = mdl.create_tag("POWER_PA", name="GoToPa",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="in", rotation="left",
                                                                   position=(pos[0] + 192, pos[1] - 432))
                                    GoToPb = mdl.get_item("GoToPb", parent=comp_handle, item_type="tag")
                                    if not GoToPb:
                                        GoToPb = mdl.create_tag("POWER_PB", name="GoToPb",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="in", rotation="left",
                                                                   position=(pos[0] + 216, pos[1] - 384))
                                    GoToPc = mdl.get_item("GoToPc", parent=comp_handle, item_type="tag")
                                    if not GoToPc:
                                        GoToPc = mdl.create_tag("POWER_PC", name="GoToPc",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="in", rotation="left",
                                                                   position=(pos[0] + 240, pos[1] - 336))
                                    GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                    if not GoToP:
                                        GoToP = mdl.create_tag("POWER_P", name="GoToP",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="in", rotation="left",
                                                                   position=(pos[0] + 264, pos[1] - 288))
                                    GoToQa = mdl.get_item("GoToQa", parent=comp_handle, item_type="tag")
                                    if not GoToQa:
                                        GoToQa = mdl.create_tag("POWER_QA", name="GoToQa",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 288, pos[1] - 240))
                                    GoToQb = mdl.get_item("GoToQb", parent=comp_handle, item_type="tag")
                                    if not GoToQb:
                                        GoToQb = mdl.create_tag("POWER_QB", name="GoToQb",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 312, pos[1] - 192))
                                    GoToQc = mdl.get_item("GoToQc", parent=comp_handle, item_type="tag")
                                    if not GoToQc:
                                        GoToQc = mdl.create_tag("POWER_QC", name="GoToQc",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 336, pos[1] - 144))
                                    GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                    if not GoToQ:
                                        GoToQ = mdl.create_tag("POWER_Q", name="GoToQ",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(pos[0] + 360, pos[1] - 96))
                                    GoToSa = mdl.get_item("GoToSa", parent=comp_handle, item_type="tag")
                                    if not GoToSa:
                                        GoToSa = mdl.create_tag("POWER_SA", name="GoToSa",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 360, pos[1] + 624))
                                    GoToSb = mdl.get_item("GoToSb", parent=comp_handle, item_type="tag")
                                    if not GoToSb:
                                        GoToSb = mdl.create_tag("POWER_SB", name="GoToSb",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 336, pos[1] + 576))
                                    GoToSc = mdl.get_item("GoToSc", parent=comp_handle, item_type="tag")
                                    if not GoToSc:
                                        GoToSc = mdl.create_tag("POWER_SC", name="GoToSc",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 312, pos[1] + 528))
                                    GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                    if not GoToS:
                                        GoToS = mdl.create_tag("POWER_S", name="GoToS",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 288, pos[1] + 480))
                                    GoToPFa = mdl.get_item("GoToPFa", parent=comp_handle, item_type="tag")
                                    if not GoToPFa:
                                        GoToPFa = mdl.create_tag("POWER_PFA", name="GoToPFa",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 264, pos[1] + 432))
                                    GoToPFb = mdl.get_item("GoToPFb", parent=comp_handle, item_type="tag")
                                    if not GoToPFb:
                                        GoToPFb = mdl.create_tag("POWER_PFB", name="GoToPFb",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 240, pos[1] + 384))
                                    GoToPFc = mdl.get_item("GoToPFc", parent=comp_handle, item_type="tag")
                                    if not GoToPFc:
                                        GoToPFc = mdl.create_tag("POWER_PFC", name="GoToPFc",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 216, pos[1] + 336))
                                    GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                    if not GoToPF:
                                        GoToPF = mdl.create_tag("POWER_PF", name="GoToPF",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(pos[0] + 192, pos[1] + 288))
                            
                                    connMode = mdl.get_item("ConnModePM", parent=comp_handle, item_type="connection")
                                    if not connMode:
                                        connMode = mdl.create_connection(fromMode, mdl.term(power_meter, "mode"),
                                                                     "ConnModePM")
                                    connSubMode = mdl.get_item("ConnSubModePM", parent=comp_handle, item_type="connection")
                                    if not connSubMode:
                                        connSubMode = mdl.create_connection(fromSubMode, mdl.term(power_meter, "submode"),
                                                                     "ConnSubModePM")
                                    connVAPM = mdl.get_item("ConnVAPM", parent=comp_handle, item_type="connection")
                                    if not connVAPM:
                                        connVAPM = mdl.create_connection(fromVA, mdl.term(power_meter, "Va"),
                                                                     "ConnVAPM")
                                    connVBPM = mdl.get_item("ConnVBPM", parent=comp_handle, item_type="connection")
                                    if not connVBPM:
                                        connVBPM = mdl.create_connection(fromVB, mdl.term(power_meter, "Vb"),
                                                                         "ConnVBPM")
                                    connVCPM = mdl.get_item("ConnVCPM", parent=comp_handle, item_type="connection")
                                    if not connVCPM:
                                        connVCPM = mdl.create_connection(fromVC, mdl.term(power_meter, "Vc"),
                                                                         "ConnVCPM")
                                    connIAPM = mdl.get_item("ConnIAPM", parent=comp_handle, item_type="connection")
                                    if not connIAPM:
                                        connIAPM = mdl.create_connection(fromIA, mdl.term(power_meter, "Ia"),
                                                                         "ConnIAPM")
                                    connIBPM = mdl.get_item("ConnIBPM", parent=comp_handle, item_type="connection")
                                    if not connIBPM:
                                        connIBPM = mdl.create_connection(fromIB, mdl.term(power_meter, "Ib"),
                                                                         "ConnIBPM")
                                    connICPM = mdl.get_item("ConnICPM", parent=comp_handle, item_type="connection")
                                    if not connICPM:
                                        connICPM = mdl.create_connection(fromIC, mdl.term(power_meter, "Ic"),
                                                                         "ConnICPM")
                                    connVArms = mdl.get_item("ConnVARMSPM", parent=comp_handle, item_type="connection")
                                    if not connVArms:
                                        connVArms = mdl.create_connection(fromVArms, mdl.term(power_meter, "VrmsA"),
                                                                     "ConnVARMSPM")
                                    connVBrms = mdl.get_item("ConnVBRMSPM", parent=comp_handle, item_type="connection")
                                    if not connVBrms:
                                        connVBrms = mdl.create_connection(fromVBrms, mdl.term(power_meter, "VrmsB"),
                                                                         "ConnVBRMSPM")
                                    connVCrms = mdl.get_item("ConnVCRMSPM", parent=comp_handle, item_type="connection")
                                    if not connVCrms:
                                        connVCrms = mdl.create_connection(fromVCrms, mdl.term(power_meter, "VrmsC"),
                                                                         "ConnVCRMSPM")
                                    connIArms = mdl.get_item("ConnIARMSPM", parent=comp_handle, item_type="connection")
                                    if not connIArms:
                                        connIArms = mdl.create_connection(fromIArms, mdl.term(power_meter, "IrmsA"),
                                                                         "ConnIARMSPM")
                                    connIBrms = mdl.get_item("ConnIBRMSPM", parent=comp_handle, item_type="connection")
                                    if not connIBrms:
                                        connIBrms = mdl.create_connection(fromIBrms, mdl.term(power_meter, "IrmsB"),
                                                                         "ConnIBRMSPM")
                                    connICrms = mdl.get_item("ConnICRMSPM", parent=comp_handle, item_type="connection")
                                    if not connICrms:
                                        connICrms = mdl.create_connection(fromICrms, mdl.term(power_meter, "IrmsC"),
                                                                         "ConnICRMSPM")
                                    conndFract = mdl.get_item("ConndFractPM", parent=comp_handle, item_type="connection")
                                    if not conndFract:
                                        conndFract = mdl.create_connection(fromdFract, mdl.term(power_meter, "dFract"),
                                                                         "ConndFractPM")
                                    
                                    connPa = mdl.get_item("ConnPMPa", parent=comp_handle, item_type="connection")
                                    if not connPa:
                                        connPa = mdl.create_connection(mdl.term(power_meter, "Pa"), GoToPa,
                                                                         "ConnPMPa")
                                    connPb = mdl.get_item("ConnPMPb", parent=comp_handle, item_type="connection")
                                    if not connPb:
                                        connPb = mdl.create_connection(mdl.term(power_meter, "Pb"), GoToPb,
                                                                         "ConnPMPb")
                                    connPc = mdl.get_item("ConnPMPc", parent=comp_handle, item_type="connection")
                                    if not connPc:
                                        connPc = mdl.create_connection(mdl.term(power_meter, "Pc"), GoToPc,
                                                                         "ConnPMPc")
                                    connP = mdl.get_item("ConnPMP", parent=comp_handle, item_type="connection")
                                    if not connP:
                                        connP = mdl.create_connection(mdl.term(power_meter, "P"), GoToP,
                                                                         "ConnPMP")
                                    connQa = mdl.get_item("ConnPMQa", parent=comp_handle, item_type="connection")
                                    if not connQa:
                                        connQa = mdl.create_connection(mdl.term(power_meter, "Qa"), GoToQa,
                                                                         "ConnPMQa")
                                    connQb = mdl.get_item("ConnPMQb", parent=comp_handle, item_type="connection")
                                    if not connQb:
                                        connQb = mdl.create_connection(mdl.term(power_meter, "Qb"), GoToQb,
                                                                         "ConnPMQb")
                                    connQc = mdl.get_item("ConnPMQc", parent=comp_handle, item_type="connection")
                                    if not connQc:
                                        connQc = mdl.create_connection(mdl.term(power_meter, "Qc"), GoToQc,
                                                                         "ConnPMQc")
                                    connQ = mdl.get_item("ConnPMQ", parent=comp_handle, item_type="connection")
                                    if not connQ:
                                        connQ = mdl.create_connection(mdl.term(power_meter, "Q"), GoToQ,
                                                                         "ConnPMQ")
                                    connSa = mdl.get_item("ConnPMSa", parent=comp_handle, item_type="connection")
                                    if not connSa:
                                        connSa = mdl.create_connection(mdl.term(power_meter, "Sa"), GoToSa,
                                                                         "ConnPMSa")
                                    connSb = mdl.get_item("ConnPMSb", parent=comp_handle, item_type="connection")
                                    if not connSb:
                                        connSb = mdl.create_connection(mdl.term(power_meter, "Sb"), GoToSb,
                                                                         "ConnPMSb")
                                    connSc = mdl.get_item("ConnPMSc", parent=comp_handle, item_type="connection")
                                    if not connSc:
                                        connSc = mdl.create_connection(mdl.term(power_meter, "Sc"), GoToSc,
                                                                         "ConnPMSc")
                                    connS = mdl.get_item("ConnPMS", parent=comp_handle, item_type="connection")
                                    if not connS:
                                        connS = mdl.create_connection(mdl.term(power_meter, "S"), GoToS,
                                                                         "ConnPMS")
                                    connPFa = mdl.get_item("ConnPMPFa", parent=comp_handle, item_type="connection")
                                    if not connPFa:
                                        connPFa = mdl.create_connection(mdl.term(power_meter, "PFa"), GoToPFa,
                                                                         "ConnPMPFa")
                                    connPFb = mdl.get_item("ConnPMPFb", parent=comp_handle, item_type="connection")
                                    if not connPFb:
                                        connPFb = mdl.create_connection(mdl.term(power_meter, "PFb"), GoToPFb,
                                                                         "ConnPMPFb")
                                    connPFc = mdl.get_item("ConnPMPFc", parent=comp_handle, item_type="connection")
                                    if not connPFc:
                                        connPFc = mdl.create_connection(mdl.term(power_meter, "PFc"), GoToPFc,
                                                                         "ConnPMPFc")
                                    connPF = mdl.get_item("ConnPMPF", parent=comp_handle, item_type="connection")
                                    if not connPF:
                                        connPF = mdl.create_connection(mdl.term(power_meter, "PF"), GoToPF,
                                                                         "ConnPMPF")
                            
                                    tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagP, value="POWER_P")
                                    tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPa, value="POWER_PA")
                                    tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPb, value="POWER_PB")
                                    tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPc, value="POWER_PC")
                                    tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQ, value="POWER_Q")
                                    tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQa, value="POWER_QA")
                                    tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQb, value="POWER_QB")
                                    tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQc, value="POWER_QC")
                                    tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagS, value="POWER_S")
                                    tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSa, value="POWER_SA")
                                    tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSb, value="POWER_SB")
                                    tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSc, value="POWER_SC")
                                    tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPF, value="POWER_PF")
                                    tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFa, value="POWER_PFA")
                                    tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFb, value="POWER_PFB")
                                    tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFc, value="POWER_PFC")
                                else:
                                    fromMode = mdl.get_item("fromMode3", parent=comp_handle, item_type="tag")
                                    if fromMode:
                                        mdl.delete_item(fromMode)
                                    fromSubMode = mdl.get_item("fromSubMode3", parent=comp_handle, item_type="tag")
                                    if fromSubMode:
                                        mdl.delete_item(fromSubMode)
                                    fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                    if fromVA:
                                        mdl.delete_item(fromVA)
                                    fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                    if fromVB:
                                        mdl.delete_item(fromVB)
                                    fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                    if fromVC:
                                        mdl.delete_item(fromVC)
                                    fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                    if fromIA:
                                        mdl.delete_item(fromIA)
                                    fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                    if fromIB:
                                        mdl.delete_item(fromIB)
                                    fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                    if fromIC:
                                        mdl.delete_item(fromIC)
                                    fromVArms = mdl.get_item("fromVAnRMS5", parent=comp_handle, item_type="tag")
                                    if fromVArms:
                                        mdl.delete_item(fromVArms)
                                    fromVBrms = mdl.get_item("fromVBnRMS5", parent=comp_handle, item_type="tag")
                                    if fromVBrms:
                                        mdl.delete_item(fromVBrms)
                                    fromVCrms = mdl.get_item("fromVCnRMS5", parent=comp_handle, item_type="tag")
                                    if fromVCrms:
                                        mdl.delete_item(fromVCrms)
                                    fromIArms = mdl.get_item("fromIARMS5", parent=comp_handle, item_type="tag")
                                    if fromIArms:
                                        mdl.delete_item(fromIArms)
                                    fromIBrms = mdl.get_item("fromIBRMS5", parent=comp_handle, item_type="tag")
                                    if fromIBrms:
                                        mdl.delete_item(fromIBrms)
                                    fromICrms = mdl.get_item("fromICRMS5", parent=comp_handle, item_type="tag")
                                    if fromICrms:
                                        mdl.delete_item(fromICrms)
                                    fromdFract = mdl.get_item("fromdFract3", parent=comp_handle, item_type="tag")
                                    if fromdFract:
                                        mdl.delete_item(fromdFract)
                            
                                    power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                    if power_meter:
                                        mdl.delete_item(power_meter)
                            
                                    GoToPa = mdl.get_item("GoToPa", parent=comp_handle, item_type="tag")
                                    if GoToPa:
                                        mdl.delete_item(GoToPa)
                                    GoToPb = mdl.get_item("GoToPb", parent=comp_handle, item_type="tag")
                                    if GoToPb:
                                        mdl.delete_item(GoToPb)
                                    GoToPc = mdl.get_item("GoToPc", parent=comp_handle, item_type="tag")
                                    if GoToPc:
                                        mdl.delete_item(GoToPc)
                                    GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                    if GoToP:
                                        mdl.delete_item(GoToP)
                                    GoToQa = mdl.get_item("GoToQa", parent=comp_handle, item_type="tag")
                                    if GoToQa:
                                        mdl.delete_item(GoToQa)
                                    GoToQb = mdl.get_item("GoToQb", parent=comp_handle, item_type="tag")
                                    if GoToQb:
                                        mdl.delete_item(GoToQb)
                                    GoToQc = mdl.get_item("GoToQc", parent=comp_handle, item_type="tag")
                                    if GoToQc:
                                        mdl.delete_item(GoToQc)
                                    GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                    if GoToQ:
                                        mdl.delete_item(GoToQ)
                                    GoToSa = mdl.get_item("GoToSa", parent=comp_handle, item_type="tag")
                                    if GoToSa:
                                        mdl.delete_item(GoToSa)
                                    GoToSb = mdl.get_item("GoToSb", parent=comp_handle, item_type="tag")
                                    if GoToSb:
                                        mdl.delete_item(GoToSb)
                                    GoToSc = mdl.get_item("GoToSc", parent=comp_handle, item_type="tag")
                                    if GoToSc:
                                        mdl.delete_item(GoToSc)
                                    GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                    if GoToS:
                                        mdl.delete_item(GoToS)
                                    GoToPFa = mdl.get_item("GoToPFa", parent=comp_handle, item_type="tag")
                                    if GoToPFa:
                                        mdl.delete_item(GoToPFa)
                                    GoToPFb = mdl.get_item("GoToPFb", parent=comp_handle, item_type="tag")
                                    if GoToPFb:
                                        mdl.delete_item(GoToPFb)
                                    GoToPFc = mdl.get_item("GoToPFc", parent=comp_handle, item_type="tag")
                                    if GoToPFc:
                                        mdl.delete_item(GoToPFc)
                                    GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                    if GoToPF:
                                        mdl.delete_item(GoToPF)
                            
                                    tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagP, value="zero")
                                    tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPa, value="zero")
                                    tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPb, value="zero")
                                    tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPc, value="zero")
                                    tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQ, value="zero")
                                    tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQa, value="zero")
                                    tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQb, value="zero")
                                    tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQc, value="zero")
                                    tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagS, value="zero")
                                    tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSa, value="zero")
                                    tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSb, value="zero")
                                    tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSc, value="zero")
                                    tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPF, value="zero")
                                    tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFa, value="zero")
                                    tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFb, value="zero")
                                    tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFc, value="zero")
                            
                            
                            def place_AB_power_meter(mdl, comp_handle, new_value):
                                if new_value:
                                    fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                    if not fromVA:
                                        fromVA = mdl.create_tag("VAn", name="fromVAn3",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="out", rotation="right",
                                                                   position=(8880, 8488))
                                    fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                    if not fromVB:
                                        fromVB = mdl.create_tag("VBn", name="fromVBn3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="right",
                                                                position=(8856, 8528))
                                    fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                    if not fromVC:
                                        fromVC = mdl.create_tag("VCn", name="fromVCn3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="right",
                                                                position=(8832, 8568))
                                    fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                    if not fromIA:
                                        fromIA = mdl.create_tag("IA", name="fromIA3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(8832, 8792))
                                    fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                    if not fromIB:
                                        fromIB = mdl.create_tag("IB", name="fromIB3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(8856, 8752))
                                    fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                    if not fromIC:
                                        fromIC = mdl.create_tag("IC", name="fromIC3",
                                                                parent=comp_handle, scope="local", kind="sp",
                                                                direction="out", rotation="left",
                                                                position=(8880, 8712))
                            
                                    power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                    if not power_meter:
                                        power_meter = mdl.create_component("Power Meter", parent=comp_handle,
                                                                           name="Power Meter",
                                                                           position=(8984, 8624), rotation="up")
                                        mdl.set_property_value(mdl.prop(power_meter, "filter_order"), "second order")
                                        mdl.set_property_value(mdl.prop(power_meter, "enable_inst_ports"), False)
                            
                                    GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                    if not GoToP:
                                        GoToP = mdl.create_tag("POWER_P", name="GoToP",
                                                                   parent=comp_handle, scope="local", kind="sp",
                                                                   direction="in", rotation="left",
                                                                   position=(9064, 8504))
                                    GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                    if not GoToQ:
                                        GoToQ = mdl.create_tag("POWER_Q", name="GoToQ",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="left",
                                                               position=(9088, 8544))
                                    GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                    if not GoToS:
                                        GoToS = mdl.create_tag("POWER_S", name="GoToS",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(9088, 8760))
                                    GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                    if not GoToPF:
                                        GoToPF = mdl.create_tag("POWER_PF", name="GoToPF",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="in", rotation="right",
                                                               position=(9064, 8720))
                        
                                    connVAPM = mdl.get_item("ConnVAPM", parent=comp_handle, item_type="connection")
                                    if not connVAPM:
                                        connVAPM = mdl.create_connection(fromVA, mdl.term(power_meter, "va"),
                                                                     "ConnVAPM")
                                    connVBPM = mdl.get_item("ConnVBPM", parent=comp_handle, item_type="connection")
                                    if not connVBPM:
                                        connVBPM = mdl.create_connection(fromVB, mdl.term(power_meter, "vb"),
                                                                         "ConnVBPM")
                                    connVCPM = mdl.get_item("ConnVCPM", parent=comp_handle, item_type="connection")
                                    if not connVCPM:
                                        connVCPM = mdl.create_connection(fromVC, mdl.term(power_meter, "vc"),
                                                                         "ConnVCPM")
                                    connIAPM = mdl.get_item("ConnIAPM", parent=comp_handle, item_type="connection")
                                    if not connIAPM:
                                        connIAPM = mdl.create_connection(fromIA, mdl.term(power_meter, "ia"),
                                                                         "ConnIAPM")
                                    connIBPM = mdl.get_item("ConnIBPM", parent=comp_handle, item_type="connection")
                                    if not connIBPM:
                                        connIBPM = mdl.create_connection(fromIB, mdl.term(power_meter, "ib"),
                                                                         "ConnIBPM")
                                    connICPM = mdl.get_item("ConnICPM", parent=comp_handle, item_type="connection")
                                    if not connICPM:
                                        connICPM = mdl.create_connection(fromIC, mdl.term(power_meter, "ic"),
                                                                         "ConnICPM")
                                    connPMPdc = mdl.get_item("ConnPMPdc", parent=comp_handle, item_type="connection")
                                    if not connPMPdc:
                                        connPMPdc = mdl.create_connection(mdl.term(power_meter, "Pdc"),GoToP,
                                                                         "ConnPMPdc")
                                    connPMQdc = mdl.get_item("ConnPMQdc", parent=comp_handle, item_type="connection")
                                    if not connPMQdc:
                                        connPMQdc = mdl.create_connection(mdl.term(power_meter, "Qdc"), GoToQ,
                                                                          "ConnPMQdc")
                                    connPMS = mdl.get_item("ConnPMS", parent=comp_handle, item_type="connection")
                                    if not connPMS:
                                        connPMS = mdl.create_connection(mdl.term(power_meter, "apparent"), GoToS,
                                                                          "ConnPMS")
                                    connPMPF = mdl.get_item("ConnPMPF", parent=comp_handle, item_type="connection")
                                    if not connPMPF:
                                        connPMPF = mdl.create_connection(mdl.term(power_meter, "k_factor"), GoToPF,
                                                                          "ConnPMPF")
                                    tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagP, value="POWER_P")
                                    tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQ, value="POWER_Q")
                                    tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagS, value="POWER_S")
                                    tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPF, value="POWER_PF")
                                    
                                    tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPa, value="zero")
                                    tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPb, value="zero")
                                    tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPc, value="zero")
                                    
                                    tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQa, value="zero")
                                    tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQb, value="zero")
                                    tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQc, value="zero")
                                    
                                    tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSa, value="zero")
                                    tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSb, value="zero")
                                    tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSc, value="zero")
                                    
                                    tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFa, value="zero")
                                    tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFb, value="zero")
                                    tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFc, value="zero")
                                    
                                else:
                                    fromVA = mdl.get_item("fromVAn3", parent=comp_handle, item_type="tag")
                                    if fromVA:
                                        mdl.delete_item(fromVA)
                                    fromVB = mdl.get_item("fromVBn3", parent=comp_handle, item_type="tag")
                                    if fromVB:
                                        mdl.delete_item(fromVB)
                                    fromVC = mdl.get_item("fromVCn3", parent=comp_handle, item_type="tag")
                                    if fromVC:
                                        mdl.delete_item(fromVC)
                                    fromIA = mdl.get_item("fromIA3", parent=comp_handle, item_type="tag")
                                    if fromIA:
                                        mdl.delete_item(fromIA)
                                    fromIB = mdl.get_item("fromIB3", parent=comp_handle, item_type="tag")
                                    if fromIB:
                                        mdl.delete_item(fromIB)
                                    fromIC = mdl.get_item("fromIC3", parent=comp_handle, item_type="tag")
                                    if fromIC:
                                        mdl.delete_item(fromIC)
                            
                                    power_meter = mdl.get_item("Power Meter", parent=comp_handle, item_type="component")
                                    if power_meter:
                                        mdl.delete_item(power_meter)
                            
                                    GoToP = mdl.get_item("GoToP", parent=comp_handle, item_type="tag")
                                    if GoToP:
                                        mdl.delete_item(GoToP)
                                    GoToQ = mdl.get_item("GoToQ", parent=comp_handle, item_type="tag")
                                    if GoToQ:
                                        mdl.delete_item(GoToQ)
                                    GoToS = mdl.get_item("GoToS", parent=comp_handle, item_type="tag")
                                    if GoToS:
                                        mdl.delete_item(GoToS)
                                    GoToPF = mdl.get_item("GoToPF", parent=comp_handle, item_type="tag")
                                    if GoToPF:
                                        mdl.delete_item(GoToPF)
                            
                                    tagP = mdl.get_item("fromP", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagP, value="zero")
                                    tagPa = mdl.get_item("fromPA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPa, value="zero")
                                    tagPb = mdl.get_item("fromPB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPb, value="zero")
                                    tagPc = mdl.get_item("fromPC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPc, value="zero")
                                    tagQ = mdl.get_item("fromQ", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQ, value="zero")
                                    tagQa = mdl.get_item("fromQA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQa, value="zero")
                                    tagQb = mdl.get_item("fromQB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQb, value="zero")
                                    tagQc = mdl.get_item("fromQC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagQc, value="zero")
                                    tagS = mdl.get_item("fromS", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagS, value="zero")
                                    tagSa = mdl.get_item("fromSA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSa, value="zero")
                                    tagSb = mdl.get_item("fromSB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSb, value="zero")
                                    tagSc = mdl.get_item("fromSC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagSc, value="zero")
                                    tagPF = mdl.get_item("fromPF", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPF, value="zero")
                                    tagPFa = mdl.get_item("fromPFA", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFa, value="zero")
                                    tagPFb = mdl.get_item("fromPFB", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFb, value="zero")
                                    tagPFc = mdl.get_item("fromPFC", parent=comp_handle, item_type="tag")
                                    mdl.set_tag_properties(tagPFc, value="zero")
                            
                            
                            
                            def place_measSM(mdl, comp_handle, new_value):
                                if new_value:
                                    fromFreq = mdl.get_item("fromFreq2", parent=comp_handle, item_type="tag")
                                    if not fromFreq:
                                        fromFreq = mdl.create_tag("Freq", name="fromFreq2",
                                                               parent=comp_handle, scope="local", kind="sp",
                                                               direction="out", rotation="up",
                                                               position=(7776, 8496))
                                    measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                    if not measSM:
                                        measSM = mdl.create_component("Meter_SM_and_dFract", parent=comp_handle,
                                                                           name="measSM", position=(7896, 8496),
                                                                           rotation="up")
                                        mdl.set_property_value(mdl.prop(measSM, "Ts"), "Ts")
                                        mdl.set_property_value(mdl.prop(measSM, "n_cycles"), "n_cycles")
                                    gotodFract = mdl.get_item("GoTodFract", parent=comp_handle, item_type="tag")
                                    if not gotodFract:
                                        gotodFract = mdl.create_tag("dFract", name="GoTodFract",
                                                                 parent=comp_handle, scope="local", kind="sp",
                                                                 direction="in", rotation="left",
                                                                 position=(7968, 8400))
                                    gotoMode = mdl.get_item("GoToMode", parent=comp_handle, item_type="tag")
                                    if not gotoMode:
                                        gotoMode = mdl.create_tag("mode", name="GoToMode",
                                                                 parent=comp_handle, scope="local", kind="sp",
                                                                 direction="in", rotation="up",
                                                                 position=(8040, 8496))
                                    termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                    if not termSubMode:
                                        termSubMode = mdl.create_component("Termination", parent=comp_handle,
                                                                           name="termSubMode", position=(7968, 8592),
                                                                           rotation="right")
                                    connFreq = mdl.get_item("connFreq2", parent=comp_handle, item_type="connection")
                                    if not connFreq:
                                        connFreq = mdl.create_connection(fromFreq, mdl.term(measSM, "Freq"),
                                                                         "connFreq2")
                                    conndFract = mdl.get_item("conndFract", parent=comp_handle, item_type="connection")
                                    if not conndFract:
                                        conndFract = mdl.create_connection(mdl.term(measSM, "dFract"), gotodFract,
                                                                         "conndFract")
                                    connMode = mdl.get_item("connMode", parent=comp_handle, item_type="connection")
                                    if not connMode:
                                        connMode = mdl.create_connection(mdl.term(measSM, "mode"), gotoMode,
                                                                         "connMode")
                                    connSubMode = mdl.get_item("connSubMode", parent=comp_handle, item_type="connection")
                                    if not connSubMode:
                                        connSubMode = mdl.create_connection(mdl.term(measSM, "submode"), mdl.term(termSubMode, "in"),
                                                                         "connSubMode")
                                else:
                                    fromFreq = mdl.get_item("fromFreq2", parent=comp_handle, item_type="tag")
                                    if fromFreq:
                                        mdl.delete_item(fromFreq)
                                    measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                    if measSM:
                                        mdl.delete_item(measSM)
                                    gotodFract = mdl.get_item("GoTodFract", parent=comp_handle, item_type="tag")
                                    if gotodFract:
                                        mdl.delete_item(gotodFract)
                                    gotoMode = mdl.get_item("GoToMode", parent=comp_handle, item_type="tag")
                                    if gotoMode:
                                        mdl.delete_item(gotoMode)
                                    termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                    if termSubMode:
                                        mdl.delete_item(termSubMode)
                                    gotoSubMode = mdl.get_item("GoToSubMode", parent=comp_handle, item_type="tag")
                                    if gotoSubMode:
                                        mdl.delete_item(gotoSubMode)
                            
                            
                            def placeSubModetag(mdl, comp_handle, new_value):
                                if new_value:
                                    termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                    if termSubMode:
                                        mdl.delete_item(termSubMode)
                                    measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                    if measSM:
                                        gotoSubMode = mdl.get_item("GoToSubMode", parent=comp_handle, item_type="tag")
                                        if not gotoSubMode:
                                            gotoSubMode = mdl.create_tag("submode", name="GoToSubMode",
                                                                         parent=comp_handle, scope="local", kind="sp",
                                                                         direction="in", rotation="right",
                                                                         position=(7968, 8592))
                                        connSubMode = mdl.get_item("connSubMode", parent=comp_handle, item_type="connection")
                                        if not connSubMode:
                                            connSubMode = mdl.create_connection(mdl.term(measSM, "submode"), gotoSubMode,
                                                                             "connSubMode")
                                else:
                                    gotoSubMode = mdl.get_item("GoToSubMode", parent=comp_handle, item_type="tag")
                                    if gotoSubMode:
                                        mdl.delete_item(gotoSubMode)
                                    measSM = mdl.get_item("measSM", parent=comp_handle, item_type="component")
                                    if measSM:
                                        termSubMode = mdl.get_item("termSubMode", parent=comp_handle, item_type="component")
                                        if not termSubMode:
                                            termSubMode = mdl.create_component("Termination", parent=comp_handle,
                                                                               name="termSubMode", position=(7968, 8592),
                                                                               rotation="right")
                                        connSubMode = mdl.get_item("connSubMode", parent=comp_handle, item_type="connection")
                                        if not connSubMode:
                                            connSubMode = mdl.create_connection(mdl.term(measSM, "submode"), mdl.term(termSubMode, "in"),
                                                                             "connSubMode")
                            
                            def placePort(mdl, comp_handle, new_value, port_name, bus_name, term_pos):
                                if new_value:
                                    termOut = mdl.get_item(port_name, parent=comp_handle, item_type="component")
                                    if termOut:
                                        pos = mdl.get_position(termOut)
                                        mdl.delete_item(termOut)
                                        portOut = mdl.create_port(parent=comp_handle, name=port_name, direction="out",
                                                                    kind="sp", terminal_position=("top", term_pos),
                                                                    position=pos, rotation="left")
                                        busJoin = mdl.get_item(bus_name, parent=comp_handle, item_type="component")
                                        mdl.create_connection(mdl.term(busJoin, "out"), portOut, "conn_{}".format(port_name))
                                else:
                                    portOut = mdl.get_item(port_name, parent=comp_handle, item_type="port")
                                    if portOut:
                                        pos = mdl.get_position(portOut)
                                        mdl.delete_item(portOut)
                                        termOut = mdl.create_component("Termination", parent=comp_handle, name=port_name,
                                                                        position=pos, rotation="left")
                                        busJoin = mdl.get_item(bus_name, parent=comp_handle, item_type="component")
                                        mdl.create_connection(mdl.term(busJoin, "out"), mdl.term(termOut, "in"), "conn_{}".format(port_name))
                            
                            
                            def removeSnubber(mdl, comp_handle, new_value):
                                if new_value:
                                    Ra = mdl.get_item("Ra", parent=comp_handle, item_type="component")
                                    if Ra:
                                        posA = mdl.get_position(Ra)
                                        mdl.delete_item(Ra)
                                        ocA = mdl.create_component("Open Circuit", parent=comp_handle, name="Ra",
                                                                    position=posA, rotation="right")
                                        junAp = mdl.get_item("Junction221", parent=comp_handle, item_type="junction")
                                        junAn = mdl.get_item("Junction230", parent=comp_handle, item_type="junction")
                                        if junAp:
                                            mdl.create_connection(junAp, mdl.term(ocA, "p_node"), "Connection3035")
                                        if junAn:
                                            mdl.create_connection(mdl.term(ocA, "n_node"), junAn, "Connection3088")
                                    Rb = mdl.get_item("Rb", parent=comp_handle, item_type="component")
                                    if Rb:
                                        posB = mdl.get_position(Rb)
                                        mdl.delete_item(Rb)
                                        ocB = mdl.create_component("Open Circuit", parent=comp_handle, name="Rb",
                                                                    position=posB, rotation="right")
                                        junBp = mdl.get_item("Junction220", parent=comp_handle, item_type="junction")
                                        junBn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                        if junBp:
                                            mdl.create_connection(junBp, mdl.term(ocB, "p_node"), "Connection3032")
                                        if junBn:
                                            mdl.create_connection(mdl.term(ocB, "n_node"), junBn, "Connection3070")
                                    Rc = mdl.get_item("Rc", parent=comp_handle, item_type="component")
                                    if Rc:
                                        posC = mdl.get_position(Rc)
                                        mdl.delete_item(Rc)
                                        ocC = mdl.create_component("Open Circuit", parent=comp_handle, name="Rc",
                                                                    position=posC, rotation="right")
                                        junCp = mdl.get_item("Junction219", parent=comp_handle, item_type="junction")
                                        junCn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                        if junCp:
                                            mdl.create_connection(junCp, mdl.term(ocC, "p_node"), "Connection3029")
                                        if junAn:
                                            mdl.create_connection(mdl.term(ocC, "n_node"), junCn, "Connection3068")
                                else:
                                    Ra = mdl.get_item("Ra", parent=comp_handle, item_type="component")
                                    if Ra:
                                        posA = mdl.get_position(Ra)
                                        mdl.delete_item(Ra)
                                        ocA = mdl.create_component("Resistor", parent=comp_handle, name="Ra",
                                                                    position=posA, rotation="right")
                                        mdl.set_property_value(mdl.prop(ocA, "resistance"), "R")
                                        junAp = mdl.get_item("Junction221", parent=comp_handle, item_type="junction")
                                        junAn = mdl.get_item("Junction230", parent=comp_handle, item_type="junction")
                                        if junAp:
                                            mdl.create_connection(junAp, mdl.term(ocA, "p_node"), "Connection3035")
                                        if junAn:
                                            mdl.create_connection(mdl.term(ocA, "n_node"), junAn, "Connection3088")
                                    Rb = mdl.get_item("Rb", parent=comp_handle, item_type="component")
                                    if Rb:
                                        posB = mdl.get_position(Rb)
                                        mdl.delete_item(Rb)
                                        ocB = mdl.create_component("Resistor", parent=comp_handle, name="Rb",
                                                                    position=posB, rotation="right")
                                        mdl.set_property_value(mdl.prop(ocB, "resistance"), "R")
                                        junBp = mdl.get_item("Junction220", parent=comp_handle, item_type="junction")
                                        junBn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                        if junBp:
                                            mdl.create_connection(junBp, mdl.term(ocB, "p_node"), "Connection3032")
                                        if junBn:
                                            mdl.create_connection(mdl.term(ocB, "n_node"), junBn, "Connection3070")
                                    Rc = mdl.get_item("Rc", parent=comp_handle, item_type="component")
                                    if Rc:
                                        posC = mdl.get_position(Rc)
                                        mdl.delete_item(Rc)
                                        ocC = mdl.create_component("Resistor", parent=comp_handle, name="Rc",
                                                                    position=posC, rotation="right")
                                        mdl.set_property_value(mdl.prop(ocC, "resistance"), "R")
                                        junCp = mdl.get_item("Junction219", parent=comp_handle, item_type="junction")
                                        junCn = mdl.get_item("Junction225", parent=comp_handle, item_type="junction")
                                        if junCp:
                                            mdl.create_connection(junCp, mdl.term(ocC, "p_node"), "Connection3029")
                                        if junAn:
                                            mdl.create_connection(mdl.term(ocC, "n_node"), junCn, "Connection3068")
                        ENDCODE

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        
                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()
                            
                        ENDCODE
                    }
                }
                [
                    position = 8376, 7808
                    scale = -1, 1
                    size = 56, 240
                ]

                component "core/Probe" excp_code_EPC {
                }
                [
                    position = 8800, 8336
                    rotation = left
                    scale = -1, 1
                ]

                component "core/Digital Probe" client_state_EPC {
                }
                [
                    position = 8736, 8304
                    rotation = left
                    scale = -1, 1
                ]

                component "core/Modbus Client" clientEPC_1 {
                    client_ip_address = "192.168.32.200"
                    execution_rate = "Ts"
                    request_names_dict = "{\'On_Off\': {\'rename\': \'On_Off\', \'delete\': False, \'function_code\': \'write single register\', \'transmit_type\': \'on event\'}, \'P_ref\': {\'rename\': \'P_ref\', \'delete\': False, \'function_code\': \'write single register\', \'transmit_type\': \'on event\'}, \'Q_ref\': {\'rename\': \'Q_ref\', \'delete\': False, \'function_code\': \'write single register\', \'transmit_type\': \'on event\'}, \'Clear_Faults\': {\'rename\': \'Clear_Faults\', \'delete\': False, \'function_code\': \'write single register\', \'transmit_type\': \'on event\'}}"
                    request_timeout = "5000"
                    requests = "[{\'name\': \'On_Off\', \'function_code\': \'write single register\', \'read_address\': 0, \'number_of_registers_to_read\': 1, \'write_address\': 246, \'number_of_registers_to_write\': 1, \'transmit_type\': \'on event\', \'transmit_period\': 1000}, {\'name\': \'P_ref\', \'function_code\': \'write single register\', \'read_address\': 0, \'number_of_registers_to_read\': 1, \'write_address\': 3215, \'number_of_registers_to_write\': 1, \'transmit_type\': \'on event\', \'transmit_period\': 1000}, {\'name\': \'Q_ref\', \'function_code\': \'write single register\', \'read_address\': 0, \'number_of_registers_to_read\': 1, \'write_address\': 3216, \'number_of_registers_to_write\': 1, \'transmit_type\': \'on event\', \'transmit_period\': 1000}, {\'name\': \'Clear_Faults\', \'function_code\': \'write single register\', \'read_address\': 0, \'number_of_registers_to_read\': 1, \'write_address\': 3214, \'number_of_registers_to_write\': 1, \'transmit_type\': \'on event\', \'transmit_period\': 1000}]"
                    server_ip_address = "192.168.32.230"
                    slave_id = "0"
                }
                [
                    position = 8896, 8688
                    size = 376, 488
                ]

                component "core/Voltage Measurement" Vdc_EPC {
                    frequency = "600"
                }
                [
                    position = 9640, 7808
                    rotation = left
                    scale = 1, -1
                    size = 64, 32
                ]

                component "core/Battery" Battery1 {
                    R_series = "0.010666666666666677"
                    capacity = "1875.0"
                    nominal_voltage = "800.0"
                    signal_access = "Inherit"
                }
                [
                    position = 9512, 7808
                    rotation = right
                    size = 64, 48
                ]

                component "core/SCADA Input" EPC_clear_flt {
                    def_value = "3"
                    execution_rate = "Ts"
                    max = "65535"
                    min = "0"
                    unit = ""
                }
                [
                    position = 8552, 8904
                ]

                component "core/SCADA Input" "SCADA Input1" {
                    execution_rate = "Ts"
                    unit = ""
                }
                [
                    position = 8552, 8472
                ]

                component "core/SCADA Input" "SCADA Input2" {
                    execution_rate = "Ts"
                    unit = ""
                }
                [
                    position = 8552, 8616
                ]

                component "core/SCADA Input" "SCADA Input3" {
                    execution_rate = "Ts"
                    unit = ""
                }
                [
                    position = 8552, 8760
                ]

                component "core/Three Phase Core Coupling" CC2 {
                }
                [
                    position = 8048, 7808
                    size = 12, 256
                ]

                component "core/Current Measurement" INV1_IC {
                    frequency = "100e3"
                }
                [
                    position = 8552, 7904
                    scale = -1, 1
                    size = 64, 32
                ]

                component "core/Current Measurement" INV1_IB {
                    frequency = "100e3"
                }
                [
                    position = 8552, 7808
                    scale = -1, 1
                    size = 64, 32
                ]

                component "core/Current Measurement" INV1_IA {
                    frequency = "300"
                }
                [
                    position = 8552, 7712
                    scale = -1, 1
                    size = 64, 32
                ]

                port A1 {
                    position = left:1
                    kind = pe
                    direction =  in
                }
                [
                    position = 7152, 7712
                ]

                port B1 {
                    position = left:2
                    kind = pe
                    direction =  in
                }
                [
                    position = 7152, 7808
                ]

                port C1 {
                    position = left:3
                    kind = pe
                    direction =  in
                }
                [
                    position = 7152, 7904
                ]

                tag Goto2 {
                    value = "mod_trig"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8672, 8320
                    hide_name = True
                    size = 60, 20
                ]

                tag From1 {
                    value = "mod_trig"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8888, 8368
                    hide_name = True
                    size = 60, 20
                ]

                tag Goto3 {
                    value = "zero"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 8600, 8368
                    hide_name = True
                    size = 60, 20
                ]

                junction Junction498 sp
                [
                    position = 8544, 8368
                ]

                junction Junction550 pe
                [
                    position = 9512, 7712
                ]

                junction Junction552 sp
                [
                    position = 8992, 8416
                ]

                junction Junction553 sp
                [
                    position = 8928, 8416
                ]

                junction Junction554 sp
                [
                    position = 8992, 8416
                ]

                junction Junction555 pe
                [
                    position = 9512, 7904
                ]

                comment Comment1 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:600; text-decoration: underline;">Calibration and Zero Reference</span></p></body></html> ENDCOMMENT 
                [
                    position = 7352, 7568
                ]

                comment Comment7 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">														<span style=" font-size:24pt;">Communication Layer	</span>			  		  		  		  		  		   </p></body></html> ENDCOMMENT 
                [
                    position = 7296, 8144
                ]

                comment Comment25 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">														<span style=" font-size:24pt;"> Power Layer	</span>			  		  		  		  		  			</p></body></html> ENDCOMMENT 
                [
                    position = 7312, 7472
                ]

                comment Comment26 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">On_Off</p></body></html> ENDCOMMENT 
                [
                    position = 8520, 8416
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Pref</p></body></html> ENDCOMMENT 
                [
                    position = 8528, 8568
                ]

                comment Comment3 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Qref</p></body></html> ENDCOMMENT 
                [
                    position = 8536, 8712
                ]

                comment Comment4 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Clear_Fauts</p></body></html> ENDCOMMENT 
                [
                    position = 8496, 8840
                ]

                connect C3.out 0_0A.in as Connection3052
                connect C5.out 0_0V.in as Connection3065
                connect TRM2.in EPC-CONNECT-GEN.out as Connection3227
                connect en_mod.out "Signal switch1.in2" as Connection3335
                connect "Square Wave Source1.out" "Signal switch1.in" as Connection3369
                [
                    breakpoints = 8536, 8304
                ]
                connect Cf.b Lg.B as Connection2248
                connect "INV1-DC Link.+DC" "INV1-DC Precharge.S2" as Connection2993
                connect INV1-MX1.c_out Lg.c as Connection3169
                connect INV1-MX1.b_out Lg.b as Connection3170
                connect INV1-MX1.a_out Lg.a as Connection3171
                connect I_ac.p_node "INV1-DC Link.DC+" as Connection2988
                connect Ibat.n_node "INV1-DC Precharge.S1" as Connection2994
                connect Lg.C Cf.c as Connection2247
                connect Lg.A Cf.a as Connection2249
                connect Goto2 "Signal switch1.out" as Connection3561
                connect Constant1.out Junction498 as Connection3594
                connect Junction498 "Signal switch1.in1" as Connection3595
                connect Goto3 Junction498 as Connection3596
                connect clientEPC_1.state client_state_EPC.in as Connection3611
                connect excp_code_EPC.in clientEPC_1.exc_code as Connection3612
                [
                    breakpoints = 8800, 8352; 8800, 8432
                ]
                connect MTR-INV1.A- Lc.A as Connection3886
                connect MTR-INV1.B- Lc.B as Connection3887
                connect MTR-INV1.C- Lc.C as Connection3888
                connect Battery1.p_node Junction550 as Connection3953
                connect Junction550 Ibat.p_node as Connection3954
                connect Vdc_EPC.p_node Junction550 as Connection3955
                connect "SCADA Input1.out" clientEPC_1.On_Off_write as Connection3960
                connect "SCADA Input2.out" clientEPC_1.P_ref_write as Connection3961
                connect "SCADA Input3.out" clientEPC_1.Q_ref_write as Connection3962
                connect EPC_clear_flt.out clientEPC_1.Clear_Faults_write as Connection3963
                connect clientEPC_1.Clear_Faults_event Junction552 as Connection3965
                [
                    breakpoints = 9056, 8416
                ]
                connect clientEPC_1.Q_ref_event Junction552 as Connection3967
                connect Junction553 clientEPC_1.On_Off_event as Connection3969
                [
                    breakpoints = 8864, 8416
                ]
                connect clientEPC_1.P_ref_event Junction553 as Connection3970
                connect Junction552 Junction554 as Connection3971
                connect Junction554 Junction553 as Connection3972
                connect From1 Junction554 as Connection3973
                connect INV1.pos_out I_ac.n_node as Connection4002
                connect INV1.neg_out "INV1-DC Link.DC-" as Connection4003
                connect Cf.C CC2.c_in as Connection4004
                connect CC2.c_out Lc.c as Connection4005
                connect Cf.B CC2.b_in as Connection4006
                connect CC2.b_out Lc.b as Connection4007
                connect Cf.A CC2.a_in as Connection4008
                connect CC2.a_out Lc.a as Connection4009
                connect Vdc_EPC.n_node Junction555 as Connection4011
                connect Junction555 Battery1.n_node as Connection4012
                [
                    breakpoints = 9512, 7904
                ]
                connect "INV1-DC Link.-DC" Junction555 as Connection4013
                connect A1 MTR-GRID.A+ as Connection4014
                connect MTR-GRID.B+ B1 as Connection4015
                connect C1 MTR-GRID.C+ as Connection4016
                connect MTR-INV1.A+ INV1_IA.n_node as Connection4017
                connect INV1_IA.p_node INV1.a_in as Connection4018
                connect MTR-INV1.B+ INV1_IB.n_node as Connection4019
                connect INV1_IB.p_node INV1.b_in as Connection4020
                connect MTR-INV1.C+ INV1_IC.n_node as Connection4021
                connect INV1_IC.p_node INV1.c_in as Connection4022
                connect MTR-GRID.A- INV1-MX1.a_in as Connection4023
                connect MTR-GRID.B- INV1-MX1.b_in as Connection4024
                connect MTR-GRID.C- INV1-MX1.c_in as Connection4025

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                    
                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()
                        
                    ENDCODE

                    CODE pre_compile
                        import math
                        # Generation of EPC Connect
                        EPC_CONNECT_GEN = 3
                        
                        # AC Stage LCL Filter
                        Li              = 85e-6
                        Ri              = 5e-3
                        Lg              = 51e-6
                        Rg              = 3e-3
                        Cf              = 650e-6
                        Rf              = 10e-3
                        
                        # DC Stage Inductors
                        Ldc1            = 100e-6
                        Rdc1            = 1e-3
                        
                        # DC Link
                        Cdc             = 1850e-6
                        Rdc             = 1e-3
                        
                        # DC Source Filter
                        Ldcs            = 25e-6
                        Cdcs            = 1850e-6
                        Rdcs            = 1e-3
                        
                        # Switch Snubbers
                        swRsn           = 15
                        swCsn           = 3.50e-6
                        
                        # Precharge
                        Rpc             = 60
                        
                        # Contactor Delays
                        mx1_tOn         = 30e-3
                        mx1_tOff        = 70e-3
                        
                        # Nominal Specs
                        epc_VLL = 480
                        epc_Sn = 500e3
                        epc_IL = epc_Sn/(np.sqrt(3)*epc_VLL)
                    ENDCODE
                }
            }
            [
                position = 7776, 8304
                size = 80, 112
            ]

            port A1 {
                position = -32.0, -32.0
                kind = pe
                direction =  in
            }
            [
                position = 7584, 8208
            ]

            port B1 {
                position = -32.0, 0.0
                kind = pe
                direction =  in
            }
            [
                position = 7584, 8304
            ]

            port C1 {
                position = -32.0, 32.0
                kind = pe
                direction =  in
            }
            [
                position = 7584, 8400
            ]

            port "Load point" {
                label = "t"
                position = -8.0, -44.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7680, 8056
            ]

            connect B1 EPC.B1 as Connection1
            connect A1 EPC.A1 as Connection2
            connect EPC.C1 C1 as Connection3
            [
                breakpoints = 7720, 8336; 7720, 8400
            ]

            T_Ts = "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]"
            T_mode = "Time"
            basefreq = "60"
            chargetrigger = "0.2"
            dischargetrigger = "0.6"
            dss_container_comp_identifier = "Storage"
            enable_monitoring = "True"
            execution_rate = "100e-6"
            global_basefreq = "True"
            inv_cf = "1.013e-3"
            inv_ki = "0.03"
            inv_kp = "0.0001"
            inv_l = "100e-6"
            inv_r = "1e-5"
            inv_rf = "100e-3"
            kv = "0.480"
            kwhrated = "1500"
            kwrated = "500"
            load_loadshape = "Choose"
            loadshape = "[0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 0.3, 0.5, 0.6, 0.7, 0.7, 0.8, 0.7, 0.7, 0.8, 0.8, 0.8, 1.0, 1.0, 1.0, 1.0, 0.9, 0.7, 0.5]"
            loadshape_from_file_column = "1"
            loadshape_from_file_header = "True"
            loadshape_from_file_path = ""
            loadshape_int = "1"
            loadshape_name = "Default"
            pct_charge = "100"
            pct_discharge = "100"
            pct_effcharge = "95"
            pct_effdischarge = "95"
            pct_idlingkw = "1"
            pct_reserve = "20"
            pct_stored = "100"
            pf = "1"
            vmaxpu = "1.1"
            vminpu = "0.9"

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Container component is converted to the selected component type in OpenDSS, but is unlinked from the library.<br><br>This allows the user to create any HIL model to represent real-time behavior and still be able to convert the model to OpenDSS.<br><br>Mask parameters and port creation will behave similarly to the original library component, and the created PE ports should not be removed, as they are required for the conversion.</p></body></html>"

                dss_container_comp_identifier {
                    label = "Do not delete this property"
                    widget = edit
                    type = string
                    default_value = "None"
                    nonvisible
                    no_evaluate
                }

                dispatch_p {
                    label = "Dispatch P"
                    widget = combo
                    combo_values = "Default", "Follow"
                    type = string
                    default_value = "Default"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                        
                        
                    ENDCODE
                }

                dispatch_q {
                    label = "Dispatch Q"
                    widget = combo
                    combo_values = "Unit PF", "Constant PF", "Constant kVAr"
                    type = string
                    default_value = "Unit PF"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                        
                        
                    ENDCODE
                }

                snap_status {
                    label = "Snap solve status"
                    widget = combo
                    combo_values = "Charging", "Discharging", "Idling"
                    type = string
                    default_value = "Charging"
                    no_evaluate
                }

                kv {
                    label = "Nominal voltage"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kV"
                    group = "Ratings:3"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Ratings:3"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_frequency_prop(mdl, container_handle)
                        
                        
                    ENDCODE
                }

                basefreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Hz"
                    group = "Ratings:3"
                    nonvisible
                }

                kwrated {
                    label = "Rated kW"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kW"
                    group = "Ratings:3"
                }

                kwhrated {
                    label = "Rated kWh"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kWh"
                    group = "Ratings:3"
                }

                chargetrigger {
                    label = "ChargeTrigger"
                    widget = edit
                    type = generic
                    default_value = "0"
                }

                dischargetrigger {
                    label = "DischargeTrigger"
                    widget = edit
                    type = generic
                    default_value = "0"
                }

                pct_charge {
                    label = "%Charge"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                }

                pct_discharge {
                    label = "%Discharge"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                }

                pct_effcharge {
                    label = "Charge efficiency"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    group = "Ratings:3"
                }

                pct_effdischarge {
                    label = "Discharge efficiency"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    group = "Ratings:3"
                }

                kvar {
                    label = "Reactive power"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kVAr"
                    group = "Ratings:3"
                    nonvisible
                }

                pf {
                    label = "Power factor"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Ratings:3"
                    nonvisible
                }

                pct_idlingkvar {
                    label = "%IdlingkVAr"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    group = "Ratings:3"
                    nonvisible
                }

                pct_idlingkw {
                    label = "Idling losses"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    group = "Ratings:3"
                }

                pct_reserve {
                    label = "Reserve mode SOC"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    group = "Ratings:3"
                }

                load_loadshape {
                    label = "LoadShape object"
                    widget = button
                    type = string
                    default_value = ""
                    group = "Time Series Settings:2"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_loadshape(mdl, container_handle)
                        
                        
                    ENDCODE
                }

                loadshape_name {
                    label = "LoadShape name"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                        
                        
                    ENDCODE
                }

                loadshape_from_file {
                    label = "From CSV file"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Time Series Settings"
                    disabled
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                        
                        
                    ENDCODE
                }

                useactual {
                    label = "Actual value"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Time Series Settings"
                    nonvisible
                    disabled
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                        
                        
                    ENDCODE
                }

                loadshape_from_file_path {
                    label = "LoadShape from file - path"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                loadshape_from_file_column {
                    label = "LoadShape from file - column"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                loadshape_from_file_header {
                    label = "LoadShape from file - header"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                loadshape {
                    label = "LoadShape points"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "pu"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                        
                        
                    ENDCODE
                }

                loadshape_int {
                    label = "LoadShape interval"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                        
                        
                    ENDCODE
                }

                timespan {
                    label = "Loadshape time span"
                    widget = combo
                    combo_values = "Daily", "Yearly"
                    type = string
                    default_value = "Daily"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                T_Ts {
                    label = "LoadShape time range"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "h"
                    group = "Time Series Settings"
                    no_evaluate
                }

                T_mode {
                    label = "LoadShape input mode"
                    widget = combo
                    combo_values = "Loadshape index", "Time"
                    type = string
                    default_value = "Loadshape index"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        if new_value == "Time":
                            mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "T_Ts"))
                        
                        
                    ENDCODE
                }

                pct_stored {
                    label = "Initial SOC"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                }

                execution_rate {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "0"
                }

                vmaxpu {
                    label = "vmaxpu"
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                vminpu {
                    label = "vminpu"
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                kva {
                    label = "kva"
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                inv_r {
                    label = "AC-side resistance"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Inverter:4"
                }

                inv_l {
                    label = "AC-side inductance"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "H"
                    group = "Inverter:4"
                }

                inv_rf {
                    label = "Filter resistance"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "Ω"
                    group = "Inverter:4"
                }

                inv_cf {
                    label = "Filter capacitance"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "F"
                    group = "Inverter:4"
                }

                inv_kp {
                    label = "Controller Kp"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Inverter:4"
                }

                inv_ki {
                    label = "Controller Ki"
                    widget = edit
                    type = generic
                    default_value = "0"
                    group = "Inverter:4"
                }

                loadshape_n_points {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring:5"
                    no_evaluate
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE

                CODE model_loaded
                    mdl.refresh_icon(mdl.get_parent(item_handle))
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import importlib
                
                    import dss_thcc_lib.component_scripts.comp_container as comp_container
                    importlib.reload(comp_container)
                
                    comp_container.define_icon(mdl, item_handle)
                
                    def return_comp_script(mdl, item_handle):
                        id_prop = mdl.prop(item_handle, "dss_container_comp_identifier")
                        id = mdl.get_property_value(id_prop)
                        comp_script = comp_container.pick_comp_script(mdl, item_handle, "init")
                        importlib.reload(comp_script)
                        return comp_script
                ENDCODE
            }
        }
        [
            position = 13648, 8272
            size = 80, 96
        ]

        component "core/Constant" Constant1 {
        }
        [
            position = 13560, 8160
            scale = 1, -1
        ]

        component "OpenDSS/Three-Phase Transformer" T1 {
            KVAs = "[500, 500]"
            KVs = "[12.66, 0.480]"
            XArray = "[2, 2]"
            percentNoloadloss = "1"
            percentRs = "[0.25, 0.25]"
        }
        [
            position = 13392, 8288
            size = 64, 124
        ]

        component "OpenDSS/Monitoring" Monitoring1 {
        }
        [
            position = 9584, 7656
            size = 64, 64
        ]

        component "OpenDSS/Bus" BusEPC {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 13512, 8272
            size = 16, 96
        ]

        component "OpenDSS/Coupling" CPL1 {
            itm_csnb_r = "100e5"
            itm_csnb_type = "R1"
            itm_vsnb_r = "1e-3"
            itm_vsnb_type = "R2"
        }
        [
            position = 9376, 8272
            size = 34, 97
        ]

        component "OpenDSS/Bus" Buscpl1 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 9296, 8272
            size = 16, 96
        ]

        component "OpenDSS/Coupling" CPL2 {
            itm_csnb_r = "100e5"
            itm_csnb_type = "R1"
            itm_vsnb_r = "1e-3"
            itm_vsnb_type = "R2"
        }
        [
            position = 10232, 8272
            size = 34, 97
        ]

        component "OpenDSS/Bus" Buscpl2 {
            phase_n = "False"
            type_prop = "ABC"
        }
        [
            position = 10304, 8272
            size = 16, 96
        ]

        junction Junction7 pe
        [
            position = 8496, 8240
        ]

        junction Junction8 pe
        [
            position = 8528, 8272
        ]

        junction Junction9 pe
        [
            position = 8560, 8304
        ]

        junction Junction10 pe
        [
            position = 8768, 8240
        ]

        junction Junction11 pe
        [
            position = 8800, 8272
        ]

        junction Junction12 pe
        [
            position = 8832, 8304
        ]

        junction Junction13 pe
        [
            position = 9008, 8240
        ]

        junction Junction14 pe
        [
            position = 9040, 8272
        ]

        junction Junction15 pe
        [
            position = 9072, 8304
        ]

        junction Junction22 pe
        [
            position = 10016, 8240
        ]

        junction Junction23 pe
        [
            position = 10048, 8272
        ]

        junction Junction24 pe
        [
            position = 10080, 8304
        ]

        junction Junction28 pe
        [
            position = 10776, 8240
        ]

        junction Junction29 pe
        [
            position = 10808, 8272
        ]

        junction Junction30 pe
        [
            position = 10840, 8304
        ]

        junction Junction31 pe
        [
            position = 11120, 8240
        ]

        junction Junction32 pe
        [
            position = 11152, 8272
        ]

        junction Junction33 pe
        [
            position = 11184, 8304
        ]

        junction Junction34 pe
        [
            position = 11384, 8240
        ]

        junction Junction35 pe
        [
            position = 11416, 8272
        ]

        junction Junction36 pe
        [
            position = 11448, 8304
        ]

        junction Junction37 pe
        [
            position = 11720, 8240
        ]

        junction Junction38 pe
        [
            position = 11752, 8272
        ]

        junction Junction39 pe
        [
            position = 11784, 8304
        ]

        junction Junction40 pe
        [
            position = 11992, 8240
        ]

        junction Junction41 pe
        [
            position = 12024, 8272
        ]

        junction Junction42 pe
        [
            position = 12056, 8304
        ]

        junction Junction46 pe
        [
            position = 12552, 8240
        ]

        junction Junction47 pe
        [
            position = 12584, 8272
        ]

        junction Junction48 pe
        [
            position = 12616, 8304
        ]

        junction Junction61 pe
        [
            position = 8344, 8240
        ]

        junction Junction62 pe
        [
            position = 8312, 8272
        ]

        junction Junction63 pe
        [
            position = 8280, 8304
        ]

        junction Junction71 pe
        [
            position = 10536, 8272
        ]

        junction Junction72 pe
        [
            position = 10568, 8304
        ]

        junction Junction79 pe
        [
            position = 8504, 8640
        ]

        junction Junction80 pe
        [
            position = 8536, 8672
        ]

        junction Junction81 pe
        [
            position = 8568, 8704
        ]

        junction Junction82 pe
        [
            position = 8784, 8640
        ]

        junction Junction83 pe
        [
            position = 8816, 8672
        ]

        junction Junction84 pe
        [
            position = 8848, 8704
        ]

        junction Junction85 pe
        [
            position = 9064, 8640
        ]

        junction Junction86 pe
        [
            position = 9096, 8672
        ]

        junction Junction87 pe
        [
            position = 9128, 8704
        ]

        junction Junction88 pe
        [
            position = 9336, 8640
        ]

        junction Junction89 pe
        [
            position = 9368, 8672
        ]

        junction Junction90 pe
        [
            position = 9400, 8704
        ]

        junction Junction100 pe
        [
            position = 8608, 7856
        ]

        junction Junction101 pe
        [
            position = 8640, 7888
        ]

        junction Junction102 pe
        [
            position = 8672, 7920
        ]

        junction Junction103 pe
        [
            position = 8880, 7856
        ]

        junction Junction104 pe
        [
            position = 8912, 7888
        ]

        junction Junction105 pe
        [
            position = 8944, 7920
        ]

        junction Junction106 pe
        [
            position = 9160, 7856
        ]

        junction Junction107 pe
        [
            position = 9192, 7888
        ]

        junction Junction108 pe
        [
            position = 9224, 7920
        ]

        junction Junction112 pe
        [
            position = 9600, 7856
        ]

        junction Junction113 pe
        [
            position = 9632, 7888
        ]

        junction Junction114 pe
        [
            position = 9664, 7920
        ]

        junction Junction115 pe
        [
            position = 9872, 7856
        ]

        junction Junction116 pe
        [
            position = 9904, 7888
        ]

        junction Junction117 pe
        [
            position = 9936, 7920
        ]

        junction Junction118 pe
        [
            position = 10144, 7856
        ]

        junction Junction119 pe
        [
            position = 10176, 7888
        ]

        junction Junction120 pe
        [
            position = 10208, 7920
        ]

        junction Junction121 pe
        [
            position = 10400, 7856
        ]

        junction Junction122 pe
        [
            position = 10432, 7888
        ]

        junction Junction123 pe
        [
            position = 10464, 7920
        ]

        junction Junction127 pe
        [
            position = 10688, 7856
        ]

        junction Junction128 pe
        [
            position = 10720, 7888
        ]

        junction Junction129 pe
        [
            position = 10752, 7920
        ]

        junction Junction130 pe
        [
            position = 10968, 7856
        ]

        junction Junction131 pe
        [
            position = 11000, 7888
        ]

        junction Junction132 pe
        [
            position = 11032, 7920
        ]

        junction Junction133 pe
        [
            position = 11232, 7856
        ]

        junction Junction134 pe
        [
            position = 11264, 7888
        ]

        junction Junction135 pe
        [
            position = 11296, 7920
        ]

        junction Junction136 pe
        [
            position = 11504, 7856
        ]

        junction Junction137 pe
        [
            position = 11536, 7888
        ]

        junction Junction138 pe
        [
            position = 11568, 7920
        ]

        junction Junction142 pe
        [
            position = 8496, 8240
        ]

        junction Junction143 pe
        [
            position = 8528, 8272
        ]

        junction Junction144 pe
        [
            position = 8560, 8304
        ]

        junction Junction151 pe
        [
            position = 12880, 8240
        ]

        junction Junction152 pe
        [
            position = 12912, 8272
        ]

        junction Junction153 pe
        [
            position = 12944, 8304
        ]

        junction Junction160 pe
        [
            position = 10504, 8240
        ]

        junction Junction163 pe
        [
            position = 9744, 8240
        ]

        junction Junction164 pe
        [
            position = 9776, 8272
        ]

        junction Junction165 pe
        [
            position = 9808, 8304
        ]

        junction Junction175 pe
        [
            position = 13176, 8240
        ]

        junction Junction176 pe
        [
            position = 13208, 8272
        ]

        junction Junction177 pe
        [
            position = 13240, 8304
        ]

        junction Junction178 pe
        [
            position = 12280, 8240
        ]

        junction Junction179 pe
        [
            position = 12312, 8272
        ]

        junction Junction180 pe
        [
            position = 12344, 8304
        ]

        junction Junction184 pe
        [
            position = 8144, 8240
        ]

        junction Junction185 pe
        [
            position = 8176, 8272
        ]

        junction Junction186 pe
        [
            position = 8208, 8304
        ]

        junction Junction187 pe
        [
            position = 9464, 8240
        ]

        junction Junction188 pe
        [
            position = 9496, 8272
        ]

        junction Junction189 pe
        [
            position = 9528, 8304
        ]

        junction Junction190 pe
        [
            position = 9464, 8240
        ]

        junction Junction191 pe
        [
            position = 9496, 8272
        ]

        junction Junction192 pe
        [
            position = 9528, 8304
        ]

        connect Bus3.A2 Line3_4.A1 as Connection19
        connect Bus3.B2 Line3_4.B1 as Connection20
        connect Bus3.C2 Line3_4.C1 as Connection21
        connect Bus16.A2 Line16_17.A1 as Connection22
        connect Bus16.B2 Line16_17.B1 as Connection23
        connect Bus16.C2 Line16_17.C1 as Connection24
        connect Bus17.A2 Line17_18.A1 as Connection28
        connect Bus17.B2 Line17_18.B1 as Connection29
        connect Bus17.C2 Line17_18.C1 as Connection30
        connect Bus13.A2 Line13_14.A1 as Connection34
        connect Bus13.B2 Line13_14.B1 as Connection35
        connect Bus13.C2 Line13_14.C1 as Connection36
        connect Bus14.A2 Line14_15.A1 as Connection40
        connect Bus14.B2 Line14_15.B1 as Connection41
        connect Bus14.C2 Line14_15.C1 as Connection42
        connect Bus15.A2 Line15_16.A1 as Connection46
        connect Bus15.B2 Line15_16.B1 as Connection47
        connect Bus15.C2 Line15_16.C1 as Connection48
        connect Bus11.A2 Line11_12.A1 as Connection55
        connect Bus11.B2 Line11_12.B1 as Connection56
        connect Bus11.C2 Line11_12.C1 as Connection57
        connect Bus9.A2 Line9_10.A1 as Connection70
        connect Bus9.B2 Line9_10.B1 as Connection71
        connect Bus9.C2 Line9_10.C1 as Connection72
        connect Bus6.A2 Line6_7.A1 as Connection79
        connect Bus6.B2 Line6_7.B1 as Connection80
        connect Bus6.C2 Line6_7.C1 as Connection81
        connect Bus7.A2 Line7_8.A1 as Connection85
        connect Bus7.B2 Line7_8.B1 as Connection86
        connect Bus7.C2 Line7_8.C1 as Connection87
        connect Bus4.A2 Line4_5.A1 as Connection97
        connect Bus4.B2 Line4_5.B1 as Connection98
        connect Bus4.C2 Line4_5.C1 as Connection99
        connect Bus5.A2 Line5_6.A1 as Connection103
        connect Bus5.B2 Line5_6.B1 as Connection104
        connect Bus5.C2 Line5_6.C1 as Connection105
        connect Junction7 Load3.A1 as Connection154
        connect Junction8 Bus3.B1 as Connection159
        connect Junction9 Bus3.C1 as Connection162
        connect Junction10 Load4.A1 as Connection163
        connect Junction10 Line3_4.A2 as Connection164
        connect Junction10 Bus4.A1 as Connection165
        connect Junction11 Load4.B1 as Connection166
        connect Junction11 Line3_4.B2 as Connection167
        connect Junction11 Bus4.B1 as Connection168
        connect Junction12 Load4.C1 as Connection169
        connect Junction12 Line3_4.C2 as Connection170
        connect Junction12 Bus4.C1 as Connection171
        connect Junction13 Load5.A1 as Connection172
        connect Junction13 Line4_5.A2 as Connection173
        connect Junction13 Bus5.A1 as Connection174
        connect Junction14 Load5.B1 as Connection175
        connect Junction14 Line4_5.B2 as Connection176
        connect Junction14 Bus5.B1 as Connection177
        connect Junction15 Load5.C1 as Connection178
        connect Junction15 Line4_5.C2 as Connection179
        connect Junction15 Bus5.C1 as Connection180
        connect Junction22 Load8.A1 as Connection199
        connect Junction22 Line7_8.A2 as Connection200
        connect Junction22 Bus8.A1 as Connection201
        connect Junction23 Load8.B1 as Connection202
        connect Junction23 Line7_8.B2 as Connection203
        connect Junction23 Bus8.B1 as Connection204
        connect Junction24 Load8.C1 as Connection205
        connect Junction24 Line7_8.C2 as Connection206
        connect Junction24 Bus8.C1 as Connection207
        connect Junction28 Load10.A1 as Connection217
        connect Junction28 Line9_10.A2 as Connection218
        connect Junction28 Bus10.A1 as Connection219
        connect Junction29 Load10.B1 as Connection220
        connect Junction29 Line9_10.B2 as Connection221
        connect Junction29 Bus10.B1 as Connection222
        connect Junction30 Load10.C1 as Connection223
        connect Junction30 Line9_10.C2 as Connection224
        connect Junction30 Bus10.C1 as Connection225
        connect Junction31 Load11.A1 as Connection226
        connect Junction31 Line10_11.A2 as Connection227
        connect Junction31 Bus11.A1 as Connection228
        connect Junction32 Load11.B1 as Connection229
        connect Junction32 Line10_11.B2 as Connection230
        connect Junction32 Bus11.B1 as Connection231
        connect Junction33 Load11.C1 as Connection232
        connect Junction33 Line10_11.C2 as Connection233
        connect Junction33 Bus11.C1 as Connection234
        connect Junction34 Load12.A1 as Connection235
        connect Junction34 Line11_12.A2 as Connection236
        connect Junction34 Bus12.A1 as Connection237
        connect Junction35 Load12.B1 as Connection238
        connect Junction35 Line11_12.B2 as Connection239
        connect Junction35 Bus12.B1 as Connection240
        connect Junction36 Load12.C1 as Connection241
        connect Junction36 Line11_12.C2 as Connection242
        connect Junction36 Bus12.C1 as Connection243
        connect Junction37 Load13.A1 as Connection244
        connect Junction37 Line12_13.A2 as Connection245
        connect Junction37 Bus13.A1 as Connection246
        connect Junction38 Load13.B1 as Connection247
        connect Junction38 Line12_13.B2 as Connection248
        connect Junction38 Bus13.B1 as Connection249
        connect Junction39 Load13.C1 as Connection250
        connect Junction39 Line12_13.C2 as Connection251
        connect Junction39 Bus13.C1 as Connection252
        connect Junction40 Load14.A1 as Connection253
        connect Junction40 Line13_14.A2 as Connection254
        connect Junction40 Bus14.A1 as Connection255
        connect Junction41 Load14.B1 as Connection256
        connect Junction41 Line13_14.B2 as Connection257
        connect Junction41 Bus14.B1 as Connection258
        connect Junction42 Load14.C1 as Connection259
        connect Junction42 Line13_14.C2 as Connection260
        connect Junction42 Bus14.C1 as Connection261
        connect Junction46 Load16.A1 as Connection271
        connect Junction46 Line15_16.A2 as Connection272
        connect Junction46 Bus16.A1 as Connection273
        connect Junction47 Load16.B1 as Connection274
        connect Junction47 Line15_16.B2 as Connection275
        connect Junction47 Bus16.B1 as Connection276
        connect Junction48 Load16.C1 as Connection277
        connect Junction48 Line15_16.C2 as Connection278
        connect Junction48 Bus16.C1 as Connection279
        connect Line24_25.A1 Bus24.A2 as Connection310
        connect Line24_25.B1 Bus24.B2 as Connection311
        connect Line24_25.C1 Bus24.C2 as Connection312
        connect Bus23.A2 Line23_24.A1 as Connection313
        connect Bus23.B2 Line23_24.B1 as Connection314
        connect Bus23.C2 Line23_24.C1 as Connection315
        connect Bus28.A2 Line28_29.A1 as Connection334
        connect Bus28.B2 Line28_29.B1 as Connection335
        connect Bus28.C2 Line28_29.C1 as Connection336
        connect Bus29.A2 Line29_30.A1 as Connection340
        connect Bus29.B2 Line29_30.B1 as Connection341
        connect Bus29.C2 Line29_30.C1 as Connection342
        connect Bus30.A2 Line30_31.A1 as Connection346
        connect Bus30.B2 Line30_31.B1 as Connection347
        connect Bus30.C2 Line30_31.C1 as Connection348
        connect Bus31.A2 Line31_32.A1 as Connection352
        connect Bus31.B2 Line31_32.B1 as Connection353
        connect Bus31.C2 Line31_32.C1 as Connection354
        connect Bus32.A2 Line32_33.A1 as Connection358
        connect Bus32.B2 Line32_33.B1 as Connection359
        connect Bus32.C2 Line32_33.C1 as Connection360
        connect Bus27.A2 Line27_28.A1 as Connection367
        connect Bus27.B2 Line27_28.B1 as Connection368
        connect Bus27.C2 Line27_28.C1 as Connection369
        connect Bus26.A2 Line26_27.A1 as Connection373
        connect Bus26.B2 Line26_27.B1 as Connection374
        connect Bus26.C2 Line26_27.C1 as Connection375
        connect Line2_3.A1 Junction61 as Connection415
        connect Junction61 Bus2.A2 as Connection416
        [
            breakpoints = 8288, 8240
        ]
        connect Line2_19.A1 Junction61 as Connection417
        connect Bus2.B2 Junction62 as Connection418
        connect Junction62 Line2_3.B1 as Connection419
        [
            breakpoints = 8312, 8272
        ]
        connect Line2_19.B1 Junction62 as Connection420
        connect Bus2.C2 Junction63 as Connection421
        connect Junction63 Line2_3.C1 as Connection422
        [
            breakpoints = 8336, 8304
        ]
        connect Line2_19.C1 Junction63 as Connection423
        connect Bus19.A2 Line19_20.A1 as Connection424
        connect Bus19.B2 Line19_20.B1 as Connection425
        connect Bus19.C2 Line19_20.C1 as Connection426
        connect Line20_21.A1 Bus20.A2 as Connection427
        connect Line20_21.B1 Bus20.B2 as Connection428
        connect Line20_21.C1 Bus20.C2 as Connection429
        connect Bus21.A2 Line21_22.A1 as Connection430
        connect Bus21.B2 Line21_22.B1 as Connection431
        connect Bus21.C2 Line21_22.C1 as Connection432
        connect Junction71 Bus9.B1 as Connection482
        connect Junction72 Bus9.C1 as Connection485
        connect Junction79 Load19.A1 as Connection505
        connect Junction79 Bus19.A1 as Connection506
        connect Junction79 Line2_19.A2 as Connection507
        connect Junction80 Load19.B1 as Connection508
        connect Junction80 Bus19.B1 as Connection509
        connect Junction80 Line2_19.B2 as Connection510
        connect Junction81 Load19.C1 as Connection511
        connect Junction81 Bus19.C1 as Connection512
        connect Junction81 Line2_19.C2 as Connection513
        connect Junction82 Load20.A1 as Connection514
        connect Junction82 Line19_20.A2 as Connection515
        connect Junction82 Bus20.A1 as Connection516
        connect Junction83 Load20.B1 as Connection517
        connect Junction83 Line19_20.B2 as Connection518
        connect Junction83 Bus20.B1 as Connection519
        connect Junction84 Load20.C1 as Connection520
        connect Junction84 Line19_20.C2 as Connection521
        connect Junction84 Bus20.C1 as Connection522
        connect Junction85 Load21.A1 as Connection523
        connect Junction85 Line20_21.A2 as Connection524
        connect Junction86 Load21.B1 as Connection526
        connect Junction86 Line20_21.B2 as Connection527
        connect Junction87 Load21.C1 as Connection529
        connect Junction87 Line20_21.C2 as Connection530
        connect Junction88 Load22.A1 as Connection532
        connect Junction88 Line21_22.A2 as Connection533
        connect Junction88 Bus22.A1 as Connection534
        connect Junction89 Load22.B1 as Connection535
        connect Junction89 Line21_22.B2 as Connection536
        connect Junction89 Bus22.B1 as Connection537
        connect Junction90 Load22.C1 as Connection538
        connect Junction90 Line21_22.C2 as Connection539
        connect Junction90 Bus22.C1 as Connection540
        connect Bus1.A2 Line1_2.A1 as Connection562
        connect Bus1.B2 Line1_2.B1 as Connection563
        connect Bus1.C2 Line1_2.C1 as Connection564
        connect Junction100 Load23.A1 as Connection577
        connect Junction100 Bus23.A1 as Connection578
        connect Junction100 Line3_23.A2 as Connection579
        connect Junction101 Load23.B1 as Connection580
        connect Junction101 Line3_23.B2 as Connection581
        connect Junction101 Bus23.B1 as Connection582
        connect Junction102 Load23.C1 as Connection583
        connect Junction102 Line3_23.C2 as Connection584
        connect Junction102 Bus23.C1 as Connection585
        connect Junction103 Load24.A1 as Connection586
        connect Junction103 Line23_24.A2 as Connection587
        connect Junction103 Bus24.A1 as Connection588
        connect Junction104 Load24.B1 as Connection589
        connect Junction104 Line23_24.B2 as Connection590
        connect Junction104 Bus24.B1 as Connection591
        connect Junction105 Load24.C1 as Connection592
        connect Junction105 Line23_24.C2 as Connection593
        connect Junction105 Bus24.C1 as Connection594
        connect Junction106 Load25.A1 as Connection597
        connect Junction106 Line24_25.A2 as Connection598
        connect Junction107 Load25.B1 as Connection600
        connect Junction107 Bus25.B1 as Connection601
        connect Junction108 Load25.C1 as Connection603
        connect Junction108 Line24_25.C2 as Connection604
        connect Junction112 Load26.A1 as Connection615
        connect Junction112 Line6_26.A2 as Connection616
        connect Junction112 Bus26.A1 as Connection617
        connect Junction113 Load26.B1 as Connection618
        connect Junction113 Bus26.B1 as Connection619
        connect Junction113 Line6_26.B2 as Connection620
        connect Junction114 Load26.C1 as Connection621
        connect Junction114 Line6_26.C2 as Connection622
        connect Junction114 Bus26.C1 as Connection623
        connect Junction115 Load27.A1 as Connection624
        connect Junction115 Line26_27.A2 as Connection625
        connect Junction115 Bus27.A1 as Connection626
        connect Junction116 Load27.B1 as Connection627
        connect Junction116 Line26_27.B2 as Connection628
        connect Junction116 Bus27.B1 as Connection629
        connect Junction117 Load27.C1 as Connection630
        connect Junction117 Line26_27.C2 as Connection631
        connect Junction117 Bus27.C1 as Connection632
        connect Junction118 Load28.A1 as Connection633
        connect Junction118 Line27_28.A2 as Connection634
        connect Junction118 Bus28.A1 as Connection635
        connect Junction119 Load28.B1 as Connection636
        connect Junction119 Line27_28.B2 as Connection637
        connect Junction119 Bus28.B1 as Connection638
        connect Junction120 Load28.C1 as Connection639
        connect Junction120 Line27_28.C2 as Connection640
        connect Junction120 Bus28.C1 as Connection641
        connect Junction121 Load29.A1 as Connection645
        connect Junction121 Line28_29.A2 as Connection646
        connect Junction122 Load29.B1 as Connection648
        connect Junction122 Bus29.B1 as Connection649
        connect Junction123 Load29.C1 as Connection651
        connect Junction123 Line28_29.C2 as Connection652
        connect Junction127 Load30.A1 as Connection663
        connect Junction127 Line29_30.A2 as Connection664
        connect Junction127 Bus30.A1 as Connection665
        connect Junction128 Load30.B1 as Connection666
        connect Junction128 Line29_30.B2 as Connection667
        connect Junction128 Bus30.B1 as Connection668
        connect Junction129 Load30.C1 as Connection669
        connect Junction129 Line29_30.C2 as Connection670
        connect Junction129 Bus30.C1 as Connection671
        connect Junction130 Load31.A1 as Connection672
        connect Junction130 Line30_31.A2 as Connection673
        connect Junction130 Bus31.A1 as Connection674
        connect Junction131 Load31.B1 as Connection675
        connect Junction131 Line30_31.B2 as Connection676
        connect Junction131 Bus31.B1 as Connection677
        connect Junction132 Load31.C1 as Connection678
        connect Junction132 Line30_31.C2 as Connection679
        connect Junction132 Bus31.C1 as Connection680
        connect Junction133 Load32.A1 as Connection681
        connect Junction133 Line31_32.A2 as Connection682
        connect Junction133 Bus32.A1 as Connection683
        connect Junction134 Load32.B1 as Connection684
        connect Junction134 Line31_32.B2 as Connection685
        connect Junction134 Bus32.B1 as Connection686
        connect Junction135 Load32.C1 as Connection687
        connect Junction135 Line31_32.C2 as Connection688
        connect Junction135 Bus32.C1 as Connection689
        connect Junction136 Load33.A1 as Connection690
        connect Junction136 Line32_33.A2 as Connection691
        connect Junction136 Bus33.A1 as Connection692
        connect Junction137 Load33.B1 as Connection693
        connect Junction137 Line32_33.B2 as Connection694
        connect Junction137 Bus33.B1 as Connection695
        connect Junction138 Load33.C1 as Connection696
        connect Junction138 Line32_33.C2 as Connection697
        connect Junction138 Bus33.C1 as Connection698
        connect Junction72 Load9.C1 as Connection726
        [
            breakpoints = 10568, 8304; 10568, 8304
        ]
        connect Load9.B1 Junction71 as Connection727
        [
            breakpoints = 10536, 8272
        ]
        connect Junction8 Load3.B1 as Connection781
        [
            breakpoints = 8528, 8272; 8528, 8272
        ]
        connect Bus3.A1 Junction7 as Connection782
        [
            breakpoints = 8496, 8240
        ]
        connect Load3.C1 Junction9 as Connection783
        [
            breakpoints = 8560, 8304
        ]
        connect Junction142 Line3_23.A1 as Connection784
        connect Junction142 Junction7 as Connection785
        connect Junction142 Line2_3.A2 as Connection786
        connect Junction143 Line3_23.B1 as Connection787
        connect Junction143 Junction8 as Connection788
        connect Junction143 Line2_3.B2 as Connection789
        connect Junction144 Line3_23.C1 as Connection790
        connect Junction144 Junction9 as Connection791
        connect Junction144 Line2_3.C2 as Connection792
        connect Junction151 Line16_17.A2 as Connection900
        connect Junction151 Load17.A1 as Connection901
        connect Junction151 Bus17.A1 as Connection902
        connect Junction152 Line16_17.B2 as Connection903
        connect Junction152 Load17.B1 as Connection904
        connect Junction152 Bus17.B1 as Connection905
        connect Junction153 Line16_17.C2 as Connection906
        connect Junction153 Load17.C1 as Connection907
        connect Junction153 Bus17.C1 as Connection908
        connect Junction160 Load9.A1 as Connection967
        [
            breakpoints = 10504, 8240; 10504, 8240; 10504, 8240; 10504, 8240; 10504, 8240; 10504, 8240; 10504, 8240; 10504, 8240
        ]
        connect Line8_9.A2 Junction160 as Connection968
        connect Junction163 Line6_7.A2 as Connection978
        connect Junction163 Load7.A1 as Connection979
        connect Junction163 Bus7.A1 as Connection980
        connect Junction164 Line6_7.B2 as Connection981
        connect Junction164 Load7.B1 as Connection982
        connect Junction164 Bus7.B1 as Connection983
        connect Junction165 Line6_7.C2 as Connection984
        connect Junction165 Bus7.C1 as Connection985
        connect Junction165 Load7.C1 as Connection986
        connect Junction175 Line17_18.A2 as Connection1044
        connect Junction175 Load18.A1 as Connection1046
        connect Junction176 Line17_18.B2 as Connection1047
        connect Junction176 Load18.B1 as Connection1049
        connect Junction177 Line17_18.C2 as Connection1050
        connect Junction177 Bus18.C1 as Connection1051
        connect Junction178 Line14_15.A2 as Connection1068
        connect Junction178 Bus15.A1 as Connection1069
        connect Junction178 Load15.A1 as Connection1070
        connect Junction179 Line14_15.B2 as Connection1071
        connect Junction179 Load15.B1 as Connection1072
        connect Junction179 Bus15.B1 as Connection1073
        connect Junction180 Line14_15.C2 as Connection1074
        connect Junction180 Load15.C1 as Connection1075
        connect Junction180 Bus15.C1 as Connection1076
        connect Bus12.A2 Line12_13.A1 as Connection1077
        connect Bus12.B2 Line12_13.B1 as Connection1078
        connect Bus12.C2 Line12_13.C1 as Connection1079
        connect Bus10.A2 Line10_11.A1 as Connection1080
        connect Bus10.B2 Line10_11.B1 as Connection1081
        connect Bus10.C2 Line10_11.C1 as Connection1082
        connect Junction71 Line8_9.B2 as Connection1091
        [
            breakpoints = 10536, 8272; 10536, 8272
        ]
        connect Junction72 Line8_9.C2 as Connection1092
        [
            breakpoints = 10568, 8304; 10568, 8304; 10568, 8304; 10568, 8304; 10568, 8304; 10568, 8304
        ]
        connect Bus9.A1 Junction160 as Connection1090
        [
            breakpoints = 10504, 8240
        ]
        connect Constant1.out "Storage.Load point" as Connection1122
        connect Bus25.C1 Junction108 as Connection1124
        [
            breakpoints = 9224, 7920
        ]
        connect Bus29.A1 Junction121 as Connection1126
        [
            breakpoints = 10400, 7856
        ]
        connect Junction122 Line28_29.B2 as Connection1123
        [
            breakpoints = 10432, 7888; 10432, 7888
        ]
        connect Line24_25.B2 Junction107 as Connection1127
        [
            breakpoints = 9192, 7888
        ]
        connect Bus25.A1 Junction106 as Connection1128
        [
            breakpoints = 9160, 7856
        ]
        connect Bus29.C1 Junction123 as Connection1125
        [
            breakpoints = 10464, 7920
        ]
        connect Bus21.A1 Junction85 as Connection1130
        [
            breakpoints = 9064, 8640
        ]
        connect Junction87 Bus21.C1 as Connection1129
        [
            breakpoints = 9128, 8704; 9128, 8704
        ]
        connect Junction86 Bus21.B1 as Connection1131
        [
            breakpoints = 9096, 8672; 9096, 8672
        ]
        connect V1.A1 Bus1.A1 as Connection1135
        connect V1.B1 Bus1.B1 as Connection1136
        connect V1.C1 Bus1.C1 as Connection1137
        connect Junction184 Line1_2.A2 as Connection1138
        connect Junction184 Bus2.A1 as Connection1139
        connect Junction184 Load2.A1 as Connection1140
        connect Junction185 Line1_2.B2 as Connection1141
        connect Junction185 Load2.B1 as Connection1142
        connect Junction185 Bus2.B1 as Connection1143
        connect Junction186 Line1_2.C2 as Connection1144
        connect Junction186 Load2.C1 as Connection1145
        connect Junction186 Bus2.C1 as Connection1146
        connect Junction187 Load6.A1 as Connection1150
        connect Junction188 Load6.B1 as Connection1153
        connect Junction189 Load6.C1 as Connection1156
        connect T1.C2 BusEPC.C1 as Connection1168
        connect T1.B2 BusEPC.B1 as Connection1170
        connect T1.A2 BusEPC.A1 as Connection1172
        connect Junction188 Line6_26.B1 as Connection1176
        [
            breakpoints = 9496, 8272; 9496, 8272
        ]
        connect Line6_26.A1 Junction187 as Connection1174
        [
            breakpoints = 9464, 8240
        ]
        connect Junction189 Line6_26.C1 as Connection1175
        [
            breakpoints = 9528, 8304; 9528, 8304
        ]
        connect Line5_6.A2 Buscpl1.A1 as Connection1198
        connect Line5_6.B2 Buscpl1.B1 as Connection1199
        connect Line5_6.C2 Buscpl1.C1 as Connection1200
        connect Bus8.A2 CPL2.A1 as Connection1213
        connect Bus8.B2 CPL2.B1 as Connection1214
        connect Bus8.C2 CPL2.C1 as Connection1215
        connect CPL2.A2 Buscpl2.A1 as Connection1216
        connect CPL2.B2 Buscpl2.B1 as Connection1217
        connect CPL2.C2 Buscpl2.C1 as Connection1218
        connect Buscpl2.A2 Line8_9.A1 as Connection1219
        connect Buscpl2.B2 Line8_9.B1 as Connection1220
        connect Buscpl2.C2 Line8_9.C1 as Connection1221
        connect BusEPC.A2 Storage.A1 as Connection1222
        connect BusEPC.B2 Storage.B1 as Connection1223
        connect BusEPC.C2 Storage.C1 as Connection1224
        connect Buscpl1.A2 CPL1.A1 as Connection1228
        connect Buscpl1.B2 CPL1.B1 as Connection1229
        connect Buscpl1.C2 CPL1.C1 as Connection1230
        connect Junction190 CPL1.A2 as Connection1231
        connect Junction190 Junction187 as Connection1232
        connect Junction190 Bus6.A1 as Connection1233
        connect Junction191 CPL1.B2 as Connection1234
        connect Junction191 Bus6.B1 as Connection1235
        connect Junction191 Junction188 as Connection1236
        connect Junction192 CPL1.C2 as Connection1237
        connect Junction192 Bus6.C1 as Connection1238
        connect Junction192 Junction189 as Connection1239
        connect Junction176 Bus18.B1 as Connection1251
        [
            breakpoints = 13208, 8272; 13264, 8272
        ]
        connect Bus18.A1 Junction175 as Connection1250
        [
            breakpoints = 13264, 8240
        ]
        connect Junction177 Load18.C1 as Connection1249
        [
            breakpoints = 13240, 8304; 13240, 8304
        ]
        connect Bus18.A2 T1.A1 as Connection1252
        connect Bus18.B2 T1.B1 as Connection1253
        connect Bus18.C2 T1.C1 as Connection1254
    }

    default {
        "core/Bus Join" {
            inputs = "2"
            execution_rate = "inherit"
        }

        "core/Capacitor" {
            capacitance = "1e-6"
            initial_voltage = "0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Constant" {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Digital Probe" {
            signal_access = "inherit"
            override_signal_name = "False"
            signal_name = ""
            streaming_en = "False"
            addr = "0"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Discrete Transfer Function" {
            domain = "Z-domain"
            method = "Zero-order hold"
            b_coeff = "[1,1]"
            a_coeff = "[1,1]"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        "core/Gain" {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        "core/Inductor" {
            inductance = "1e-3"
            initial_current = "0.0"
            pole_shift_ignore = "False"
            visible = "True"
        }

        "core/Power Meter" {
            filter_order = "first order"
            filter_cutoff_Hz = "30"
            initial_filter_input = "0"
            initial_filter_output = "0"
            enable_inst_ports = "True"
            enable_zero_ports = "False"
            execution_rate = "inherit"
        }

        "core/Probe" {
            signal_access = "inherit"
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        "core/Resistor" {
            resistance = "1"
            param_set = ""
        }

        "core/SCADA Input" {
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        "core/Signal switch" {
            criterion = "ctrl > threshold"
            threshold = "0.5"
            execution_rate = "inherit"
        }

        "core/Square Wave Source" {
            hs_output = "1"
            ls_output = "0"
            frequency = "50"
            duty_cycle = "0.5"
            phase = "0"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        "core/Sum" {
            signs = "2"
            execution_rate = "inherit"
        }

        "core/Termination" {
            execution_rate = "inherit"
        }

        "core/Battery" {
            signal_access = "inherit"
            sig_output = "False"
            lut = "False"
            battery_type = "Lead-Acid"
            nominal_voltage = "12.0"
            capacity = "1.2"
            initial_soc = "100.0"
            execution_rate = "100e-6"
            Ke_full = "108.0"
            Kdisc_I = "5.0"
            R_series = "0.25"
            Kq_nom = "50.0"
            Kq_exp = "0.9"
            Ke_exp = "102.5"
            preview = "Preview SOC Curve"
        }

        "OpenDSS/Bus" {
            type_prop = "ABCN"
            phase_a = "True"
            phase_b = "True"
            phase_c = "True"
            phase_n = "True"
            conf = "on both sides"
            i_rms_meas = "False"
            i_inst_meas = "False"
            v_line_rms_meas = "False"
            v_line_inst_meas = "False"
            v_phase_rms_meas = "False"
            v_phase_inst_meas = "False"
            freq_meas = "False"
            power_meas = "False"
            execution_rate = "100e-6"
            enable_output = "False"
        }

        "OpenDSS/Coupling" {
            coupling_type = "Core"
            n_phases = "3"
            grounding = "True"
            auto_mode = "Manual"
            itm_csnb_type = "none"
            itm_csnb_r = "100e3"
            itm_csnb_c = "1e-06"
            itm_csnb_r_auto = "100e3"
            itm_csnb_c_auto = "1e-06"
            itm_csnb_fixed = "True"
            itm_vsnb_type = "none"
            itm_vsnb_r = "0.1"
            itm_vsnb_l = "0.1"
            itm_vsnb_r_auto = "0.1"
            itm_vsnb_l_auto = "0.1"
            itm_vsnb_fixed = "True"
            switch_status = "True"
            flip_status = "False"
        }

        "core/Current Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "OpenDSS/Line" {
            input_type = "Symmetrical"
            Load = "Choose"
            selected_object = ""
            Length = "100"
            global_basefreq = "True"
            baseFreq = "60"
            phases = "3"
            R1 = "0.1903"
            R0 = "0.5853"
            X1 = "0.3957"
            X0 = "1.3278"
            dC1 = "11.155"
            dC0 = "5.2493"
            rmatrix = "[[0.0981, 0.0401, 0.0401], [0.0401, 0.0981, 0.0401], [0.0401, 0.0401, 0.0981]]"
            xmatrix = "[[0.2153, 0.0947, 0.0947], [0.0947, 0.2153, 0.0947], [0.0947, 0.0947, 0.2153]]"
            cmatrix = "[[2.8, -0.6, -0.6], [-0.6, 2.8, -0.6], [-0.6, -0.6, 2.8]]"
            obj_mode = ""
            Len = "0"
            Fr = "0"
            d_R = "0"
            d_L = "0"
            d_C = "0"
            d_X = "0"
            C1 = "12.74e-9"
            C0 = "7.751e-9"
            L1 = "99999"
            L0 = "99999"
            R1_one = "0.01"
            L1_one = "0.01e-3"
            C1_one = "0.1e-6"
            coupling = "None"
            enable_monitoring = "False"
        }

        "OpenDSS/Load" {
            tp_connection = "Y - Grounded"
            phases = "3"
            Rneut = "0.0"
            Xneut = "0.0"
            global_basefreq = "True"
            fn = "60"
            Vn_3ph = "4.16"
            Sn_3ph = "3500"
            pf_mode_3ph = "Lag"
            pf_3ph = "0.9"
            pf_3ph_set = "0"
            load_model = "Constant Impedance"
            zip_vector = "[0,0,1]"
            zip_vector_Q = "[0,0,1]"
            zip_internal = "[0,0,1]"
            zip_internal_Q = "[0,0,1]"
            zip_internal_n = "[0,0,1]"
            zip_internal_n_Q = "[0,0,1]"
            ZIPV = "[0,0,1,0,0,1,0]"
            Vmaxpu = "1.05"
            Vminpu = "0.95"
            model = "2"
            Pow_ref_s = "Fixed"
            execution_rate = "300e-6"
            Tfast = "100e-6"
            CPL_LMT = "2"
            v_min_max = "[0.95,1.05]"
            rate_lmt = "1"
            zero_seq_remove = "False"
            q_gain_k = "0.5"
            r_gain_k = "20"
            Vn_3ph_CPL = "0"
            P_CPL = "0"
            Q_CPL = "0"
            kV = "0"
            pf = "0"
            conn = "0"
            kVA = "0"
            baseFreq = "0"
            gen_ts_en = "True"
            load_loadshape = "Choose"
            loadshape_name = "Default"
            loadshape_from_file = "False"
            useactual = "False"
            loadshape_from_file_path = ""
            loadshape_from_file_column = "1"
            loadshape_from_file_header = "True"
            loadshape = "[0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 0.3, 0.5, 0.6, 0.7, 0.7, 0.8, 0.7, 0.7, 0.8, 0.8, 0.8, 1.0, 1.0, 1.0, 1.0, 0.9, 0.7, 0.5]"
            loadshape_int = "1"
            S_Ts = "[0.2,0.28,0.5,0.32,0.2]"
            Q_Ts = "0"
            T_Ts = "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]"
            T_mode = "Time"
            S_Ts_mode = "Manual input"
            timespan = "Daily"
            T_Ts_internal = "0"
            dssT = "1"
            dssnpts = "5"
            T_Ts_max = "10"
            del_Ts = "20"
            Slen = "0"
            T_lim_low = "0"
            T_lim_high = "0"
            Ts_switch = "0"
            enable_monitoring = "False"
            tp_connection_combo_values = ""
        }

        "core/Meter_SM_and_dFract" {
            dc_freq = "1"
            n_cycles = "1"
            Ts = "100e-6"
        }

        "core/Modbus Client" {
            hil_id = "0"
            client_ip_address = "192.168.0.200"
            client_netmask = "255.255.255.0"
            client_gateway = "192.168.0.1"
            client_gateway_enable = "False"
            server_ip_address = "192.168.0.100"
            server_port = "502"
            slave_id = "255"
            request_timeout = "1000"
            requests = "[]"
            request_names_dict = "{}"
            execution_rate = "100e-6"
            _supported_platforms = "[\'hil\']"
        }

        "OpenDSS/Monitoring" {
            not_used = "0"
            run = "Run"
        }

        "OpenDSS/SimDSS" {
            sim_mode = "Snap"
            baseFreq = "60"
            voltagebases = "[0.480, 12.47]"
            tsstp = "1"
            tspoints = "24"
            append = "Open"
            export_to_dss = "Run"
            sim_status = "None"
            sim_counter = "0"
            voltages = "LN Nodes"
            show_v = "Show voltages"
            currents = "Seq"
            show_c = "Show currents"
            powers = "kVA"
            show_p = "Show powers"
            misc = "Buses"
            show_misc = "Show misc"
            report_snap = "Generate"
            report_fault = "Generate"
            algorithm = "Normal"
            loadmodel = "Power flow"
            miniterations = "2"
            maxiter = "15"
            command = "show voltages LN"
            run = "Run"
            stability_analysis = "Run"
        }

        "core/Single Pole Single Throw Contactor AI Controlled" {
            signal_access = "inherit"
            ctrl_ai_pin_addr = "1"
            on_delay = "0"
            off_delay = "0"
            initial_state = "off"
            switching = "any current"
            rel_operator = ">"
            threshold_value = "1"
        }

        "core/Three Phase Core Coupling" {
            snb_type_i = "none"
            R1 = "100e3"
            C1 = "1e-06"
            C2 = "1e-06"
            fixed_snb_i = "false"
            snb_type_u = "none"
            R2 = "0.1"
            L1 = "0.1"
            L2 = "0.1"
            fixed_snb_u = "false"
            cpl_connection = "star"
        }

        "core/Three Phase Inverter" {
            signal_access = "inherit"
            ctrl_src = "Digital input per switch"
            op_mode = "Fixed carrier frequency"
            carrier_freq = "10000.0"
            carr_ph_offset = "0.0"
            d_time = "5e-6"
            ref_sig_min_max = "[-1.0, 1.0]"
            load_mode = "on min"
            execution_rate = "inherit"
            Sa_top = "1"
            Sa_top_logic = "active high"
            Sa_bot = "2"
            Sa_bot_logic = "active high"
            Sb_top = "3"
            Sb_top_logic = "active high"
            Sb_bot = "4"
            Sb_bot_logic = "active high"
            Sc_top = "5"
            Sc_top_logic = "active high"
            Sc_bot = "6"
            Sc_bot_logic = "active high"
            delay_enabled = "False"
            fixed_delay = "1e-6"
            var_delay_lut = "[-10.0, 1e-6, 10.0, 1e-6]"
            preview_var_delay = "Preview"
            Sa_top_I = "False"
            Sa_bot_I = "False"
            Sb_top_I = "False"
            Sb_bot_I = "False"
            Sc_top_I = "False"
            Sc_bot_I = "False"
            fvd = "False"
            losses_estimation = "False"
            fvd_def_method = "Voltage and Resistance"
            Import_igbt_xml = "not selected"
            Import_diode_xml = "not selected"
            Switch_type = "IGBT"
            Vce = "1.3"
            Rce = "0"
            Vd = "1.2"
            Rd = "0"
            i_sw = "[0.0, 6.0, 12.0, 18.0, 24.0]"
            v_sw = "[0.0, 600.0]"
            temp_sw = "[25.0, 50.0, 75.0, 100.0, 125.0]"
            vce_table_out = "[1.3, 1.3, 1.3, 1.3, 1.3]"
            vd_table_out = "[1.2, 1.2, 1.2, 1.2, 1.2]"
            et_on_table_out = "[[0.0, 0.0275e-3, 0.15e-3, 0.275e-3, 0.3e-3], [0.35*3.8e-3, 0.4*3.8e-3, 0.8*3.8e-3, 0.68*3.8e-3, 0.9*3.8e-3], [0.65*3.8e-3, 0.9*3.8e-3, 1.2*3.8e-3, 1.5*3.8e-3, 1.7*3.8e-3], [0.9*3.8e-3, 1.3*3.8e-3, 1.7*3.8e-3, 1.9*3.8e-3, 2.25*3.8e-3], [1.1*3.8e-3, 1.7*3.8e-3, 2.1*3.8e-3, 2.3*3.8e-3, 2.5*3.8e-3]]"
            et_off_table_out = "[[0.0, 0.0275e-3, 0.15e-3, 0.275e-3, 0.3e-3], [0.35*2.1e-3, 0.4*2.1e-3, 0.8*2.1e-3, 0.68*2.1e-3, 0.9*2.1e-3], [0.65*2.1e-3, 0.9*2.1e-3, 1.2*2.1e-3, 1.5*2.1e-3, 1.7*2.1e-3], [0.9*2.1e-3, 1.3*2.1e-3, 1.7*2.1e-3, 1.9*2.1e-3, 2.25*2.1e-3], [1.1*2.1e-3, 1.7*2.1e-3, 2.1*2.1e-3, 2.3*2.1e-3, 2.5*2.1e-3]]"
            ed_off_table_out = "[[0.0, 0.0275e-3, 0.15e-3, 0.275e-3, 0.3e-3], [0.35*2.2e-3, 0.4*2.2e-3, 0.8*2.2e-3, 0.68*2.2e-3, 0.9*2.2e-3], [0.65*2.2e-3, 0.9*2.2e-3, 1.2*2.2e-3, 1.5*2.2e-3, 1.7*2.2e-3], [0.9*2.2e-3, 1.3*2.2e-3, 1.7*2.2e-3, 1.9*2.2e-3, 2.25*2.2e-3], [1.1*2.2e-3, 1.7*2.2e-3, 2.1*2.2e-3, 2.3*2.2e-3, 2.5*2.2e-3]]"
            temp_estimation = "False"
            thermal_networks_type = "Foster"
            switch_Rth = "[0.159, 0.133, 0.120, 0.038]"
            switch_Tth = "[1.1e-1, 1.56e-2, 1.35e-3, 1.51e-4]"
            switch_Cth = "[0.0029, 0.0097, 0.1068, 0.8500]"
            diode_Rth = "[0.159, 0.133, 0.120, 0.038]"
            diode_Tth = "[1.1e-1, 1.56e-2, 1.35e-3, 1.51e-4]"
            diode_Cth = "[0.0029, 0.0097, 0.1068, 0.8500]"
            loss_exec_rate = "100e-6"
            visualize_luts = "Visualize Lookup Tables"
            vout_cmp_pullup_mode = "False"
            vout_cmp_timeout = "5e-6"
            show_cnt_out = "False"
            show_monitoring = "False"
            _control_property = "all high"
            pwm_enabling = "False"
            pwm_enable_di = "13"
            pwm_enable_inv = "active high"
            dtv_flag_en = "True"
        }

        "core/Three phase PLL" {
            initial_filter_output = "60"
            wn = "157.0796"
            zeta = "0.707"
            rate_high = "12"
            rate_low = "-12"
            freq_unit = "Hz"
            kp = "100"
            ki = "3200"
            kd = "1"
            N = "714.2857"
            initial_pid_output = "376.99111843"
            up_lim = "1e4"
            low_lim = "-1e4"
            kb = "1"
            power_form = "variant - Clarke\'s original"
            alignment = "-pi/2"
            disable_filter = "False"
            wn_LPFdq = "62.83185307"
            execution_rate = "inherit"
            enable_pk = "False"
            enable_zero = "True"
            enable_sin = "True"
        }

        "OpenDSS/Three-Phase Transformer" {
            num_windings = "2"
            embedded_cpl = "None"
            embedded_cpl_12 = "None"
            embedded_cpl_13 = "None"
            embedded_cpl_14 = "None"
            KVs = "[12.47, 12.47]"
            KVAs = "[1000, 1000]"
            percentRs = "[2, 2]"
            XArray = "[1, 1]"
            XscArray = "[2.0, 2.0]"
            global_basefreq = "True"
            baseFreq = "60"
            percentNoloadloss = "2"
            percentimag = "0"
            prim_conn = "Y"
            Rneut_prim = "0.0"
            Xneut_prim = "0.0"
            sec1_conn = "Y"
            Rneut_sec1 = "0.0"
            Xneut_sec1 = "0.0"
            sec2_conn = "Y"
            Rneut_sec2 = "0.0"
            Xneut_sec2 = "0.0"
            sec3_conn = "Y"
            Rneut_sec3 = "0.0"
            Xneut_sec3 = "0.0"
            regcontrol_on = "False"
            maxtap = "1.1"
            mintap = "0.9"
            numtaps = "32"
            ctrl_winding = "Winding 1"
            vreg = "120"
            ptratio = "60"
            winding_voltage = "7200.0"
            band = "3"
            delay = "15"
            execution_rate = "100e-6"
            enable_monitoring = "False"
        }

        "core/Three-phase Meter" {
            R = "1e5"
            n_cycles = "1"
            Ts = "100e-6"
            enable_probes = "True"
            enable_out = "True"
            remove_snubber = "False"
            enable_bandwidth = "False"
            bandwidth = "10e3"
            VAn = "True"
            VBn = "True"
            VCn = "True"
            VAB = "False"
            VBC = "False"
            VCA = "False"
            VN = "False"
            IA = "True"
            IB = "True"
            IC = "True"
            IN = "False"
            freq = "False"
            VLn_rms = "False"
            VLL_rms = "False"
            VLn_avg_rms = "False"
            VLL_avg_rms = "False"
            VN_rms = "False"
            I_rms = "False"
            I_avg_rms = "False"
            IN_rms = "False"
            P_method = "alpha-beta"
            enable_extra_out = "False"
            P_meas = "False"
        }

        "core/Three-phase RMS variable frequency" {
            internal_sm = "True"
            n_cycles = "1"
            Ts = "100e-6"
        }

        "core/Triple Pole Single Throw Contactor AI Controlled" {
            signal_access = "inherit"
            ctrl_ai_pin_addr = "1"
            on_delay = "0"
            off_delay = "0"
            initial_state = "off"
            rel_operator = ">"
            threshold_value = "1"
        }

        "core/Voltage Controlled Voltage Source" {
            signal_access = "inherit"
            choose_signal = "False"
            control_label = ".control_component_name"
            control_label_signal_chooser = ""
            control_gain = "1.0"
            measurement_enable = "True"
        }

        "core/Voltage Measurement" {
            signal_access = "inherit"
            bw_limit = "False"
            frequency = "10e3"
            comparator_enable = "False"
            operator = "greater"
            threshold = "0"
            cmp_abs_value = "False"
            feed_forward = "false"
            sig_output = "False"
            sig_output_filt_and_full_bw = "False"
            execution_rate = "100e-6"
            addr = "0"
            nd_msr_estimation = "false"
            dev_cpl_msr = "false"
            host_device = "0"
            output_to_device = "0"
            dev_cpl_index = "0"
            dev_cpl_var_nb = "0"
            visible = "True"
            override_signal_name = "False"
            signal_name = ""
        }

        "OpenDSS/Vsource" {
            basekv = "115.0"
            baseMVA = "100.0"
            global_basefreq = "False"
            baseFreq = "60"
            tp_connection = "Y - Grounded"
            pu = "1.0"
            Angle = "0"
            Frequency = "60"
            input_method = "Z"
            r1 = "1.65"
            x1 = "6.6"
            r0 = "1.9"
            x0 = "5.7"
            r1_pu = "0.0121"
            x1_pu = "0.0485"
            r0_pu = "0.0136"
            x0_pu = "0.0407"
            mva_sc3 = "2000"
            mva_sc1 = "2100"
            i_sc3 = "10000"
            i_sc1 = "10500"
            x1r1 = "4.0"
            x0r0 = "3.0"
            enable_monitoring = "False"
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        # The Schematic API is imported as 'mdl'
        # To get the model file path, use 'mdl.get_model_file_path()'
        # To print information to the console, use info()
        
        Ts = 300e-6  #[s]
        
        branch_data ={"Line1_2": {"R": 0.0922, "X": 0.0470, "C": 1e-3, "length": 1},
                      "Line2_3": {"R": 0.4930, "X": 0.2511, "C": 1e-3, "length": 1},
                      "Line3_4": {"R": 0.3660, "X": 0.1864, "C": 1e-3, "length": 1},
                      "Line4_5": {"R": 0.3811, "X": 0.1941, "C": 1e-3, "length": 1},
                      "Line5_6": {"R": 0.8190, "X": 0.7070, "C": 1e-3, "length": 1},
                      "Line6_7": {"R": 0.1872, "X": 0.6188, "C": 1e-3, "length": 1},
                      "Line7_8": {"R": 0.7114, "X": 0.2351, "C": 1e-3, "length": 1},
                      "Line8_9": {"R": 1.0300, "X": 0.7400, "C": 1e-3, "length": 1},
                      "Line9_10": {"R": 1.0440, "X": 0.7400, "C": 1e-3, "length": 1},
                      "Line10_11": {"R": 0.1966, "X": 0.0650, "C": 1e-3, "length": 1},
                      "Line11_12": {"R": 0.3744, "X": 0.1238, "C": 1e-3, "length": 1},
                      "Line12_13": {"R": 1.4680, "X": 1.1550, "C": 1e-3, "length": 1},
                      "Line13_14": {"R": 0.5416, "X": 0.7129, "C": 1e-3, "length": 1},
                      "Line14_15": {"R": 0.5910, "X": 0.5260, "C": 1e-3, "length": 1},
                      "Line15_16": {"R": 0.7463, "X": 0.5450, "C": 1e-3, "length": 1},
                      "Line16_17": {"R": 1.2890, "X": 1.7210, "C": 1e-3, "length": 1},
                      "Line17_18": {"R": 0.7320, "X": 0.5740, "C": 1e-3, "length": 1},
                      "Line2_19": {"R": 0.1640, "X": 0.1565, "C": 1e-3, "length": 1},
                      "Line19_20": {"R": 1.5042, "X": 1.3554, "C": 1e-3, "length": 1},
                      "Line20_21": {"R": 0.4095, "X": 0.4784, "C": 1e-3, "length": 1},
                      "Line21_22": {"R": 0.7089, "X": 0.9373, "C": 1e-3, "length": 1},
                      "Line3_23": {"R": 0.4512, "X": 0.3083, "C": 1e-3, "length": 1},
                      "Line23_24": {"R": 0.8980, "X": 0.7091, "C": 1e-3, "length": 1},
                      "Line24_25": {"R": 0.8960, "X": 0.7011, "C": 1e-3, "length": 1},
                      "Line6_26": {"R": 0.2030, "X": 0.1034, "C": 1e-3, "length": 1},
                      "Line26_27": {"R": 0.2842, "X": 0.1447, "C": 1e-3, "length": 1},
                      "Line27_28": {"R": 1.0590, "X": 0.9337, "C": 1e-3, "length": 1},
                      "Line28_29": {"R": 0.8042, "X": 0.7006, "C": 1e-3, "length": 1},
                      "Line29_30": {"R": 0.5075, "X": 0.2585, "C": 1e-3, "length": 1},
                      "Line30_31": {"R": 0.9744, "X": 0.9630, "C": 1e-3, "length": 1},
                      "Line31_32": {"R": 0.3105, "X": 0.3619, "C": 1e-3, "length": 1},
                      "Line32_33": {"R": 0.3410, "X": 0.5302, "C": 1e-3, "length": 1}}
                      
        load_data = {"Load1": {"P": 1,   "Q": 1, "V": 12.66e3},
                     "Load2": {"P": 100e3, "Q": 60e3, "V": 12.66e3},
                     "Load3": {"P": 90e3,  "Q": 40e3, "V": 12.66e3},
                     "Load4": {"P": 120e3, "Q": 80e3, "V": 12.66e3},
                     "Load5": {"P": 60e3,  "Q": 30e3, "V": 12.66e3},
                     "Load6": {"P": 60e3,  "Q": 20e3, "V": 12.66e3},
                     "Load7": {"P": 200e3, "Q": 100e3, "V": 12.66e3},
                     "Load8": {"P": 200e3, "Q": 100e3, "V": 12.66e3},
                     "Load9": {"P": 60e3,  "Q": 20e3, "V": 12.66e3},
                     "Load10": {"P": 60e3,  "Q": 20e3, "V": 12.66e3},
                     "Load11": {"P": 45e3,  "Q": 30e3, "V": 12.66e3},
                     "Load12": {"P": 60e3,  "Q": 35e3, "V": 12.66e3},
                     "Load13": {"P": 60e3,  "Q": 35e3, "V": 12.66e3},
                     "Load14": {"P": 120e3, "Q": 80e3, "V": 12.66e3},
                     "Load15": {"P": 60e3,  "Q": 10e3, "V": 12.66e3},
                     "Load16": {"P": 60e3,  "Q": 20e3, "V": 12.66e3},
                     "Load17": {"P": 60e3,  "Q": 20e3, "V": 12.66e3},
                     "Load18": {"P": 90e3,  "Q": 40e3, "V": 12.66e3},
                     "Load19": {"P": 90e3,  "Q": 40e3, "V": 12.66e3},
                     "Load20": {"P": 90e3,  "Q": 40e3, "V": 12.66e3},
                     "Load21": {"P": 90e3,  "Q": 40e3, "V": 12.66e3},
                     "Load22": {"P": 90e3,  "Q": 40e3, "V": 12.66e3},
                     "Load23": {"P": 90e3,  "Q": 50e3, "V": 12.66e3},
                     "Load24": {"P": 420e3, "Q": 200e3, "V": 12.66e3},
                     "Load25": {"P": 420e3, "Q": 200e3, "V": 12.66e3},
                     "Load26": {"P": 60e3,  "Q": 25e3, "V": 12.66e3},
                     "Load27": {"P": 60e3,  "Q": 25e3, "V": 12.66e3},
                     "Load28": {"P": 60e3,  "Q": 20e3, "V": 12.66e3},
                     "Load29": {"P": 120e3, "Q": 70e3, "V": 12.66e3},
                     "Load30": {"P": 200e3, "Q": 600e3, "V": 12.66e3},
                     "Load31": {"P": 150e3, "Q": 70e3, "V": 12.66e3},
                     "Load32": {"P": 210e3, "Q": 100e3, "V": 12.66e3},
                     "Load33": {"P": 60e3,  "Q": 40e3, "V": 12.66e3}}
        
        for load, params in load_data.copy().items():
            p = params.get("P")
            q = params.get("Q")
            s = np.sqrt(p*p + q*q)
            pf = p/s
            
            load_data[load].update({"S": s})
            load_data[load].update({"PF": pf})
    ENDCODE
}
